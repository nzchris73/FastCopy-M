; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

	TITLE	c:\users\chris\documents\github\zlib\contrib\vstudio\vc17\x86\zlibdllrelease\tmp\adler32.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_adler32_combine@12
PUBLIC	_adler32@12
PUBLIC	_adler32_z@12
EXTRN	__chkstk:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\adler32.c
;	COMDAT _adler32_z@12
_TEXT	SEGMENT
_adler$ = 8						; size = 4
tv3141 = 12						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32_z@12 PROC					; COMDAT

; 61   : uLong ZEXPORT adler32_z(uLong adler, const Bytef *buf, z_size_t len) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   :     unsigned long sum2;
; 63   :     unsigned n;
; 64   : 
; 65   :     /* split Adler-32 into component sums */
; 66   :     sum2 = (adler >> 16) & 0xffff;

  00003	8b 45 08	 mov	 eax, DWORD PTR _adler$[ebp]
  00006	53		 push	 ebx

; 67   :     adler &= 0xffff;
; 68   : 
; 69   :     /* in case user likes doing a byte at a time, keep it fast */
; 70   :     if (len == 1) {

  00007	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0000a	57		 push	 edi
  0000b	8b f8		 mov	 edi, eax
  0000d	0f b7 c8	 movzx	 ecx, ax
  00010	c1 ef 10	 shr	 edi, 16			; 00000010H
  00013	83 fb 01	 cmp	 ebx, 1
  00016	75 34		 jne	 SHORT $LN13@adler32_z

; 71   :         adler += buf[0];

  00018	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0001b	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0001e	03 c1		 add	 eax, ecx

; 72   :         if (adler >= BASE)
; 73   :             adler -= BASE;
; 74   :         sum2 += adler;

  00020	3d f1 ff 00 00	 cmp	 eax, 65521		; 0000fff1H
  00025	8d 90 0f 00 ff
	ff		 lea	 edx, DWORD PTR [eax-65521]
  0002b	0f 42 d0	 cmovb	 edx, eax
  0002e	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]

; 75   :         if (sum2 >= BASE)
; 76   :             sum2 -= BASE;
; 77   :         return adler | (sum2 << 16);

  00031	3d f1 ff 00 00	 cmp	 eax, 65521		; 0000fff1H
  00036	8d 88 0f 00 ff
	ff		 lea	 ecx, DWORD PTR [eax-65521]
  0003c	5f		 pop	 edi
  0003d	0f 42 c8	 cmovb	 ecx, eax
  00040	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00043	0b ca		 or	 ecx, edx
  00045	8b c1		 mov	 eax, ecx

; 125  : }

  00047	5b		 pop	 ebx
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
$LN13@adler32_z:
  0004c	56		 push	 esi

; 78   :     }
; 79   : 
; 80   :     /* initial Adler-32 value (deferred check for len == 1 speed) */
; 81   :     if (buf == Z_NULL)

  0004d	8b 75 0c	 mov	 esi, DWORD PTR _buf$[ebp]
  00050	85 f6		 test	 esi, esi
  00052	75 0a		 jne	 SHORT $LN16@adler32_z

; 82   :         return 1L;

  00054	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00057	5e		 pop	 esi
  00058	5f		 pop	 edi

; 125  : }

  00059	5b		 pop	 ebx
  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN16@adler32_z:

; 83   : 
; 84   :     /* in case short lengths are provided, keep it somewhat fast */
; 85   :     if (len < 16) {

  0005e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00061	73 41		 jae	 SHORT $LN22@adler32_z

; 86   :         while (len--) {

  00063	85 db		 test	 ebx, ebx
  00065	74 0f		 je	 SHORT $LN26@adler32_z
$LL2@adler32_z:

; 87   :             adler += *buf++;

  00067	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0006a	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0006d	03 c8		 add	 ecx, eax

; 88   :             sum2 += adler;

  0006f	03 f9		 add	 edi, ecx
  00071	83 eb 01	 sub	 ebx, 1
  00074	75 f1		 jne	 SHORT $LL2@adler32_z
$LN26@adler32_z:

; 89   :         }
; 90   :         if (adler >= BASE)
; 91   :             adler -= BASE;
; 92   :         MOD28(sum2);            /* only added so many BASE's */

  00076	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  0007c	8d b1 0f 00 ff
	ff		 lea	 esi, DWORD PTR [ecx-65521]
  00082	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00087	0f 42 f1	 cmovb	 esi, ecx
  0008a	f7 e7		 mul	 edi
  0008c	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0008f	8b c2		 mov	 eax, edx
  00091	c1 e0 04	 shl	 eax, 4
  00094	2b c2		 sub	 eax, edx

; 93   :         return adler | (sum2 << 16);

  00096	03 c7		 add	 eax, edi
  00098	c1 e0 10	 shl	 eax, 16			; 00000010H
  0009b	0b c6		 or	 eax, esi
  0009d	5e		 pop	 esi
  0009e	5f		 pop	 edi

; 125  : }

  0009f	5b		 pop	 ebx
  000a0	5d		 pop	 ebp
  000a1	c2 0c 00	 ret	 12			; 0000000cH
$LN22@adler32_z:

; 94   :     }
; 95   : 
; 96   :     /* do length NMAX blocks -- requires just one modulo operation */
; 97   :     while (len >= NMAX) {

  000a4	81 fb b0 15 00
	00		 cmp	 ebx, 5552		; 000015b0H
  000aa	0f 82 ea 00 00
	00		 jb	 $LN45@adler32_z
  000b0	b8 af a9 6e 5e	 mov	 eax, 1584310703		; 5e6ea9afH
  000b5	f7 e3		 mul	 ebx
  000b7	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  000ba	89 55 0c	 mov	 DWORD PTR tv3141[ebp], edx
  000bd	0f 1f 00	 npad	 3
$LL4@adler32_z:

; 98   :         len -= NMAX;

  000c0	81 eb b0 15 00
	00		 sub	 ebx, 5552		; 000015b0H

; 99   :         n = NMAX / 16;          /* NMAX is divisible by 16 */

  000c6	ba 5b 01 00 00	 mov	 edx, 347		; 0000015bH
  000cb	0f 1f 44 00 00	 npad	 5
$LL8@adler32_z:

; 100  :         do {
; 101  :             DO16(buf);          /* 16 sums unrolled */

  000d0	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  000d3	03 c8		 add	 ecx, eax
  000d5	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  000d9	03 f9		 add	 edi, ecx
  000db	03 c8		 add	 ecx, eax
  000dd	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  000e1	03 f9		 add	 edi, ecx
  000e3	03 c8		 add	 ecx, eax
  000e5	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  000e9	03 f9		 add	 edi, ecx
  000eb	03 c8		 add	 ecx, eax
  000ed	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  000f1	03 f9		 add	 edi, ecx
  000f3	03 c8		 add	 ecx, eax
  000f5	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  000f9	03 f9		 add	 edi, ecx
  000fb	03 c8		 add	 ecx, eax
  000fd	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  00101	03 f9		 add	 edi, ecx
  00103	03 c8		 add	 ecx, eax
  00105	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  00109	03 f9		 add	 edi, ecx
  0010b	03 c8		 add	 ecx, eax
  0010d	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  00111	03 f9		 add	 edi, ecx
  00113	03 c8		 add	 ecx, eax
  00115	0f b6 46 09	 movzx	 eax, BYTE PTR [esi+9]
  00119	03 f9		 add	 edi, ecx
  0011b	03 c8		 add	 ecx, eax
  0011d	0f b6 46 0a	 movzx	 eax, BYTE PTR [esi+10]
  00121	03 f9		 add	 edi, ecx
  00123	03 c8		 add	 ecx, eax
  00125	0f b6 46 0b	 movzx	 eax, BYTE PTR [esi+11]
  00129	03 f9		 add	 edi, ecx
  0012b	03 c8		 add	 ecx, eax
  0012d	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]
  00131	03 f9		 add	 edi, ecx
  00133	03 c8		 add	 ecx, eax
  00135	0f b6 46 0d	 movzx	 eax, BYTE PTR [esi+13]
  00139	03 f9		 add	 edi, ecx
  0013b	03 c8		 add	 ecx, eax
  0013d	0f b6 46 0e	 movzx	 eax, BYTE PTR [esi+14]
  00141	03 f9		 add	 edi, ecx
  00143	03 c8		 add	 ecx, eax
  00145	0f b6 46 0f	 movzx	 eax, BYTE PTR [esi+15]
  00149	03 f9		 add	 edi, ecx

; 102  :             buf += 16;

  0014b	83 c6 10	 add	 esi, 16			; 00000010H
  0014e	03 c8		 add	 ecx, eax
  00150	03 f9		 add	 edi, ecx

; 103  :         } while (--n);

  00152	83 ea 01	 sub	 edx, 1
  00155	0f 85 75 ff ff
	ff		 jne	 $LL8@adler32_z

; 104  :         MOD(adler);

  0015b	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00160	f7 e1		 mul	 ecx
  00162	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00165	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  0016b	03 c8		 add	 ecx, eax

; 105  :         MOD(sum2);

  0016d	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00172	f7 e7		 mul	 edi
  00174	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00177	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  0017d	03 f8		 add	 edi, eax
  0017f	83 6d 0c 01	 sub	 DWORD PTR tv3141[ebp], 1
  00183	0f 85 37 ff ff
	ff		 jne	 $LL4@adler32_z

; 106  :     }
; 107  : 
; 108  :     /* do remaining bytes (less than NMAX, still just one modulo) */
; 109  :     if (len) {                  /* avoid modulos if none remaining */

  00189	85 db		 test	 ebx, ebx
  0018b	0f 84 d4 00 00
	00		 je	 $LN19@adler32_z

; 110  :         while (len >= 16) {

  00191	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00194	0f 82 98 00 00
	00		 jb	 $LL11@adler32_z
$LN45@adler32_z:
  0019a	8b d3		 mov	 edx, ebx
  0019c	c1 ea 04	 shr	 edx, 4
  0019f	90		 npad	 1
$LL9@adler32_z:

; 111  :             len -= 16;
; 112  :             DO16(buf);

  001a0	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  001a3	83 eb 10	 sub	 ebx, 16			; 00000010H
  001a6	03 c8		 add	 ecx, eax
  001a8	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  001ac	03 f9		 add	 edi, ecx
  001ae	03 c8		 add	 ecx, eax
  001b0	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  001b4	03 f9		 add	 edi, ecx
  001b6	03 c8		 add	 ecx, eax
  001b8	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  001bc	03 f9		 add	 edi, ecx
  001be	03 c8		 add	 ecx, eax
  001c0	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  001c4	03 f9		 add	 edi, ecx
  001c6	03 c8		 add	 ecx, eax
  001c8	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  001cc	03 f9		 add	 edi, ecx
  001ce	03 c8		 add	 ecx, eax
  001d0	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  001d4	03 f9		 add	 edi, ecx
  001d6	03 c8		 add	 ecx, eax
  001d8	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  001dc	03 f9		 add	 edi, ecx
  001de	03 c8		 add	 ecx, eax
  001e0	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  001e4	03 f9		 add	 edi, ecx
  001e6	03 c8		 add	 ecx, eax
  001e8	0f b6 46 09	 movzx	 eax, BYTE PTR [esi+9]
  001ec	03 f9		 add	 edi, ecx
  001ee	03 c8		 add	 ecx, eax
  001f0	0f b6 46 0a	 movzx	 eax, BYTE PTR [esi+10]
  001f4	03 f9		 add	 edi, ecx
  001f6	03 c8		 add	 ecx, eax
  001f8	0f b6 46 0b	 movzx	 eax, BYTE PTR [esi+11]
  001fc	03 f9		 add	 edi, ecx
  001fe	03 c8		 add	 ecx, eax
  00200	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]
  00204	03 f9		 add	 edi, ecx
  00206	03 c8		 add	 ecx, eax
  00208	0f b6 46 0d	 movzx	 eax, BYTE PTR [esi+13]
  0020c	03 f9		 add	 edi, ecx
  0020e	03 c8		 add	 ecx, eax
  00210	0f b6 46 0e	 movzx	 eax, BYTE PTR [esi+14]
  00214	03 f9		 add	 edi, ecx
  00216	03 c8		 add	 ecx, eax
  00218	0f b6 46 0f	 movzx	 eax, BYTE PTR [esi+15]
  0021c	03 f9		 add	 edi, ecx

; 113  :             buf += 16;

  0021e	83 c6 10	 add	 esi, 16			; 00000010H
  00221	03 c8		 add	 ecx, eax
  00223	03 f9		 add	 edi, ecx
  00225	83 ea 01	 sub	 edx, 1
  00228	0f 85 72 ff ff
	ff		 jne	 $LL9@adler32_z

; 114  :         }
; 115  :         while (len--) {

  0022e	85 db		 test	 ebx, ebx
  00230	74 0f		 je	 SHORT $LN30@adler32_z
$LL11@adler32_z:

; 116  :             adler += *buf++;

  00232	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00235	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00238	03 c8		 add	 ecx, eax

; 117  :             sum2 += adler;

  0023a	03 f9		 add	 edi, ecx
  0023c	83 eb 01	 sub	 ebx, 1
  0023f	75 f1		 jne	 SHORT $LL11@adler32_z
$LN30@adler32_z:

; 118  :         }
; 119  :         MOD(adler);

  00241	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00246	f7 e1		 mul	 ecx
  00248	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0024b	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  00251	03 c8		 add	 ecx, eax

; 120  :         MOD(sum2);

  00253	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00258	f7 e7		 mul	 edi
  0025a	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0025d	69 d2 0f 00 ff
	ff		 imul	 edx, edx, -65521
  00263	03 fa		 add	 edi, edx
$LN19@adler32_z:

; 121  :     }
; 122  : 
; 123  :     /* return recombined sums */
; 124  :     return adler | (sum2 << 16);

  00265	c1 e7 10	 shl	 edi, 16			; 00000010H
  00268	0b f9		 or	 edi, ecx
  0026a	5e		 pop	 esi
  0026b	8b c7		 mov	 eax, edi
  0026d	5f		 pop	 edi

; 125  : }

  0026e	5b		 pop	 ebx
  0026f	5d		 pop	 ebp
  00270	c2 0c 00	 ret	 12			; 0000000cH
_adler32_z@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\adler32.c
;	COMDAT _adler32@12
_TEXT	SEGMENT
_adler$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32@12 PROC					; COMDAT

; 128  : uLong ZEXPORT adler32(uLong adler, const Bytef *buf, uInt len) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 130  : }

  00003	5d		 pop	 ebp

; 129  :     return adler32_z(adler, buf, len);

  00004	e9 00 00 00 00	 jmp	 _adler32_z@12
_adler32@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\adler32.c
;	COMDAT _adler32_combine_
_TEXT	SEGMENT
tv319 = -28						; size = 8
_adler1$1$ = -20					; size = 4
tv330 = -16						; size = 8
tv143 = -12						; size = 4
tv95 = -8						; size = 4
_adler2$1$ = -4						; size = 4
_len2$ = 8						; size = 8
_adler32_combine_ PROC					; COMDAT
; _adler1$ = ecx
; _adler2$ = edx

; 133  : local uLong adler32_combine_(uLong adler1, uLong adler2, z_off64_t len2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d ec	 mov	 DWORD PTR _adler1$1$[ebp], ecx
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _len2$[ebp+4]
  0000c	89 55 fc	 mov	 DWORD PTR _adler2$1$[ebp], edx
  0000f	53		 push	 ebx
  00010	8b 5d 08	 mov	 ebx, DWORD PTR _len2$[ebp]

; 134  :     unsigned long sum1;
; 135  :     unsigned long sum2;
; 136  :     unsigned rem;
; 137  : 
; 138  :     /* for negative len, return invalid adler32 as a clue for debugging */
; 139  :     if (len2 < 0)

  00013	85 c9		 test	 ecx, ecx
  00015	7f 0e		 jg	 SHORT $LN2@adler32_co
  00017	7c 04		 jl	 SHORT $LN8@adler32_co
  00019	85 db		 test	 ebx, ebx
  0001b	73 08		 jae	 SHORT $LN2@adler32_co
$LN8@adler32_co:

; 140  :         return 0xffffffffUL;

  0001d	83 c8 ff	 or	 eax, -1
  00020	5b		 pop	 ebx

; 155  : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN2@adler32_co:

; 141  : 
; 142  :     /* the derivation of this formula is left as an exercise for the reader */
; 143  :     MOD63(len2);                /* assumes len2 >= 0 */

  00025	8b c3		 mov	 eax, ebx
  00027	ba cd c5 2f 0d	 mov	 edx, 221234637		; 0d2fc5cdH
  0002c	f7 e2		 mul	 edx
  0002e	8b c3		 mov	 eax, ebx
  00030	56		 push	 esi
  00031	8b f2		 mov	 esi, edx
  00033	57		 push	 edi
  00034	bf e1 00 0f 00	 mov	 edi, 983265		; 000f00e1H
  00039	f7 e7		 mul	 edi
  0003b	8b f8		 mov	 edi, eax
  0003d	89 55 f8	 mov	 DWORD PTR tv95[ebp], edx
  00040	8b c1		 mov	 eax, ecx
  00042	b9 cd c5 2f 0d	 mov	 ecx, 221234637		; 0d2fc5cdH
  00047	f7 e1		 mul	 ecx
  00049	8b c8		 mov	 ecx, eax
  0004b	8b da		 mov	 ebx, edx
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _len2$[ebp+4]
  00050	ba e1 00 0f 00	 mov	 edx, 983265		; 000f00e1H
  00055	f7 e2		 mul	 edx
  00057	03 ce		 add	 ecx, esi
  00059	8b 75 08	 mov	 esi, DWORD PTR _len2$[ebp]
  0005c	89 45 f4	 mov	 DWORD PTR tv143[ebp], eax
  0005f	83 d3 00	 adc	 ebx, 0
  00062	03 f9		 add	 edi, ecx
  00064	8b 4d f8	 mov	 ecx, DWORD PTR tv95[ebp]
  00067	83 d1 00	 adc	 ecx, 0
  0006a	33 c0		 xor	 eax, eax
  0006c	03 d9		 add	 ebx, ecx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR tv143[ebp]
  00071	13 c0		 adc	 eax, eax
  00073	03 cb		 add	 ecx, ebx
  00075	8b 5d 0c	 mov	 ebx, DWORD PTR _len2$[ebp+4]
  00078	13 d0		 adc	 edx, eax
  0007a	8b c6		 mov	 eax, esi
  0007c	2b c1		 sub	 eax, ecx
  0007e	1b da		 sbb	 ebx, edx
  00080	0f ac d8 01	 shrd	 eax, ebx, 1
  00084	d1 eb		 shr	 ebx, 1
  00086	03 c1		 add	 eax, ecx
  00088	13 da		 adc	 ebx, edx
  0008a	0f ac d8 0f	 shrd	 eax, ebx, 15

; 144  :     rem = (unsigned)len2;
; 145  :     sum1 = adler1 & 0xffff;

  0008e	8b 5d ec	 mov	 ebx, DWORD PTR _adler1$1$[ebp]
  00091	69 c0 f1 ff 00
	00		 imul	 eax, eax, 65521
  00097	0f b7 cb	 movzx	 ecx, bx

; 146  :     sum2 = rem * sum1;

  0009a	8b f9		 mov	 edi, ecx

; 147  :     MOD(sum2);
; 148  :     sum1 += (adler2 & 0xffff) + BASE - 1;
; 149  :     sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;

  0009c	c1 eb 10	 shr	 ebx, 16			; 00000010H
  0009f	2b f0		 sub	 esi, eax
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _adler2$1$[ebp]
  000a4	0f b7 c0	 movzx	 eax, ax
  000a7	03 c8		 add	 ecx, eax
  000a9	0f af fe	 imul	 edi, esi
  000ac	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  000b1	f7 e7		 mul	 edi
  000b3	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  000b6	69 c2 f1 ff 00
	00		 imul	 eax, edx, 65521
  000bc	8d 97 f1 ff 00
	00		 lea	 edx, DWORD PTR [edi+65521]
  000c2	2b d8		 sub	 ebx, eax
  000c4	8b 45 fc	 mov	 eax, DWORD PTR _adler2$1$[ebp]
  000c7	c1 e8 10	 shr	 eax, 16			; 00000010H
  000ca	03 d8		 add	 ebx, eax
  000cc	8d 81 f0 ff 00
	00		 lea	 eax, DWORD PTR [ecx+65520]
  000d2	2b de		 sub	 ebx, esi

; 150  :     if (sum1 >= BASE) sum1 -= BASE;
; 151  :     if (sum1 >= BASE) sum1 -= BASE;

  000d4	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  000d7	03 d3		 add	 edx, ebx

; 152  :     if (sum2 >= ((unsigned long)BASE << 1)) sum2 -= ((unsigned long)BASE << 1);
; 153  :     if (sum2 >= BASE) sum2 -= BASE;

  000d9	8d 8f 0f 00 ff
	ff		 lea	 ecx, DWORD PTR [edi-65521]
  000df	3d f1 ff 00 00	 cmp	 eax, 65521		; 0000fff1H

; 154  :     return sum1 | (sum2 << 16);

  000e4	5f		 pop	 edi
  000e5	1b c0		 sbb	 eax, eax
  000e7	03 cb		 add	 ecx, ebx
  000e9	25 f1 ff 00 00	 and	 eax, 65521		; 0000fff1H
  000ee	03 f0		 add	 esi, eax
  000f0	81 fa e2 ff 01
	00		 cmp	 edx, 131042		; 0001ffe2H
  000f6	0f 42 ca	 cmovb	 ecx, edx
  000f9	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  000ff	8d 81 0f 00 ff
	ff		 lea	 eax, DWORD PTR [ecx-65521]
  00105	0f 42 c1	 cmovb	 eax, ecx
  00108	8d 8e 0f 00 ff
	ff		 lea	 ecx, DWORD PTR [esi-65521]
  0010e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00111	81 fe f1 ff 00
	00		 cmp	 esi, 65521		; 0000fff1H
  00117	0f 42 ce	 cmovb	 ecx, esi
  0011a	0b c1		 or	 eax, ecx
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx

; 155  : }

  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
_adler32_combine_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\adler32.c
;	COMDAT _adler32_combine@12
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine@12 PROC				; COMDAT

; 158  : uLong ZEXPORT adler32_combine(uLong adler1, uLong adler2, z_off_t len2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 159  :     return adler32_combine_(adler1, adler2, len2);

  00003	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _adler1$[ebp]
  00009	99		 cdq
  0000a	52		 push	 edx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _adler2$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _adler32_combine_
  00014	83 c4 08	 add	 esp, 8

; 160  : }

  00017	5d		 pop	 ebp
  00018	c2 0c 00	 ret	 12			; 0000000cH
_adler32_combine@12 ENDP
_TEXT	ENDS
END
