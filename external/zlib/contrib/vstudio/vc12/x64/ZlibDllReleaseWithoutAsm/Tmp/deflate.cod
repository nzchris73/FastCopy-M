; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

include listing.inc

INCLUDELIB OLDNAMES

?my_version@?1??deflateInit2_@@9@9 DB '1.2.13.1-motley', 00H ; `deflateInit2_'::`2'::my_version
configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DQ	FLAT:deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DQ	FLAT:deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DQ	FLAT:deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DQ	FLAT:deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DQ	FLAT:deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DQ	FLAT:deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DQ	FLAT:deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DQ	FLAT:deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DQ	FLAT:deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DQ	FLAT:deflate_slow
PUBLIC	deflateCopy
PUBLIC	deflateBound
PUBLIC	deflateTune
PUBLIC	deflateParams
PUBLIC	deflatePrime
PUBLIC	deflatePending
PUBLIC	deflateSetHeader
PUBLIC	deflateReset
PUBLIC	deflateResetKeep
PUBLIC	deflateGetDictionary
PUBLIC	deflateSetDictionary
PUBLIC	deflateInit2_
PUBLIC	deflateInit_
PUBLIC	deflateEnd
PUBLIC	deflate
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_huff DD imagerel deflate_huff
	DD	imagerel deflate_huff+483
	DD	imagerel $unwind$deflate_huff
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_rle DD imagerel deflate_rle
	DD	imagerel deflate_rle+834
	DD	imagerel $unwind$deflate_rle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_slow DD imagerel deflate_slow
	DD	imagerel deflate_slow+1389
	DD	imagerel $unwind$deflate_slow
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_fast DD imagerel deflate_fast
	DD	imagerel deflate_fast+1111
	DD	imagerel $unwind$deflate_fast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_stored DD imagerel deflate_stored
	DD	imagerel deflate_stored+25
	DD	imagerel $unwind$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deflate_stored DD imagerel deflate_stored+25
	DD	imagerel deflate_stored+32
	DD	imagerel $chain$0$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deflate_stored DD imagerel deflate_stored+32
	DD	imagerel deflate_stored+431
	DD	imagerel $chain$2$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deflate_stored DD imagerel deflate_stored+431
	DD	imagerel deflate_stored+659
	DD	imagerel $chain$3$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deflate_stored DD imagerel deflate_stored+659
	DD	imagerel deflate_stored+1088
	DD	imagerel $chain$4$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$longest_match DD imagerel longest_match
	DD	imagerel longest_match+447
	DD	imagerel $unwind$longest_match
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateCopy DD imagerel $LN19
	DD	imagerel $LN19+41
	DD	imagerel $unwind$deflateCopy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$deflateCopy DD imagerel $LN19+41
	DD	imagerel $LN19+450
	DD	imagerel $chain$1$deflateCopy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deflateCopy DD imagerel $LN19+450
	DD	imagerel $LN19+479
	DD	imagerel $chain$3$deflateCopy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deflateCopy DD imagerel $LN19+479
	DD	imagerel $LN19+490
	DD	imagerel $chain$4$deflateCopy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_pending DD imagerel flush_pending
	DD	imagerel flush_pending+52
	DD	imagerel $unwind$flush_pending
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$flush_pending DD imagerel flush_pending+52
	DD	imagerel flush_pending+91
	DD	imagerel $chain$0$flush_pending
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$flush_pending DD imagerel flush_pending+91
	DD	imagerel flush_pending+115
	DD	imagerel $chain$1$flush_pending
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateBound DD imagerel $LN46
	DD	imagerel $LN46+336
	DD	imagerel $unwind$deflateBound
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateTune DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$deflateTune
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateParams DD imagerel $LN35
	DD	imagerel $LN35+378
	DD	imagerel $unwind$deflateParams
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflatePrime DD imagerel $LN18
	DD	imagerel $LN18+191
	DD	imagerel $unwind$deflatePrime
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflatePending DD imagerel $LN8
	DD	imagerel $LN8+69
	DD	imagerel $unwind$deflatePending
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateSetHeader DD imagerel $LN6
	DD	imagerel $LN6+50
	DD	imagerel $unwind$deflateSetHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateReset DD imagerel $LN7
	DD	imagerel $LN7+46
	DD	imagerel $unwind$deflateReset
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lm_init DD imagerel lm_init
	DD	imagerel lm_init+176
	DD	imagerel $unwind$lm_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateResetKeep DD imagerel $LN11
	DD	imagerel $LN11+158
	DD	imagerel $unwind$deflateResetKeep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateGetDictionary DD imagerel $LN12
	DD	imagerel $LN12+122
	DD	imagerel $unwind$deflateGetDictionary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateSetDictionary DD imagerel $LN42
	DD	imagerel $LN42+86
	DD	imagerel $unwind$deflateSetDictionary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deflateSetDictionary DD imagerel $LN42+86
	DD	imagerel $LN42+474
	DD	imagerel $chain$2$deflateSetDictionary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deflateSetDictionary DD imagerel $LN42+474
	DD	imagerel $LN42+490
	DD	imagerel $chain$3$deflateSetDictionary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateInit2_ DD imagerel $LN47
	DD	imagerel $LN47+81
	DD	imagerel $unwind$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deflateInit2_ DD imagerel $LN47+81
	DD	imagerel $LN47+271
	DD	imagerel $chain$0$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$deflateInit2_ DD imagerel $LN47+271
	DD	imagerel $LN47+561
	DD	imagerel $chain$1$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deflateInit2_ DD imagerel $LN47+561
	DD	imagerel $LN47+585
	DD	imagerel $chain$2$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deflateInit2_ DD imagerel $LN47+585
	DD	imagerel $LN47+618
	DD	imagerel $chain$4$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$deflateInit2_ DD imagerel $LN47+618
	DD	imagerel $LN47+625
	DD	imagerel $chain$5$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$deflateInit2_ DD imagerel $LN47+625
	DD	imagerel $LN47+649
	DD	imagerel $chain$6$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_window DD imagerel fill_window
	DD	imagerel fill_window+548
	DD	imagerel $unwind$fill_window
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_buf DD imagerel read_buf
	DD	imagerel read_buf+160
	DD	imagerel $unwind$read_buf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slide_hash DD imagerel slide_hash
	DD	imagerel slide_hash+117
	DD	imagerel $unwind$slide_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateInit_ DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$deflateInit_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateEnd DD imagerel $LN15
	DD	imagerel $LN15+176
	DD	imagerel $unwind$deflateEnd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate DD imagerel $LN242
	DD	imagerel $LN242+42
	DD	imagerel $unwind$deflate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$deflate DD imagerel $LN242+42
	DD	imagerel $LN242+282
	DD	imagerel $chain$5$deflate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$deflate DD imagerel $LN242+282
	DD	imagerel $LN242+2350
	DD	imagerel $chain$7$deflate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$deflate DD imagerel $LN242+2350
	DD	imagerel $LN242+2379
	DD	imagerel $chain$8$deflate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$deflate DD imagerel $LN242+2379
	DD	imagerel $LN242+2392
	DD	imagerel $chain$9$deflate
;	COMDAT xdata
xdata	SEGMENT
$chain$9$deflate DD 021H
	DD	imagerel $LN242
	DD	imagerel $LN242+42
	DD	imagerel $unwind$deflate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$deflate DD 020021H
	DD	0a3400H
	DD	imagerel $LN242
	DD	imagerel $LN242+42
	DD	imagerel $unwind$deflate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$deflate DD 0c0021H
	DD	04f400H
	DD	05e400H
	DD	06c400H
	DD	0c6400H
	DD	0b5400H
	DD	0a3400H
	DD	imagerel $LN242
	DD	imagerel $LN242+42
	DD	imagerel $unwind$deflate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$deflate DD 0c4e21H
	DD	04f44eH
	DD	05e449H
	DD	06c444H
	DD	0c643fH
	DD	0b543aH
	DD	0a3405H
	DD	imagerel $LN242
	DD	imagerel $LN242+42
	DD	imagerel $unwind$deflate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate DD 030801H
	DD	0d0046208H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateEnd DD 083001H
	DD	087430H
	DD	07642bH
	DD	065426H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateInit_ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slide_hash DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_buf DD 084701H
	DD	065447H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_window DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$deflateInit2_ DD 021H
	DD	imagerel $LN47
	DD	imagerel $LN47+81
	DD	imagerel $unwind$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$deflateInit2_ DD 020021H
	DD	0a5400H
	DD	imagerel $LN47
	DD	imagerel $LN47+81
	DD	imagerel $unwind$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deflateInit2_ DD 040021H
	DD	0b6400H
	DD	0a5400H
	DD	imagerel $LN47
	DD	imagerel $LN47+81
	DD	imagerel $unwind$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deflateInit2_ DD 021H
	DD	imagerel $LN47+81
	DD	imagerel $LN47+271
	DD	imagerel $chain$0$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$deflateInit2_ DD 020521H
	DD	0b6405H
	DD	imagerel $LN47+81
	DD	imagerel $LN47+271
	DD	imagerel $chain$0$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deflateInit2_ DD 020521H
	DD	0a5405H
	DD	imagerel $LN47
	DD	imagerel $LN47+81
	DD	imagerel $unwind$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateInit2_ DD 081201H
	DD	0c3412H
	DD	0f00e3212H
	DD	0d00ae00cH
	DD	07006c008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deflateSetDictionary DD 021H
	DD	imagerel $LN42
	DD	imagerel $LN42+86
	DD	imagerel $unwind$deflateSetDictionary
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deflateSetDictionary DD 060f21H
	DD	0cf40fH
	DD	0bd40aH
	DD	0ac405H
	DD	imagerel $LN42
	DD	imagerel $LN42+86
	DD	imagerel $unwind$deflateSetDictionary
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateSetDictionary DD 060b01H
	DD	0e007320bH
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateGetDictionary DD 042c01H
	DD	06342cH
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateResetKeep DD 043501H
	DD	063435H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lm_init DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateReset DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateSetHeader DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflatePending DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflatePrime DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateParams DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateTune DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateBound DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$flush_pending DD 021H
	DD	imagerel flush_pending
	DD	imagerel flush_pending+52
	DD	imagerel $unwind$flush_pending
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$flush_pending DD 020521H
	DD	063405H
	DD	imagerel flush_pending
	DD	imagerel flush_pending+52
	DD	imagerel $unwind$flush_pending
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_pending DD 060f01H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deflateCopy DD 021H
	DD	imagerel $LN19
	DD	imagerel $LN19+41
	DD	imagerel $unwind$deflateCopy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deflateCopy DD 040021H
	DD	076400H
	DD	063400H
	DD	imagerel $LN19
	DD	imagerel $LN19+41
	DD	imagerel $unwind$deflateCopy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$deflateCopy DD 040d21H
	DD	07640dH
	DD	063405H
	DD	imagerel $LN19
	DD	imagerel $LN19+41
	DD	imagerel $unwind$deflateCopy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateCopy DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longest_match DD 0b1801H
	DD	096418H
	DD	085418H
	DD	073418H
	DD	0e016f018H
	DD	0c012d014H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deflate_stored DD 020021H
	DD	057400H
	DD	imagerel deflate_stored
	DD	imagerel deflate_stored+25
	DD	imagerel $unwind$deflate_stored
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deflate_stored DD 020021H
	DD	057400H
	DD	imagerel deflate_stored+25
	DD	imagerel deflate_stored+32
	DD	imagerel $chain$0$deflate_stored
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deflate_stored DD 041021H
	DD	057410H
	DD	0d5405H
	DD	imagerel deflate_stored+25
	DD	imagerel deflate_stored+32
	DD	imagerel $chain$0$deflate_stored
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deflate_stored DD 020521H
	DD	04c405H
	DD	imagerel deflate_stored
	DD	imagerel deflate_stored+25
	DD	imagerel $unwind$deflate_stored
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_stored DD 060d01H
	DD	0f009520dH
	DD	0d005e007H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_fast DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_slow DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_rle DD 0c2401H
	DD	08e424H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0f0143218H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_huff DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflate
_TEXT	SEGMENT
strm$ = 80
flush$ = 88
deflate	PROC						; COMDAT

; 934  : int ZEXPORT deflate(z_streamp strm, int flush) {

$LN242:
  00000	40 57		 push	 rdi
  00002	41 55		 push	 r13
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00008	44 8b ea	 mov	 r13d, edx
  0000b	48 8b f9	 mov	 rdi, rcx

; 935  :     int old_flush; /* value of flush param for previous deflate call */
; 936  :     deflate_state *s;
; 937  : 
; 938  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  0000e	e8 00 00 00 00	 call	 deflateStateCheck
  00013	85 c0		 test	 eax, eax
  00015	0f 85 30 09 00
	00		 jne	 $LN32@deflate
  0001b	41 83 fd 05	 cmp	 r13d, 5
  0001f	0f 87 26 09 00
	00		 ja	 $LN32@deflate

; 940  :     }
; 941  :     s = strm->state;
; 942  : 
; 943  :     if (strm->next_out == Z_NULL ||
; 944  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  00025	48 83 7f 10 00	 cmp	 QWORD PTR [rdi+16], 0
  0002a	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  0002f	48 8b 5f 28	 mov	 rbx, QWORD PTR [rdi+40]
  00033	0f 84 f5 08 00
	00		 je	 $LN34@deflate
  00039	39 47 08	 cmp	 DWORD PTR [rdi+8], eax
  0003c	74 0a		 je	 SHORT $LN35@deflate
  0003e	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  00042	0f 84 e6 08 00
	00		 je	 $LN34@deflate
$LN35@deflate:
  00048	81 7b 08 9a 02
	00 00		 cmp	 DWORD PTR [rbx+8], 666	; 0000029aH
  0004f	75 0a		 jne	 SHORT $LN33@deflate
  00051	41 83 fd 04	 cmp	 r13d, 4
  00055	0f 85 d3 08 00
	00		 jne	 $LN34@deflate
$LN33@deflate:

; 947  :     }
; 948  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  0005b	83 7f 18 00	 cmp	 DWORD PTR [rdi+24], 0
  0005f	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  00064	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  00069	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  0006e	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  00073	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00078	74 6a		 je	 SHORT $LN157@deflate

; 949  : 
; 950  :     old_flush = s->last_flush;

  0007a	8b 53 40	 mov	 edx, DWORD PTR [rbx+64]

; 951  :     s->last_flush = flush;
; 952  : 
; 953  :     /* Flush as much pending output as possible */
; 954  :     if (s->pending != 0) {

  0007d	33 f6		 xor	 esi, esi
  0007f	44 89 6b 40	 mov	 DWORD PTR [rbx+64], r13d
  00083	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00086	74 13		 je	 SHORT $LN37@deflate

; 955  :         flush_pending(strm);

  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 flush_pending

; 956  :         if (strm->avail_out == 0) {

  00090	39 77 18	 cmp	 DWORD PTR [rdi+24], esi
  00093	0f 84 87 08 00
	00		 je	 $LN152@deflate
  00099	eb 36		 jmp	 SHORT $LN40@deflate
$LN37@deflate:

; 957  :             /* Since avail_out is 0, deflate will be called again with
; 958  :              * more output space, but possibly with both pending and
; 959  :              * avail_in equal to zero. There won't be anything to do,
; 960  :              * but this is not an error situation so make sure we
; 961  :              * return OK instead of BUF_ERROR at next call of deflate:
; 962  :              */
; 963  :             s->last_flush = -1;
; 964  :             return Z_OK;
; 965  :         }
; 966  : 
; 967  :     /* Make sure there is something to do and avoid duplicate consecutive
; 968  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 969  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 970  :      */
; 971  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  0009b	39 77 08	 cmp	 DWORD PTR [rdi+8], esi
  0009e	75 31		 jne	 SHORT $LN40@deflate
  000a0	83 fa 04	 cmp	 edx, 4
  000a3	41 b8 09 00 00
	00		 mov	 r8d, 9
  000a9	8b c6		 mov	 eax, esi
  000ab	8b ce		 mov	 ecx, esi
  000ad	41 0f 4f c0	 cmovg	 eax, r8d
  000b1	03 d2		 add	 edx, edx
  000b3	2b d0		 sub	 edx, eax
  000b5	42 8d 04 6d 00
	00 00 00	 lea	 eax, DWORD PTR [r13*2]
  000bd	41 83 fd 04	 cmp	 r13d, 4
  000c1	41 0f 4f c8	 cmovg	 ecx, r8d
  000c5	2b c1		 sub	 eax, ecx
  000c7	3b c2		 cmp	 eax, edx
  000c9	7f 06		 jg	 SHORT $LN40@deflate
  000cb	41 83 fd 04	 cmp	 r13d, 4
  000cf	75 13		 jne	 SHORT $LN157@deflate
$LN40@deflate:

; 972  :                flush != Z_FINISH) {
; 973  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 974  :     }
; 975  : 
; 976  :     /* User must not provide more input after the first FINISH: */
; 977  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000d1	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
  000d4	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  000d9	75 3f		 jne	 SHORT $LN41@deflate
  000db	39 77 08	 cmp	 DWORD PTR [rdi+8], esi
  000de	0f 84 05 01 00
	00		 je	 $LN140@deflate
$LN157@deflate:

; 978  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@DFPGLBGC@buffer?5error@
  000eb	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
  000ef	b8 fb ff ff ff	 mov	 eax, -5
$LN239@deflate:
  000f4	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  000f9	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]
  000fe	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00103	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00108	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  0010d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 1243 : }

  00112	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00116	41 5d		 pop	 r13
  00118	5f		 pop	 rdi
  00119	c3		 ret	 0
$LN41@deflate:

; 979  :     }
; 980  : 
; 981  :     /* Write the header */
; 982  :     if (s->status == INIT_STATE && s->wrap == 0)

  0011a	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  0011d	0f 85 c6 00 00
	00		 jne	 $LN140@deflate
  00123	39 73 2c	 cmp	 DWORD PTR [rbx+44], esi
  00126	75 0c		 jne	 SHORT $LN151@deflate

; 983  :         s->status = BUSY_STATE;

  00128	c7 43 08 71 00
	00 00		 mov	 DWORD PTR [rbx+8], 113	; 00000071H

; 1137 :         }
; 1138 :         s->status = HCRC_STATE;

  0012f	e9 b5 00 00 00	 jmp	 $LN140@deflate
$LN151@deflate:

; 984  :     if (s->status == INIT_STATE) {
; 985  :         /* zlib header */
; 986  :         uInt header = (Z_DEFLATED + ((s->w_bits - 8) << 4)) << 8;

  00134	8b 53 48	 mov	 edx, DWORD PTR [rbx+72]
  00137	c1 e2 0c	 shl	 edx, 12
  0013a	81 c2 00 88 ff
	ff		 add	 edx, -30720		; ffff8800H

; 987  :         uInt level_flags;
; 988  : 
; 989  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  00140	83 bb b0 00 00
	00 02		 cmp	 DWORD PTR [rbx+176], 2
  00147	7d 30		 jge	 SHORT $LN130@deflate
  00149	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [rbx+172]
  0014f	83 f8 02	 cmp	 eax, 2
  00152	7c 25		 jl	 SHORT $LN130@deflate

; 991  :         else if (s->level < 6)

  00154	83 f8 06	 cmp	 eax, 6
  00157	7d 0a		 jge	 SHORT $LN47@deflate

; 992  :             level_flags = 1;

  00159	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0015e	8d 48 20	 lea	 ecx, QWORD PTR [rax+32]
  00161	eb 1d		 jmp	 SHORT $LN50@deflate
$LN47@deflate:

; 993  :         else if (s->level == 6)

  00163	75 0a		 jne	 SHORT $LN49@deflate

; 994  :             level_flags = 2;

  00165	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  0016a	8d 48 20	 lea	 ecx, QWORD PTR [rax+32]
  0016d	eb 11		 jmp	 SHORT $LN50@deflate
$LN49@deflate:

; 995  :         else
; 996  :             level_flags = 3;

  0016f	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00174	8d 48 20	 lea	 ecx, QWORD PTR [rax+32]
  00177	eb 07		 jmp	 SHORT $LN50@deflate
$LN130@deflate:

; 990  :             level_flags = 0;

  00179	8b c6		 mov	 eax, esi
  0017b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
$LN50@deflate:

; 997  :         header |= (level_flags << 6);
; 998  :         if (s->strstart != 0) header |= PRESET_DICT;
; 999  :         header += 31 - (header % 31);

  00180	39 b3 94 00 00
	00		 cmp	 DWORD PTR [rbx+148], esi
  00186	0f 44 c8	 cmove	 ecx, eax
  00189	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  0018e	0b ca		 or	 ecx, edx
  00190	f7 e1		 mul	 ecx
  00192	2b ca		 sub	 ecx, edx
  00194	d1 e9		 shr	 ecx, 1
  00196	03 ca		 add	 ecx, edx
  00198	c1 e9 04	 shr	 ecx, 4
  0019b	ff c1		 inc	 ecx
  0019d	6b d1 1f	 imul	 edx, ecx, 31

; 1000 : 
; 1001 :         putShortMSB(s, header);

  001a0	48 8b cb	 mov	 rcx, rbx
  001a3	e8 00 00 00 00	 call	 putShortMSB

; 1002 : 
; 1003 :         /* Save the adler32 of the preset dictionary: */
; 1004 :         if (s->strstart != 0) {

  001a8	39 b3 94 00 00
	00		 cmp	 DWORD PTR [rbx+148], esi
  001ae	74 12		 je	 SHORT $LN138@deflate

; 1005 :             putShortMSB(s, (uInt)(strm->adler >> 16));

  001b0	0f b7 57 4e	 movzx	 edx, WORD PTR [rdi+78]
  001b4	e8 00 00 00 00	 call	 putShortMSB

; 1006 :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  001b9	0f b7 57 4c	 movzx	 edx, WORD PTR [rdi+76]
  001bd	e8 00 00 00 00	 call	 putShortMSB
$LN138@deflate:

; 1007 :         }
; 1008 :         strm->adler = adler32(0L, Z_NULL, 0);

  001c2	45 33 c0	 xor	 r8d, r8d
  001c5	33 d2		 xor	 edx, edx
  001c7	33 c9		 xor	 ecx, ecx
  001c9	e8 00 00 00 00	 call	 adler32
  001ce	89 47 4c	 mov	 DWORD PTR [rdi+76], eax

; 1009 :         s->status = BUSY_STATE;
; 1010 : 
; 1011 :         /* Compression must start with an empty pending buffer */
; 1012 :         flush_pending(strm);

  001d1	48 8b cf	 mov	 rcx, rdi
  001d4	c7 43 08 71 00
	00 00		 mov	 DWORD PTR [rbx+8], 113	; 00000071H
  001db	e8 00 00 00 00	 call	 flush_pending

; 1013 :         if (s->pending != 0) {

  001e0	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  001e3	0f 85 37 07 00
	00		 jne	 $LN152@deflate
$LN140@deflate:

; 1014 :             s->last_flush = -1;
; 1015 :             return Z_OK;
; 1016 :         }
; 1017 :     }
; 1018 : #ifdef GZIP
; 1019 :     if (s->status == GZIP_STATE) {

  001e9	83 7b 08 39	 cmp	 DWORD PTR [rbx+8], 57	; 00000039H
  001ed	0f 85 51 02 00
	00		 jne	 $LN56@deflate

; 1020 :         /* gzip header */
; 1021 :         strm->adler = crc32(0L, Z_NULL, 0);

  001f3	45 33 c0	 xor	 r8d, r8d
  001f6	33 d2		 xor	 edx, edx
  001f8	33 c9		 xor	 ecx, ecx
  001fa	e8 00 00 00 00	 call	 crc32
  001ff	89 47 4c	 mov	 DWORD PTR [rdi+76], eax

; 1022 :         put_byte(s, 31);

  00202	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  00205	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00209	c6 04 01 1f	 mov	 BYTE PTR [rcx+rax], 31
  0020d	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00210	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 1023 :         put_byte(s, 139);

  00213	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00217	c6 04 01 8b	 mov	 BYTE PTR [rcx+rax], 139	; 0000008bH
  0021b	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0021e	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 1024 :         put_byte(s, 8);

  00221	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00225	c6 04 01 08	 mov	 BYTE PTR [rcx+rax], 8
  00229	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 1025 :         if (s->gzhead == Z_NULL) {

  0022c	4c 8b 43 30	 mov	 r8, QWORD PTR [rbx+48]
  00230	44 8b 4b 28	 mov	 r9d, DWORD PTR [rbx+40]
  00234	4d 85 c0	 test	 r8, r8
  00237	0f 85 b0 00 00
	00		 jne	 $LN55@deflate

; 1026 :             put_byte(s, 0);

  0023d	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00241	41 88 34 01	 mov	 BYTE PTR [r9+rax], sil
  00245	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]
  00248	ff c0		 inc	 eax
  0024a	89 43 28	 mov	 DWORD PTR [rbx+40], eax

; 1027 :             put_byte(s, 0);

  0024d	8b c8		 mov	 ecx, eax
  0024f	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00253	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00257	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]
  0025a	ff c0		 inc	 eax
  0025c	89 43 28	 mov	 DWORD PTR [rbx+40], eax

; 1028 :             put_byte(s, 0);

  0025f	8b c8		 mov	 ecx, eax
  00261	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00265	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00269	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]
  0026c	ff c0		 inc	 eax
  0026e	89 43 28	 mov	 DWORD PTR [rbx+40], eax

; 1029 :             put_byte(s, 0);

  00271	8b c8		 mov	 ecx, eax
  00273	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00277	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  0027b	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]
  0027e	ff c0		 inc	 eax
  00280	89 43 28	 mov	 DWORD PTR [rbx+40], eax

; 1030 :             put_byte(s, 0);

  00283	8b c8		 mov	 ecx, eax
  00285	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00289	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  0028d	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 1031 :             put_byte(s, s->level == 9 ? 2 :

  00290	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [rbx+172]
  00296	ff c1		 inc	 ecx
  00298	89 4b 28	 mov	 DWORD PTR [rbx+40], ecx
  0029b	83 f8 09	 cmp	 eax, 9
  0029e	75 04		 jne	 SHORT $LN104@deflate
  002a0	b2 02		 mov	 dl, 2
  002a2	eb 14		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  002a4	83 bb b0 00 00
	00 02		 cmp	 DWORD PTR [rbx+176], 2
  002ab	7d 09		 jge	 SHORT $LN102@deflate
  002ad	83 f8 02	 cmp	 eax, 2
  002b0	7c 04		 jl	 SHORT $LN102@deflate
  002b2	32 d2		 xor	 dl, dl
  002b4	eb 02		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  002b6	b2 04		 mov	 dl, 4
$LN103@deflate:
  002b8	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  002bc	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  002bf	ff 43 28	 inc	 DWORD PTR [rbx+40]
  002c2	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 1032 :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 1033 :                       4 : 0));
; 1034 :             put_byte(s, OS_CODE);

  002c5	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  002c9	c6 04 01 0a	 mov	 BYTE PTR [rcx+rax], 10

; 1035 :             s->status = BUSY_STATE;
; 1036 : 
; 1037 :             /* Compression must start with an empty pending buffer */
; 1038 :             flush_pending(strm);

  002cd	48 8b cf	 mov	 rcx, rdi
  002d0	ff 43 28	 inc	 DWORD PTR [rbx+40]
  002d3	c7 43 08 71 00
	00 00		 mov	 DWORD PTR [rbx+8], 113	; 00000071H
  002da	e8 00 00 00 00	 call	 flush_pending

; 1039 :             if (s->pending != 0) {

  002df	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  002e2	0f 85 38 06 00
	00		 jne	 $LN152@deflate
  002e8	e9 57 01 00 00	 jmp	 $LN56@deflate
$LN55@deflate:

; 1040 :                 s->last_flush = -1;
; 1041 :                 return Z_OK;
; 1042 :             }
; 1043 :         }
; 1044 :         else {
; 1045 :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  002ed	49 8b 40 30	 mov	 rax, QWORD PTR [r8+48]
  002f1	48 f7 d8	 neg	 rax
  002f4	41 8b 40 3c	 mov	 eax, DWORD PTR [r8+60]
  002f8	1a d2		 sbb	 dl, dl
  002fa	80 e2 10	 and	 dl, 16
  002fd	f7 d8		 neg	 eax
  002ff	49 8b 40 20	 mov	 rax, QWORD PTR [r8+32]
  00303	1a c9		 sbb	 cl, cl
  00305	80 e1 02	 and	 cl, 2
  00308	02 d1		 add	 dl, cl
  0030a	48 f7 d8	 neg	 rax
  0030d	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00311	1a c9		 sbb	 cl, cl
  00313	80 e1 08	 and	 cl, 8
  00316	02 d1		 add	 dl, cl
  00318	48 f7 d8	 neg	 rax
  0031b	1a c9		 sbb	 cl, cl
  0031d	80 e1 04	 and	 cl, 4
  00320	02 d1		 add	 dl, cl
  00322	41 39 30	 cmp	 DWORD PTR [r8], esi
  00325	0f 95 c0	 setne	 al
  00328	02 d0		 add	 dl, al
  0032a	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0032e	41 88 14 01	 mov	 BYTE PTR [r9+rax], dl
  00332	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]

; 1046 :                      (s->gzhead->hcrc ? 2 : 0) +
; 1047 :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 1048 :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 1049 :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 1050 :                      );
; 1051 :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  00335	48 8b 53 30	 mov	 rdx, QWORD PTR [rbx+48]
  00339	ff c0		 inc	 eax
  0033b	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0033f	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  00342	44 8b c0	 mov	 r8d, eax
  00345	0f b6 42 04	 movzx	 eax, BYTE PTR [rdx+4]
  00349	41 88 04 08	 mov	 BYTE PTR [r8+rcx], al
  0034d	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]

; 1052 :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  00350	48 8b 53 30	 mov	 rdx, QWORD PTR [rbx+48]
  00354	ff c0		 inc	 eax
  00356	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0035a	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  0035d	44 8b c0	 mov	 r8d, eax
  00360	0f b6 42 05	 movzx	 eax, BYTE PTR [rdx+5]
  00364	41 88 04 08	 mov	 BYTE PTR [r8+rcx], al
  00368	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]

; 1053 :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  0036b	48 8b 53 30	 mov	 rdx, QWORD PTR [rbx+48]
  0036f	ff c0		 inc	 eax
  00371	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00375	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  00378	44 8b c0	 mov	 r8d, eax
  0037b	0f b6 42 06	 movzx	 eax, BYTE PTR [rdx+6]
  0037f	41 88 04 08	 mov	 BYTE PTR [r8+rcx], al
  00383	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]

; 1054 :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  00386	48 8b 53 30	 mov	 rdx, QWORD PTR [rbx+48]
  0038a	ff c0		 inc	 eax
  0038c	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00390	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  00393	44 8b c0	 mov	 r8d, eax
  00396	0f b6 42 07	 movzx	 eax, BYTE PTR [rdx+7]
  0039a	41 88 04 08	 mov	 BYTE PTR [r8+rcx], al
  0039e	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 1055 :             put_byte(s, s->level == 9 ? 2 :

  003a1	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [rbx+172]
  003a7	ff c1		 inc	 ecx
  003a9	89 4b 28	 mov	 DWORD PTR [rbx+40], ecx
  003ac	83 f8 09	 cmp	 eax, 9
  003af	75 04		 jne	 SHORT $LN108@deflate
  003b1	b2 02		 mov	 dl, 2
  003b3	eb 14		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  003b5	83 bb b0 00 00
	00 02		 cmp	 DWORD PTR [rbx+176], 2
  003bc	7d 09		 jge	 SHORT $LN106@deflate
  003be	83 f8 02	 cmp	 eax, 2
  003c1	7c 04		 jl	 SHORT $LN106@deflate
  003c3	32 d2		 xor	 dl, dl
  003c5	eb 02		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  003c7	b2 04		 mov	 dl, 4
$LN107@deflate:
  003c9	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  003cd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  003d0	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 1056 :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 1057 :                       4 : 0));
; 1058 :             put_byte(s, s->gzhead->os & 0xff);

  003d3	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  003d7	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  003da	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  003de	0f b6 40 0c	 movzx	 eax, BYTE PTR [rax+12]
  003e2	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  003e5	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 1059 :             if (s->gzhead->extra != Z_NULL) {

  003e8	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  003ec	ff c1		 inc	 ecx
  003ee	89 4b 28	 mov	 DWORD PTR [rbx+40], ecx
  003f1	48 39 70 10	 cmp	 QWORD PTR [rax+16], rsi
  003f5	74 28		 je	 SHORT $LN58@deflate

; 1060 :                 put_byte(s, s->gzhead->extra_len & 0xff);

  003f7	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  003fb	8b d1		 mov	 edx, ecx
  003fd	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00401	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00404	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 1061 :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  00407	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0040b	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0040e	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00412	0f b6 40 19	 movzx	 eax, BYTE PTR [rax+25]
  00416	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00419	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0041c	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
$LN58@deflate:

; 1062 :             }
; 1063 :             if (s->gzhead->hcrc)

  0041f	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00423	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  00426	74 12		 je	 SHORT $LN59@deflate

; 1064 :                 strm->adler = crc32(strm->adler, s->pending_buf,

  00428	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  0042c	44 8b c1	 mov	 r8d, ecx
  0042f	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  00432	e8 00 00 00 00	 call	 crc32
  00437	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN59@deflate:

; 1065 :                                     s->pending);
; 1066 :             s->gzindex = 0;

  0043a	89 73 38	 mov	 DWORD PTR [rbx+56], esi

; 1067 :             s->status = EXTRA_STATE;

  0043d	c7 43 08 45 00
	00 00		 mov	 DWORD PTR [rbx+8], 69	; 00000045H
$LN56@deflate:

; 1068 :         }
; 1069 :     }
; 1070 :     if (s->status == EXTRA_STATE) {

  00444	8b 4b 08	 mov	 ecx, DWORD PTR [rbx+8]
  00447	4c 8d 73 30	 lea	 r14, QWORD PTR [rbx+48]
  0044b	83 f9 45	 cmp	 ecx, 69			; 00000045H
  0044e	0f 85 e8 00 00
	00		 jne	 $LN142@deflate

; 1071 :         if (s->gzhead->extra != Z_NULL) {

  00454	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00457	48 39 70 10	 cmp	 QWORD PTR [rax+16], rsi
  0045b	0f 84 d2 00 00
	00		 je	 $LN143@deflate

; 1072 :             ulg beg = s->pending;   /* start of bytes to update crc */
; 1073 :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  00461	44 0f b7 60 18	 movzx	 r12d, WORD PTR [rax+24]
  00466	44 2b 63 38	 sub	 r12d, DWORD PTR [rbx+56]
  0046a	44 8b 7b 28	 mov	 r15d, DWORD PTR [rbx+40]

; 1074 :             while (s->pending + left > s->pending_buf_size) {

  0046e	8b 6b 18	 mov	 ebp, DWORD PTR [rbx+24]
  00471	45 8b cf	 mov	 r9d, r15d
  00474	43 8d 04 27	 lea	 eax, DWORD PTR [r15+r12]
  00478	3b c5		 cmp	 eax, ebp
  0047a	76 6e		 jbe	 SHORT $LN141@deflate
  0047c	41 8b cf	 mov	 ecx, r15d
  0047f	90		 npad	 1
$LL2@deflate:

; 1075 :                 uInt copy = s->pending_buf_size - s->pending;
; 1076 :                 zmemcpy(s->pending_buf + s->pending,

  00480	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00483	2b e9		 sub	 ebp, ecx
  00485	8b 53 38	 mov	 edx, DWORD PTR [rbx+56]
  00488	48 03 4b 10	 add	 rcx, QWORD PTR [rbx+16]
  0048c	44 8b c5	 mov	 r8d, ebp
  0048f	48 03 50 10	 add	 rdx, QWORD PTR [rax+16]
  00493	e8 00 00 00 00	 call	 memcpy

; 1077 :                         s->gzhead->extra + s->gzindex, copy);
; 1078 :                 s->pending = s->pending_buf_size;
; 1079 :                 HCRC_UPDATE(beg);

  00498	49 8b 06	 mov	 rax, QWORD PTR [r14]
  0049b	44 8b 43 18	 mov	 r8d, DWORD PTR [rbx+24]
  0049f	44 89 43 28	 mov	 DWORD PTR [rbx+40], r8d
  004a3	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  004a6	74 1a		 je	 SHORT $LN4@deflate
  004a8	45 3b c7	 cmp	 r8d, r15d
  004ab	76 15		 jbe	 SHORT $LN4@deflate
  004ad	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  004b0	45 2b c7	 sub	 r8d, r15d
  004b3	41 8b d7	 mov	 edx, r15d
  004b6	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  004ba	e8 00 00 00 00	 call	 crc32
  004bf	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN4@deflate:

; 1080 :                 s->gzindex += copy;

  004c2	01 6b 38	 add	 DWORD PTR [rbx+56], ebp

; 1081 :                 flush_pending(strm);

  004c5	48 8b cf	 mov	 rcx, rdi
  004c8	e8 00 00 00 00	 call	 flush_pending

; 1082 :                 if (s->pending != 0) {

  004cd	44 8b 4b 28	 mov	 r9d, DWORD PTR [rbx+40]
  004d1	45 85 c9	 test	 r9d, r9d
  004d4	0f 85 46 04 00
	00		 jne	 $LN152@deflate

; 1083 :                     s->last_flush = -1;
; 1084 :                     return Z_OK;
; 1085 :                 }
; 1086 :                 beg = 0;
; 1087 :                 left -= copy;

  004da	44 2b e5	 sub	 r12d, ebp
  004dd	8b ce		 mov	 ecx, esi
  004df	8b 6b 18	 mov	 ebp, DWORD PTR [rbx+24]
  004e2	44 8b fe	 mov	 r15d, esi
  004e5	44 3b e5	 cmp	 r12d, ebp
  004e8	77 96		 ja	 SHORT $LL2@deflate
$LN141@deflate:

; 1088 :             }
; 1089 :             zmemcpy(s->pending_buf + s->pending,

  004ea	49 8b 06	 mov	 rax, QWORD PTR [r14]
  004ed	8b 53 38	 mov	 edx, DWORD PTR [rbx+56]
  004f0	41 8b c9	 mov	 ecx, r9d
  004f3	48 03 4b 10	 add	 rcx, QWORD PTR [rbx+16]
  004f7	48 03 50 10	 add	 rdx, QWORD PTR [rax+16]
  004fb	45 8b c4	 mov	 r8d, r12d
  004fe	e8 00 00 00 00	 call	 memcpy

; 1090 :                     s->gzhead->extra + s->gzindex, left);
; 1091 :             s->pending += left;

  00503	44 8b 43 28	 mov	 r8d, DWORD PTR [rbx+40]

; 1092 :             HCRC_UPDATE(beg);

  00507	49 8b 06	 mov	 rax, QWORD PTR [r14]
  0050a	45 03 c4	 add	 r8d, r12d
  0050d	44 89 43 28	 mov	 DWORD PTR [rbx+40], r8d
  00511	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  00514	74 1a		 je	 SHORT $LN7@deflate
  00516	45 3b c7	 cmp	 r8d, r15d
  00519	76 15		 jbe	 SHORT $LN7@deflate
  0051b	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  0051e	45 2b c7	 sub	 r8d, r15d
  00521	41 8b d7	 mov	 edx, r15d
  00524	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  00528	e8 00 00 00 00	 call	 crc32
  0052d	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN7@deflate:

; 1093 :             s->gzindex = 0;

  00530	89 73 38	 mov	 DWORD PTR [rbx+56], esi
$LN143@deflate:

; 1094 :         }
; 1095 :         s->status = NAME_STATE;

  00533	c7 43 08 49 00
	00 00		 mov	 DWORD PTR [rbx+8], 73	; 00000049H
  0053a	eb 09		 jmp	 SHORT $LN150@deflate
$LN142@deflate:

; 1096 :     }
; 1097 :     if (s->status == NAME_STATE) {

  0053c	83 f9 49	 cmp	 ecx, 73			; 00000049H
  0053f	0f 85 b5 00 00
	00		 jne	 $LN145@deflate
$LN150@deflate:

; 1098 :         if (s->gzhead->name != Z_NULL) {

  00545	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00548	48 8d 6b 18	 lea	 rbp, QWORD PTR [rbx+24]
  0054c	48 39 70 20	 cmp	 QWORD PTR [rax+32], rsi
  00550	0f 84 9b 00 00
	00		 je	 $LN132@deflate

; 1099 :             ulg beg = s->pending;   /* start of bytes to update crc */

  00556	44 8b 4b 28	 mov	 r9d, DWORD PTR [rbx+40]
  0055a	45 8b c1	 mov	 r8d, r9d
  0055d	0f 1f 00	 npad	 3
$LL12@deflate:

; 1100 :             int val;
; 1101 :             do {
; 1102 :                 if (s->pending == s->pending_buf_size) {

  00560	44 3b 45 00	 cmp	 r8d, DWORD PTR [rbp]
  00564	75 39		 jne	 SHORT $LN67@deflate

; 1103 :                     HCRC_UPDATE(beg);

  00566	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00569	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  0056c	74 1a		 je	 SHORT $LN13@deflate
  0056e	45 3b c1	 cmp	 r8d, r9d
  00571	76 15		 jbe	 SHORT $LN13@deflate
  00573	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  00576	45 2b c1	 sub	 r8d, r9d
  00579	41 8b d1	 mov	 edx, r9d
  0057c	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  00580	e8 00 00 00 00	 call	 crc32
  00585	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN13@deflate:

; 1104 :                     flush_pending(strm);

  00588	48 8b cf	 mov	 rcx, rdi
  0058b	e8 00 00 00 00	 call	 flush_pending

; 1105 :                     if (s->pending != 0) {

  00590	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00593	0f 85 87 03 00
	00		 jne	 $LN152@deflate

; 1106 :                         s->last_flush = -1;
; 1107 :                         return Z_OK;
; 1108 :                     }
; 1109 :                     beg = 0;

  00599	44 8b ce	 mov	 r9d, esi
  0059c	44 8b c6	 mov	 r8d, esi
$LN67@deflate:

; 1110 :                 }
; 1111 :                 val = s->gzhead->name[s->gzindex++];

  0059f	8b 4b 38	 mov	 ecx, DWORD PTR [rbx+56]
  005a2	49 8b 06	 mov	 rax, QWORD PTR [r14]
  005a5	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  005a9	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  005ad	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]

; 1112 :                 put_byte(s, val);

  005b0	41 8b c8	 mov	 ecx, r8d
  005b3	89 43 38	 mov	 DWORD PTR [rbx+56], eax
  005b6	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  005ba	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  005bd	44 8b 43 28	 mov	 r8d, DWORD PTR [rbx+40]
  005c1	41 ff c0	 inc	 r8d
  005c4	44 89 43 28	 mov	 DWORD PTR [rbx+40], r8d

; 1113 :             } while (val != 0);

  005c8	84 d2		 test	 dl, dl
  005ca	75 94		 jne	 SHORT $LL12@deflate

; 1114 :             HCRC_UPDATE(beg);

  005cc	49 8b 06	 mov	 rax, QWORD PTR [r14]
  005cf	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  005d2	74 1a		 je	 SHORT $LN16@deflate
  005d4	45 3b c1	 cmp	 r8d, r9d
  005d7	76 15		 jbe	 SHORT $LN16@deflate
  005d9	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  005dc	45 2b c1	 sub	 r8d, r9d
  005df	41 8b d1	 mov	 edx, r9d
  005e2	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  005e6	e8 00 00 00 00	 call	 crc32
  005eb	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN16@deflate:

; 1115 :             s->gzindex = 0;

  005ee	89 73 38	 mov	 DWORD PTR [rbx+56], esi
$LN132@deflate:

; 1116 :         }
; 1117 :         s->status = COMMENT_STATE;

  005f1	c7 43 08 5b 00
	00 00		 mov	 DWORD PTR [rbx+8], 91	; 0000005bH
  005f8	eb 0d		 jmp	 SHORT $LN149@deflate
$LN145@deflate:
  005fa	48 8d 6b 18	 lea	 rbp, QWORD PTR [rbx+24]

; 1118 :     }
; 1119 :     if (s->status == COMMENT_STATE) {

  005fe	83 f9 5b	 cmp	 ecx, 91			; 0000005bH
  00601	0f 85 b0 00 00
	00		 jne	 $LN146@deflate
$LN149@deflate:

; 1120 :         if (s->gzhead->comment != Z_NULL) {

  00607	49 8b 06	 mov	 rax, QWORD PTR [r14]
  0060a	48 39 70 30	 cmp	 QWORD PTR [rax+48], rsi
  0060e	0f 84 9a 00 00
	00		 je	 $LN26@deflate

; 1121 :             ulg beg = s->pending;   /* start of bytes to update crc */

  00614	44 8b 4b 28	 mov	 r9d, DWORD PTR [rbx+40]
  00618	45 8b c1	 mov	 r8d, r9d
  0061b	0f 1f 44 00 00	 npad	 5
$LL21@deflate:

; 1122 :             int val;
; 1123 :             do {
; 1124 :                 if (s->pending == s->pending_buf_size) {

  00620	44 3b 45 00	 cmp	 r8d, DWORD PTR [rbp]
  00624	75 39		 jne	 SHORT $LN73@deflate

; 1125 :                     HCRC_UPDATE(beg);

  00626	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00629	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  0062c	74 1a		 je	 SHORT $LN22@deflate
  0062e	45 3b c1	 cmp	 r8d, r9d
  00631	76 15		 jbe	 SHORT $LN22@deflate
  00633	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  00636	45 2b c1	 sub	 r8d, r9d
  00639	41 8b d1	 mov	 edx, r9d
  0063c	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  00640	e8 00 00 00 00	 call	 crc32
  00645	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN22@deflate:

; 1126 :                     flush_pending(strm);

  00648	48 8b cf	 mov	 rcx, rdi
  0064b	e8 00 00 00 00	 call	 flush_pending

; 1127 :                     if (s->pending != 0) {

  00650	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00653	0f 85 c7 02 00
	00		 jne	 $LN152@deflate

; 1128 :                         s->last_flush = -1;
; 1129 :                         return Z_OK;
; 1130 :                     }
; 1131 :                     beg = 0;

  00659	44 8b ce	 mov	 r9d, esi
  0065c	44 8b c6	 mov	 r8d, esi
$LN73@deflate:

; 1132 :                 }
; 1133 :                 val = s->gzhead->comment[s->gzindex++];

  0065f	8b 4b 38	 mov	 ecx, DWORD PTR [rbx+56]
  00662	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00665	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00669	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0066d	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]

; 1134 :                 put_byte(s, val);

  00670	41 8b c8	 mov	 ecx, r8d
  00673	89 43 38	 mov	 DWORD PTR [rbx+56], eax
  00676	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0067a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0067d	44 8b 43 28	 mov	 r8d, DWORD PTR [rbx+40]
  00681	41 ff c0	 inc	 r8d
  00684	44 89 43 28	 mov	 DWORD PTR [rbx+40], r8d

; 1135 :             } while (val != 0);

  00688	84 d2		 test	 dl, dl
  0068a	75 94		 jne	 SHORT $LL21@deflate

; 1136 :             HCRC_UPDATE(beg);

  0068c	49 8b 06	 mov	 rax, QWORD PTR [r14]
  0068f	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  00692	74 1a		 je	 SHORT $LN26@deflate
  00694	45 3b c1	 cmp	 r8d, r9d
  00697	76 15		 jbe	 SHORT $LN26@deflate
  00699	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  0069c	45 2b c1	 sub	 r8d, r9d
  0069f	41 8b d1	 mov	 edx, r9d
  006a2	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  006a6	e8 00 00 00 00	 call	 crc32
  006ab	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN26@deflate:

; 1137 :         }
; 1138 :         s->status = HCRC_STATE;

  006ae	c7 43 08 67 00
	00 00		 mov	 DWORD PTR [rbx+8], 103	; 00000067H
  006b5	eb 05		 jmp	 SHORT $LN148@deflate
$LN146@deflate:

; 1139 :     }
; 1140 :     if (s->status == HCRC_STATE) {

  006b7	83 f9 67	 cmp	 ecx, 103		; 00000067H
  006ba	75 6e		 jne	 SHORT $LN134@deflate
$LN148@deflate:

; 1141 :         if (s->gzhead->hcrc) {

  006bc	49 8b 06	 mov	 rax, QWORD PTR [r14]
  006bf	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  006c2	74 4e		 je	 SHORT $LN78@deflate

; 1142 :             if (s->pending + 2 > s->pending_buf_size) {

  006c4	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  006c7	8d 41 02	 lea	 eax, DWORD PTR [rcx+2]
  006ca	3b 45 00	 cmp	 eax, DWORD PTR [rbp]
  006cd	76 13		 jbe	 SHORT $LN133@deflate

; 1143 :                 flush_pending(strm);

  006cf	48 8b cf	 mov	 rcx, rdi
  006d2	e8 00 00 00 00	 call	 flush_pending

; 1144 :                 if (s->pending != 0) {

  006d7	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  006da	85 c9		 test	 ecx, ecx
  006dc	0f 85 3e 02 00
	00		 jne	 $LN152@deflate
$LN133@deflate:

; 1145 :                     s->last_flush = -1;
; 1146 :                     return Z_OK;
; 1147 :                 }
; 1148 :             }
; 1149 :             put_byte(s, (Byte)(strm->adler & 0xff));

  006e2	0f b6 47 4c	 movzx	 eax, BYTE PTR [rdi+76]

; 1150 :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 1151 :             strm->adler = crc32(0L, Z_NULL, 0);

  006e6	45 33 c0	 xor	 r8d, r8d
  006e9	8b d1		 mov	 edx, ecx
  006eb	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  006ef	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  006f2	ff 43 28	 inc	 DWORD PTR [rbx+40]
  006f5	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  006f8	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  006fc	0f b6 47 4d	 movzx	 eax, BYTE PTR [rdi+77]
  00700	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00703	33 d2		 xor	 edx, edx
  00705	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00708	33 c9		 xor	 ecx, ecx
  0070a	e8 00 00 00 00	 call	 crc32
  0070f	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN78@deflate:

; 1152 :         }
; 1153 :         s->status = BUSY_STATE;
; 1154 : 
; 1155 :         /* Compression must start with an empty pending buffer */
; 1156 :         flush_pending(strm);

  00712	48 8b cf	 mov	 rcx, rdi
  00715	c7 43 08 71 00
	00 00		 mov	 DWORD PTR [rbx+8], 113	; 00000071H
  0071c	e8 00 00 00 00	 call	 flush_pending

; 1157 :         if (s->pending != 0) {

  00721	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00724	0f 85 f6 01 00
	00		 jne	 $LN152@deflate
$LN134@deflate:

; 1158 :             s->last_flush = -1;
; 1159 :             return Z_OK;
; 1160 :         }
; 1161 :     }
; 1162 : #endif
; 1163 : 
; 1164 :     /* Start a new block or continue the current one.
; 1165 :      */
; 1166 :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  0072a	39 77 08	 cmp	 DWORD PTR [rdi+8], esi
  0072d	75 1e		 jne	 SHORT $LN83@deflate
  0072f	39 b3 9c 00 00
	00		 cmp	 DWORD PTR [rbx+156], esi
  00735	75 16		 jne	 SHORT $LN83@deflate
  00737	45 85 ed	 test	 r13d, r13d
  0073a	0f 84 e7 01 00
	00		 je	 $LN88@deflate
  00740	81 7b 08 9a 02
	00 00		 cmp	 DWORD PTR [rbx+8], 666	; 0000029aH
  00747	0f 84 ea 00 00
	00		 je	 $LN95@deflate
$LN83@deflate:

; 1167 :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 1168 :         block_state bstate;
; 1169 : 
; 1170 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  0074d	48 63 8b ac 00
	00 00		 movsxd	 rcx, DWORD PTR [rbx+172]
  00754	41 8b d5	 mov	 edx, r13d
  00757	85 c9		 test	 ecx, ecx
  00759	75 0a		 jne	 SHORT $LN114@deflate
  0075b	48 8b cb	 mov	 rcx, rbx
  0075e	e8 00 00 00 00	 call	 deflate_stored
  00763	eb 38		 jmp	 SHORT $LN240@deflate
$LN114@deflate:
  00765	8b 83 b0 00 00
	00		 mov	 eax, DWORD PTR [rbx+176]
  0076b	83 f8 02	 cmp	 eax, 2
  0076e	75 0a		 jne	 SHORT $LN112@deflate
  00770	48 8b cb	 mov	 rcx, rbx
  00773	e8 00 00 00 00	 call	 deflate_huff
  00778	eb 23		 jmp	 SHORT $LN240@deflate
$LN112@deflate:
  0077a	83 f8 03	 cmp	 eax, 3
  0077d	75 0a		 jne	 SHORT $LN110@deflate
  0077f	48 8b cb	 mov	 rcx, rbx
  00782	e8 00 00 00 00	 call	 deflate_rle
  00787	eb 14		 jmp	 SHORT $LN240@deflate
$LN110@deflate:
  00789	48 8b c1	 mov	 rax, rcx
  0078c	4c 8d 05 08 00
	00 00		 lea	 r8, OFFSET FLAT:configuration_table+8
  00793	48 03 c0	 add	 rax, rax
  00796	48 8b cb	 mov	 rcx, rbx
  00799	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]
$LN240@deflate:

; 1171 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1172 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1173 :                  (*(configuration_table[s->level].func))(s, flush);
; 1174 : 
; 1175 :         if (bstate == finish_started || bstate == finish_done) {

  0079d	8b c8		 mov	 ecx, eax
  0079f	8d 40 fe	 lea	 eax, DWORD PTR [rax-2]
  007a2	83 f8 01	 cmp	 eax, 1
  007a5	77 07		 ja	 SHORT $LN84@deflate

; 1176 :             s->status = FINISH_STATE;

  007a7	c7 43 08 9a 02
	00 00		 mov	 DWORD PTR [rbx+8], 666	; 0000029aH
$LN84@deflate:

; 1177 :         }
; 1178 :         if (bstate == need_more || bstate == finish_started) {

  007ae	f7 c1 fd ff ff
	ff		 test	 ecx, -3			; fffffffdH
  007b4	0f 84 61 01 00
	00		 je	 $LN87@deflate

; 1183 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1184 :              * of deflate should use the same flush parameter to make sure
; 1185 :              * that the flush is complete. So we don't have to output an
; 1186 :              * empty block here, this will be done at next call. This also
; 1187 :              * ensures that for a very small output buffer, we emit at most
; 1188 :              * one empty block.
; 1189 :              */
; 1190 :         }
; 1191 :         if (bstate == block_done) {

  007ba	83 f9 01	 cmp	 ecx, 1
  007bd	75 78		 jne	 SHORT $LN95@deflate

; 1192 :             if (flush == Z_PARTIAL_FLUSH) {

  007bf	44 3b e9	 cmp	 r13d, ecx
  007c2	75 0a		 jne	 SHORT $LN90@deflate

; 1193 :                 _tr_align(s);

  007c4	48 8b cb	 mov	 rcx, rbx
  007c7	e8 00 00 00 00	 call	 _tr_align
  007cc	eb 58		 jmp	 SHORT $LN94@deflate
$LN90@deflate:

; 1194 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  007ce	41 83 fd 05	 cmp	 r13d, 5
  007d2	74 52		 je	 SHORT $LN94@deflate

; 1195 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  007d4	45 33 c9	 xor	 r9d, r9d
  007d7	45 33 c0	 xor	 r8d, r8d
  007da	33 d2		 xor	 edx, edx
  007dc	48 8b cb	 mov	 rcx, rbx
  007df	e8 00 00 00 00	 call	 _tr_stored_block

; 1196 :                 /* For a full flush, this empty block will be recognized
; 1197 :                  * as a special marker by inflate_sync().
; 1198 :                  */
; 1199 :                 if (flush == Z_FULL_FLUSH) {

  007e4	41 83 fd 03	 cmp	 r13d, 3
  007e8	75 3c		 jne	 SHORT $LN94@deflate

; 1200 :                     CLEAR_HASH(s);             /* forget history */

  007ea	8b 4b 74	 mov	 ecx, DWORD PTR [rbx+116]
  007ed	33 d2		 xor	 edx, edx
  007ef	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  007f3	ff c9		 dec	 ecx
  007f5	66 89 34 48	 mov	 WORD PTR [rax+rcx*2], si
  007f9	44 8b 43 74	 mov	 r8d, DWORD PTR [rbx+116]
  007fd	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00801	41 ff c8	 dec	 r8d
  00804	4d 03 c0	 add	 r8, r8
  00807	e8 00 00 00 00	 call	 memset

; 1201 :                     if (s->lookahead == 0) {

  0080c	39 b3 9c 00 00
	00		 cmp	 DWORD PTR [rbx+156], esi
  00812	75 12		 jne	 SHORT $LN94@deflate

; 1202 :                         s->strstart = 0;

  00814	89 b3 94 00 00
	00		 mov	 DWORD PTR [rbx+148], esi

; 1203 :                         s->block_start = 0L;

  0081a	89 b3 84 00 00
	00		 mov	 DWORD PTR [rbx+132], esi

; 1204 :                         s->insert = 0;

  00820	89 b3 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], esi
$LN94@deflate:

; 1205 :                     }
; 1206 :                 }
; 1207 :             }
; 1208 :             flush_pending(strm);

  00826	48 8b cf	 mov	 rcx, rdi
  00829	e8 00 00 00 00	 call	 flush_pending

; 1209 :             if (strm->avail_out == 0) {

  0082e	39 77 18	 cmp	 DWORD PTR [rdi+24], esi
  00831	0f 84 e9 00 00
	00		 je	 $LN152@deflate
$LN95@deflate:

; 1210 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1211 :               return Z_OK;
; 1212 :             }
; 1213 :         }
; 1214 :     }
; 1215 : 
; 1216 :     if (flush != Z_FINISH) return Z_OK;

  00837	41 83 fd 04	 cmp	 r13d, 4
  0083b	0f 85 e6 00 00
	00		 jne	 $LN88@deflate

; 1217 :     if (s->wrap <= 0) return Z_STREAM_END;

  00841	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  00844	85 c0		 test	 eax, eax
  00846	7f 09		 jg	 SHORT $LN97@deflate
  00848	41 8d 45 fd	 lea	 eax, QWORD PTR [r13-3]
  0084c	e9 a3 f8 ff ff	 jmp	 $LN239@deflate
$LN97@deflate:

; 1218 : 
; 1219 :     /* Write the trailer */
; 1220 : #ifdef GZIP
; 1221 :     if (s->wrap == 2) {

  00851	83 f8 02	 cmp	 eax, 2
  00854	0f 85 8a 00 00
	00		 jne	 $LN98@deflate

; 1222 :         put_byte(s, (Byte)(strm->adler & 0xff));

  0085a	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0085d	0f b6 47 4c	 movzx	 eax, BYTE PTR [rdi+76]
  00861	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00865	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00868	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0086b	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1223 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  0086e	0f b6 47 4d	 movzx	 eax, BYTE PTR [rdi+77]
  00872	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00876	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00879	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0087c	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1224 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  0087f	0f b6 47 4e	 movzx	 eax, BYTE PTR [rdi+78]
  00883	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00887	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0088a	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0088d	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1225 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  00890	0f b6 47 4f	 movzx	 eax, BYTE PTR [rdi+79]
  00894	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00898	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0089b	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0089e	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1226 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  008a1	0f b6 47 0c	 movzx	 eax, BYTE PTR [rdi+12]
  008a5	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  008a9	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  008ac	ff 43 28	 inc	 DWORD PTR [rbx+40]
  008af	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1227 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  008b2	0f b6 47 0d	 movzx	 eax, BYTE PTR [rdi+13]
  008b6	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  008ba	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  008bd	ff 43 28	 inc	 DWORD PTR [rbx+40]
  008c0	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1228 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  008c3	0f b6 47 0e	 movzx	 eax, BYTE PTR [rdi+14]
  008c7	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  008cb	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  008ce	ff 43 28	 inc	 DWORD PTR [rbx+40]
  008d1	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1229 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  008d4	0f b6 47 0f	 movzx	 eax, BYTE PTR [rdi+15]
  008d8	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  008dc	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  008df	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 1230 :     }

  008e2	eb 15		 jmp	 SHORT $LN99@deflate
$LN98@deflate:

; 1231 :     else
; 1232 : #endif
; 1233 :     {
; 1234 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  008e4	0f b7 57 4e	 movzx	 edx, WORD PTR [rdi+78]
  008e8	48 8b cb	 mov	 rcx, rbx
  008eb	e8 00 00 00 00	 call	 putShortMSB

; 1235 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  008f0	0f b7 57 4c	 movzx	 edx, WORD PTR [rdi+76]
  008f4	e8 00 00 00 00	 call	 putShortMSB
$LN99@deflate:

; 1236 :     }
; 1237 :     flush_pending(strm);

  008f9	48 8b cf	 mov	 rcx, rdi
  008fc	e8 00 00 00 00	 call	 flush_pending

; 1238 :     /* If avail_out is zero, the application will call deflate again
; 1239 :      * to flush the rest.
; 1240 :      */
; 1241 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  00901	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  00904	85 c0		 test	 eax, eax
  00906	7e 05		 jle	 SHORT $LN100@deflate
  00908	f7 d8		 neg	 eax
  0090a	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
$LN100@deflate:

; 1242 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  0090d	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00910	40 0f 94 c6	 sete	 sil
  00914	8b c6		 mov	 eax, esi
  00916	e9 d9 f7 ff ff	 jmp	 $LN239@deflate
$LN87@deflate:

; 1179 :             if (strm->avail_out == 0) {

  0091b	39 77 18	 cmp	 DWORD PTR [rdi+24], esi
  0091e	75 07		 jne	 SHORT $LN88@deflate
$LN152@deflate:

; 1180 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

  00920	c7 43 40 ff ff
	ff ff		 mov	 DWORD PTR [rbx+64], -1
$LN88@deflate:

; 1181 :             }
; 1182 :             return Z_OK;

  00927	33 c0		 xor	 eax, eax
  00929	e9 c6 f7 ff ff	 jmp	 $LN239@deflate
$LN34@deflate:
  0092e	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]

; 945  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 946  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  00933	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@MKKNPMJD@stream?5error@
  0093a	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
  0093e	b8 fe ff ff ff	 mov	 eax, -2

; 1243 : }

  00943	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00947	41 5d		 pop	 r13
  00949	5f		 pop	 rdi
  0094a	c3		 ret	 0
$LN32@deflate:

; 939  :         return Z_STREAM_ERROR;

  0094b	b8 fe ff ff ff	 mov	 eax, -2

; 1243 : }

  00950	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00954	41 5d		 pop	 r13
  00956	5f		 pop	 rdi
  00957	c3		 ret	 0
deflate	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateEnd
_TEXT	SEGMENT
strm$ = 48
deflateEnd PROC						; COMDAT

; 1246 : int ZEXPORT deflateEnd(z_streamp strm) {

$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1247 :     int status;
; 1248 : 
; 1249 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00009	e8 00 00 00 00	 call	 deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0b		 je	 SHORT $LN2@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2

; 1263 : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN2@deflateEnd:

; 1250 : 
; 1251 :     status = strm->state->status;

  0001d	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00021	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00026	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0002b	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi

; 1252 : 
; 1253 :     /* Deallocate in reverse order of allocations: */
; 1254 :     TRY_FREE(strm, strm->state->pending_buf);

  00030	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00034	8b 68 08	 mov	 ebp, DWORD PTR [rax+8]
  00037	48 85 d2	 test	 rdx, rdx
  0003a	74 07		 je	 SHORT $LN8@deflateEnd
  0003c	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00040	ff 53 38	 call	 QWORD PTR [rbx+56]
$LN8@deflateEnd:

; 1255 :     TRY_FREE(strm, strm->state->head);

  00043	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00047	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  0004b	48 85 d2	 test	 rdx, rdx
  0004e	74 07		 je	 SHORT $LN4@deflateEnd
  00050	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00054	ff 53 38	 call	 QWORD PTR [rbx+56]
$LN4@deflateEnd:

; 1256 :     TRY_FREE(strm, strm->state->prev);

  00057	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0005b	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0005f	48 85 d2	 test	 rdx, rdx
  00062	74 07		 je	 SHORT $LN5@deflateEnd
  00064	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00068	ff 53 38	 call	 QWORD PTR [rbx+56]
$LN5@deflateEnd:

; 1257 :     TRY_FREE(strm, strm->state->window);

  0006b	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0006f	48 8b 50 50	 mov	 rdx, QWORD PTR [rax+80]
  00073	48 85 d2	 test	 rdx, rdx
  00076	74 07		 je	 SHORT $LN6@deflateEnd
  00078	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0007c	ff 53 38	 call	 QWORD PTR [rbx+56]
$LN6@deflateEnd:

; 1258 : 
; 1259 :     ZFREE(strm, strm->state);

  0007f	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
  00083	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00087	ff 53 38	 call	 QWORD PTR [rbx+56]

; 1260 :     strm->state = Z_NULL;
; 1261 : 
; 1262 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  0008a	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0008f	33 c0		 xor	 eax, eax
  00091	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00096	83 fd 71	 cmp	 ebp, 113		; 00000071H
  00099	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  0009e	b9 fd ff ff ff	 mov	 ecx, -3
  000a3	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  000a7	0f 44 c1	 cmove	 eax, ecx

; 1263 : }

  000aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ae	5b		 pop	 rbx
  000af	c3		 ret	 0
deflateEnd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateInit_
_TEXT	SEGMENT
strm$ = 80
level$ = 88
version$ = 96
stream_size$ = 104
deflateInit_ PROC					; COMDAT

; 372  :                          int stream_size) {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 373  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00004	44 89 4c 24 38	 mov	 DWORD PTR [rsp+56], r9d
  00009	41 b9 0f 00 00
	00		 mov	 r9d, 15
  0000f	4c 89 44 24 30	 mov	 QWORD PTR [rsp+48], r8
  00014	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0001c	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  00024	45 8d 41 f9	 lea	 r8d, QWORD PTR [r9-7]
  00028	e8 00 00 00 00	 call	 deflateInit2_

; 374  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 375  :     /* To do: ignore strm->next_in if we use it as window */
; 376  : }

  0002d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00031	c3		 ret	 0
deflateInit_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT slide_hash
_TEXT	SEGMENT
s$ = 8
slide_hash PROC						; COMDAT

; 187  : local void slide_hash(deflate_state *s) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx

; 188  :     unsigned n, m;
; 189  :     Posf *p;
; 190  :     uInt wsize = s->w_size;
; 191  : 
; 192  :     n = s->hash_size;

  00005	44 8b 51 74	 mov	 r10d, DWORD PTR [rcx+116]

; 193  :     p = &s->head[n];

  00009	33 db		 xor	 ebx, ebx
  0000b	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000f	44 8b 41 44	 mov	 r8d, DWORD PTR [rcx+68]
  00013	4e 8d 0c 50	 lea	 r9, QWORD PTR [rax+r10*2]
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@slide_hash:

; 194  :     do {
; 195  :         m = *--p;

  00020	41 0f b7 51 fe	 movzx	 edx, WORD PTR [r9-2]
  00025	4d 8d 49 fe	 lea	 r9, QWORD PTR [r9-2]

; 196  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00029	0f b7 c2	 movzx	 eax, dx
  0002c	66 41 2b c0	 sub	 ax, r8w
  00030	41 3b d0	 cmp	 edx, r8d
  00033	66 0f 42 c3	 cmovb	 ax, bx
  00037	66 41 89 01	 mov	 WORD PTR [r9], ax

; 197  :     } while (--n);

  0003b	41 83 c2 ff	 add	 r10d, -1		; ffffffffH
  0003f	75 df		 jne	 SHORT $LL4@slide_hash

; 198  :     n = wsize;
; 199  : #ifndef FASTEST
; 200  :     p = &s->prev[n];

  00041	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00045	45 8b c8	 mov	 r9d, r8d
  00048	4a 8d 14 40	 lea	 rdx, QWORD PTR [rax+r8*2]
  0004c	0f 1f 40 00	 npad	 4
$LL7@slide_hash:

; 201  :     do {
; 202  :         m = *--p;

  00050	0f b7 4a fe	 movzx	 ecx, WORD PTR [rdx-2]
  00054	48 8d 52 fe	 lea	 rdx, QWORD PTR [rdx-2]

; 203  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00058	0f b7 c1	 movzx	 eax, cx
  0005b	66 41 2b c0	 sub	 ax, r8w
  0005f	41 3b c8	 cmp	 ecx, r8d
  00062	66 0f 42 c3	 cmovb	 ax, bx
  00066	66 89 02	 mov	 WORD PTR [rdx], ax

; 204  :         /* If n is not on any hash chain, prev[n] is garbage but
; 205  :          * its value will never be used.
; 206  :          */
; 207  :     } while (--n);

  00069	41 83 c1 ff	 add	 r9d, -1			; ffffffffH
  0006d	75 e1		 jne	 SHORT $LL7@slide_hash

; 208  : #endif
; 209  : }

  0006f	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00074	c3		 ret	 0
slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT read_buf
_TEXT	SEGMENT
strm$ = 48
buf$ = 56
size$ = 64
read_buf PROC						; COMDAT

; 218  : local unsigned read_buf(z_streamp strm, Bytef *buf, unsigned size) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 219  :     unsigned len = strm->avail_in;

  0000f	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  00012	48 8b f2	 mov	 rsi, rdx

; 220  : 
; 221  :     if (len > size) len = size;

  00015	41 3b c0	 cmp	 eax, r8d
  00018	8b f8		 mov	 edi, eax
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	41 0f 47 f8	 cmova	 edi, r8d

; 222  :     if (len == 0) return 0;

  00021	85 ff		 test	 edi, edi
  00023	75 12		 jne	 SHORT $LN3@read_buf
  00025	33 c0		 xor	 eax, eax

; 239  : }

  00027	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0002c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
$LN3@read_buf:

; 223  : 
; 224  :     strm->avail_in  -= len;
; 225  : 
; 226  :     zmemcpy(buf, strm->next_in, len);

  00037	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0003a	2b c7		 sub	 eax, edi
  0003c	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  0003f	48 8b ce	 mov	 rcx, rsi
  00042	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00047	44 8b c7	 mov	 r8d, edi
  0004a	8b ef		 mov	 ebp, edi
  0004c	e8 00 00 00 00	 call	 memcpy

; 227  :     if (strm->state->wrap == 1) {

  00051	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00055	8b 48 2c	 mov	 ecx, DWORD PTR [rax+44]
  00058	83 f9 01	 cmp	 ecx, 1
  0005b	75 10		 jne	 SHORT $LN4@read_buf

; 228  :         strm->adler = adler32(strm->adler, buf, len);

  0005d	8b 4b 4c	 mov	 ecx, DWORD PTR [rbx+76]
  00060	44 8b c7	 mov	 r8d, edi
  00063	48 8b d6	 mov	 rdx, rsi
  00066	e8 00 00 00 00	 call	 adler32

; 229  :     }

  0006b	eb 13		 jmp	 SHORT $LN11@read_buf
$LN4@read_buf:

; 230  : #ifdef GZIP
; 231  :     else if (strm->state->wrap == 2) {

  0006d	83 f9 02	 cmp	 ecx, 2
  00070	75 11		 jne	 SHORT $LN6@read_buf

; 232  :         strm->adler = crc32(strm->adler, buf, len);

  00072	8b 4b 4c	 mov	 ecx, DWORD PTR [rbx+76]
  00075	44 8b c7	 mov	 r8d, edi
  00078	48 8b d6	 mov	 rdx, rsi
  0007b	e8 00 00 00 00	 call	 crc32
$LN11@read_buf:

; 233  :     }
; 234  : #endif
; 235  :     strm->next_in  += len;

  00080	89 43 4c	 mov	 DWORD PTR [rbx+76], eax
$LN6@read_buf:
  00083	48 01 2b	 add	 QWORD PTR [rbx], rbp

; 236  :     strm->total_in += len;
; 237  : 
; 238  :     return len;

  00086	8b c7		 mov	 eax, edi
  00088	01 7b 0c	 add	 DWORD PTR [rbx+12], edi

; 239  : }

  0008b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00090	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00095	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT fill_window
_TEXT	SEGMENT
s$ = 48
fill_window PROC					; COMDAT

; 251  : local void fill_window(deflate_state *s) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 252  :     unsigned n;
; 253  :     unsigned more;    /* Amount of free space at the end of the window. */
; 254  :     uInt wsize = s->w_size;

  0000f	8b 71 44	 mov	 esi, DWORD PTR [rcx+68]
  00012	48 8b d9	 mov	 rbx, rcx
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@fill_windo:

; 255  : 
; 256  :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 257  : 
; 258  :     do {
; 259  :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  00020	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  00026	8b 7b 58	 mov	 edi, DWORD PTR [rbx+88]
  00029	2b bb 9c 00 00
	00		 sub	 edi, DWORD PTR [rbx+156]

; 260  : 
; 261  :         /* Deal with !@#$% 64K limit: */
; 262  :         if (sizeof(int) <= 2) {
; 263  :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 264  :                 more = wsize;
; 265  : 
; 266  :             } else if (more == (unsigned)(-1)) {
; 267  :                 /* Very unlikely, but possible on 16 bit machine if
; 268  :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 269  :                  */
; 270  :                 more--;
; 271  :             }
; 272  :         }
; 273  : 
; 274  :         /* If the window is almost full and there is insufficient lookahead,
; 275  :          * move the upper half to the lower one to make room in the upper half.
; 276  :          */
; 277  :         if (s->strstart >= wsize + MAX_DIST(s)) {

  0002f	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  00032	2b fa		 sub	 edi, edx
  00034	81 c1 fa fe ff
	ff		 add	 ecx, -262		; fffffefaH
  0003a	03 ce		 add	 ecx, esi
  0003c	3b d1		 cmp	 edx, ecx
  0003e	72 45		 jb	 SHORT $LN11@fill_windo

; 278  : 
; 279  :             zmemcpy(s->window, s->window + wsize, (unsigned)wsize - more);

  00040	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  00044	44 8b c6	 mov	 r8d, esi
  00047	44 2b c7	 sub	 r8d, edi
  0004a	48 8d 14 31	 lea	 rdx, QWORD PTR [rcx+rsi]
  0004e	e8 00 00 00 00	 call	 memcpy

; 280  :             s->match_start -= wsize;
; 281  :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  00053	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00059	29 b3 98 00 00
	00		 sub	 DWORD PTR [rbx+152], esi
  0005f	2b c6		 sub	 eax, esi

; 282  :             s->block_start -= (long) wsize;

  00061	29 b3 84 00 00
	00		 sub	 DWORD PTR [rbx+132], esi
  00067	89 83 94 00 00
	00		 mov	 DWORD PTR [rbx+148], eax

; 283  :             if (s->insert > s->strstart)

  0006d	39 83 08 17 00
	00		 cmp	 DWORD PTR [rbx+5896], eax
  00073	76 06		 jbe	 SHORT $LN30@fill_windo

; 284  :                 s->insert = s->strstart;

  00075	89 83 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], eax
$LN30@fill_windo:

; 285  :             slide_hash(s);

  0007b	48 8b cb	 mov	 rcx, rbx
  0007e	e8 00 00 00 00	 call	 slide_hash

; 286  :             more += wsize;

  00083	03 fe		 add	 edi, esi
$LN11@fill_windo:

; 287  :         }
; 288  :         if (s->strm->avail_in == 0) break;

  00085	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00088	83 79 08 00	 cmp	 DWORD PTR [rcx+8], 0
  0008c	0f 84 03 01 00
	00		 je	 $LN3@fill_windo

; 289  : 
; 290  :         /* If there was no sliding:
; 291  :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 292  :          *    more == window_size - lookahead - strstart
; 293  :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 294  :          * => more >= window_size - 2*WSIZE + 2
; 295  :          * In the BIG_MEM or MMAP case (not yet supported),
; 296  :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 297  :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 298  :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 299  :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 300  :          */
; 301  :         Assert(more >= 2, "more < 2");
; 302  : 
; 303  :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  00092	8b 93 9c 00 00
	00		 mov	 edx, DWORD PTR [rbx+156]
  00098	44 8b c7	 mov	 r8d, edi
  0009b	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  000a1	48 03 d0	 add	 rdx, rax
  000a4	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  000a8	e8 00 00 00 00	 call	 read_buf

; 304  :         s->lookahead += n;

  000ad	44 8b 8b 9c 00
	00 00		 mov	 r9d, DWORD PTR [rbx+156]

; 305  : 
; 306  :         /* Initialize the hash value now that we have some input: */
; 307  :         if (s->lookahead + s->insert >= MIN_MATCH) {

  000b4	44 8b 9b 08 17
	00 00		 mov	 r11d, DWORD PTR [rbx+5896]
  000bb	44 03 c8	 add	 r9d, eax
  000be	44 89 8b 9c 00
	00 00		 mov	 DWORD PTR [rbx+156], r9d
  000c5	43 8d 04 19	 lea	 eax, DWORD PTR [r9+r11]
  000c9	83 f8 03	 cmp	 eax, 3
  000cc	0f 82 ad 00 00
	00		 jb	 $LN2@fill_windo

; 308  :             uInt str = s->strstart - s->insert;

  000d2	44 8b 93 94 00
	00 00		 mov	 r10d, DWORD PTR [rbx+148]

; 309  :             s->ins_h = s->window[str];

  000d9	48 8b 53 50	 mov	 rdx, QWORD PTR [rbx+80]
  000dd	45 2b d3	 sub	 r10d, r11d

; 310  :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  000e0	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  000e6	45 0f b6 04 12	 movzx	 r8d, BYTE PTR [r10+rdx]
  000eb	41 8d 42 01	 lea	 eax, DWORD PTR [r10+1]
  000ef	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  000f3	0f b6 04 10	 movzx	 eax, BYTE PTR [rax+rdx]
  000f7	41 d3 e0	 shl	 r8d, cl
  000fa	41 33 c0	 xor	 eax, r8d
  000fd	23 43 7c	 and	 eax, DWORD PTR [rbx+124]
  00100	89 43 70	 mov	 DWORD PTR [rbx+112], eax

; 311  : #if MIN_MATCH != 3
; 312  :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 313  : #endif
; 314  :             while (s->insert) {

  00103	45 85 db	 test	 r11d, r11d
  00106	74 77		 je	 SHORT $LN2@fill_windo

; 308  :             uInt str = s->strstart - s->insert;

  00108	45 8d 5a 02	 lea	 r11d, DWORD PTR [r10+2]
  0010c	0f 1f 40 00	 npad	 4
$LL5@fill_windo:

; 315  :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00110	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00114	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]

; 316  : #ifndef FASTEST
; 317  :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  0011a	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0011e	45 8b c2	 mov	 r8d, r10d
  00121	45 0f b6 0c 03	 movzx	 r9d, BYTE PTR [r11+rax]

; 318  : #endif
; 319  :                 s->head[s->ins_h] = (Pos)str;
; 320  :                 str++;

  00126	45 8d 5b 01	 lea	 r11d, DWORD PTR [r11+1]
  0012a	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  0012d	d3 e0		 shl	 eax, cl
  0012f	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00133	44 33 c8	 xor	 r9d, eax
  00136	44 23 4b 7c	 and	 r9d, DWORD PTR [rbx+124]
  0013a	8b 43 4c	 mov	 eax, DWORD PTR [rbx+76]
  0013d	4c 23 c0	 and	 r8, rax
  00140	44 89 4b 70	 mov	 DWORD PTR [rbx+112], r9d
  00144	42 0f b7 04 4a	 movzx	 eax, WORD PTR [rdx+r9*2]
  00149	66 42 89 04 41	 mov	 WORD PTR [rcx+r8*2], ax
  0014e	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  00151	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00155	66 44 89 14 48	 mov	 WORD PTR [rax+rcx*2], r10w
  0015a	41 ff c2	 inc	 r10d

; 321  :                 s->insert--;

  0015d	8b 8b 08 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5896]

; 322  :                 if (s->lookahead + s->insert < MIN_MATCH)

  00163	44 8b 8b 9c 00
	00 00		 mov	 r9d, DWORD PTR [rbx+156]
  0016a	ff c9		 dec	 ecx
  0016c	89 8b 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], ecx
  00172	41 8d 04 09	 lea	 eax, DWORD PTR [r9+rcx]
  00176	83 f8 03	 cmp	 eax, 3
  00179	72 04		 jb	 SHORT $LN2@fill_windo

; 311  : #if MIN_MATCH != 3
; 312  :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 313  : #endif
; 314  :             while (s->insert) {

  0017b	85 c9		 test	 ecx, ecx
  0017d	75 91		 jne	 SHORT $LL5@fill_windo
$LN2@fill_windo:

; 323  :                     break;
; 324  :             }
; 325  :         }
; 326  :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 327  :          * but this is not important since only literal bytes will be emitted.
; 328  :          */
; 329  : 
; 330  :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  0017f	41 81 f9 06 01
	00 00		 cmp	 r9d, 262		; 00000106H
  00186	73 0d		 jae	 SHORT $LN3@fill_windo
  00188	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0018b	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0018f	0f 85 8b fe ff
	ff		 jne	 $LL4@fill_windo
$LN3@fill_windo:

; 331  : 
; 332  :     /* If the WIN_INIT bytes after the end of the current data have never been
; 333  :      * written, then zero those bytes in order to avoid memory check reports of
; 334  :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 335  :      * the longest match routines.  Update the high water mark for the next
; 336  :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 337  :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 338  :      */
; 339  :     if (s->high_water < s->window_size) {

  00195	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  0019b	8b 7b 58	 mov	 edi, DWORD PTR [rbx+88]
  0019e	3b cf		 cmp	 ecx, edi
  001a0	73 72		 jae	 SHORT $LN21@fill_windo

; 340  :         ulg curr = s->strstart + (ulg)(s->lookahead);

  001a2	8b b3 9c 00 00
	00		 mov	 esi, DWORD PTR [rbx+156]
  001a8	03 b3 94 00 00
	00		 add	 esi, DWORD PTR [rbx+148]

; 341  :         ulg init;
; 342  : 
; 343  :         if (s->high_water < curr) {

  001ae	3b ce		 cmp	 ecx, esi
  001b0	73 35		 jae	 SHORT $LN18@fill_windo

; 344  :             /* Previous high water mark below current data -- zero WIN_INIT
; 345  :              * bytes or up to end of window, whichever is less.
; 346  :              */
; 347  :             init = s->window_size - curr;

  001b2	2b fe		 sub	 edi, esi

; 348  :             if (init > WIN_INIT)
; 349  :                 init = WIN_INIT;
; 350  :             zmemzero(s->window + curr, (unsigned)init);

  001b4	8b ce		 mov	 ecx, esi
  001b6	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  001bb	3b f8		 cmp	 edi, eax
  001bd	0f 47 f8	 cmova	 edi, eax
  001c0	48 03 4b 50	 add	 rcx, QWORD PTR [rbx+80]
  001c4	44 8b c7	 mov	 r8d, edi
  001c7	33 d2		 xor	 edx, edx
  001c9	e8 00 00 00 00	 call	 memset

; 351  :             s->high_water = curr + init;

  001ce	8d 04 37	 lea	 eax, DWORD PTR [rdi+rsi]
  001d1	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax

; 363  :         }
; 364  :     }
; 365  : 
; 366  :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 367  :            "not enough room for search");
; 368  : }

  001d7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001dc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001e1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e5	5f		 pop	 rdi
  001e6	c3		 ret	 0
$LN18@fill_windo:

; 352  :         }
; 353  :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  001e7	8d 86 02 01 00
	00		 lea	 eax, DWORD PTR [rsi+258]
  001ed	3b c8		 cmp	 ecx, eax
  001ef	73 23		 jae	 SHORT $LN21@fill_windo

; 354  :             /* High water mark at or above current data, but below current data
; 355  :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 356  :              * to end of window, whichever is less.
; 357  :              */
; 358  :             init = (ulg)curr + WIN_INIT - s->high_water;
; 359  :             if (init > s->window_size - s->high_water)

  001f1	2b f9		 sub	 edi, ecx
  001f3	2b f1		 sub	 esi, ecx
  001f5	8d 86 02 01 00
	00		 lea	 eax, DWORD PTR [rsi+258]

; 360  :                 init = s->window_size - s->high_water;
; 361  :             zmemzero(s->window + s->high_water, (unsigned)init);

  001fb	3b c7		 cmp	 eax, edi
  001fd	0f 46 f8	 cmovbe	 edi, eax
  00200	48 03 4b 50	 add	 rcx, QWORD PTR [rbx+80]
  00204	44 8b c7	 mov	 r8d, edi
  00207	33 d2		 xor	 edx, edx
  00209	e8 00 00 00 00	 call	 memset

; 362  :             s->high_water += init;

  0020e	01 bb 14 17 00
	00		 add	 DWORD PTR [rbx+5908], edi
$LN21@fill_windo:

; 363  :         }
; 364  :     }
; 365  : 
; 366  :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 367  :            "not enough room for search");
; 368  : }

  00214	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00219	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0021e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00222	5f		 pop	 rdi
  00223	c3		 ret	 0
fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateInit2_
_TEXT	SEGMENT
strm$ = 80
level$ = 88
method$ = 96
windowBits$ = 104
memLevel$ = 112
strategy$ = 120
version$ = 128
stream_size$ = 136
deflateInit2_ PROC					; COMDAT

; 381  :                           const char *version, int stream_size) {

$LN47:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	57		 push	 rdi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 382  :     deflate_state *s;
; 383  :     int wrap = 1;
; 384  :     static const char my_version[] = ZLIB_VERSION;
; 385  : 
; 386  :     if (version == Z_NULL || version[0] != my_version[0] ||

  00012	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR version$[rsp]
  0001a	41 bf 01 00 00
	00		 mov	 r15d, 1
  00020	44 8b 64 24 78	 mov	 r12d, DWORD PTR strategy$[rsp]
  00025	41 8b f9	 mov	 edi, r9d
  00028	45 8b e8	 mov	 r13d, r8d
  0002b	48 8b d9	 mov	 rbx, rcx
  0002e	45 8b f7	 mov	 r14d, r15d
  00031	48 85 c0	 test	 rax, rax
  00034	0f 84 37 02 00
	00		 je	 $LN3@deflateIni
  0003a	80 38 31	 cmp	 BYTE PTR [rax], 49	; 00000031H
  0003d	0f 85 2e 02 00
	00		 jne	 $LN3@deflateIni
  00043	83 bc 24 88 00
	00 00 58	 cmp	 DWORD PTR stream_size$[rsp], 88 ; 00000058H
  0004b	0f 85 20 02 00
	00		 jne	 $LN3@deflateIni

; 387  :         stream_size != sizeof(z_stream)) {
; 388  :         return Z_VERSION_ERROR;
; 389  :     }
; 390  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00051	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00056	48 85 c9	 test	 rcx, rcx
  00059	0f 84 0b 02 00
	00		 je	 $LN13@deflateIni

; 391  : 
; 392  :     strm->msg = Z_NULL;

  0005f	33 c9		 xor	 ecx, ecx
  00061	48 89 4b 20	 mov	 QWORD PTR [rbx+32], rcx

; 393  :     if (strm->zalloc == (alloc_func)0) {

  00065	48 39 4b 30	 cmp	 QWORD PTR [rbx+48], rcx
  00069	75 0f		 jne	 SHORT $LN5@deflateIni

; 394  : #ifdef Z_SOLO
; 395  :         return Z_STREAM_ERROR;
; 396  : #else
; 397  :         strm->zalloc = zcalloc;

  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:zcalloc

; 398  :         strm->opaque = (voidpf)0;

  00072	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  00076	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
$LN5@deflateIni:

; 399  : #endif
; 400  :     }
; 401  :     if (strm->zfree == (free_func)0)

  0007a	48 39 4b 38	 cmp	 QWORD PTR [rbx+56], rcx
  0007e	75 0b		 jne	 SHORT $LN6@deflateIni

; 402  : #ifdef Z_SOLO
; 403  :         return Z_STREAM_ERROR;
; 404  : #else
; 405  :         strm->zfree = zcfree;

  00080	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:zcfree
  00087	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
$LN6@deflateIni:

; 406  : #endif
; 407  : 
; 408  : #ifdef FASTEST
; 409  :     if (level != 0) level = 1;
; 410  : #else
; 411  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 412  : #endif
; 413  : 
; 414  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0008b	83 fa ff	 cmp	 edx, -1
  0008e	bd 06 00 00 00	 mov	 ebp, 6
  00093	0f 45 ea	 cmovne	 ebp, edx
  00096	85 ff		 test	 edi, edi
  00098	79 10		 jns	 SHORT $LN8@deflateIni

; 415  :         wrap = 0;

  0009a	44 8b f1	 mov	 r14d, ecx

; 416  :         if (windowBits < -15)

  0009d	83 ff f1	 cmp	 edi, -15
  000a0	0f 8c c4 01 00
	00		 jl	 $LN13@deflateIni

; 417  :             return Z_STREAM_ERROR;
; 418  :         windowBits = -windowBits;

  000a6	f7 df		 neg	 edi

; 419  :     }

  000a8	eb 0e		 jmp	 SHORT $LN11@deflateIni
$LN8@deflateIni:

; 420  : #ifdef GZIP
; 421  :     else if (windowBits > 15) {

  000aa	83 ff 0f	 cmp	 edi, 15
  000ad	7e 09		 jle	 SHORT $LN11@deflateIni

; 422  :         wrap = 2;       /* write gzip wrapper instead */

  000af	41 be 02 00 00
	00		 mov	 r14d, 2

; 423  :         windowBits -= 16;

  000b5	83 ef 10	 sub	 edi, 16
$LN11@deflateIni:

; 424  :     }
; 425  : #endif
; 426  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 427  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 428  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  000b8	8b 44 24 70	 mov	 eax, DWORD PTR memLevel$[rsp]
  000bc	ff c8		 dec	 eax
  000be	83 f8 08	 cmp	 eax, 8
  000c1	0f 87 a3 01 00
	00		 ja	 $LN13@deflateIni
  000c7	41 83 fd 08	 cmp	 r13d, 8
  000cb	0f 85 99 01 00
	00		 jne	 $LN13@deflateIni
  000d1	8d 47 f8	 lea	 eax, DWORD PTR [rdi-8]
  000d4	83 f8 07	 cmp	 eax, 7
  000d7	0f 87 8d 01 00
	00		 ja	 $LN13@deflateIni
  000dd	83 fd 09	 cmp	 ebp, 9
  000e0	0f 87 84 01 00
	00		 ja	 $LN13@deflateIni
  000e6	41 83 fc 04	 cmp	 r12d, 4
  000ea	0f 87 7a 01 00
	00		 ja	 $LN13@deflateIni
  000f0	41 3b fd	 cmp	 edi, r13d
  000f3	75 0d		 jne	 SHORT $LN14@deflateIni
  000f5	45 3b f7	 cmp	 r14d, r15d
  000f8	0f 85 6c 01 00
	00		 jne	 $LN13@deflateIni

; 430  :     }
; 431  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000fe	41 8d 7d 01	 lea	 edi, QWORD PTR [r13+1]
$LN14@deflateIni:

; 432  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  00102	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00106	41 b8 18 17 00
	00		 mov	 r8d, 5912		; 00001718H
  0010c	41 8b d7	 mov	 edx, r15d
  0010f	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00114	ff 53 30	 call	 QWORD PTR [rbx+48]
  00117	48 8b f0	 mov	 rsi, rax

; 433  :     if (s == Z_NULL) return Z_MEM_ERROR;

  0011a	48 85 c0	 test	 rax, rax
  0011d	0f 84 40 01 00
	00		 je	 $LN45@deflateIni

; 434  :     strm->state = (struct internal_state FAR *)s;

  00123	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 435  :     s->strm = strm;
; 436  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 437  : 
; 438  :     s->wrap = wrap;
; 439  :     s->gzhead = Z_NULL;
; 440  :     s->w_bits = (uInt)windowBits;
; 441  :     s->w_size = 1 << s->w_bits;

  00127	8b cf		 mov	 ecx, edi
  00129	44 89 70 2c	 mov	 DWORD PTR [rax+44], r14d
  0012d	45 8b cf	 mov	 r9d, r15d
  00130	89 78 48	 mov	 DWORD PTR [rax+72], edi
  00133	45 33 f6	 xor	 r14d, r14d

; 442  :     s->w_mask = s->w_size - 1;
; 443  : 
; 444  :     s->hash_bits = (uInt)memLevel + 7;

  00136	8b 7c 24 70	 mov	 edi, DWORD PTR memLevel$[rsp]
  0013a	41 d3 e1	 shl	 r9d, cl
  0013d	48 89 18	 mov	 QWORD PTR [rax], rbx
  00140	c7 40 08 2a 00
	00 00		 mov	 DWORD PTR [rax+8], 42	; 0000002aH

; 445  :     s->hash_size = 1 << s->hash_bits;
; 446  :     s->hash_mask = s->hash_size - 1;
; 447  :     s->hash_shift =  ((s->hash_bits + MIN_MATCH-1) / MIN_MATCH);
; 448  : 
; 449  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00147	45 8d 46 02	 lea	 r8d, QWORD PTR [r14+2]
  0014b	4c 89 70 30	 mov	 QWORD PTR [rax+48], r14
  0014f	8d 4f 07	 lea	 ecx, DWORD PTR [rdi+7]
  00152	44 89 48 44	 mov	 DWORD PTR [rax+68], r9d
  00156	41 8d 41 ff	 lea	 eax, DWORD PTR [r9-1]
  0015a	89 46 4c	 mov	 DWORD PTR [rsi+76], eax
  0015d	41 8b c7	 mov	 eax, r15d
  00160	d3 e0		 shl	 eax, cl
  00162	89 46 74	 mov	 DWORD PTR [rsi+116], eax
  00165	ff c8		 dec	 eax
  00167	89 46 7c	 mov	 DWORD PTR [rsi+124], eax
  0016a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0016f	89 4e 78	 mov	 DWORD PTR [rsi+120], ecx
  00172	83 c1 02	 add	 ecx, 2
  00175	f7 e1		 mul	 ecx
  00177	d1 ea		 shr	 edx, 1
  00179	89 96 80 00 00
	00		 mov	 DWORD PTR [rsi+128], edx
  0017f	41 8b d1	 mov	 edx, r9d
  00182	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00186	ff 53 30	 call	 QWORD PTR [rbx+48]

; 450  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  00189	8b 56 44	 mov	 edx, DWORD PTR [rsi+68]
  0018c	45 8d 46 02	 lea	 r8d, QWORD PTR [r14+2]
  00190	48 89 46 50	 mov	 QWORD PTR [rsi+80], rax
  00194	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00198	ff 53 30	 call	 QWORD PTR [rbx+48]

; 451  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0019b	8b 56 74	 mov	 edx, DWORD PTR [rsi+116]
  0019e	45 8d 46 02	 lea	 r8d, QWORD PTR [r14+2]
  001a2	48 89 46 60	 mov	 QWORD PTR [rsi+96], rax
  001a6	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001aa	ff 53 30	 call	 QWORD PTR [rbx+48]

; 452  : 
; 453  :     s->high_water = 0;      /* nothing written to s->window yet */
; 454  : 
; 455  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  001ad	8d 4f 06	 lea	 ecx, DWORD PTR [rdi+6]
  001b0	44 89 b6 14 17
	00 00		 mov	 DWORD PTR [rsi+5908], r14d
  001b7	41 d3 e7	 shl	 r15d, cl

; 456  : 
; 457  :     /* We overlay pending_buf and sym_buf. This works since the average size
; 458  :      * for length/distance pairs over any compressed block is assured to be 31
; 459  :      * bits or less.
; 460  :      *
; 461  :      * Analysis: The longest fixed codes are a length code of 8 bits plus 5
; 462  :      * extra bits, for lengths 131 to 257. The longest fixed distance codes are
; 463  :      * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
; 464  :      * possible fixed-codes length/distance pair is then 31 bits total.
; 465  :      *
; 466  :      * sym_buf starts one-fourth of the way into pending_buf. So there are
; 467  :      * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
; 468  :      * in sym_buf is three bytes -- two for the distance and one for the
; 469  :      * literal/length. As each symbol is consumed, the pointer to the next
; 470  :      * sym_buf value to read moves forward three bytes. From that symbol, up to
; 471  :      * 31 bits are written to pending_buf. The closest the written pending_buf
; 472  :      * bits gets to the next sym_buf symbol to read is just before the last
; 473  :      * code is written. At that time, 31*(n - 2) bits have been written, just
; 474  :      * after 24*(n - 2) bits have been consumed from sym_buf. sym_buf starts at
; 475  :      * 8*n bits into pending_buf. (Note that the symbol buffer fills when n - 1
; 476  :      * symbols are written.) The closest the writing gets to what is unread is
; 477  :      * then n + 14 bits. Here n is lit_bufsize, which is 16384 by default, and
; 478  :      * can range from 128 to 32768.
; 479  :      *
; 480  :      * Therefore, at a minimum, there are 142 bits of space between what is
; 481  :      * written and what is read in the overlain buffers, so the symbols cannot
; 482  :      * be overwritten by the compressed data. That space is actually 139 bits,
; 483  :      * due to the three-bit fixed-code block header.
; 484  :      *
; 485  :      * That covers the case where either Z_FIXED is specified, forcing fixed
; 486  :      * codes, or when the use of fixed codes is chosen, because that choice
; 487  :      * results in a smaller compressed block than dynamic codes. That latter
; 488  :      * condition then assures that the above analysis also covers all dynamic
; 489  :      * blocks. A dynamic-code block will only be chosen to be emitted if it has
; 490  :      * fewer bits than a fixed-code block would for the same set of symbols.
; 491  :      * Therefore its average symbol length is assured to be less than 31. So
; 492  :      * the compressed data for a dynamic block also cannot overwrite the
; 493  :      * symbols from which it is being constructed.
; 494  :      */
; 495  : 
; 496  :     s->pending_buf = (uchf *) ZALLOC(strm, s->lit_bufsize, 4);

  001ba	45 8d 46 04	 lea	 r8d, QWORD PTR [r14+4]
  001be	44 89 be f0 16
	00 00		 mov	 DWORD PTR [rsi+5872], r15d
  001c5	41 8b d7	 mov	 edx, r15d
  001c8	48 89 46 68	 mov	 QWORD PTR [rsi+104], rax
  001cc	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001d0	ff 53 30	 call	 QWORD PTR [rbx+48]

; 497  :     s->pending_buf_size = (ulg)s->lit_bufsize * 4;

  001d3	8b 96 f0 16 00
	00		 mov	 edx, DWORD PTR [rsi+5872]
  001d9	48 89 46 10	 mov	 QWORD PTR [rsi+16], rax
  001dd	8d 0c 95 00 00
	00 00		 lea	 ecx, DWORD PTR [rdx*4]
  001e4	89 4e 18	 mov	 DWORD PTR [rsi+24], ecx

; 498  : 
; 499  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  001e7	4c 39 76 50	 cmp	 QWORD PTR [rsi+80], r14
  001eb	74 5c		 je	 SHORT $LN17@deflateIni
  001ed	4c 39 76 60	 cmp	 QWORD PTR [rsi+96], r14
  001f1	74 56		 je	 SHORT $LN17@deflateIni
  001f3	4c 39 76 68	 cmp	 QWORD PTR [rsi+104], r14
  001f7	74 50		 je	 SHORT $LN17@deflateIni
  001f9	48 85 c0	 test	 rax, rax
  001fc	74 4b		 je	 SHORT $LN17@deflateIni

; 505  :     }
; 506  :     s->sym_buf = s->pending_buf + s->lit_bufsize;

  001fe	48 03 c2	 add	 rax, rdx

; 507  :     s->sym_end = (s->lit_bufsize - 1) * 3;
; 508  :     /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
; 509  :      * on 16 bit machines and because stored blocks are restricted to
; 510  :      * 64K-1 bytes.
; 511  :      */
; 512  : 
; 513  :     s->level = level;

  00201	89 ae ac 00 00
	00		 mov	 DWORD PTR [rsi+172], ebp
  00207	ff ca		 dec	 edx
  00209	48 89 86 e8 16
	00 00		 mov	 QWORD PTR [rsi+5864], rax

; 514  :     s->strategy = strategy;
; 515  :     s->method = (Byte)method;
; 516  : 
; 517  :     return deflateReset(strm);

  00210	48 8b cb	 mov	 rcx, rbx
  00213	44 89 a6 b0 00
	00 00		 mov	 DWORD PTR [rsi+176], r12d
  0021a	44 88 6e 3c	 mov	 BYTE PTR [rsi+60], r13b
  0021e	8d 04 52	 lea	 eax, DWORD PTR [rdx+rdx*2]
  00221	89 86 f8 16 00
	00		 mov	 DWORD PTR [rsi+5880], eax
  00227	e8 00 00 00 00	 call	 deflateReset
$LN44@deflateIni:
  0022c	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
$LN43@deflateIni:
  00231	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]

; 518  : }

  00236	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0023b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0023f	41 5f		 pop	 r15
  00241	41 5e		 pop	 r14
  00243	41 5d		 pop	 r13
  00245	41 5c		 pop	 r12
  00247	5f		 pop	 rdi
  00248	c3		 ret	 0
$LN17@deflateIni:

; 500  :         s->pending_buf == Z_NULL) {
; 501  :         s->status = FINISH_STATE;
; 502  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  00249	48 8b 05 30 00
	00 00		 mov	 rax, QWORD PTR z_errmsg+48

; 503  :         deflateEnd (strm);

  00250	48 8b cb	 mov	 rcx, rbx
  00253	c7 46 08 9a 02
	00 00		 mov	 DWORD PTR [rsi+8], 666	; 0000029aH
  0025a	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  0025e	e8 00 00 00 00	 call	 deflateEnd
$LN45@deflateIni:

; 504  :         return Z_MEM_ERROR;

  00263	b8 fc ff ff ff	 mov	 eax, -4
  00268	eb c2		 jmp	 SHORT $LN44@deflateIni
$LN13@deflateIni:

; 429  :         return Z_STREAM_ERROR;

  0026a	b8 fe ff ff ff	 mov	 eax, -2
  0026f	eb c0		 jmp	 SHORT $LN43@deflateIni
$LN3@deflateIni:

; 518  : }

  00271	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00276	b8 fa ff ff ff	 mov	 eax, -6
  0027b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0027f	41 5f		 pop	 r15
  00281	41 5e		 pop	 r14
  00283	41 5d		 pop	 r13
  00285	41 5c		 pop	 r12
  00287	5f		 pop	 rdi
  00288	c3		 ret	 0
deflateInit2_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateStateCheck
_TEXT	SEGMENT
strm$ = 8
deflateStateCheck PROC					; COMDAT

; 524  :     deflate_state *s;
; 525  :     if (strm == Z_NULL ||
; 526  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 47		 je	 SHORT $LN3@deflateSta
  00005	48 83 79 30 00	 cmp	 QWORD PTR [rcx+48], 0
  0000a	74 40		 je	 SHORT $LN3@deflateSta
  0000c	48 83 79 38 00	 cmp	 QWORD PTR [rcx+56], 0
  00011	74 39		 je	 SHORT $LN3@deflateSta

; 528  :     s = strm->state;

  00013	48 8b 41 28	 mov	 rax, QWORD PTR [rcx+40]

; 529  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00017	48 85 c0	 test	 rax, rax
  0001a	74 30		 je	 SHORT $LN3@deflateSta
  0001c	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0001f	75 2b		 jne	 SHORT $LN3@deflateSta
  00021	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00024	8d 41 d6	 lea	 eax, DWORD PTR [rcx-42]
  00027	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  0002a	77 10		 ja	 SHORT $LN7@deflateSta
  0002c	48 ba 01 80 00
	88 00 00 02 20	 mov	 rdx, 2306405961448849409 ; 2002000088008001H
  00036	48 0f a3 c2	 bt	 rdx, rax
  0003a	72 0d		 jb	 SHORT $LN4@deflateSta
$LN7@deflateSta:
  0003c	83 f9 71	 cmp	 ecx, 113		; 00000071H
  0003f	74 08		 je	 SHORT $LN4@deflateSta
  00041	81 f9 9a 02 00
	00		 cmp	 ecx, 666		; 0000029aH
  00047	75 03		 jne	 SHORT $LN3@deflateSta
$LN4@deflateSta:

; 530  : #ifdef GZIP
; 531  :                                            s->status != GZIP_STATE &&
; 532  : #endif
; 533  :                                            s->status != EXTRA_STATE &&
; 534  :                                            s->status != NAME_STATE &&
; 535  :                                            s->status != COMMENT_STATE &&
; 536  :                                            s->status != HCRC_STATE &&
; 537  :                                            s->status != BUSY_STATE &&
; 538  :                                            s->status != FINISH_STATE))
; 539  :         return 1;
; 540  :     return 0;

  00049	33 c0		 xor	 eax, eax

; 541  : }

  0004b	c3		 ret	 0
$LN3@deflateSta:

; 527  :         return 1;

  0004c	b8 01 00 00 00	 mov	 eax, 1

; 541  : }

  00051	c3		 ret	 0
deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateSetDictionary
_TEXT	SEGMENT
strm$ = 80
dictionary$ = 88
dictLength$ = 96
deflateSetDictionary PROC				; COMDAT

; 545  :                                  uInt  dictLength) {

$LN42:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000b	41 8b f8	 mov	 edi, r8d
  0000e	48 8b f2	 mov	 rsi, rdx
  00011	4c 8b f1	 mov	 r14, rcx

; 546  :     deflate_state *s;
; 547  :     uInt str, n;
; 548  :     int wrap;
; 549  :     unsigned avail;
; 550  :     z_const unsigned char *next;
; 551  : 
; 552  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00014	e8 00 00 00 00	 call	 deflateStateCheck
  00019	85 c0		 test	 eax, eax
  0001b	0f 85 b9 01 00
	00		 jne	 $LN11@deflateSet
  00021	48 85 f6	 test	 rsi, rsi
  00024	0f 84 b0 01 00
	00		 je	 $LN11@deflateSet

; 554  :     s = strm->state;

  0002a	49 8b 5e 28	 mov	 rbx, QWORD PTR [r14+40]

; 555  :     wrap = s->wrap;

  0002e	8b 6b 2c	 mov	 ebp, DWORD PTR [rbx+44]

; 556  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  00031	83 fd 02	 cmp	 ebp, 2
  00034	0f 84 a0 01 00
	00		 je	 $LN11@deflateSet
  0003a	83 fd 01	 cmp	 ebp, 1
  0003d	75 0a		 jne	 SHORT $LN14@deflateSet
  0003f	83 7b 08 2a	 cmp	 DWORD PTR [rbx+8], 42	; 0000002aH
  00043	0f 85 91 01 00
	00		 jne	 $LN11@deflateSet
$LN14@deflateSet:
  00049	83 bb 9c 00 00
	00 00		 cmp	 DWORD PTR [rbx+156], 0
  00050	0f 85 84 01 00
	00		 jne	 $LN11@deflateSet
  00056	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  0005b	4c 89 6c 24 58	 mov	 QWORD PTR [rsp+88], r13
  00060	4c 89 7c 24 60	 mov	 QWORD PTR [rsp+96], r15

; 557  :         return Z_STREAM_ERROR;
; 558  : 
; 559  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 560  :     if (wrap == 1)

  00065	83 fd 01	 cmp	 ebp, 1
  00068	75 10		 jne	 SHORT $LN15@deflateSet

; 561  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  0006a	41 8b 4e 4c	 mov	 ecx, DWORD PTR [r14+76]
  0006e	48 8b d6	 mov	 rdx, rsi
  00071	e8 00 00 00 00	 call	 adler32
  00076	41 89 46 4c	 mov	 DWORD PTR [r14+76], eax
$LN15@deflateSet:

; 562  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  0007a	45 33 ed	 xor	 r13d, r13d
  0007d	44 89 6b 2c	 mov	 DWORD PTR [rbx+44], r13d

; 563  : 
; 564  :     /* if dictionary would fill window, just replace the history */
; 565  :     if (dictLength >= s->w_size) {

  00081	3b 7b 44	 cmp	 edi, DWORD PTR [rbx+68]
  00084	72 47		 jb	 SHORT $LN30@deflateSet

; 566  :         if (wrap == 0) {            /* already empty otherwise */

  00086	85 ed		 test	 ebp, ebp
  00088	75 38		 jne	 SHORT $LN29@deflateSet

; 567  :             CLEAR_HASH(s);

  0008a	8b 4b 74	 mov	 ecx, DWORD PTR [rbx+116]
  0008d	33 d2		 xor	 edx, edx
  0008f	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00093	ff c9		 dec	 ecx
  00095	66 44 89 2c 48	 mov	 WORD PTR [rax+rcx*2], r13w
  0009a	44 8b 43 74	 mov	 r8d, DWORD PTR [rbx+116]
  0009e	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000a2	41 ff c8	 dec	 r8d
  000a5	4d 03 c0	 add	 r8, r8
  000a8	e8 00 00 00 00	 call	 memset

; 568  :             s->strstart = 0;

  000ad	44 89 ab 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r13d

; 569  :             s->block_start = 0L;

  000b4	44 89 ab 84 00
	00 00		 mov	 DWORD PTR [rbx+132], r13d

; 570  :             s->insert = 0;

  000bb	44 89 ab 08 17
	00 00		 mov	 DWORD PTR [rbx+5896], r13d
$LN29@deflateSet:

; 571  :         }
; 572  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000c2	2b 7b 44	 sub	 edi, DWORD PTR [rbx+68]
  000c5	8b c7		 mov	 eax, edi

; 573  :         dictLength = s->w_size;

  000c7	8b 7b 44	 mov	 edi, DWORD PTR [rbx+68]
  000ca	48 03 f0	 add	 rsi, rax
$LN30@deflateSet:

; 574  :     }
; 575  : 
; 576  :     /* insert dictionary into window and hash */
; 577  :     avail = strm->avail_in;

  000cd	45 8b 7e 08	 mov	 r15d, DWORD PTR [r14+8]

; 578  :     next = strm->next_in;
; 579  :     strm->avail_in = dictLength;
; 580  :     strm->next_in = (z_const Bytef *)dictionary;
; 581  :     fill_window(s);

  000d1	48 8b cb	 mov	 rcx, rbx
  000d4	4d 8b 26	 mov	 r12, QWORD PTR [r14]
  000d7	41 89 7e 08	 mov	 DWORD PTR [r14+8], edi
  000db	49 89 36	 mov	 QWORD PTR [r14], rsi
  000de	e8 00 00 00 00	 call	 fill_window

; 582  :     while (s->lookahead >= MIN_MATCH) {

  000e3	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [rbx+156]
  000e9	83 f9 03	 cmp	 ecx, 3
  000ec	0f 82 88 00 00
	00		 jb	 $LN6@deflateSet
$LL5@deflateSet:

; 583  :         str = s->strstart;

  000f2	44 8b 93 94 00
	00 00		 mov	 r10d, DWORD PTR [rbx+148]

; 584  :         n = s->lookahead - (MIN_MATCH-1);

  000f9	8d 79 fe	 lea	 edi, DWORD PTR [rcx-2]
  000fc	45 8d 5a 02	 lea	 r11d, DWORD PTR [r10+2]
$LL9@deflateSet:

; 585  :         do {
; 586  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00100	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00104	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]

; 587  : #ifndef FASTEST
; 588  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  0010a	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0010e	45 8b c2	 mov	 r8d, r10d
  00111	45 0f b6 0c 03	 movzx	 r9d, BYTE PTR [r11+rax]

; 589  : #endif
; 590  :             s->head[s->ins_h] = (Pos)str;
; 591  :             str++;

  00116	45 8d 5b 01	 lea	 r11d, DWORD PTR [r11+1]
  0011a	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  0011d	d3 e0		 shl	 eax, cl
  0011f	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00123	44 33 c8	 xor	 r9d, eax
  00126	44 23 4b 7c	 and	 r9d, DWORD PTR [rbx+124]
  0012a	8b 43 4c	 mov	 eax, DWORD PTR [rbx+76]
  0012d	4c 23 c0	 and	 r8, rax
  00130	44 89 4b 70	 mov	 DWORD PTR [rbx+112], r9d
  00134	42 0f b7 04 4a	 movzx	 eax, WORD PTR [rdx+r9*2]
  00139	66 42 89 04 41	 mov	 WORD PTR [rcx+r8*2], ax
  0013e	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  00141	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00145	66 44 89 14 48	 mov	 WORD PTR [rax+rcx*2], r10w
  0014a	41 ff c2	 inc	 r10d

; 592  :         } while (--n);

  0014d	83 c7 ff	 add	 edi, -1			; ffffffffH
  00150	75 ae		 jne	 SHORT $LL9@deflateSet

; 593  :         s->strstart = str;
; 594  :         s->lookahead = MIN_MATCH-1;
; 595  :         fill_window(s);

  00152	48 8b cb	 mov	 rcx, rbx
  00155	44 89 93 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r10d
  0015c	c7 83 9c 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+156], 2
  00166	e8 00 00 00 00	 call	 fill_window
  0016b	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [rbx+156]
  00171	83 f9 03	 cmp	 ecx, 3
  00174	0f 83 78 ff ff
	ff		 jae	 $LL5@deflateSet
$LN6@deflateSet:

; 596  :     }
; 597  :     s->strstart += s->lookahead;

  0017a	01 8b 94 00 00
	00		 add	 DWORD PTR [rbx+148], ecx
  00180	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]

; 598  :     s->block_start = (long)s->strstart;

  00186	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax

; 599  :     s->insert = s->lookahead;
; 600  :     s->lookahead = 0;
; 601  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 602  :     s->match_available = 0;
; 603  :     strm->next_in = next;
; 604  :     strm->avail_in = avail;
; 605  :     s->wrap = wrap;
; 606  :     return Z_OK;

  0018c	33 c0		 xor	 eax, eax
  0018e	44 89 ab 9c 00
	00 00		 mov	 DWORD PTR [rbx+156], r13d
  00195	44 89 ab 90 00
	00 00		 mov	 DWORD PTR [rbx+144], r13d
  0019c	4c 8b 6c 24 58	 mov	 r13, QWORD PTR [rsp+88]
  001a1	89 8b 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], ecx
  001a7	c7 83 a0 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+160], 2
  001b1	c7 83 88 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+136], 2
  001bb	4d 89 26	 mov	 QWORD PTR [r14], r12
  001be	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  001c3	45 89 7e 08	 mov	 DWORD PTR [r14+8], r15d
  001c7	4c 8b 7c 24 60	 mov	 r15, QWORD PTR [rsp+96]
  001cc	89 6b 2c	 mov	 DWORD PTR [rbx+44], ebp

; 607  : }

  001cf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001d3	41 5e		 pop	 r14
  001d5	5f		 pop	 rdi
  001d6	5e		 pop	 rsi
  001d7	5d		 pop	 rbp
  001d8	5b		 pop	 rbx
  001d9	c3		 ret	 0
$LN11@deflateSet:

; 553  :         return Z_STREAM_ERROR;

  001da	b8 fe ff ff ff	 mov	 eax, -2

; 607  : }

  001df	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e3	41 5e		 pop	 r14
  001e5	5f		 pop	 rdi
  001e6	5e		 pop	 rsi
  001e7	5d		 pop	 rbp
  001e8	5b		 pop	 rbx
  001e9	c3		 ret	 0
deflateSetDictionary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateGetDictionary
_TEXT	SEGMENT
strm$ = 48
dictionary$ = 56
dictLength$ = 64
deflateGetDictionary PROC				; COMDAT

; 611  :                                  uInt *dictLength) {

$LN12:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	49 8b f8	 mov	 rdi, r8
  00009	4c 8b ca	 mov	 r9, rdx
  0000c	4c 8b c1	 mov	 r8, rcx

; 612  :     deflate_state *s;
; 613  :     uInt len;
; 614  : 
; 615  :     if (deflateStateCheck(strm))

  0000f	e8 00 00 00 00	 call	 deflateStateCheck
  00014	85 c0		 test	 eax, eax
  00016	74 0b		 je	 SHORT $LN2@deflateGet

; 616  :         return Z_STREAM_ERROR;

  00018	b8 fe ff ff ff	 mov	 eax, -2

; 626  : }

  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5f		 pop	 rdi
  00022	c3		 ret	 0
$LN2@deflateGet:

; 617  :     s = strm->state;

  00023	49 8b 50 28	 mov	 rdx, QWORD PTR [r8+40]
  00027	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 618  :     len = s->strstart + s->lookahead;
; 619  :     if (len > s->w_size)

  0002c	8b 5a 44	 mov	 ebx, DWORD PTR [rdx+68]
  0002f	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [rdx+156]
  00035	44 8b 92 94 00
	00 00		 mov	 r10d, DWORD PTR [rdx+148]
  0003c	41 8d 04 0a	 lea	 eax, DWORD PTR [r10+rcx]

; 620  :         len = s->w_size;
; 621  :     if (dictionary != Z_NULL && len)

  00040	3b c3		 cmp	 eax, ebx
  00042	0f 46 d8	 cmovbe	 ebx, eax
  00045	4d 85 c9	 test	 r9, r9
  00048	74 1c		 je	 SHORT $LN4@deflateGet
  0004a	85 db		 test	 ebx, ebx
  0004c	74 18		 je	 SHORT $LN4@deflateGet

; 622  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  0004e	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00052	44 8b c3	 mov	 r8d, ebx
  00055	49 2b d0	 sub	 rdx, r8
  00058	49 03 d2	 add	 rdx, r10
  0005b	48 03 d1	 add	 rdx, rcx
  0005e	49 8b c9	 mov	 rcx, r9
  00061	e8 00 00 00 00	 call	 memcpy
$LN4@deflateGet:

; 623  :     if (dictLength != Z_NULL)

  00066	48 85 ff	 test	 rdi, rdi
  00069	74 02		 je	 SHORT $LN5@deflateGet

; 624  :         *dictLength = len;

  0006b	89 1f		 mov	 DWORD PTR [rdi], ebx
$LN5@deflateGet:

; 625  :     return Z_OK;

  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	33 c0		 xor	 eax, eax

; 626  : }

  00074	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00078	5f		 pop	 rdi
  00079	c3		 ret	 0
deflateGetDictionary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateResetKeep
_TEXT	SEGMENT
strm$ = 48
deflateResetKeep PROC					; COMDAT

; 629  : int ZEXPORT deflateResetKeep(z_streamp strm) {

$LN11:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 630  :     deflate_state *s;
; 631  : 
; 632  :     if (deflateStateCheck(strm)) {

  00009	e8 00 00 00 00	 call	 deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0b		 je	 SHORT $LN2@deflateRes

; 633  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2

; 662  : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
$LN2@deflateRes:

; 634  :     }
; 635  : 
; 636  :     strm->total_in = strm->total_out = 0;

  0001d	33 c0		 xor	 eax, eax

; 637  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 638  :     strm->data_type = Z_UNKNOWN;

  0001f	c7 47 48 02 00
	00 00		 mov	 DWORD PTR [rdi+72], 2
  00026	89 47 1c	 mov	 DWORD PTR [rdi+28], eax
  00029	89 47 0c	 mov	 DWORD PTR [rdi+12], eax
  0002c	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
  00030	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 639  : 
; 640  :     s = (deflate_state *)strm->state;

  00035	48 8b 5f 28	 mov	 rbx, QWORD PTR [rdi+40]

; 641  :     s->pending = 0;
; 642  :     s->pending_out = s->pending_buf;
; 643  : 
; 644  :     if (s->wrap < 0) {

  00039	8b 4b 2c	 mov	 ecx, DWORD PTR [rbx+44]
  0003c	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  0003f	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00043	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  00047	85 c9		 test	 ecx, ecx
  00049	79 05		 jns	 SHORT $LN3@deflateRes

; 645  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  0004b	f7 d9		 neg	 ecx
  0004d	89 4b 2c	 mov	 DWORD PTR [rbx+44], ecx
$LN3@deflateRes:

; 646  :     }
; 647  :     s->status =

  00050	83 f9 02	 cmp	 ecx, 2
  00053	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH
  00058	ba 39 00 00 00	 mov	 edx, 57			; 00000039H
  0005d	0f 44 c2	 cmove	 eax, edx
  00060	89 43 08	 mov	 DWORD PTR [rbx+8], eax

; 648  : #ifdef GZIP
; 649  :         s->wrap == 2 ? GZIP_STATE :
; 650  : #endif
; 651  :         INIT_STATE;
; 652  :     strm->adler =

  00063	75 0e		 jne	 SHORT $LN5@deflateRes
  00065	45 33 c0	 xor	 r8d, r8d
  00068	33 d2		 xor	 edx, edx
  0006a	33 c9		 xor	 ecx, ecx
  0006c	e8 00 00 00 00	 call	 crc32
  00071	eb 0c		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  00073	45 33 c0	 xor	 r8d, r8d
  00076	33 d2		 xor	 edx, edx
  00078	33 c9		 xor	 ecx, ecx
  0007a	e8 00 00 00 00	 call	 adler32
$LN6@deflateRes:
  0007f	89 47 4c	 mov	 DWORD PTR [rdi+76], eax

; 653  : #ifdef GZIP
; 654  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 655  : #endif
; 656  :         adler32(0L, Z_NULL, 0);
; 657  :     s->last_flush = -2;
; 658  : 
; 659  :     _tr_init(s);

  00082	48 8b cb	 mov	 rcx, rbx
  00085	c7 43 40 fe ff
	ff ff		 mov	 DWORD PTR [rbx+64], -2
  0008c	e8 00 00 00 00	 call	 _tr_init

; 660  : 
; 661  :     return Z_OK;

  00091	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00096	33 c0		 xor	 eax, eax

; 662  : }

  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
deflateResetKeep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT lm_init
_TEXT	SEGMENT
s$ = 48
lm_init	PROC						; COMDAT

; 667  : local void lm_init(deflate_state *s) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 668  :     s->window_size = (ulg)2L*s->w_size;

  0000a	8b 41 44	 mov	 eax, DWORD PTR [rcx+68]
  0000d	48 8b d9	 mov	 rbx, rcx

; 669  : 
; 670  :     CLEAR_HASH(s);

  00010	8b 51 74	 mov	 edx, DWORD PTR [rcx+116]
  00013	03 c0		 add	 eax, eax
  00015	89 41 58	 mov	 DWORD PTR [rcx+88], eax
  00018	ff ca		 dec	 edx
  0001a	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0001e	33 ff		 xor	 edi, edi
  00020	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  00024	33 d2		 xor	 edx, edx
  00026	44 8b 41 74	 mov	 r8d, DWORD PTR [rcx+116]
  0002a	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0002e	41 ff c8	 dec	 r8d
  00031	4d 03 c0	 add	 r8, r8
  00034	e8 00 00 00 00	 call	 memset

; 671  : 
; 672  :     /* Set the default configuration parameters:
; 673  :      */
; 674  :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  00039	48 63 8b ac 00
	00 00		 movsxd	 rcx, DWORD PTR [rbx+172]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:configuration_table
  00047	48 03 c9	 add	 rcx, rcx
  0004a	0f b7 44 ca 02	 movzx	 eax, WORD PTR [rdx+rcx*8+2]
  0004f	89 83 a8 00 00
	00		 mov	 DWORD PTR [rbx+168], eax

; 675  :     s->good_match       = configuration_table[s->level].good_length;

  00055	0f b7 04 ca	 movzx	 eax, WORD PTR [rdx+rcx*8]
  00059	89 83 b4 00 00
	00		 mov	 DWORD PTR [rbx+180], eax

; 676  :     s->nice_match       = configuration_table[s->level].nice_length;

  0005f	0f b7 44 ca 04	 movzx	 eax, WORD PTR [rdx+rcx*8+4]
  00064	89 83 b8 00 00
	00		 mov	 DWORD PTR [rbx+184], eax

; 677  :     s->max_chain_length = configuration_table[s->level].max_chain;

  0006a	0f b7 44 ca 06	 movzx	 eax, WORD PTR [rdx+rcx*8+6]
  0006f	89 83 a4 00 00
	00		 mov	 DWORD PTR [rbx+164], eax

; 678  : 
; 679  :     s->strstart = 0;
; 680  :     s->block_start = 0L;
; 681  :     s->lookahead = 0;
; 682  :     s->insert = 0;
; 683  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 684  :     s->match_available = 0;

  00075	48 89 bb 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rdi
  0007c	89 bb 84 00 00
	00		 mov	 DWORD PTR [rbx+132], edi
  00082	89 bb 9c 00 00
	00		 mov	 DWORD PTR [rbx+156], edi
  00088	89 bb 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edi
  0008e	c7 83 a0 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+160], 2
  00098	c7 83 88 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+136], 2

; 685  :     s->ins_h = 0;

  000a2	89 7b 70	 mov	 DWORD PTR [rbx+112], edi

; 686  : }

  000a5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0
lm_init	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateReset
_TEXT	SEGMENT
strm$ = 48
deflateReset PROC					; COMDAT

; 689  : int ZEXPORT deflateReset(z_streamp strm) {

$LN7:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 690  :     int ret;
; 691  : 
; 692  :     ret = deflateResetKeep(strm);

  0000d	e8 00 00 00 00	 call	 deflateResetKeep
  00012	8b d8		 mov	 ebx, eax

; 693  :     if (ret == Z_OK)

  00014	85 c0		 test	 eax, eax
  00016	75 0b		 jne	 SHORT $LN2@deflateRes

; 694  :         lm_init(strm->state);

  00018	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  0001c	e8 00 00 00 00	 call	 lm_init

; 695  :     return ret;

  00021	8b c3		 mov	 eax, ebx
$LN2@deflateRes:

; 696  : }

  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
deflateReset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateSetHeader
_TEXT	SEGMENT
strm$ = 48
head$ = 56
deflateSetHeader PROC					; COMDAT

; 699  : int ZEXPORT deflateSetHeader(z_streamp strm, gz_headerp head) {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b ca	 mov	 r9, rdx
  00007	4c 8b c1	 mov	 r8, rcx

; 700  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  0000a	e8 00 00 00 00	 call	 deflateStateCheck
  0000f	85 c0		 test	 eax, eax
  00011	75 15		 jne	 SHORT $LN3@deflateSet
  00013	49 8b 40 28	 mov	 rax, QWORD PTR [r8+40]
  00017	83 78 2c 02	 cmp	 DWORD PTR [rax+44], 2
  0001b	75 0b		 jne	 SHORT $LN3@deflateSet

; 702  :     strm->state->gzhead = head;

  0001d	4c 89 48 30	 mov	 QWORD PTR [rax+48], r9

; 703  :     return Z_OK;

  00021	33 c0		 xor	 eax, eax

; 704  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN3@deflateSet:

; 701  :         return Z_STREAM_ERROR;

  00028	b8 fe ff ff ff	 mov	 eax, -2

; 704  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
deflateSetHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflatePending
_TEXT	SEGMENT
strm$ = 48
pending$ = 56
bits$ = 64
deflatePending PROC					; COMDAT

; 707  : int ZEXPORT deflatePending(z_streamp strm, unsigned *pending, int *bits) {

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b ca	 mov	 r9, rdx
  00007	4c 8b d1	 mov	 r10, rcx

; 708  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000a	e8 00 00 00 00	 call	 deflateStateCheck
  0000f	85 c0		 test	 eax, eax
  00011	74 0a		 je	 SHORT $LN2@deflatePen
  00013	b8 fe ff ff ff	 mov	 eax, -2

; 714  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
$LN2@deflatePen:

; 709  :     if (pending != Z_NULL)

  0001d	4d 85 c9	 test	 r9, r9
  00020	74 0a		 je	 SHORT $LN6@deflatePen

; 710  :         *pending = strm->state->pending;

  00022	49 8b 42 28	 mov	 rax, QWORD PTR [r10+40]
  00026	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00029	41 89 09	 mov	 DWORD PTR [r9], ecx
$LN6@deflatePen:

; 711  :     if (bits != Z_NULL)

  0002c	4d 85 c0	 test	 r8, r8
  0002f	74 0d		 je	 SHORT $LN4@deflatePen

; 712  :         *bits = strm->state->bi_valid;

  00031	49 8b 42 28	 mov	 rax, QWORD PTR [r10+40]
  00035	8b 88 10 17 00
	00		 mov	 ecx, DWORD PTR [rax+5904]
  0003b	41 89 08	 mov	 DWORD PTR [r8], ecx
$LN4@deflatePen:

; 713  :     return Z_OK;

  0003e	33 c0		 xor	 eax, eax

; 714  : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
deflatePending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflatePrime
_TEXT	SEGMENT
strm$ = 48
bits$ = 56
value$ = 64
deflatePrime PROC					; COMDAT

; 717  : int ZEXPORT deflatePrime(z_streamp strm, int bits, int value) {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	41 8b f8	 mov	 edi, r8d
  0000d	8b da		 mov	 ebx, edx
  0000f	4c 8b d9	 mov	 r11, rcx

; 718  :     deflate_state *s;
; 719  :     int put;
; 720  : 
; 721  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00012	e8 00 00 00 00	 call	 deflateStateCheck
  00017	85 c0		 test	 eax, eax
  00019	74 10		 je	 SHORT $LN5@deflatePri
  0001b	b8 fe ff ff ff	 mov	 eax, -2

; 737  : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN5@deflatePri:

; 722  :     s = strm->state;
; 723  :     if (bits < 0 || bits > 16 ||

  0002b	83 fb 10	 cmp	 ebx, 16
  0002e	77 7f		 ja	 SHORT $LN7@deflatePri
  00030	4d 8b 5b 28	 mov	 r11, QWORD PTR [r11+40]
  00034	49 8b 43 20	 mov	 rax, QWORD PTR [r11+32]
  00038	48 83 c0 02	 add	 rax, 2
  0003c	49 39 83 e8 16
	00 00		 cmp	 QWORD PTR [r11+5864], rax
  00043	72 6a		 jb	 SHORT $LN7@deflatePri
  00045	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@deflatePri:

; 724  :         s->sym_buf < s->pending_out + ((Buf_size + 7) >> 3))
; 725  :         return Z_BUF_ERROR;
; 726  :     do {
; 727  :         put = Buf_size - s->bi_valid;

  00050	41 8b 93 10 17
	00 00		 mov	 edx, DWORD PTR [r11+5904]
  00057	b8 10 00 00 00	 mov	 eax, 16
  0005c	2b c2		 sub	 eax, edx

; 728  :         if (put > bits)
; 729  :             put = bits;
; 730  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0005e	44 8b d3	 mov	 r10d, ebx
  00061	3b c3		 cmp	 eax, ebx
  00063	44 0f 4e d0	 cmovle	 r10d, eax
  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	41 8b ca	 mov	 ecx, r10d
  0006f	66 d3 e0	 shl	 ax, cl
  00072	8b ca		 mov	 ecx, edx
  00074	66 ff c8	 dec	 ax
  00077	66 23 c7	 and	 ax, di
  0007a	66 d3 e0	 shl	 ax, cl

; 731  :         s->bi_valid += put;
; 732  :         _tr_flush_bits(s);

  0007d	49 8b cb	 mov	 rcx, r11
  00080	66 41 09 83 0c
	17 00 00	 or	 WORD PTR [r11+5900], ax
  00088	41 8d 04 12	 lea	 eax, DWORD PTR [r10+rdx]
  0008c	41 89 83 10 17
	00 00		 mov	 DWORD PTR [r11+5904], eax
  00093	e8 00 00 00 00	 call	 _tr_flush_bits

; 733  :         value >>= put;

  00098	41 8b ca	 mov	 ecx, r10d
  0009b	d3 ff		 sar	 edi, cl

; 734  :         bits -= put;

  0009d	41 2b da	 sub	 ebx, r10d

; 735  :     } while (bits);

  000a0	75 ae		 jne	 SHORT $LL4@deflatePri

; 736  :     return Z_OK;

  000a2	33 c0		 xor	 eax, eax

; 737  : }

  000a4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
$LN7@deflatePri:
  000af	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b4	b8 fb ff ff ff	 mov	 eax, -5
  000b9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bd	5f		 pop	 rdi
  000be	c3		 ret	 0
deflatePrime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateParams
_TEXT	SEGMENT
strm$ = 64
level$ = 72
strategy$ = 80
deflateParams PROC					; COMDAT

; 740  : int ZEXPORT deflateParams(z_streamp strm, int level, int strategy) {

$LN35:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	45 8b f0	 mov	 r14d, r8d
  00021	48 8b e9	 mov	 rbp, rcx
  00024	44 8b c2	 mov	 r8d, edx

; 741  :     deflate_state *s;
; 742  :     compress_func func;
; 743  : 
; 744  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00027	e8 00 00 00 00	 call	 deflateStateCheck
  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 22 01 00
	00		 jne	 $LN8@deflatePar

; 745  :     s = strm->state;

  00034	48 8b 5d 28	 mov	 rbx, QWORD PTR [rbp+40]

; 746  : 
; 747  : #ifdef FASTEST
; 748  :     if (level != 0) level = 1;
; 749  : #else
; 750  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 751  : #endif
; 752  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  00038	41 83 f8 ff	 cmp	 r8d, -1
  0003c	be 06 00 00 00	 mov	 esi, 6
  00041	41 0f 45 f0	 cmovne	 esi, r8d
  00045	83 fe 09	 cmp	 esi, 9
  00048	0f 87 08 01 00
	00		 ja	 $LN8@deflatePar
  0004e	41 83 fe 04	 cmp	 r14d, 4
  00052	0f 87 fe 00 00
	00		 ja	 $LN8@deflatePar

; 754  :     }
; 755  :     func = configuration_table[s->level].func;
; 756  : 
; 757  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  00058	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:configuration_table
  0005f	48 8d bb ac 00
	00 00		 lea	 rdi, QWORD PTR [rbx+172]
  00066	44 3b b3 b0 00
	00 00		 cmp	 r14d, DWORD PTR [rbx+176]
  0006d	75 18		 jne	 SHORT $LN19@deflatePar
  0006f	48 63 0f	 movsxd	 rcx, DWORD PTR [rdi]
  00072	48 63 c6	 movsxd	 rax, esi
  00075	48 03 c9	 add	 rcx, rcx
  00078	48 03 c0	 add	 rax, rax
  0007b	49 8b 44 c4 08	 mov	 rax, QWORD PTR [r12+rax*8+8]
  00080	49 39 44 cc 08	 cmp	 QWORD PTR [r12+rcx*8+8], rax
  00085	74 40		 je	 SHORT $LN12@deflatePar
$LN19@deflatePar:
  00087	83 7b 40 fe	 cmp	 DWORD PTR [rbx+64], -2
  0008b	74 3a		 je	 SHORT $LN12@deflatePar

; 758  :         s->last_flush != -2) {
; 759  :         /* Flush the last buffer: */
; 760  :         int err = deflate(strm, Z_BLOCK);

  0008d	ba 05 00 00 00	 mov	 edx, 5
  00092	48 8b cd	 mov	 rcx, rbp
  00095	e8 00 00 00 00	 call	 deflate

; 761  :         if (err == Z_STREAM_ERROR)

  0009a	83 f8 fe	 cmp	 eax, -2
  0009d	0f 84 b3 00 00
	00		 je	 $LN8@deflatePar

; 762  :             return err;
; 763  :         if (strm->avail_in || (s->strstart - s->block_start) + s->lookahead)

  000a3	83 7d 08 00	 cmp	 DWORD PTR [rbp+8], 0
  000a7	75 14		 jne	 SHORT $LN13@deflatePar
  000a9	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  000af	2b 83 84 00 00
	00		 sub	 eax, DWORD PTR [rbx+132]
  000b5	03 83 94 00 00
	00		 add	 eax, DWORD PTR [rbx+148]
  000bb	74 0a		 je	 SHORT $LN12@deflatePar
$LN13@deflatePar:

; 764  :             return Z_BUF_ERROR;

  000bd	b8 fb ff ff ff	 mov	 eax, -5
  000c2	e9 94 00 00 00	 jmp	 $LN1@deflatePar
$LN12@deflatePar:

; 765  :     }
; 766  :     if (s->level != level) {

  000c7	8b 07		 mov	 eax, DWORD PTR [rdi]
  000c9	3b c6		 cmp	 eax, esi
  000cb	74 7e		 je	 SHORT $LN14@deflatePar

; 767  :         if (s->level == 0 && s->matches != 0) {

  000cd	85 c0		 test	 eax, eax
  000cf	75 43		 jne	 SHORT $LN15@deflatePar
  000d1	8b 83 04 17 00
	00		 mov	 eax, DWORD PTR [rbx+5892]
  000d7	85 c0		 test	 eax, eax
  000d9	74 39		 je	 SHORT $LN15@deflatePar

; 768  :             if (s->matches == 1)

  000db	33 ed		 xor	 ebp, ebp
  000dd	83 f8 01	 cmp	 eax, 1
  000e0	75 0a		 jne	 SHORT $LN4@deflatePar

; 769  :                 slide_hash(s);

  000e2	48 8b cb	 mov	 rcx, rbx
  000e5	e8 00 00 00 00	 call	 slide_hash
  000ea	eb 22		 jmp	 SHORT $LN3@deflatePar
$LN4@deflatePar:

; 770  :             else
; 771  :                 CLEAR_HASH(s);

  000ec	8b 4b 74	 mov	 ecx, DWORD PTR [rbx+116]
  000ef	33 d2		 xor	 edx, edx
  000f1	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000f5	ff c9		 dec	 ecx
  000f7	66 89 2c 48	 mov	 WORD PTR [rax+rcx*2], bp
  000fb	44 8b 43 74	 mov	 r8d, DWORD PTR [rbx+116]
  000ff	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00103	41 ff c8	 dec	 r8d
  00106	4d 03 c0	 add	 r8, r8
  00109	e8 00 00 00 00	 call	 memset
$LN3@deflatePar:

; 772  :             s->matches = 0;

  0010e	89 ab 04 17 00
	00		 mov	 DWORD PTR [rbx+5892], ebp
$LN15@deflatePar:

; 773  :         }
; 774  :         s->level = level;

  00114	89 37		 mov	 DWORD PTR [rdi], esi

; 775  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  00116	48 63 ce	 movsxd	 rcx, esi
  00119	48 03 c9	 add	 rcx, rcx
  0011c	41 0f b7 44 cc
	02		 movzx	 eax, WORD PTR [r12+rcx*8+2]
  00122	89 83 a8 00 00
	00		 mov	 DWORD PTR [rbx+168], eax

; 776  :         s->good_match       = configuration_table[level].good_length;

  00128	41 0f b7 04 cc	 movzx	 eax, WORD PTR [r12+rcx*8]
  0012d	89 83 b4 00 00
	00		 mov	 DWORD PTR [rbx+180], eax

; 777  :         s->nice_match       = configuration_table[level].nice_length;

  00133	41 0f b7 44 cc
	04		 movzx	 eax, WORD PTR [r12+rcx*8+4]
  00139	89 83 b8 00 00
	00		 mov	 DWORD PTR [rbx+184], eax

; 778  :         s->max_chain_length = configuration_table[level].max_chain;

  0013f	41 0f b7 44 cc
	06		 movzx	 eax, WORD PTR [r12+rcx*8+6]
  00145	89 83 a4 00 00
	00		 mov	 DWORD PTR [rbx+164], eax
$LN14@deflatePar:

; 779  :     }
; 780  :     s->strategy = strategy;

  0014b	44 89 b3 b0 00
	00 00		 mov	 DWORD PTR [rbx+176], r14d

; 781  :     return Z_OK;

  00152	33 c0		 xor	 eax, eax
  00154	eb 05		 jmp	 SHORT $LN1@deflatePar
$LN8@deflatePar:

; 753  :         return Z_STREAM_ERROR;

  00156	b8 fe ff ff ff	 mov	 eax, -2
$LN1@deflatePar:

; 782  : }

  0015b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00160	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00165	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0016a	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0016f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00173	41 5f		 pop	 r15
  00175	41 5e		 pop	 r14
  00177	41 5c		 pop	 r12
  00179	c3		 ret	 0
deflateParams ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateTune
_TEXT	SEGMENT
strm$ = 48
good_length$ = 56
max_lazy$ = 64
nice_length$ = 72
max_chain$ = 80
deflateTune PROC					; COMDAT

; 786  :                         int nice_length, int max_chain) {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	44 8b da	 mov	 r11d, edx
  00007	4c 8b d1	 mov	 r10, rcx

; 787  :     deflate_state *s;
; 788  : 
; 789  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000a	e8 00 00 00 00	 call	 deflateStateCheck
  0000f	85 c0		 test	 eax, eax
  00011	74 0a		 je	 SHORT $LN2@deflateTun
  00013	b8 fe ff ff ff	 mov	 eax, -2

; 796  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
$LN2@deflateTun:

; 790  :     s = strm->state;

  0001d	49 8b 4a 28	 mov	 rcx, QWORD PTR [r10+40]

; 791  :     s->good_match = (uInt)good_length;
; 792  :     s->max_lazy_match = (uInt)max_lazy;
; 793  :     s->nice_match = nice_length;
; 794  :     s->max_chain_length = (uInt)max_chain;

  00021	8b 44 24 50	 mov	 eax, DWORD PTR max_chain$[rsp]
  00025	89 81 a4 00 00
	00		 mov	 DWORD PTR [rcx+164], eax

; 795  :     return Z_OK;

  0002b	33 c0		 xor	 eax, eax
  0002d	44 89 99 b4 00
	00 00		 mov	 DWORD PTR [rcx+180], r11d
  00034	44 89 81 a8 00
	00 00		 mov	 DWORD PTR [rcx+168], r8d
  0003b	44 89 89 b8 00
	00 00		 mov	 DWORD PTR [rcx+184], r9d

; 796  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
deflateTune ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateBound
_TEXT	SEGMENT
strm$ = 48
sourceLen$ = 56
deflateBound PROC					; COMDAT

; 822  : uLong ZEXPORT deflateBound(z_streamp strm, uLong sourceLen) {

$LN46:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 823  :     deflate_state *s;
; 824  :     uLong fixedlen, storelen, wraplen;
; 825  : 
; 826  :     /* upper bound for fixed blocks with 9-bit literals and length 255
; 827  :        (memLevel == 2, which is the lowest that may not use stored blocks) --
; 828  :        ~13% overhead plus a small constant */
; 829  :     fixedlen = sourceLen + (sourceLen >> 3) + (sourceLen >> 8) +

  00006	8b da		 mov	 ebx, edx
  00008	44 8b ca	 mov	 r9d, edx
  0000b	41 c1 e9 09	 shr	 r9d, 9
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 03	 shr	 eax, 3

; 830  :                (sourceLen >> 9) + 4;
; 831  : 
; 832  :     /* upper bound for stored blocks with length 127 (memLevel == 1) --
; 833  :        ~4% overhead plus a small constant */
; 834  :     storelen = sourceLen + (sourceLen >> 5) + (sourceLen >> 7) +

  00014	44 8b c2	 mov	 r8d, edx
  00017	83 c0 04	 add	 eax, 4
  0001a	c1 eb 08	 shr	 ebx, 8
  0001d	03 da		 add	 ebx, edx
  0001f	41 c1 e8 0b	 shr	 r8d, 11
  00023	41 03 d9	 add	 ebx, r9d
  00026	44 8b da	 mov	 r11d, edx
  00029	03 d8		 add	 ebx, eax
  0002b	44 8b ca	 mov	 r9d, edx
  0002e	41 c1 e9 07	 shr	 r9d, 7
  00032	8b c2		 mov	 eax, edx
  00034	44 03 ca	 add	 r9d, edx
  00037	c1 e8 05	 shr	 eax, 5
  0003a	83 c0 07	 add	 eax, 7
  0003d	45 03 c8	 add	 r9d, r8d
  00040	44 03 c8	 add	 r9d, eax
  00043	4c 8b d1	 mov	 r10, rcx

; 835  :                (sourceLen >> 11) + 7;
; 836  : 
; 837  :     /* if can't get parameters, return larger bound plus a zlib wrapper */
; 838  :     if (deflateStateCheck(strm))

  00046	e8 00 00 00 00	 call	 deflateStateCheck
  0004b	85 c0		 test	 eax, eax
  0004d	74 11		 je	 SHORT $LN10@deflateBou

; 839  :         return (fixedlen > storelen ? fixedlen : storelen) + 6;

  0004f	41 3b d9	 cmp	 ebx, r9d
  00052	44 0f 47 cb	 cmova	 r9d, ebx
  00056	41 8d 41 06	 lea	 eax, DWORD PTR [r9+6]

; 884  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 885  : }

  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5b		 pop	 rbx
  0005f	c3		 ret	 0
$LN10@deflateBou:

; 840  : 
; 841  :     /* compute wrapper length */
; 842  :     s = strm->state;

  00060	4d 8b 42 28	 mov	 r8, QWORD PTR [r10+40]

; 843  :     switch (s->wrap) {

  00064	41 8b 48 2c	 mov	 ecx, DWORD PTR [r8+44]
  00068	85 c9		 test	 ecx, ecx
  0006a	0f 84 90 00 00
	00		 je	 $LN11@deflateBou
  00070	83 e9 01	 sub	 ecx, 1
  00073	74 74		 je	 SHORT $LN12@deflateBou
  00075	83 f9 01	 cmp	 ecx, 1
  00078	74 0a		 je	 SHORT $LN13@deflateBou

; 871  : #endif
; 872  :     default:                                /* for compiler happiness */
; 873  :         wraplen = 6;

  0007a	b8 06 00 00 00	 mov	 eax, 6
  0007f	e9 7e 00 00 00	 jmp	 $LN2@deflateBou
$LN13@deflateBou:

; 850  : #ifdef GZIP
; 851  :     case 2:                                 /* gzip wrapper */
; 852  :         wraplen = 18;
; 853  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  00084	4d 8b 50 30	 mov	 r10, QWORD PTR [r8+48]
  00088	b8 12 00 00 00	 mov	 eax, 18
  0008d	4d 85 d2	 test	 r10, r10
  00090	74 70		 je	 SHORT $LN2@deflateBou

; 854  :             Bytef *str;
; 855  :             if (s->gzhead->extra != Z_NULL)

  00092	49 83 7a 10 00	 cmp	 QWORD PTR [r10+16], 0
  00097	74 07		 je	 SHORT $LN15@deflateBou

; 856  :                 wraplen += 2 + s->gzhead->extra_len;

  00099	41 8b 42 18	 mov	 eax, DWORD PTR [r10+24]
  0009d	83 c0 14	 add	 eax, 20
$LN15@deflateBou:

; 857  :             str = s->gzhead->name;

  000a0	49 8b 52 20	 mov	 rdx, QWORD PTR [r10+32]

; 858  :             if (str != Z_NULL)

  000a4	48 85 d2	 test	 rdx, rdx
  000a7	74 14		 je	 SHORT $LN5@deflateBou
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@deflateBou:

; 859  :                 do {
; 860  :                     wraplen++;
; 861  :                 } while (*str++);

  000b0	0f b6 0a	 movzx	 ecx, BYTE PTR [rdx]
  000b3	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  000b7	ff c0		 inc	 eax
  000b9	84 c9		 test	 cl, cl
  000bb	75 f3		 jne	 SHORT $LL6@deflateBou
$LN5@deflateBou:

; 862  :             str = s->gzhead->comment;

  000bd	49 8b 52 30	 mov	 rdx, QWORD PTR [r10+48]

; 863  :             if (str != Z_NULL)

  000c1	48 85 d2	 test	 rdx, rdx
  000c4	74 17		 je	 SHORT $LN8@deflateBou
  000c6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL9@deflateBou:

; 864  :                 do {
; 865  :                     wraplen++;
; 866  :                 } while (*str++);

  000d0	0f b6 0a	 movzx	 ecx, BYTE PTR [rdx]
  000d3	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  000d7	ff c0		 inc	 eax
  000d9	84 c9		 test	 cl, cl
  000db	75 f3		 jne	 SHORT $LL9@deflateBou
$LN8@deflateBou:

; 867  :             if (s->gzhead->hcrc)

  000dd	41 83 7a 3c 00	 cmp	 DWORD PTR [r10+60], 0
  000e2	74 1e		 je	 SHORT $LN2@deflateBou

; 868  :                 wraplen += 2;

  000e4	83 c0 02	 add	 eax, 2

; 869  :         }
; 870  :         break;

  000e7	eb 19		 jmp	 SHORT $LN2@deflateBou
$LN12@deflateBou:

; 846  :         break;
; 847  :     case 1:                                 /* zlib wrapper */
; 848  :         wraplen = 6 + (s->strstart ? 4 : 0);

  000e9	41 83 b8 94 00
	00 00 00	 cmp	 DWORD PTR [r8+148], 0
  000f1	b8 06 00 00 00	 mov	 eax, 6
  000f6	b9 0a 00 00 00	 mov	 ecx, 10
  000fb	0f 45 c1	 cmovne	 eax, ecx

; 849  :         break;

  000fe	eb 02		 jmp	 SHORT $LN2@deflateBou
$LN11@deflateBou:

; 844  :     case 0:                                 /* raw deflate */
; 845  :         wraplen = 0;

  00100	33 c0		 xor	 eax, eax
$LN2@deflateBou:

; 874  :     }
; 875  : 
; 876  :     /* if not default parameters, return one of the conservative bounds */
; 877  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  00102	41 8b 48 48	 mov	 ecx, DWORD PTR [r8+72]
  00106	83 f9 0f	 cmp	 ecx, 15
  00109	75 2a		 jne	 SHORT $LN32@deflateBou
  0010b	41 39 48 78	 cmp	 DWORD PTR [r8+120], ecx
  0010f	75 24		 jne	 SHORT $LN32@deflateBou

; 879  :                wraplen;
; 880  : 
; 881  :     /* default settings: return tight bound for that case -- ~0.03% overhead
; 882  :        plus a small constant */
; 883  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  00111	41 8b d3	 mov	 edx, r11d
  00114	41 8b cb	 mov	 ecx, r11d
  00117	c1 ea 0e	 shr	 edx, 14
  0011a	03 d0		 add	 edx, eax
  0011c	c1 e9 19	 shr	 ecx, 25
  0011f	03 d1		 add	 edx, ecx
  00121	41 8b c3	 mov	 eax, r11d
  00124	c1 e8 0c	 shr	 eax, 12
  00127	83 c0 07	 add	 eax, 7
  0012a	03 c2		 add	 eax, edx
  0012c	41 03 c3	 add	 eax, r11d

; 884  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 885  : }

  0012f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00133	5b		 pop	 rbx
  00134	c3		 ret	 0
$LN32@deflateBou:

; 878  :         return (s->w_bits <= s->hash_bits && s->level ? fixedlen : storelen) +

  00135	41 3b 48 78	 cmp	 ecx, DWORD PTR [r8+120]
  00139	77 0a		 ja	 SHORT $LN23@deflateBou
  0013b	41 83 b8 ac 00
	00 00 00	 cmp	 DWORD PTR [r8+172], 0
  00143	75 03		 jne	 SHORT $LN24@deflateBou
$LN23@deflateBou:
  00145	41 8b d9	 mov	 ebx, r9d
$LN24@deflateBou:
  00148	03 c3		 add	 eax, ebx

; 884  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 885  : }

  0014a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0014e	5b		 pop	 rbx
  0014f	c3		 ret	 0
deflateBound ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT putShortMSB
_TEXT	SEGMENT
s$ = 8
b$ = 16
putShortMSB PROC					; COMDAT

; 893  :     put_byte(s, (Byte)(b >> 8));

  00000	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]
  00004	44 8b ca	 mov	 r9d, edx
  00007	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0000b	41 c1 e9 08	 shr	 r9d, 8
  0000f	45 88 0c 00	 mov	 BYTE PTR [r8+rax], r9b
  00013	ff 41 28	 inc	 DWORD PTR [rcx+40]
  00016	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]

; 894  :     put_byte(s, (Byte)(b & 0xff));

  0001a	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0001e	41 88 14 00	 mov	 BYTE PTR [r8+rax], dl
  00022	ff 41 28	 inc	 DWORD PTR [rcx+40]

; 895  : }

  00025	c3		 ret	 0
putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT flush_pending
_TEXT	SEGMENT
strm$ = 48
flush_pending PROC					; COMDAT

; 903  : local void flush_pending(z_streamp strm) {

  00000	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 904  :     unsigned len;
; 905  :     deflate_state *s = strm->state;

  0000f	48 8b 79 28	 mov	 rdi, QWORD PTR [rcx+40]
  00013	48 8b f1	 mov	 rsi, rcx

; 906  : 
; 907  :     _tr_flush_bits(s);

  00016	48 8b cf	 mov	 rcx, rdi
  00019	e8 00 00 00 00	 call	 _tr_flush_bits

; 908  :     len = s->pending;
; 909  :     if (len > strm->avail_out) len = strm->avail_out;

  0001e	8b 6e 18	 mov	 ebp, DWORD PTR [rsi+24]

; 910  :     if (len == 0) return;

  00021	39 6f 28	 cmp	 DWORD PTR [rdi+40], ebp
  00024	0f 46 6f 28	 cmovbe	 ebp, DWORD PTR [rdi+40]
  00028	85 ed		 test	 ebp, ebp
  0002a	74 37		 je	 SHORT $LN4@flush_pend

; 911  : 
; 912  :     zmemcpy(strm->next_out, s->pending_out, len);

  0002c	48 8b 57 20	 mov	 rdx, QWORD PTR [rdi+32]
  00030	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00034	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00039	44 8b c5	 mov	 r8d, ebp
  0003c	8b dd		 mov	 ebx, ebp
  0003e	e8 00 00 00 00	 call	 memcpy

; 913  :     strm->next_out  += len;

  00043	48 01 5e 10	 add	 QWORD PTR [rsi+16], rbx

; 914  :     s->pending_out  += len;

  00047	48 01 5f 20	 add	 QWORD PTR [rdi+32], rbx

; 915  :     strm->total_out += len;

  0004b	01 6e 1c	 add	 DWORD PTR [rsi+28], ebp

; 916  :     strm->avail_out -= len;

  0004e	29 6e 18	 sub	 DWORD PTR [rsi+24], ebp

; 917  :     s->pending      -= len;

  00051	29 6f 28	 sub	 DWORD PTR [rdi+40], ebp
  00054	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 918  :     if (s->pending == 0) {

  00059	75 08		 jne	 SHORT $LN4@flush_pend

; 919  :         s->pending_out = s->pending_buf;

  0005b	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  0005f	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
$LN4@flush_pend:

; 920  :     }
; 921  : }

  00063	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00068	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflateCopy
_TEXT	SEGMENT
dest$ = 48
source$ = 56
deflateCopy PROC					; COMDAT

; 1270 : int ZEXPORT deflateCopy(z_streamp dest, z_streamp source) {

$LN19:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx
  00009	4c 8b c2	 mov	 r8, rdx

; 1271 : #ifdef MAXSEG_64K
; 1272 :     (void)dest;
; 1273 :     (void)source;
; 1274 :     return Z_STREAM_ERROR;
; 1275 : #else
; 1276 :     deflate_state *ds;
; 1277 :     deflate_state *ss;
; 1278 : 
; 1279 : 
; 1280 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  0000c	48 8b ca	 mov	 rcx, rdx
  0000f	e8 00 00 00 00	 call	 deflateStateCheck
  00014	85 c0		 test	 eax, eax
  00016	0f 85 c3 01 00
	00		 jne	 $LN3@deflateCop
  0001c	48 85 ff	 test	 rdi, rdi
  0001f	0f 84 ba 01 00
	00		 je	 $LN3@deflateCop

; 1282 :     }
; 1283 : 
; 1284 :     ss = source->state;
; 1285 : 
; 1286 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  00025	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  00029	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 1287 : 
; 1288 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  0002e	8d 50 01	 lea	 edx, QWORD PTR [rax+1]
  00031	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00036	49 8b 70 28	 mov	 rsi, QWORD PTR [r8+40]
  0003a	0f 11 07	 movups	 XMMWORD PTR [rdi], xmm0
  0003d	41 0f 10 48 10	 movups	 xmm1, XMMWORD PTR [r8+16]
  00042	0f 11 4f 10	 movups	 XMMWORD PTR [rdi+16], xmm1
  00046	41 0f 10 40 20	 movups	 xmm0, XMMWORD PTR [r8+32]
  0004b	0f 11 47 20	 movups	 XMMWORD PTR [rdi+32], xmm0
  0004f	41 0f 10 48 30	 movups	 xmm1, XMMWORD PTR [r8+48]
  00054	0f 11 4f 30	 movups	 XMMWORD PTR [rdi+48], xmm1
  00058	41 0f 10 40 40	 movups	 xmm0, XMMWORD PTR [r8+64]
  0005d	0f 11 47 40	 movups	 XMMWORD PTR [rdi+64], xmm0
  00061	f2 41 0f 10 48
	50		 movsd	 xmm1, QWORD PTR [r8+80]
  00067	41 b8 18 17 00
	00		 mov	 r8d, 5912		; 00001718H
  0006d	f2 0f 11 4f 50	 movsd	 QWORD PTR [rdi+80], xmm1
  00072	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  00076	ff 57 30	 call	 QWORD PTR [rdi+48]
  00079	48 8b d8	 mov	 rbx, rax

; 1289 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  0007c	48 85 c0	 test	 rax, rax
  0007f	0f 84 45 01 00
	00		 je	 $LN17@deflateCop

; 1290 :     dest->state = (struct internal_state FAR *) ds;
; 1291 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00085	41 b8 18 17 00
	00		 mov	 r8d, 5912		; 00001718H
  0008b	48 89 47 28	 mov	 QWORD PTR [rdi+40], rax
  0008f	48 8b d6	 mov	 rdx, rsi
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 memcpy

; 1292 :     ds->strm = dest;
; 1293 : 
; 1294 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  0009a	8b 53 44	 mov	 edx, DWORD PTR [rbx+68]
  0009d	41 b8 02 00 00
	00		 mov	 r8d, 2
  000a3	48 89 3b	 mov	 QWORD PTR [rbx], rdi
  000a6	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  000aa	ff 57 30	 call	 QWORD PTR [rdi+48]

; 1295 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  000ad	8b 53 44	 mov	 edx, DWORD PTR [rbx+68]
  000b0	41 b8 02 00 00
	00		 mov	 r8d, 2
  000b6	48 89 43 50	 mov	 QWORD PTR [rbx+80], rax
  000ba	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  000be	ff 57 30	 call	 QWORD PTR [rdi+48]

; 1296 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  000c1	8b 53 74	 mov	 edx, DWORD PTR [rbx+116]
  000c4	41 b8 02 00 00
	00		 mov	 r8d, 2
  000ca	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
  000ce	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  000d2	ff 57 30	 call	 QWORD PTR [rdi+48]

; 1297 :     ds->pending_buf = (uchf *) ZALLOC(dest, ds->lit_bufsize, 4);

  000d5	8b 93 f0 16 00
	00		 mov	 edx, DWORD PTR [rbx+5872]
  000db	41 b8 04 00 00
	00		 mov	 r8d, 4
  000e1	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax
  000e5	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  000e9	ff 57 30	 call	 QWORD PTR [rdi+48]

; 1298 : 
; 1299 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000ec	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  000f0	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  000f4	48 85 c9	 test	 rcx, rcx
  000f7	0f 84 c5 00 00
	00		 je	 $LN6@deflateCop
  000fd	48 83 7b 60 00	 cmp	 QWORD PTR [rbx+96], 0
  00102	0f 84 ba 00 00
	00		 je	 $LN6@deflateCop
  00108	48 83 7b 68 00	 cmp	 QWORD PTR [rbx+104], 0
  0010d	0f 84 af 00 00
	00		 je	 $LN6@deflateCop
  00113	48 85 c0	 test	 rax, rax
  00116	0f 84 a6 00 00
	00		 je	 $LN6@deflateCop

; 1303 :     }
; 1304 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1305 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  0011c	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  0011f	48 8b 56 50	 mov	 rdx, QWORD PTR [rsi+80]
  00123	44 8d 04 00	 lea	 r8d, DWORD PTR [rax+rax]
  00127	e8 00 00 00 00	 call	 memcpy

; 1306 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  0012c	44 8b 43 44	 mov	 r8d, DWORD PTR [rbx+68]
  00130	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00134	4d 03 c0	 add	 r8, r8
  00137	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0013b	e8 00 00 00 00	 call	 memcpy

; 1307 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  00140	44 8b 43 74	 mov	 r8d, DWORD PTR [rbx+116]
  00144	48 8b 56 68	 mov	 rdx, QWORD PTR [rsi+104]
  00148	4d 03 c0	 add	 r8, r8
  0014b	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0014f	e8 00 00 00 00	 call	 memcpy

; 1308 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00154	44 8b 43 18	 mov	 r8d, DWORD PTR [rbx+24]
  00158	48 8b 56 10	 mov	 rdx, QWORD PTR [rsi+16]
  0015c	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00160	e8 00 00 00 00	 call	 memcpy

; 1309 : 
; 1310 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00165	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00169	48 2b 46 10	 sub	 rax, QWORD PTR [rsi+16]
  0016d	48 03 43 10	 add	 rax, QWORD PTR [rbx+16]
  00171	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00176	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 1311 :     ds->sym_buf = ds->pending_buf + ds->lit_bufsize;

  0017a	8b 83 f0 16 00
	00		 mov	 eax, DWORD PTR [rbx+5872]
  00180	48 03 43 10	 add	 rax, QWORD PTR [rbx+16]
  00184	48 89 83 e8 16
	00 00		 mov	 QWORD PTR [rbx+5864], rax

; 1312 : 
; 1313 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  0018b	48 8d 83 bc 00
	00 00		 lea	 rax, QWORD PTR [rbx+188]
  00192	48 89 83 40 0b
	00 00		 mov	 QWORD PTR [rbx+2880], rax

; 1314 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  00199	48 8d 83 b0 09
	00 00		 lea	 rax, QWORD PTR [rbx+2480]
  001a0	48 89 83 58 0b
	00 00		 mov	 QWORD PTR [rbx+2904], rax

; 1315 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  001a7	48 8d 83 a4 0a
	00 00		 lea	 rax, QWORD PTR [rbx+2724]
  001ae	48 89 83 70 0b
	00 00		 mov	 QWORD PTR [rbx+2928], rax

; 1316 : 
; 1317 :     return Z_OK;

  001b5	33 c0		 xor	 eax, eax
  001b7	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 1318 : #endif /* MAXSEG_64K */
; 1319 : }

  001bc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c0	5f		 pop	 rdi
  001c1	c3		 ret	 0
$LN6@deflateCop:

; 1300 :         ds->pending_buf == Z_NULL) {
; 1301 :         deflateEnd (dest);

  001c2	48 8b cf	 mov	 rcx, rdi
  001c5	e8 00 00 00 00	 call	 deflateEnd
$LN17@deflateCop:

; 1302 :         return Z_MEM_ERROR;

  001ca	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001cf	b8 fc ff ff ff	 mov	 eax, -4
  001d4	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 1318 : #endif /* MAXSEG_64K */
; 1319 : }

  001d9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001dd	5f		 pop	 rdi
  001de	c3		 ret	 0
$LN3@deflateCop:

; 1281 :         return Z_STREAM_ERROR;

  001df	b8 fe ff ff ff	 mov	 eax, -2

; 1318 : #endif /* MAXSEG_64K */
; 1319 : }

  001e4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e8	5f		 pop	 rdi
  001e9	c3		 ret	 0
deflateCopy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT longest_match
_TEXT	SEGMENT
tv700 = 48
s$ = 48
cur_match$ = 56
longest_match PROC					; COMDAT

; 1331 : local uInt longest_match(deflate_state *s, IPos cur_match) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15

; 1332 :     unsigned chain_length = s->max_chain_length;/* max hash chain length */
; 1333 :     register Bytef *scan = s->window + s->strstart; /* current string */

  00018	44 8b 89 94 00
	00 00		 mov	 r9d, DWORD PTR [rcx+148]
  0001f	44 8b da	 mov	 r11d, edx
  00022	44 8b 91 a4 00
	00 00		 mov	 r10d, DWORD PTR [rcx+164]
  00029	4c 8b f1	 mov	 r14, rcx

; 1334 :     register Bytef *match;                      /* matched string */
; 1335 :     register int len;                           /* length of current match */
; 1336 :     int best_len = (int)s->prev_length;         /* best match length so far */

  0002c	48 63 99 a0 00
	00 00		 movsxd	 rbx, DWORD PTR [rcx+160]

; 1337 :     int nice_match = s->nice_match;             /* stop if match long enough */
; 1338 :     IPos limit = s->strstart > (IPos)MAX_DIST(s) ?

  00033	45 33 e4	 xor	 r12d, r12d
  00036	44 8b b9 b8 00
	00 00		 mov	 r15d, DWORD PTR [rcx+184]
  0003d	41 8b d1	 mov	 edx, r9d
  00040	8b 41 44	 mov	 eax, DWORD PTR [rcx+68]
  00043	2b d0		 sub	 edx, eax
  00045	48 8b 79 50	 mov	 rdi, QWORD PTR [rcx+80]
  00049	81 c2 06 01 00
	00		 add	 edx, 262		; 00000106H

; 1339 :         s->strstart - (IPos)MAX_DIST(s) : NIL;
; 1340 :     /* Stop when cur_match becomes <= limit. To simplify the code,
; 1341 :      * we prevent matches with the string of window index 0.
; 1342 :      */
; 1343 :     Posf *prev = s->prev;

  0004f	4d 8b 6e 60	 mov	 r13, QWORD PTR [r14+96]
  00053	49 03 f9	 add	 rdi, r9
  00056	48 89 7c 24 30	 mov	 QWORD PTR tv700[rsp], rdi
  0005b	4c 8b c7	 mov	 r8, rdi
  0005e	8d 88 fa fe ff
	ff		 lea	 ecx, DWORD PTR [rax-262]
  00064	44 3b c9	 cmp	 r9d, ecx

; 1344 :     uInt wmask = s->w_mask;
; 1345 : 
; 1346 : #ifdef UNALIGNED_OK
; 1347 :     /* Compare two bytes at a time. Note: this is not always beneficial.
; 1348 :      * Try with and without -DUNALIGNED_OK to check.
; 1349 :      */
; 1350 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
; 1351 :     register ush scan_start = *(ushf*)scan;
; 1352 :     register ush scan_end   = *(ushf*)(scan + best_len - 1);
; 1353 : #else
; 1354 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;
; 1355 :     register Byte scan_end1  = scan[best_len - 1];

  00067	0f b6 74 3b ff	 movzx	 esi, BYTE PTR [rbx+rdi-1]

; 1356 :     register Byte scan_end   = scan[best_len];

  0006c	0f b6 2c 3b	 movzx	 ebp, BYTE PTR [rbx+rdi]
  00070	44 0f 47 e2	 cmova	 r12d, edx
  00074	48 8d 97 02 01
	00 00		 lea	 rdx, QWORD PTR [rdi+258]

; 1357 : #endif
; 1358 : 
; 1359 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1360 :      * It is easy to get rid of this optimization if necessary.
; 1361 :      */
; 1362 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1363 : 
; 1364 :     /* Do not waste too much time if we already have a good match: */
; 1365 :     if (s->prev_length >= s->good_match) {
; 1366 :         chain_length >>= 2;
; 1367 :     }
; 1368 :     /* Do not look for matches beyond the end of the input. This is necessary
; 1369 :      * to make deflate deterministic.
; 1370 :      */
; 1371 :     if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;

  0007b	41 8b fa	 mov	 edi, r10d
  0007e	c1 ef 02	 shr	 edi, 2
  00081	41 3b 9e b4 00
	00 00		 cmp	 ebx, DWORD PTR [r14+180]
  00088	41 0f 42 fa	 cmovb	 edi, r10d
  0008c	45 8b 96 9c 00
	00 00		 mov	 r10d, DWORD PTR [r14+156]
  00093	45 3b fa	 cmp	 r15d, r10d
  00096	45 0f 47 fa	 cmova	 r15d, r10d
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL4@longest_ma:

; 1372 : 
; 1373 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1374 :            "need lookahead");
; 1375 : 
; 1376 :     do {
; 1377 :         Assert(cur_match < s->strstart, "no future");
; 1378 :         match = s->window + cur_match;

  000a0	49 8b 4e 50	 mov	 rcx, QWORD PTR [r14+80]
  000a4	45 8b cb	 mov	 r9d, r11d
  000a7	49 03 c9	 add	 rcx, r9

; 1379 : 
; 1380 :         /* Skip to next match if the match length cannot increase
; 1381 :          * or if the match length is less than 2.  Note that the checks below
; 1382 :          * for insufficient lookahead only occur occasionally for performance
; 1383 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1384 :          * conditional jumps will be made that depend on those values.
; 1385 :          * However the length of the match is limited to the lookahead, so
; 1386 :          * the output of deflate is not affected by the uninitialized values.
; 1387 :          */
; 1388 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1389 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1390 :          * UNALIGNED_OK if your compiler uses a different size.
; 1391 :          */
; 1392 :         if (*(ushf*)(match + best_len - 1) != scan_end ||
; 1393 :             *(ushf*)match != scan_start) continue;
; 1394 : 
; 1395 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1396 :          * always equal when the other bytes match, given that the hash keys
; 1397 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1398 :          * strstart + 3, + 5, up to strstart + 257. We check for insufficient
; 1399 :          * lookahead only every 4th comparison; the 128th check will be made
; 1400 :          * at strstart + 257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1401 :          * necessary to put more guard bytes at the end of the window, or
; 1402 :          * to check more often for insufficient lookahead.
; 1403 :          */
; 1404 :         Assert(scan[2] == match[2], "scan[2]?");
; 1405 :         scan++, match++;
; 1406 :         do {
; 1407 :         } while (*(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1408 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1409 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1410 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1411 :                  scan < strend);
; 1412 :         /* The funny "do {}" generates better code on most compilers */
; 1413 : 
; 1414 :         /* Here, scan <= window + strstart + 257 */
; 1415 :         Assert(scan <= s->window + (unsigned)(s->window_size - 1),
; 1416 :                "wild scan");
; 1417 :         if (*scan == *match) scan++;
; 1418 : 
; 1419 :         len = (MAX_MATCH - 1) - (int)(strend - scan);
; 1420 :         scan = strend - (MAX_MATCH-1);
; 1421 : 
; 1422 : #else /* UNALIGNED_OK */
; 1423 : 
; 1424 :         if (match[best_len]     != scan_end  ||
; 1425 :             match[best_len - 1] != scan_end1 ||
; 1426 :             *match              != *scan     ||

  000aa	48 63 c3	 movsxd	 rax, ebx
  000ad	40 38 2c 08	 cmp	 BYTE PTR [rax+rcx], bpl
  000b1	0f 85 ca 00 00
	00		 jne	 $LN2@longest_ma
  000b7	40 38 74 08 ff	 cmp	 BYTE PTR [rax+rcx-1], sil
  000bc	0f 85 bf 00 00
	00		 jne	 $LN2@longest_ma
  000c2	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  000c6	38 01		 cmp	 BYTE PTR [rcx], al
  000c8	0f 85 b3 00 00
	00		 jne	 $LN2@longest_ma
  000ce	41 0f b6 40 01	 movzx	 eax, BYTE PTR [r8+1]
  000d3	38 41 01	 cmp	 BYTE PTR [rcx+1], al
  000d6	0f 85 a5 00 00
	00		 jne	 $LN2@longest_ma

; 1427 :             *++match            != scan[1])      continue;
; 1428 : 
; 1429 :         /* The check at best_len - 1 can be removed because it will be made
; 1430 :          * again later. (This heuristic is not always a win.)
; 1431 :          * It is not necessary to compare scan[2] and match[2] since they
; 1432 :          * are always equal when the other bytes match, given that
; 1433 :          * the hash keys are equal and that HASH_BITS >= 8.
; 1434 :          */
; 1435 :         scan += 2, match++;

  000dc	49 83 c0 02	 add	 r8, 2
  000e0	48 83 c1 02	 add	 rcx, 2
$LL7@longest_ma:

; 1436 :         Assert(*scan == *match, "match[2]?");
; 1437 : 
; 1438 :         /* We check for insufficient lookahead only every 8th comparison;
; 1439 :          * the 256th check will be made at strstart + 258.
; 1440 :          */
; 1441 :         do {
; 1442 :         } while (*++scan == *++match && *++scan == *++match &&
; 1443 :                  *++scan == *++match && *++scan == *++match &&
; 1444 :                  *++scan == *++match && *++scan == *++match &&
; 1445 :                  *++scan == *++match && *++scan == *++match &&

  000e4	0f b6 41 01	 movzx	 eax, BYTE PTR [rcx+1]
  000e8	49 ff c0	 inc	 r8
  000eb	41 38 00	 cmp	 BYTE PTR [r8], al
  000ee	75 5d		 jne	 SHORT $LN12@longest_ma
  000f0	0f b6 41 02	 movzx	 eax, BYTE PTR [rcx+2]
  000f4	49 ff c0	 inc	 r8
  000f7	41 38 00	 cmp	 BYTE PTR [r8], al
  000fa	75 51		 jne	 SHORT $LN12@longest_ma
  000fc	0f b6 41 03	 movzx	 eax, BYTE PTR [rcx+3]
  00100	49 ff c0	 inc	 r8
  00103	41 38 00	 cmp	 BYTE PTR [r8], al
  00106	75 45		 jne	 SHORT $LN12@longest_ma
  00108	0f b6 41 04	 movzx	 eax, BYTE PTR [rcx+4]
  0010c	49 ff c0	 inc	 r8
  0010f	41 38 00	 cmp	 BYTE PTR [r8], al
  00112	75 39		 jne	 SHORT $LN12@longest_ma
  00114	0f b6 41 05	 movzx	 eax, BYTE PTR [rcx+5]
  00118	49 ff c0	 inc	 r8
  0011b	41 38 00	 cmp	 BYTE PTR [r8], al
  0011e	75 2d		 jne	 SHORT $LN12@longest_ma
  00120	0f b6 41 06	 movzx	 eax, BYTE PTR [rcx+6]
  00124	49 ff c0	 inc	 r8
  00127	41 38 00	 cmp	 BYTE PTR [r8], al
  0012a	75 21		 jne	 SHORT $LN12@longest_ma
  0012c	0f b6 41 07	 movzx	 eax, BYTE PTR [rcx+7]
  00130	49 ff c0	 inc	 r8
  00133	41 38 00	 cmp	 BYTE PTR [r8], al
  00136	75 15		 jne	 SHORT $LN12@longest_ma
  00138	0f b6 41 08	 movzx	 eax, BYTE PTR [rcx+8]
  0013c	48 83 c1 08	 add	 rcx, 8
  00140	49 ff c0	 inc	 r8
  00143	41 38 00	 cmp	 BYTE PTR [r8], al
  00146	75 05		 jne	 SHORT $LN12@longest_ma
  00148	4c 3b c2	 cmp	 r8, rdx
  0014b	72 97		 jb	 SHORT $LL7@longest_ma
$LN12@longest_ma:

; 1446 :                  scan < strend);
; 1447 : 
; 1448 :         Assert(scan <= s->window + (unsigned)(s->window_size - 1),
; 1449 :                "wild scan");
; 1450 : 
; 1451 :         len = MAX_MATCH - (int)(strend - scan);

  0014d	44 2b c2	 sub	 r8d, edx
  00150	49 63 c0	 movsxd	 rax, r8d
  00153	41 8d 88 02 01
	00 00		 lea	 ecx, DWORD PTR [r8+258]

; 1452 :         scan = strend - MAX_MATCH;

  0015a	4c 8b 44 24 30	 mov	 r8, QWORD PTR tv700[rsp]

; 1453 : 
; 1454 : #endif /* UNALIGNED_OK */
; 1455 : 
; 1456 :         if (len > best_len) {

  0015f	3b cb		 cmp	 ecx, ebx
  00161	7e 1e		 jle	 SHORT $LN2@longest_ma

; 1457 :             s->match_start = cur_match;

  00163	45 89 9e 98 00
	00 00		 mov	 DWORD PTR [r14+152], r11d

; 1458 :             best_len = len;

  0016a	8b d9		 mov	 ebx, ecx

; 1459 :             if (len >= nice_match) break;

  0016c	41 3b cf	 cmp	 ecx, r15d
  0016f	7d 2b		 jge	 SHORT $LN3@longest_ma

; 1460 : #ifdef UNALIGNED_OK
; 1461 :             scan_end = *(ushf*)(scan + best_len - 1);
; 1462 : #else
; 1463 :             scan_end1  = scan[best_len - 1];

  00171	0f b6 74 10 ff	 movzx	 esi, BYTE PTR [rax+rdx-1]

; 1464 :             scan_end   = scan[best_len];

  00176	48 63 c1	 movsxd	 rax, ecx
  00179	0f b6 ac 10 fe
	fe ff ff	 movzx	 ebp, BYTE PTR [rax+rdx-258]
$LN2@longest_ma:

; 1465 : #endif
; 1466 :         }
; 1467 :     } while ((cur_match = prev[cur_match & wmask]) > limit
; 1468 :              && --chain_length != 0);

  00181	41 8b 4e 4c	 mov	 ecx, DWORD PTR [r14+76]
  00185	49 23 c9	 and	 rcx, r9
  00188	45 0f b7 5c 4d
	00		 movzx	 r11d, WORD PTR [r13+rcx*2]
  0018e	45 3b dc	 cmp	 r11d, r12d
  00191	76 09		 jbe	 SHORT $LN3@longest_ma
  00193	83 c7 ff	 add	 edi, -1			; ffffffffH
  00196	0f 85 04 ff ff
	ff		 jne	 $LL4@longest_ma
$LN3@longest_ma:

; 1469 : 
; 1470 :     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;
; 1471 :     return s->lookahead;
; 1472 : }

  0019c	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  001a1	41 3b da	 cmp	 ebx, r10d
  001a4	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  001a9	44 0f 46 d3	 cmovbe	 r10d, ebx
  001ad	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  001b2	41 8b c2	 mov	 eax, r10d
  001b5	41 5f		 pop	 r15
  001b7	41 5e		 pop	 r14
  001b9	41 5d		 pop	 r13
  001bb	41 5c		 pop	 r12
  001bd	5f		 pop	 rdi
  001be	c3		 ret	 0
longest_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflate_stored
_TEXT	SEGMENT
tv1371 = 96
s$ = 96
flush$ = 104
used$2$ = 112
deflate_stored PROC					; COMDAT

; 1602 : local block_state deflate_stored(deflate_state *s, int flush) {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 55		 push	 r13
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1603 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1604 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1605 :      * large input and output buffers, the stored block size will be larger.
; 1606 :      */
; 1607 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  0000d	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00010	48 8b d9	 mov	 rbx, rcx
  00013	8b 49 44	 mov	 ecx, DWORD PTR [rcx+68]
  00016	83 c0 fb	 add	 eax, -5			; fffffffbH
  00019	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12

; 1608 : 
; 1609 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1610 :      * possible. If flushing, copy the remaining available input to next_out as
; 1611 :      * stored blocks, if there is enough space.
; 1612 :      */
; 1613 :     unsigned len, left, have, last = 0;

  0001e	3b c1		 cmp	 eax, ecx

; 1614 :     unsigned used = s->strm->avail_in;

  00020	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp
  00025	44 8b fa	 mov	 r15d, edx
  00028	0f 46 c8	 cmovbe	 ecx, eax
  0002b	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  00030	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00033	45 33 f6	 xor	 r14d, r14d
  00036	44 8b e9	 mov	 r13d, ecx
  00039	44 8b 60 08	 mov	 r12d, DWORD PTR [rax+8]
  0003d	44 89 64 24 70	 mov	 DWORD PTR used$2$[rsp], r12d
  00042	41 bc ff ff 00
	00		 mov	 r12d, 65535		; 0000ffffH
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@deflate_st:

; 1615 :     do {
; 1616 :         /* Set len to the maximum size block that we can copy directly with the
; 1617 :          * available input data and output space. Set left to how much of that
; 1618 :          * would be copied from what's left in the window.
; 1619 :          */
; 1620 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1621 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00050	8b 83 10 17 00
	00		 mov	 eax, DWORD PTR [rbx+5904]

; 1622 :         if (s->strm->avail_out < have)          /* need room for header */

  00056	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00059	83 c0 2a	 add	 eax, 42			; 0000002aH
  0005c	c1 f8 03	 sar	 eax, 3
  0005f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]
  00062	3b f0		 cmp	 esi, eax
  00064	0f 82 27 01 00
	00		 jb	 $LN3@deflate_st

; 1623 :             break;
; 1624 :             /* maximum stored block length that will fit in avail_out: */
; 1625 :         have = s->strm->avail_out - have;
; 1626 :         left = s->strstart - s->block_start;    /* bytes left in window */

  0006a	8b ab 94 00 00
	00		 mov	 ebp, DWORD PTR [rbx+148]
  00070	2b f0		 sub	 esi, eax
  00072	2b ab 84 00 00
	00		 sub	 ebp, DWORD PTR [rbx+132]

; 1627 :         if (len > (ulg)left + s->strm->avail_in)

  00078	41 8b c4	 mov	 eax, r12d
  0007b	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0007e	03 cd		 add	 ecx, ebp
  00080	41 3b cc	 cmp	 ecx, r12d
  00083	0f 42 c1	 cmovb	 eax, ecx

; 1628 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1629 :         if (len > have)
; 1630 :             len = have;                         /* limit len to the output */
; 1631 : 
; 1632 :         /* If the stored block would be less than min_block in length, or if
; 1633 :          * unable to copy all of the available input when flushing, then try
; 1634 :          * copying to the window and the pending buffer instead. Also don't
; 1635 :          * write an empty block when flushing -- deflate() does that.
; 1636 :          */
; 1637 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  00086	3b c6		 cmp	 eax, esi
  00088	0f 46 f0	 cmovbe	 esi, eax
  0008b	41 3b f5	 cmp	 esi, r13d
  0008e	73 1f		 jae	 SHORT $LN51@deflate_st
  00090	85 f6		 test	 esi, esi
  00092	75 0a		 jne	 SHORT $LN10@deflate_st
  00094	41 83 ff 04	 cmp	 r15d, 4
  00098	0f 85 f3 00 00
	00		 jne	 $LN3@deflate_st
$LN10@deflate_st:
  0009e	45 85 ff	 test	 r15d, r15d
  000a1	0f 84 ea 00 00
	00		 je	 $LN3@deflate_st
  000a7	3b f1		 cmp	 esi, ecx
  000a9	0f 85 e2 00 00
	00		 jne	 $LN3@deflate_st
$LN51@deflate_st:

; 1638 :                                 flush == Z_NO_FLUSH ||
; 1639 :                                 len != left + s->strm->avail_in))
; 1640 :             break;
; 1641 : 
; 1642 :         /* Make a dummy stored block in pending to get the header bytes,
; 1643 :          * including any pending bits. This also updates the debugging counts.
; 1644 :          */
; 1645 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  000af	41 83 ff 04	 cmp	 r15d, 4
  000b3	75 0a		 jne	 SHORT $LN52@deflate_st
  000b5	3b f1		 cmp	 esi, ecx
  000b7	75 06		 jne	 SHORT $LN52@deflate_st
  000b9	45 8d 77 fd	 lea	 r14d, QWORD PTR [r15-3]
  000bd	eb 03		 jmp	 SHORT $LN36@deflate_st
$LN52@deflate_st:
  000bf	45 33 f6	 xor	 r14d, r14d
$LN36@deflate_st:

; 1646 :         _tr_stored_block(s, (char *)0, 0L, last);

  000c2	45 8b ce	 mov	 r9d, r14d
  000c5	45 33 c0	 xor	 r8d, r8d
  000c8	33 d2		 xor	 edx, edx
  000ca	48 8b cb	 mov	 rcx, rbx
  000cd	e8 00 00 00 00	 call	 _tr_stored_block

; 1647 : 
; 1648 :         /* Replace the lengths in the dummy stored block with len. */
; 1649 :         s->pending_buf[s->pending - 4] = len;

  000d2	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 1650 :         s->pending_buf[s->pending - 3] = len >> 8;

  000d5	8b d6		 mov	 edx, esi
  000d7	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000db	83 e9 04	 sub	 ecx, 4
  000de	c1 ea 08	 shr	 edx, 8
  000e1	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  000e5	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  000e8	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000ec	83 e9 03	 sub	 ecx, 3
  000ef	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1651 :         s->pending_buf[s->pending - 2] = ~len;

  000f2	40 0f b6 d6	 movzx	 edx, sil
  000f6	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  000f9	f6 d2		 not	 dl
  000fb	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000ff	83 e9 02	 sub	 ecx, 2
  00102	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1652 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  00105	8b d6		 mov	 edx, esi
  00107	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  0010a	f7 d2		 not	 edx
  0010c	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00110	ff c9		 dec	 ecx
  00112	c1 ea 08	 shr	 edx, 8
  00115	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1653 : 
; 1654 :         /* Write the stored block header bytes. */
; 1655 :         flush_pending(s->strm);

  00118	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0011b	e8 00 00 00 00	 call	 flush_pending

; 1656 : 
; 1657 : #ifdef ZLIB_DEBUG
; 1658 :         /* Update debugging counts for the data about to be copied. */
; 1659 :         s->compressed_len += len << 3;
; 1660 :         s->bits_sent += len << 3;
; 1661 : #endif
; 1662 : 
; 1663 :         /* Copy uncompressed bytes from the window to next_out. */
; 1664 :         if (left) {

  00120	85 ed		 test	 ebp, ebp
  00122	74 3c		 je	 SHORT $LN50@deflate_st

; 1665 :             if (left > len)
; 1666 :                 left = len;
; 1667 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  00124	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00127	3b ee		 cmp	 ebp, esi
  00129	48 63 93 84 00
	00 00		 movsxd	 rdx, DWORD PTR [rbx+132]
  00130	0f 47 ee	 cmova	 ebp, esi
  00133	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00137	44 8b c5	 mov	 r8d, ebp
  0013a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0013e	8b fd		 mov	 edi, ebp
  00140	e8 00 00 00 00	 call	 memcpy

; 1668 :             s->strm->next_out += left;

  00145	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00148	48 01 78 10	 add	 QWORD PTR [rax+16], rdi

; 1669 :             s->strm->avail_out -= left;

  0014c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0014f	29 68 18	 sub	 DWORD PTR [rax+24], ebp

; 1670 :             s->strm->total_out += left;

  00152	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00155	01 68 1c	 add	 DWORD PTR [rax+28], ebp

; 1671 :             s->block_start += left;

  00158	01 ab 84 00 00
	00		 add	 DWORD PTR [rbx+132], ebp

; 1672 :             len -= left;

  0015e	2b f5		 sub	 esi, ebp
$LN50@deflate_st:

; 1673 :         }
; 1674 : 
; 1675 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1676 :          * the check value.
; 1677 :          */
; 1678 :         if (len) {

  00160	85 f6		 test	 esi, esi
  00162	74 24		 je	 SHORT $LN2@deflate_st

; 1679 :             read_buf(s->strm, s->strm->next_out, len);

  00164	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00167	44 8b c6	 mov	 r8d, esi
  0016a	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  0016e	e8 00 00 00 00	 call	 read_buf

; 1680 :             s->strm->next_out += len;

  00173	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00176	8b c6		 mov	 eax, esi
  00178	48 01 41 10	 add	 QWORD PTR [rcx+16], rax

; 1681 :             s->strm->avail_out -= len;

  0017c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0017f	29 70 18	 sub	 DWORD PTR [rax+24], esi

; 1682 :             s->strm->total_out += len;

  00182	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00185	01 70 1c	 add	 DWORD PTR [rax+28], esi
$LN2@deflate_st:

; 1683 :         }
; 1684 :     } while (last == 0);

  00188	45 85 f6	 test	 r14d, r14d
  0018b	0f 84 bf fe ff
	ff		 je	 $LL4@deflate_st
$LN3@deflate_st:

; 1685 : 
; 1686 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1687 :      * data, or append all of the copied data to the existing window if less
; 1688 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1689 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1690 :      * a non-zero compression level.
; 1691 :      */
; 1692 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00191	48 8b 03	 mov	 rax, QWORD PTR [rbx]

; 1693 :     if (used) {

  00194	4c 8d ab 84 00
	00 00		 lea	 r13, QWORD PTR [rbx+132]
  0019b	44 8b 64 24 70	 mov	 r12d, DWORD PTR used$2$[rsp]
  001a0	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  001a5	44 2b 60 08	 sub	 r12d, DWORD PTR [rax+8]
  001a9	0f 84 cf 00 00
	00		 je	 $LN57@deflate_st

; 1694 :         /* If any input was used, then no unused input remains in the window,
; 1695 :          * therefore s->block_start == s->strstart.
; 1696 :          */
; 1697 :         if (used >= s->w_size) {    /* supplant the previous history */

  001af	8b 53 44	 mov	 edx, DWORD PTR [rbx+68]
  001b2	44 3b e2	 cmp	 r12d, edx
  001b5	72 33		 jb	 SHORT $LN15@deflate_st

; 1698 :             s->matches = 2;         /* clear hash */
; 1699 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  001b7	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  001bb	44 8b c2	 mov	 r8d, edx
  001be	c7 83 04 17 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+5892], 2
  001c8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001cb	49 2b d0	 sub	 rdx, r8
  001ce	e8 00 00 00 00	 call	 memcpy

; 1700 :             s->strstart = s->w_size;

  001d3	8b 53 44	 mov	 edx, DWORD PTR [rbx+68]

; 1701 :             s->insert = s->strstart;

  001d6	49 8b c5	 mov	 rax, r13
  001d9	89 93 94 00 00
	00		 mov	 DWORD PTR [rbx+148], edx
  001df	89 93 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edx

; 1702 :         }

  001e5	e9 92 00 00 00	 jmp	 $LN16@deflate_st
$LN15@deflate_st:

; 1703 :         else {
; 1704 :             if (s->window_size - s->strstart <= used) {

  001ea	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  001f0	8b 43 58	 mov	 eax, DWORD PTR [rbx+88]
  001f3	2b c1		 sub	 eax, ecx
  001f5	41 3b c4	 cmp	 eax, r12d
  001f8	77 3f		 ja	 SHORT $LN19@deflate_st

; 1705 :                 /* Slide the window down. */
; 1706 :                 s->strstart -= s->w_size;

  001fa	2b ca		 sub	 ecx, edx
  001fc	44 8b c1	 mov	 r8d, ecx

; 1707 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  001ff	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  00203	48 03 d1	 add	 rdx, rcx
  00206	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d
  0020d	e8 00 00 00 00	 call	 memcpy

; 1708 :                 if (s->matches < 2)

  00212	8b 83 04 17 00
	00		 mov	 eax, DWORD PTR [rbx+5892]
  00218	83 f8 02	 cmp	 eax, 2
  0021b	73 08		 jae	 SHORT $LN18@deflate_st

; 1709 :                     s->matches++;   /* add a pending slide_hash() */

  0021d	ff c0		 inc	 eax
  0021f	89 83 04 17 00
	00		 mov	 DWORD PTR [rbx+5892], eax
$LN18@deflate_st:

; 1710 :                 if (s->insert > s->strstart)

  00225	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  0022b	39 8b 08 17 00
	00		 cmp	 DWORD PTR [rbx+5896], ecx
  00231	76 06		 jbe	 SHORT $LN19@deflate_st

; 1711 :                     s->insert = s->strstart;

  00233	89 8b 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], ecx
$LN19@deflate_st:

; 1712 :             }
; 1713 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  00239	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0023c	48 03 4b 50	 add	 rcx, QWORD PTR [rbx+80]
  00240	45 8b c4	 mov	 r8d, r12d
  00243	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00246	49 2b d0	 sub	 rdx, r8
  00249	e8 00 00 00 00	 call	 memcpy

; 1714 :             s->strstart += used;
; 1715 :             s->insert += MIN(used, s->w_size - s->insert);

  0024e	8b 83 08 17 00
	00		 mov	 eax, DWORD PTR [rbx+5896]
  00254	44 01 a3 94 00
	00 00		 add	 DWORD PTR [rbx+148], r12d
  0025b	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  0025e	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  00264	2b c8		 sub	 ecx, eax
  00266	44 3b e1	 cmp	 r12d, ecx
  00269	41 0f 46 cc	 cmovbe	 ecx, r12d
  0026d	03 c8		 add	 ecx, eax
  0026f	48 8d 83 84 00
	00 00		 lea	 rax, QWORD PTR [rbx+132]
  00276	89 8b 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], ecx
$LN16@deflate_st:

; 1716 :         }
; 1717 :         s->block_start = s->strstart;

  0027c	89 10		 mov	 DWORD PTR [rax], edx
$LN57@deflate_st:

; 1718 :     }
; 1719 :     if (s->high_water < s->strstart)

  0027e	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  00285	4c 8b 64 24 20	 mov	 r12, QWORD PTR [rsp+32]
  0028a	44 39 83 14 17
	00 00		 cmp	 DWORD PTR [rbx+5908], r8d
  00291	73 07		 jae	 SHORT $LN20@deflate_st

; 1720 :         s->high_water = s->strstart;

  00293	44 89 83 14 17
	00 00		 mov	 DWORD PTR [rbx+5908], r8d
$LN20@deflate_st:

; 1721 : 
; 1722 :     /* If the last block was written to next_out, then done. */
; 1723 :     if (last)

  0029a	45 85 f6	 test	 r14d, r14d
  0029d	74 17		 je	 SHORT $LN21@deflate_st

; 1724 :         return finish_done;

  0029f	b8 03 00 00 00	 mov	 eax, 3
  002a4	48 8b 7c 24 28	 mov	 rdi, QWORD PTR [rsp+40]

; 1777 : }

  002a9	48 83 c4 30	 add	 rsp, 48			; 00000030H
  002ad	41 5f		 pop	 r15
  002af	41 5e		 pop	 r14
  002b1	41 5d		 pop	 r13
  002b3	5e		 pop	 rsi
  002b4	5b		 pop	 rbx
  002b5	c3		 ret	 0
$LN21@deflate_st:

; 1725 : 
; 1726 :     /* If flushing and all input has been consumed, then done. */
; 1727 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1728 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  002b6	41 f7 c7 fb ff
	ff ff		 test	 r15d, -5		; fffffffbH
  002bd	74 26		 je	 SHORT $LN22@deflate_st
  002bf	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  002c2	83 79 08 00	 cmp	 DWORD PTR [rcx+8], 0
  002c6	75 1d		 jne	 SHORT $LN22@deflate_st
  002c8	45 3b 45 00	 cmp	 r8d, DWORD PTR [r13]
  002cc	75 17		 jne	 SHORT $LN22@deflate_st

; 1729 :         return block_done;

  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 8b 7c 24 28	 mov	 rdi, QWORD PTR [rsp+40]

; 1777 : }

  002d8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  002dc	41 5f		 pop	 r15
  002de	41 5e		 pop	 r14
  002e0	41 5d		 pop	 r13
  002e2	5e		 pop	 rsi
  002e3	5b		 pop	 rbx
  002e4	c3		 ret	 0
$LN22@deflate_st:

; 1730 : 
; 1731 :     /* Fill the window with any remaining input. */
; 1732 :     have = s->window_size - s->strstart;
; 1733 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  002e5	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002e8	49 8b d0	 mov	 rdx, r8
  002eb	8b 7b 58	 mov	 edi, DWORD PTR [rbx+88]
  002ee	41 2b f8	 sub	 edi, r8d
  002f1	39 78 08	 cmp	 DWORD PTR [rax+8], edi
  002f4	76 52		 jbe	 SHORT $LN25@deflate_st
  002f6	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  002f9	41 8b 4d 00	 mov	 ecx, DWORD PTR [r13]
  002fd	3b c8		 cmp	 ecx, eax
  002ff	7c 47		 jl	 SHORT $LN25@deflate_st

; 1734 :         /* Slide the window down. */
; 1735 :         s->block_start -= s->w_size;

  00301	2b c8		 sub	 ecx, eax

; 1736 :         s->strstart -= s->w_size;

  00303	44 2b c0	 sub	 r8d, eax
  00306	41 89 4d 00	 mov	 DWORD PTR [r13], ecx

; 1737 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  0030a	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  0030e	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d
  00315	48 8d 14 01	 lea	 rdx, QWORD PTR [rcx+rax]
  00319	e8 00 00 00 00	 call	 memcpy

; 1738 :         if (s->matches < 2)

  0031e	8b 83 04 17 00
	00		 mov	 eax, DWORD PTR [rbx+5892]
  00324	83 f8 02	 cmp	 eax, 2
  00327	73 08		 jae	 SHORT $LN24@deflate_st

; 1739 :             s->matches++;           /* add a pending slide_hash() */

  00329	ff c0		 inc	 eax
  0032b	89 83 04 17 00
	00		 mov	 DWORD PTR [rbx+5892], eax
$LN24@deflate_st:

; 1740 :         have += s->w_size;          /* more space now */

  00331	03 7b 44	 add	 edi, DWORD PTR [rbx+68]

; 1741 :         if (s->insert > s->strstart)

  00334	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  0033a	39 93 08 17 00
	00		 cmp	 DWORD PTR [rbx+5896], edx
  00340	76 06		 jbe	 SHORT $LN25@deflate_st

; 1742 :             s->insert = s->strstart;

  00342	89 93 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edx
$LN25@deflate_st:

; 1743 :     }
; 1744 :     if (have > s->strm->avail_in)

  00348	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0034b	8b 71 08	 mov	 esi, DWORD PTR [rcx+8]

; 1745 :         have = s->strm->avail_in;
; 1746 :     if (have) {

  0034e	3b fe		 cmp	 edi, esi
  00350	0f 46 f7	 cmovbe	 esi, edi
  00353	85 f6		 test	 esi, esi
  00355	74 33		 je	 SHORT $LN58@deflate_st

; 1747 :         read_buf(s->strm, s->window + s->strstart, have);

  00357	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  0035b	44 8b c6	 mov	 r8d, esi
  0035e	e8 00 00 00 00	 call	 read_buf

; 1748 :         s->strstart += have;
; 1749 :         s->insert += MIN(have, s->w_size - s->insert);

  00363	8b 8b 08 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5896]
  00369	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  0036f	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  00372	03 d6		 add	 edx, esi
  00374	2b c1		 sub	 eax, ecx
  00376	89 93 94 00 00
	00		 mov	 DWORD PTR [rbx+148], edx
  0037c	3b f0		 cmp	 esi, eax
  0037e	0f 47 f0	 cmova	 esi, eax
  00381	8d 04 31	 lea	 eax, DWORD PTR [rcx+rsi]
  00384	89 83 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], eax
$LN58@deflate_st:

; 1750 :     }
; 1751 :     if (s->high_water < s->strstart)

  0038a	39 93 14 17 00
	00		 cmp	 DWORD PTR [rbx+5908], edx
  00390	73 06		 jae	 SHORT $LN28@deflate_st

; 1752 :         s->high_water = s->strstart;

  00392	89 93 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], edx
$LN28@deflate_st:

; 1753 : 
; 1754 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1755 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1756 :      * have enough input for a worthy block, or if flushing and there is enough
; 1757 :      * room for the remaining input as a stored block in the pending buffer.
; 1758 :      */
; 1759 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00398	8b 83 10 17 00
	00		 mov	 eax, DWORD PTR [rbx+5904]

; 1760 :         /* maximum stored block length that will fit in pending: */
; 1761 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  0039e	8b 4b 18	 mov	 ecx, DWORD PTR [rbx+24]
  003a1	83 c0 2a	 add	 eax, 42			; 0000002aH

; 1762 :     min_block = MIN(have, s->w_size);
; 1763 :     left = s->strstart - s->block_start;

  003a4	4d 63 45 00	 movsxd	 r8, DWORD PTR [r13]
  003a8	c1 f8 03	 sar	 eax, 3
  003ab	2b c8		 sub	 ecx, eax
  003ad	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  003b2	3b c8		 cmp	 ecx, eax
  003b4	0f 47 c8	 cmova	 ecx, eax
  003b7	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  003ba	41 2b d0	 sub	 edx, r8d
  003bd	3b c8		 cmp	 ecx, eax
  003bf	0f 46 c1	 cmovbe	 eax, ecx

; 1764 :     if (left >= min_block ||

  003c2	3b d0		 cmp	 edx, eax
  003c4	73 1c		 jae	 SHORT $LN59@deflate_st
  003c6	85 d2		 test	 edx, edx
  003c8	75 06		 jne	 SHORT $LN31@deflate_st
  003ca	41 83 ff 04	 cmp	 r15d, 4
  003ce	75 56		 jne	 SHORT $LN29@deflate_st
$LN31@deflate_st:
  003d0	45 85 ff	 test	 r15d, r15d
  003d3	74 51		 je	 SHORT $LN29@deflate_st
  003d5	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003d8	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  003dc	75 48		 jne	 SHORT $LN29@deflate_st
  003de	3b d1		 cmp	 edx, ecx
  003e0	77 44		 ja	 SHORT $LN29@deflate_st
$LN59@deflate_st:

; 1765 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1766 :          s->strm->avail_in == 0 && left <= have)) {
; 1767 :         len = MIN(left, have);

  003e2	3b d1		 cmp	 edx, ecx
  003e4	8b fa		 mov	 edi, edx
  003e6	0f 47 f9	 cmova	 edi, ecx

; 1768 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  003e9	41 83 ff 04	 cmp	 r15d, 4
  003ed	75 13		 jne	 SHORT $LN45@deflate_st
  003ef	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003f2	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  003f6	75 0a		 jne	 SHORT $LN45@deflate_st
  003f8	3b fa		 cmp	 edi, edx
  003fa	75 06		 jne	 SHORT $LN45@deflate_st
  003fc	45 8d 77 fd	 lea	 r14d, QWORD PTR [r15-3]
  00400	eb 03		 jmp	 SHORT $LN46@deflate_st
$LN45@deflate_st:
  00402	45 33 f6	 xor	 r14d, r14d
$LN46@deflate_st:

; 1769 :                len == left ? 1 : 0;
; 1770 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  00405	49 8b d0	 mov	 rdx, r8
  00408	45 8b ce	 mov	 r9d, r14d
  0040b	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  0040f	44 8b c7	 mov	 r8d, edi
  00412	48 8b cb	 mov	 rcx, rbx
  00415	e8 00 00 00 00	 call	 _tr_stored_block

; 1771 :         s->block_start += len;
; 1772 :         flush_pending(s->strm);

  0041a	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0041d	41 01 7d 00	 add	 DWORD PTR [r13], edi
  00421	e8 00 00 00 00	 call	 flush_pending
$LN29@deflate_st:

; 1773 :     }
; 1774 : 
; 1775 :     /* We've done all we can with the available input and output. */
; 1776 :     return last ? finish_started : need_more;

  00426	48 8b 7c 24 28	 mov	 rdi, QWORD PTR [rsp+40]
  0042b	41 f7 de	 neg	 r14d
  0042e	1b c0		 sbb	 eax, eax
  00430	83 e0 02	 and	 eax, 2

; 1777 : }

  00433	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00437	41 5f		 pop	 r15
  00439	41 5e		 pop	 r14
  0043b	41 5d		 pop	 r13
  0043d	5e		 pop	 rsi
  0043e	5b		 pop	 rbx
  0043f	c3		 ret	 0
deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflate_fast
_TEXT	SEGMENT
s$ = 80
flush$ = 88
deflate_fast PROC					; COMDAT

; 1786 : local block_state deflate_fast(deflate_state *s, int flush) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001c	8b f2		 mov	 esi, edx
  0001e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_length_code
  00025	48 8b d9	 mov	 rbx, rcx
  00028	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_dist_code
  0002f	41 bf ff ff 00
	00		 mov	 r15d, 65535		; 0000ffffH
  00035	4c 8d 35 00 01
	00 00		 lea	 r14, OFFSET FLAT:_dist_code+256
  0003c	41 bd 00 01 00
	00		 mov	 r13d, 256		; 00000100H
  00042	33 ff		 xor	 edi, edi
  00044	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@deflate_fa:

; 1787 :     IPos hash_head;       /* head of the hash chain */
; 1788 :     int bflush;           /* set if current block must be flushed */
; 1789 : 
; 1790 :     for (;;) {
; 1791 :         /* Make sure that we always have enough lookahead, except
; 1792 :          * at the end of the input file. We need MAX_MATCH bytes
; 1793 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1794 :          * string following the next match.
; 1795 :          */
; 1796 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00050	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  00056	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0005b	73 25		 jae	 SHORT $LN10@deflate_fa

; 1797 :             fill_window(s);

  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 fill_window

; 1798 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00065	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  0006b	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00070	73 08		 jae	 SHORT $LN9@deflate_fa
  00072	85 f6		 test	 esi, esi
  00074	0f 84 ff 02 00
	00		 je	 $LN39@deflate_fa
$LN9@deflate_fa:

; 1799 :                 return need_more;
; 1800 :             }
; 1801 :             if (s->lookahead == 0) break; /* flush the current block */

  0007a	85 c0		 test	 eax, eax
  0007c	0f 84 16 03 00
	00		 je	 $LN38@deflate_fa
$LN10@deflate_fa:

; 1802 :         }
; 1803 : 
; 1804 :         /* Insert the string window[strstart .. strstart + 2] in the
; 1805 :          * dictionary, and set hash_head to the head of the hash chain:
; 1806 :          */
; 1807 :         hash_head = NIL;
; 1808 :         if (s->lookahead >= MIN_MATCH) {

  00082	83 f8 03	 cmp	 eax, 3
  00085	0f 82 8d 00 00
	00		 jb	 $LN12@deflate_fa

; 1809 :             INSERT_STRING(s, s->strstart, hash_head);

  0008b	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0008f	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]
  00096	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0009a	41 8d 49 02	 lea	 ecx, DWORD PTR [r9+2]
  0009e	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  000a3	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  000a6	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  000ac	d3 e0		 shl	 eax, cl
  000ae	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000b2	44 33 c0	 xor	 r8d, eax
  000b5	44 23 43 7c	 and	 r8d, DWORD PTR [rbx+124]
  000b9	8b 43 4c	 mov	 eax, DWORD PTR [rbx+76]
  000bc	4c 23 c8	 and	 r9, rax
  000bf	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  000c3	42 0f b7 04 42	 movzx	 eax, WORD PTR [rdx+r8*2]
  000c8	66 42 89 04 49	 mov	 WORD PTR [rcx+r9*2], ax
  000cd	8b 43 4c	 mov	 eax, DWORD PTR [rbx+76]
  000d0	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  000d7	41 8b c8	 mov	 ecx, r8d
  000da	48 23 c8	 and	 rcx, rax
  000dd	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000e1	0f b7 14 48	 movzx	 edx, WORD PTR [rax+rcx*2]
  000e5	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  000e8	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000ec	66 44 89 04 48	 mov	 WORD PTR [rax+rcx*2], r8w

; 1810 :         }
; 1811 : 
; 1812 :         /* Find the longest match, discarding those <= prev_length.
; 1813 :          * At this point we have always match_length < MIN_MATCH
; 1814 :          */
; 1815 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  000f1	85 d2		 test	 edx, edx
  000f3	74 23		 je	 SHORT $LN12@deflate_fa
  000f5	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  000f8	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  000fe	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  00104	2b c2		 sub	 eax, edx
  00106	3b c1		 cmp	 eax, ecx
  00108	77 0e		 ja	 SHORT $LN12@deflate_fa

; 1816 :             /* To simplify the code, we prevent matches with the string
; 1817 :              * of window index 0 (in particular we have to avoid a match
; 1818 :              * of the string with itself at the start of the input file).
; 1819 :              */
; 1820 :             s->match_length = longest_match (s, hash_head);

  0010a	48 8b cb	 mov	 rcx, rbx
  0010d	e8 00 00 00 00	 call	 longest_match
  00112	89 83 88 00 00
	00		 mov	 DWORD PTR [rbx+136], eax
$LN12@deflate_fa:

; 1821 :             /* longest_match() sets match_start */
; 1822 :         }
; 1823 :         if (s->match_length >= MIN_MATCH) {

  00118	44 8b 8b 88 00
	00 00		 mov	 r9d, DWORD PTR [rbx+136]
  0011f	41 83 f9 03	 cmp	 r9d, 3
  00123	0f 82 83 01 00
	00		 jb	 $LN13@deflate_fa

; 1824 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1825 : 
; 1826 :             _tr_tally_dist(s, s->strstart - s->match_start,

  00129	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0012f	41 80 e9 03	 sub	 r9b, 3
  00133	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0013a	44 0f b7 83 94
	00 00 00	 movzx	 r8d, WORD PTR [rbx+148]
  00142	66 44 2b 83 98
	00 00 00	 sub	 r8w, WORD PTR [rbx+152]
  0014a	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  0014e	41 0f b7 c8	 movzx	 ecx, r8w
  00152	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00158	66 45 03 c7	 add	 r8w, r15w
  0015c	8b 93 f4 16 00
	00		 mov	 edx, DWORD PTR [rbx+5876]
  00162	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00169	66 c1 e9 08	 shr	 cx, 8
  0016d	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  00170	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00176	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0017c	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00183	44 88 0c 01	 mov	 BYTE PTR [rcx+rax], r9b
  00187	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0018d	41 0f b6 c1	 movzx	 eax, r9b
  00191	42 0f b6 04 20	 movzx	 eax, BYTE PTR [rax+r12]
  00196	66 ff 84 83 c0
	04 00 00	 inc	 WORD PTR [rbx+rax*4+1216]
  0019e	41 0f b7 c0	 movzx	 eax, r8w
  001a2	66 45 3b c5	 cmp	 r8w, r13w
  001a6	73 05		 jae	 SHORT $LN24@deflate_fa
  001a8	48 03 c5	 add	 rax, rbp
  001ab	eb 07		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  001ad	48 c1 e8 07	 shr	 rax, 7
  001b1	49 03 c6	 add	 rax, r14
$LN25@deflate_fa:
  001b4	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001b7	44 8b d7	 mov	 r10d, edi
  001ba	66 ff 84 83 b0
	09 00 00	 inc	 WORD PTR [rbx+rax*4+2480]
  001c2	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  001c8	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax

; 1827 :                            s->match_length - MIN_MATCH, bflush);
; 1828 : 
; 1829 :             s->lookahead -= s->match_length;

  001ce	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  001d4	8b 8b 88 00 00
	00		 mov	 ecx, DWORD PTR [rbx+136]
  001da	41 0f 94 c2	 sete	 r10b
  001de	2b c1		 sub	 eax, ecx
  001e0	89 83 9c 00 00
	00		 mov	 DWORD PTR [rbx+156], eax

; 1830 : 
; 1831 :             /* Insert new strings in the hash table only if the match length
; 1832 :              * is not too large. This saves time but degrades compression.
; 1833 :              */
; 1834 : #ifndef FASTEST
; 1835 :             if (s->match_length <= s->max_insert_length &&

  001e6	3b 8b a8 00 00
	00		 cmp	 ecx, DWORD PTR [rbx+168]
  001ec	77 79		 ja	 SHORT $LN54@deflate_fa
  001ee	83 f8 03	 cmp	 eax, 3
  001f1	72 74		 jb	 SHORT $LN54@deflate_fa

; 1836 :                 s->lookahead >= MIN_MATCH) {
; 1837 :                 s->match_length--; /* string at strstart already in table */

  001f3	8d 41 ff	 lea	 eax, DWORD PTR [rcx-1]
  001f6	89 83 88 00 00
	00		 mov	 DWORD PTR [rbx+136], eax
  001fc	0f 1f 40 00	 npad	 4
$LL7@deflate_fa:

; 1838 :                 do {
; 1839 :                     s->strstart++;

  00200	ff 83 94 00 00
	00		 inc	 DWORD PTR [rbx+148]

; 1840 :                     INSERT_STRING(s, s->strstart, hash_head);

  00206	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0020a	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]
  00211	8b 53 4c	 mov	 edx, DWORD PTR [rbx+76]
  00214	49 23 d1	 and	 rdx, r9
  00217	41 8d 49 02	 lea	 ecx, DWORD PTR [r9+2]
  0021b	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  00220	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00223	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  00229	d3 e0		 shl	 eax, cl
  0022b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0022f	44 33 c0	 xor	 r8d, eax
  00232	44 23 43 7c	 and	 r8d, DWORD PTR [rbx+124]
  00236	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0023a	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  0023e	42 0f b7 04 40	 movzx	 eax, WORD PTR [rax+r8*2]
  00243	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  00247	8b 53 70	 mov	 edx, DWORD PTR [rbx+112]
  0024a	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0024e	0f b7 83 94 00
	00 00		 movzx	 eax, WORD PTR [rbx+148]
  00255	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax

; 1841 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1842 :                      * always MIN_MATCH bytes ahead.
; 1843 :                      */
; 1844 :                 } while (--s->match_length != 0);

  00259	83 83 88 00 00
	00 ff		 add	 DWORD PTR [rbx+136], -1	; ffffffffH
  00260	75 9e		 jne	 SHORT $LL7@deflate_fa

; 1845 :                 s->strstart++;
; 1846 :             } else

  00262	e9 b8 00 00 00	 jmp	 $LN73@deflate_fa
$LN54@deflate_fa:

; 1847 : #endif
; 1848 :             {
; 1849 :                 s->strstart += s->match_length;

  00267	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]

; 1850 :                 s->match_length = 0;
; 1851 :                 s->ins_h = s->window[s->strstart];

  0026e	48 8b 53 50	 mov	 rdx, QWORD PTR [rbx+80]
  00272	44 03 c9	 add	 r9d, ecx

; 1852 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart + 1]);

  00275	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  0027b	44 89 8b 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r9d
  00282	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  00288	45 0f b6 04 11	 movzx	 r8d, BYTE PTR [r9+rdx]
  0028d	41 8d 41 01	 lea	 eax, DWORD PTR [r9+1]
  00291	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  00295	0f b6 04 10	 movzx	 eax, BYTE PTR [rax+rdx]
  00299	41 d3 e0	 shl	 r8d, cl
  0029c	44 33 c0	 xor	 r8d, eax
  0029f	41 8b c1	 mov	 eax, r9d
  002a2	44 23 43 7c	 and	 r8d, DWORD PTR [rbx+124]
  002a6	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d

; 1853 : #if MIN_MATCH != 3
; 1854 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1855 : #endif
; 1856 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1857 :                  * matter since it will be recomputed at next deflate call.
; 1858 :                  */
; 1859 :             }
; 1860 :         } else {

  002aa	eb 7f		 jmp	 SHORT $LN14@deflate_fa
$LN13@deflate_fa:

; 1861 :             /* No match, output a literal byte */
; 1862 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1863 :             _tr_tally_lit(s, s->window[s->strstart], bflush);

  002ac	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  002b2	44 8b d7	 mov	 r10d, edi
  002b5	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  002b9	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  002bd	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  002c3	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  002ca	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  002ce	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  002d4	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  002da	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  002e1	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  002e5	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  002eb	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  002f1	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  002f8	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  002fb	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00301	66 ff 84 93 bc
	00 00 00	 inc	 WORD PTR [rbx+rdx*4+188]
  00309	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  0030f	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax
  00315	41 0f 94 c2	 sete	 r10b

; 1864 :             s->lookahead--;

  00319	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]
$LN73@deflate_fa:

; 1865 :             s->strstart++;
; 1866 :         }
; 1867 :         if (bflush) FLUSH_BLOCK(s, 0);

  0031f	ff 83 94 00 00
	00		 inc	 DWORD PTR [rbx+148]
  00325	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
$LN14@deflate_fa:
  0032b	45 85 d2	 test	 r10d, r10d
  0032e	0f 84 1c fd ff
	ff		 je	 $LL2@deflate_fa
  00334	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  0033a	85 c9		 test	 ecx, ecx
  0033c	78 08		 js	 SHORT $LN26@deflate_fa
  0033e	8b d1		 mov	 edx, ecx
  00340	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00344	eb 03		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  00346	48 8b d7	 mov	 rdx, rdi
$LN27@deflate_fa:
  00349	2b c1		 sub	 eax, ecx
  0034b	45 33 c9	 xor	 r9d, r9d
  0034e	44 8b c0	 mov	 r8d, eax
  00351	48 8b cb	 mov	 rcx, rbx
  00354	e8 00 00 00 00	 call	 _tr_flush_block
  00359	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0035f	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00362	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00368	e8 00 00 00 00	 call	 flush_pending
  0036d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00370	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  00373	0f 85 d7 fc ff
	ff		 jne	 $LL2@deflate_fa
$LN39@deflate_fa:
  00379	33 c0		 xor	 eax, eax
$LN1@deflate_fa:

; 1877 : }

  0037b	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00380	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00385	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0038a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0038e	41 5f		 pop	 r15
  00390	41 5e		 pop	 r14
  00392	41 5d		 pop	 r13
  00394	41 5c		 pop	 r12
  00396	5f		 pop	 rdi
  00397	c3		 ret	 0
$LN38@deflate_fa:

; 1868 :     }
; 1869 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00398	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  0039e	b8 02 00 00 00	 mov	 eax, 2
  003a3	3b c8		 cmp	 ecx, eax
  003a5	0f 42 c1	 cmovb	 eax, ecx
  003a8	89 83 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], eax

; 1870 :     if (flush == Z_FINISH) {

  003ae	83 fe 04	 cmp	 esi, 4
  003b1	75 4e		 jne	 SHORT $LN19@deflate_fa

; 1871 :         FLUSH_BLOCK(s, 1);

  003b3	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  003b9	85 c0		 test	 eax, eax
  003bb	78 08		 js	 SHORT $LN30@deflate_fa
  003bd	8b d0		 mov	 edx, eax
  003bf	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  003c3	eb 03		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  003c5	48 8b d7	 mov	 rdx, rdi
$LN31@deflate_fa:
  003c8	2b c8		 sub	 ecx, eax
  003ca	41 b9 01 00 00
	00		 mov	 r9d, 1
  003d0	44 8b c1	 mov	 r8d, ecx
  003d3	48 8b cb	 mov	 rcx, rbx
  003d6	e8 00 00 00 00	 call	 _tr_flush_block
  003db	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  003e1	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  003e4	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  003ea	e8 00 00 00 00	 call	 flush_pending
  003ef	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003f2	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  003f5	40 0f 95 c7	 setne	 dil
  003f9	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]
  003fc	e9 7a ff ff ff	 jmp	 $LN1@deflate_fa
$LN19@deflate_fa:

; 1872 :         return finish_done;
; 1873 :     }
; 1874 :     if (s->sym_next)

  00401	39 bb f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], edi
  00407	74 44		 je	 SHORT $LN22@deflate_fa

; 1875 :         FLUSH_BLOCK(s, 0);

  00409	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  0040f	85 c0		 test	 eax, eax
  00411	78 06		 js	 SHORT $LN32@deflate_fa
  00413	8b f8		 mov	 edi, eax
  00415	48 03 7b 50	 add	 rdi, QWORD PTR [rbx+80]
$LN32@deflate_fa:
  00419	2b c8		 sub	 ecx, eax
  0041b	45 33 c9	 xor	 r9d, r9d
  0041e	44 8b c1	 mov	 r8d, ecx
  00421	48 8b d7	 mov	 rdx, rdi
  00424	48 8b cb	 mov	 rcx, rbx
  00427	e8 00 00 00 00	 call	 _tr_flush_block
  0042c	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00432	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00435	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  0043b	e8 00 00 00 00	 call	 flush_pending
  00440	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00443	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00447	0f 84 2c ff ff
	ff		 je	 $LN39@deflate_fa
$LN22@deflate_fa:

; 1876 :     return block_done;

  0044d	b8 01 00 00 00	 mov	 eax, 1
  00452	e9 24 ff ff ff	 jmp	 $LN1@deflate_fa
deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflate_slow
_TEXT	SEGMENT
s$ = 80
flush$ = 88
deflate_slow PROC					; COMDAT

; 1885 : local block_state deflate_slow(deflate_state *s, int flush) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001c	33 f6		 xor	 esi, esi
  0001e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_dist_code
  00025	44 8b fa	 mov	 r15d, edx
  00028	4c 8d 2d 00 01
	00 00		 lea	 r13, OFFSET FLAT:_dist_code+256
  0002f	48 8b d9	 mov	 rbx, rcx
  00032	bd ff ff 00 00	 mov	 ebp, 65535		; 0000ffffH
  00037	8d 7e 02	 lea	 edi, QWORD PTR [rsi+2]
$LN101@deflate_sl:

; 1886 :     IPos hash_head;          /* head of hash chain */
; 1887 :     int bflush;              /* set if current block must be flushed */
; 1888 : 
; 1889 :     /* Process the input block. */
; 1890 :     for (;;) {
; 1891 :         /* Make sure that we always have enough lookahead, except
; 1892 :          * at the end of the input file. We need MAX_MATCH bytes
; 1893 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1894 :          * string following the next match.
; 1895 :          */
; 1896 :         if (s->lookahead < MIN_LOOKAHEAD) {

  0003a	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_length_code
$LL2@deflate_sl:
  00041	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  00047	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0004c	73 26		 jae	 SHORT $LN10@deflate_sl

; 1897 :             fill_window(s);

  0004e	48 8b cb	 mov	 rcx, rbx
  00051	e8 00 00 00 00	 call	 fill_window

; 1898 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00056	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  0005c	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00061	73 09		 jae	 SHORT $LN9@deflate_sl
  00063	45 85 ff	 test	 r15d, r15d
  00066	0f 84 ce 02 00
	00		 je	 $LN48@deflate_sl
$LN9@deflate_sl:

; 1899 :                 return need_more;
; 1900 :             }
; 1901 :             if (s->lookahead == 0) break; /* flush the current block */

  0006c	85 c0		 test	 eax, eax
  0006e	0f 84 d4 03 00
	00		 je	 $LN46@deflate_sl
$LN10@deflate_sl:

; 1902 :         }
; 1903 : 
; 1904 :         /* Insert the string window[strstart .. strstart + 2] in the
; 1905 :          * dictionary, and set hash_head to the head of the hash chain:
; 1906 :          */
; 1907 :         hash_head = NIL;

  00074	44 8b ce	 mov	 r9d, esi

; 1908 :         if (s->lookahead >= MIN_MATCH) {

  00077	83 f8 03	 cmp	 eax, 3
  0007a	72 61		 jb	 SHORT $LN11@deflate_sl

; 1909 :             INSERT_STRING(s, s->strstart, hash_head);

  0007c	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]
  00083	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00087	8b 53 4c	 mov	 edx, DWORD PTR [rbx+76]
  0008a	49 23 d1	 and	 rdx, r9
  0008d	41 8d 49 02	 lea	 ecx, DWORD PTR [r9+2]
  00091	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  00096	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00099	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  0009f	d3 e0		 shl	 eax, cl
  000a1	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000a5	44 33 c0	 xor	 r8d, eax
  000a8	44 23 43 7c	 and	 r8d, DWORD PTR [rbx+124]
  000ac	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000b0	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  000b4	42 0f b7 04 40	 movzx	 eax, WORD PTR [rax+r8*2]
  000b9	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  000bd	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000c1	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  000c7	8b 4b 4c	 mov	 ecx, DWORD PTR [rbx+76]
  000ca	48 23 ca	 and	 rcx, rdx
  000cd	44 0f b7 0c 48	 movzx	 r9d, WORD PTR [rax+rcx*2]
  000d2	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  000d5	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000d9	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
$LN11@deflate_sl:

; 1910 :         }
; 1911 : 
; 1912 :         /* Find the longest match, discarding those <= prev_length.
; 1913 :          */
; 1914 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  000dd	8b 8b 88 00 00
	00		 mov	 ecx, DWORD PTR [rbx+136]

; 1915 :         s->match_length = MIN_MATCH-1;

  000e3	44 8b c7	 mov	 r8d, edi
  000e6	8b 83 98 00 00
	00		 mov	 eax, DWORD PTR [rbx+152]
  000ec	89 8b a0 00 00
	00		 mov	 DWORD PTR [rbx+160], ecx
  000f2	89 83 8c 00 00
	00		 mov	 DWORD PTR [rbx+140], eax
  000f8	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi

; 1916 : 
; 1917 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  000fe	45 85 c9	 test	 r9d, r9d
  00101	74 61		 je	 SHORT $LN13@deflate_sl
  00103	3b 8b a8 00 00
	00		 cmp	 ecx, DWORD PTR [rbx+168]
  00109	73 59		 jae	 SHORT $LN13@deflate_sl
  0010b	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  0010e	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00114	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  0011a	41 2b c1	 sub	 eax, r9d
  0011d	3b c1		 cmp	 eax, ecx
  0011f	77 43		 ja	 SHORT $LN13@deflate_sl

; 1918 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1919 :             /* To simplify the code, we prevent matches with the string
; 1920 :              * of window index 0 (in particular we have to avoid a match
; 1921 :              * of the string with itself at the start of the input file).
; 1922 :              */
; 1923 :             s->match_length = longest_match (s, hash_head);

  00121	41 8b d1	 mov	 edx, r9d
  00124	48 8b cb	 mov	 rcx, rbx
  00127	e8 00 00 00 00	 call	 longest_match
  0012c	89 83 88 00 00
	00		 mov	 DWORD PTR [rbx+136], eax

; 1924 :             /* longest_match() sets match_start */
; 1925 : 
; 1926 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  00132	44 8b c0	 mov	 r8d, eax
  00135	83 f8 05	 cmp	 eax, 5
  00138	77 2a		 ja	 SHORT $LN13@deflate_sl
  0013a	83 bb b0 00 00
	00 01		 cmp	 DWORD PTR [rbx+176], 1
  00141	74 18		 je	 SHORT $LN14@deflate_sl
  00143	83 f8 03	 cmp	 eax, 3
  00146	75 1c		 jne	 SHORT $LN13@deflate_sl
  00148	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0014e	2b 83 98 00 00
	00		 sub	 eax, DWORD PTR [rbx+152]
  00154	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00159	76 09		 jbe	 SHORT $LN13@deflate_sl
$LN14@deflate_sl:

; 1927 : #if TOO_FAR <= 32767
; 1928 :                 || (s->match_length == MIN_MATCH &&
; 1929 :                     s->strstart - s->match_start > TOO_FAR)
; 1930 : #endif
; 1931 :                 )) {
; 1932 : 
; 1933 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1934 :                  * but we will ignore the current match anyway.
; 1935 :                  */
; 1936 :                 s->match_length = MIN_MATCH-1;

  0015b	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  00161	44 8b c7	 mov	 r8d, edi
$LN13@deflate_sl:

; 1937 :             }
; 1938 :         }
; 1939 :         /* If there was a match at the previous step and the current
; 1940 :          * match is not better, output the previous match:
; 1941 :          */
; 1942 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  00164	44 8b 8b a0 00
	00 00		 mov	 r9d, DWORD PTR [rbx+160]
  0016b	41 83 f9 03	 cmp	 r9d, 3
  0016f	0f 82 e4 01 00
	00		 jb	 $LN63@deflate_sl
  00175	45 3b c1	 cmp	 r8d, r9d
  00178	0f 87 db 01 00
	00		 ja	 $LN63@deflate_sl

; 1943 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
; 1944 :             /* Do not insert strings in hash table beyond this. */
; 1945 : 
; 1946 :             check_match(s, s->strstart - 1, s->prev_match, s->prev_length);
; 1947 : 
; 1948 :             _tr_tally_dist(s, s->strstart - 1 - s->prev_match,

  0017e	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00184	41 80 e9 03	 sub	 r9b, 3
  00188	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  0018f	44 8b 9b 9c 00
	00 00		 mov	 r11d, DWORD PTR [rbx+156]
  00196	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0019d	41 83 c3 fd	 add	 r11d, -3		; fffffffdH
  001a1	45 03 d8	 add	 r11d, r8d
  001a4	66 44 2b 83 8c
	00 00 00	 sub	 r8w, WORD PTR [rbx+140]
  001ac	66 41 ff c8	 dec	 r8w
  001b0	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  001b4	41 0f b7 c8	 movzx	 ecx, r8w
  001b8	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001be	66 44 03 c5	 add	 r8w, bp
  001c2	8b 93 f4 16 00
	00		 mov	 edx, DWORD PTR [rbx+5876]
  001c8	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  001cf	66 c1 e9 08	 shr	 cx, 8
  001d3	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  001d6	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001dc	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  001e2	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  001e9	44 88 0c 01	 mov	 BYTE PTR [rcx+rax], r9b
  001ed	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001f3	41 0f b6 c1	 movzx	 eax, r9b
  001f7	42 0f b6 04 30	 movzx	 eax, BYTE PTR [rax+r14]
  001fc	66 ff 84 83 c0
	04 00 00	 inc	 WORD PTR [rbx+rax*4+1216]
  00204	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00209	66 44 3b c0	 cmp	 r8w, ax
  0020d	41 0f b7 c0	 movzx	 eax, r8w
  00211	73 05		 jae	 SHORT $LN30@deflate_sl
  00213	49 03 c4	 add	 rax, r12
  00216	eb 07		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  00218	48 c1 e8 07	 shr	 rax, 7
  0021c	49 03 c5	 add	 rax, r13
$LN31@deflate_sl:
  0021f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00222	66 ff 84 83 b0
	09 00 00	 inc	 WORD PTR [rbx+rax*4+2480]

; 1949 :                            s->prev_length - MIN_MATCH, bflush);
; 1950 : 
; 1951 :             /* Insert in hash table all strings up to the end of the match.
; 1952 :              * strstart - 1 and strstart are already inserted. If there is not
; 1953 :              * enough lookahead, the last two strings are not inserted in
; 1954 :              * the hash table.
; 1955 :              */
; 1956 :             s->lookahead -= s->prev_length - 1;

  0022a	b8 01 00 00 00	 mov	 eax, 1
  0022f	8b 8b a0 00 00
	00		 mov	 ecx, DWORD PTR [rbx+160]
  00235	2b c1		 sub	 eax, ecx
  00237	01 83 9c 00 00
	00		 add	 DWORD PTR [rbx+156], eax
  0023d	8b ab f4 16 00
	00		 mov	 ebp, DWORD PTR [rbx+5876]
  00243	44 8b b3 f8 16
	00 00		 mov	 r14d, DWORD PTR [rbx+5880]

; 1957 :             s->prev_length -= 2;

  0024a	8d 41 fe	 lea	 eax, DWORD PTR [rcx-2]
  0024d	89 83 a0 00 00
	00		 mov	 DWORD PTR [rbx+160], eax
$LL7@deflate_sl:

; 1958 :             do {
; 1959 :                 if (++s->strstart <= max_insert) {

  00253	44 8b 93 94 00
	00 00		 mov	 r10d, DWORD PTR [rbx+148]
  0025a	41 ff c2	 inc	 r10d
  0025d	44 89 93 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r10d
  00264	45 3b d3	 cmp	 r10d, r11d
  00267	77 59		 ja	 SHORT $LN5@deflate_sl

; 1960 :                     INSERT_STRING(s, s->strstart, hash_head);

  00269	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  0026f	44 8b 4b 70	 mov	 r9d, DWORD PTR [rbx+112]
  00273	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00277	44 8b 43 4c	 mov	 r8d, DWORD PTR [rbx+76]
  0027b	41 d3 e1	 shl	 r9d, cl
  0027e	41 8d 4a 02	 lea	 ecx, DWORD PTR [r10+2]
  00282	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00286	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0028a	44 33 ca	 xor	 r9d, edx
  0028d	44 23 4b 7c	 and	 r9d, DWORD PTR [rbx+124]
  00291	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  00295	44 89 4b 70	 mov	 DWORD PTR [rbx+112], r9d
  00299	41 8b c2	 mov	 eax, r10d
  0029c	4c 23 c0	 and	 r8, rax
  0029f	42 0f b7 04 4a	 movzx	 eax, WORD PTR [rdx+r9*2]
  002a4	66 42 89 04 41	 mov	 WORD PTR [rcx+r8*2], ax
  002a9	8b 53 70	 mov	 edx, DWORD PTR [rbx+112]
  002ac	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  002b0	0f b7 83 94 00
	00 00		 movzx	 eax, WORD PTR [rbx+148]
  002b7	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  002bb	44 8b 93 94 00
	00 00		 mov	 r10d, DWORD PTR [rbx+148]
$LN5@deflate_sl:

; 1961 :                 }
; 1962 :             } while (--s->prev_length != 0);

  002c2	83 83 a0 00 00
	00 ff		 add	 DWORD PTR [rbx+160], -1	; ffffffffH
  002c9	75 88		 jne	 SHORT $LL7@deflate_sl

; 1963 :             s->match_available = 0;
; 1964 :             s->match_length = MIN_MATCH-1;
; 1965 :             s->strstart++;
; 1966 : 
; 1967 :             if (bflush) FLUSH_BLOCK(s, 0);

  002cb	41 3b ee	 cmp	 ebp, r14d
  002ce	89 b3 90 00 00
	00		 mov	 DWORD PTR [rbx+144], esi
  002d4	45 8d 42 01	 lea	 r8d, DWORD PTR [r10+1]
  002d8	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  002de	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d
  002e5	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_length_code
  002ec	bd ff ff 00 00	 mov	 ebp, 65535		; 0000ffffH
  002f1	0f 85 4a fd ff
	ff		 jne	 $LL2@deflate_sl
  002f7	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  002fd	85 c0		 test	 eax, eax
  002ff	78 08		 js	 SHORT $LN32@deflate_sl
  00301	8b d0		 mov	 edx, eax
  00303	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00307	eb 03		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  00309	48 8b d6	 mov	 rdx, rsi
$LN33@deflate_sl:
  0030c	44 2b c0	 sub	 r8d, eax
  0030f	45 33 c9	 xor	 r9d, r9d
  00312	48 8b cb	 mov	 rcx, rbx
  00315	e8 00 00 00 00	 call	 _tr_flush_block
  0031a	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00320	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00323	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00329	e8 00 00 00 00	 call	 flush_pending
  0032e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00331	39 70 18	 cmp	 DWORD PTR [rax+24], esi
  00334	0f 85 00 fd ff
	ff		 jne	 $LN101@deflate_sl
$LN48@deflate_sl:

; 1978 :             }
; 1979 :             s->strstart++;
; 1980 :             s->lookahead--;
; 1981 :             if (s->strm->avail_out == 0) return need_more;

  0033a	33 c0		 xor	 eax, eax
$LN1@deflate_sl:

; 2005 : }

  0033c	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00341	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00346	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  0034b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0034f	41 5f		 pop	 r15
  00351	41 5e		 pop	 r14
  00353	41 5d		 pop	 r13
  00355	41 5c		 pop	 r12
  00357	5f		 pop	 rdi
  00358	c3		 ret	 0
$LN63@deflate_sl:

; 1968 : 
; 1969 :         } else if (s->match_available) {

  00359	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0035f	39 b3 90 00 00
	00		 cmp	 DWORD PTR [rbx+144], esi
  00365	0f 84 c0 00 00
	00		 je	 $LN20@deflate_sl

; 1970 :             /* If there was no match at the previous position, output a
; 1971 :              * single literal. If there was a match but the current match
; 1972 :              * is longer, truncate the previous match to a single literal.
; 1973 :              */
; 1974 :             Tracevv((stderr,"%c", s->window[s->strstart - 1]));
; 1975 :             _tr_tally_lit(s, s->window[s->strstart - 1], bflush);

  0036b	8d 48 ff	 lea	 ecx, DWORD PTR [rax-1]
  0036e	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00372	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00376	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0037c	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00383	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00387	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0038d	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00393	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0039a	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  0039e	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  003a4	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  003aa	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  003b1	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  003b4	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  003ba	66 ff 84 93 bc
	00 00 00	 inc	 WORD PTR [rbx+rdx*4+188]
  003c2	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  003c8	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax

; 1976 :             if (bflush) {

  003ce	75 3e		 jne	 SHORT $LN22@deflate_sl

; 1977 :                 FLUSH_BLOCK_ONLY(s, 0);

  003d0	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  003d6	85 c0		 test	 eax, eax
  003d8	78 08		 js	 SHORT $LN34@deflate_sl
  003da	8b d0		 mov	 edx, eax
  003dc	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  003e0	eb 03		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  003e2	48 8b d6	 mov	 rdx, rsi
$LN35@deflate_sl:
  003e5	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  003ec	45 33 c9	 xor	 r9d, r9d
  003ef	44 2b c0	 sub	 r8d, eax
  003f2	48 8b cb	 mov	 rcx, rbx
  003f5	e8 00 00 00 00	 call	 _tr_flush_block
  003fa	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00400	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00403	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00409	e8 00 00 00 00	 call	 flush_pending
$LN22@deflate_sl:

; 1978 :             }
; 1979 :             s->strstart++;
; 1980 :             s->lookahead--;
; 1981 :             if (s->strm->avail_out == 0) return need_more;

  0040e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00411	ff 83 94 00 00
	00		 inc	 DWORD PTR [rbx+148]
  00417	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]
  0041d	39 70 18	 cmp	 DWORD PTR [rax+24], esi
  00420	0f 85 1b fc ff
	ff		 jne	 $LL2@deflate_sl

; 1982 :         } else {

  00426	e9 0f ff ff ff	 jmp	 $LN48@deflate_sl
$LN20@deflate_sl:

; 1983 :             /* There is no previous match to compare with, wait for
; 1984 :              * the next step to decide.
; 1985 :              */
; 1986 :             s->match_available = 1;
; 1987 :             s->strstart++;

  0042b	ff c0		 inc	 eax
  0042d	c7 83 90 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+144], 1

; 1988 :             s->lookahead--;

  00437	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]
  0043d	89 83 94 00 00
	00		 mov	 DWORD PTR [rbx+148], eax

; 1989 :         }
; 1990 :     }

  00443	e9 f9 fb ff ff	 jmp	 $LL2@deflate_sl
$LN46@deflate_sl:

; 1991 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 1992 :     if (s->match_available) {

  00448	39 b3 90 00 00
	00		 cmp	 DWORD PTR [rbx+144], esi
  0044e	74 62		 je	 SHORT $LN71@deflate_sl

; 1993 :         Tracevv((stderr,"%c", s->window[s->strstart - 1]));
; 1994 :         _tr_tally_lit(s, s->window[s->strstart - 1], bflush);

  00450	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  00456	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0045a	ff c9		 dec	 ecx
  0045c	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00460	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00466	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0046d	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00471	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00477	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0047d	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00484	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00488	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0048e	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00494	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0049b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0049e	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  004a4	66 ff 84 93 bc
	00 00 00	 inc	 WORD PTR [rbx+rdx*4+188]

; 1995 :         s->match_available = 0;

  004ac	89 b3 90 00 00
	00		 mov	 DWORD PTR [rbx+144], esi
$LN71@deflate_sl:

; 1996 :     }
; 1997 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  004b2	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  004b8	3b c7		 cmp	 eax, edi
  004ba	0f 42 f8	 cmovb	 edi, eax
  004bd	89 bb 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edi

; 1998 :     if (flush == Z_FINISH) {

  004c3	41 83 ff 04	 cmp	 r15d, 4
  004c7	75 4e		 jne	 SHORT $LN25@deflate_sl

; 1999 :         FLUSH_BLOCK(s, 1);

  004c9	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  004cf	85 c9		 test	 ecx, ecx
  004d1	78 08		 js	 SHORT $LN38@deflate_sl
  004d3	8b d1		 mov	 edx, ecx
  004d5	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  004d9	eb 03		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  004db	48 8b d6	 mov	 rdx, rsi
$LN39@deflate_sl:
  004de	2b c1		 sub	 eax, ecx
  004e0	41 b9 01 00 00
	00		 mov	 r9d, 1
  004e6	44 8b c0	 mov	 r8d, eax
  004e9	48 8b cb	 mov	 rcx, rbx
  004ec	e8 00 00 00 00	 call	 _tr_flush_block
  004f1	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  004f7	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  004fa	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00500	e8 00 00 00 00	 call	 flush_pending
  00505	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00508	39 70 18	 cmp	 DWORD PTR [rax+24], esi
  0050b	40 0f 95 c6	 setne	 sil
  0050f	8d 46 02	 lea	 eax, DWORD PTR [rsi+2]
  00512	e9 25 fe ff ff	 jmp	 $LN1@deflate_sl
$LN25@deflate_sl:

; 2000 :         return finish_done;
; 2001 :     }
; 2002 :     if (s->sym_next)

  00517	39 b3 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], esi
  0051d	74 44		 je	 SHORT $LN28@deflate_sl

; 2003 :         FLUSH_BLOCK(s, 0);

  0051f	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  00525	85 c9		 test	 ecx, ecx
  00527	78 06		 js	 SHORT $LN40@deflate_sl
  00529	8b f1		 mov	 esi, ecx
  0052b	48 03 73 50	 add	 rsi, QWORD PTR [rbx+80]
$LN40@deflate_sl:
  0052f	2b c1		 sub	 eax, ecx
  00531	45 33 c9	 xor	 r9d, r9d
  00534	44 8b c0	 mov	 r8d, eax
  00537	48 8b d6	 mov	 rdx, rsi
  0053a	48 8b cb	 mov	 rcx, rbx
  0053d	e8 00 00 00 00	 call	 _tr_flush_block
  00542	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00548	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0054b	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00551	e8 00 00 00 00	 call	 flush_pending
  00556	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00559	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0055d	0f 84 d7 fd ff
	ff		 je	 $LN48@deflate_sl
$LN28@deflate_sl:

; 2004 :     return block_done;

  00563	b8 01 00 00 00	 mov	 eax, 1
  00568	e9 cf fd ff ff	 jmp	 $LN1@deflate_sl
deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflate_rle
_TEXT	SEGMENT
s$ = 64
flush$ = 72
deflate_rle PROC					; COMDAT

; 2013 : local block_state deflate_rle(deflate_state *s, int flush) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 57		 push	 r15
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00018	4c 8d b9 94 00
	00 00		 lea	 r15, QWORD PTR [rcx+148]
  0001f	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  00024	49 8b f7	 mov	 rsi, r15
  00027	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_length_code
  0002e	8b ea		 mov	 ebp, edx
  00030	48 8b d9	 mov	 rbx, rcx
  00033	33 ff		 xor	 edi, edi
  00035	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL2@deflate_rl:

; 2014 :     int bflush;             /* set if current block must be flushed */
; 2015 :     uInt prev;              /* byte at distance one to match */
; 2016 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2017 : 
; 2018 :     for (;;) {
; 2019 :         /* Make sure that we always have enough lookahead, except
; 2020 :          * at the end of the input file. We need MAX_MATCH bytes
; 2021 :          * for the longest run, plus one for the unrolled loop.
; 2022 :          */
; 2023 :         if (s->lookahead <= MAX_MATCH) {

  00040	44 8b 83 9c 00
	00 00		 mov	 r8d, DWORD PTR [rbx+156]
  00047	41 81 f8 02 01
	00 00		 cmp	 r8d, 258		; 00000102H
  0004e	77 2c		 ja	 SHORT $LN10@deflate_rl

; 2024 :             fill_window(s);

  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 fill_window

; 2025 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00058	44 8b 83 9c 00
	00 00		 mov	 r8d, DWORD PTR [rbx+156]
  0005f	41 81 f8 02 01
	00 00		 cmp	 r8d, 258		; 00000102H
  00066	77 08		 ja	 SHORT $LN9@deflate_rl
  00068	85 ed		 test	 ebp, ebp
  0006a	0f 84 0a 02 00
	00		 je	 $LN37@deflate_rl
$LN9@deflate_rl:

; 2026 :                 return need_more;
; 2027 :             }
; 2028 :             if (s->lookahead == 0) break; /* flush the current block */

  00070	49 8b f7	 mov	 rsi, r15
  00073	45 85 c0	 test	 r8d, r8d
  00076	0f 84 1e 02 00
	00		 je	 $LN36@deflate_rl
$LN10@deflate_rl:

; 2029 :         }
; 2030 : 
; 2031 :         /* See how many times the previous byte repeats */
; 2032 :         s->match_length = 0;

  0007c	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  00082	4c 8b f6	 mov	 r14, rsi
  00085	8b c7		 mov	 eax, edi

; 2033 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00087	41 83 f8 03	 cmp	 r8d, 3
  0008b	0f 82 98 00 00
	00		 jb	 $LN14@deflate_rl
  00091	8b 0e		 mov	 ecx, DWORD PTR [rsi]
  00093	85 c9		 test	 ecx, ecx
  00095	0f 84 8e 00 00
	00		 je	 $LN14@deflate_rl

; 2034 :             scan = s->window + s->strstart - 1;

  0009b	4c 8b 4b 50	 mov	 r9, QWORD PTR [rbx+80]
  0009f	4c 03 c9	 add	 r9, rcx
  000a2	41 0f b6 49 ff	 movzx	 ecx, BYTE PTR [r9-1]

; 2035 :             prev = *scan;
; 2036 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  000a7	41 3a 09	 cmp	 cl, BYTE PTR [r9]
  000aa	75 7d		 jne	 SHORT $LN14@deflate_rl
  000ac	41 3a 49 01	 cmp	 cl, BYTE PTR [r9+1]
  000b0	75 77		 jne	 SHORT $LN14@deflate_rl
  000b2	41 3a 49 02	 cmp	 cl, BYTE PTR [r9+2]
  000b6	49 8d 51 02	 lea	 rdx, QWORD PTR [r9+2]
  000ba	75 6d		 jne	 SHORT $LN14@deflate_rl

; 2037 :                 strend = s->window + s->strstart + MAX_MATCH;

  000bc	49 81 c1 02 01
	00 00		 add	 r9, 258			; 00000102H
$LL7@deflate_rl:

; 2038 :                 do {
; 2039 :                 } while (prev == *++scan && prev == *++scan &&
; 2040 :                          prev == *++scan && prev == *++scan &&
; 2041 :                          prev == *++scan && prev == *++scan &&
; 2042 :                          prev == *++scan && prev == *++scan &&

  000c3	3a 4a 01	 cmp	 cl, BYTE PTR [rdx+1]
  000c6	48 8d 42 01	 lea	 rax, QWORD PTR [rdx+1]
  000ca	75 41		 jne	 SHORT $LN13@deflate_rl
  000cc	48 8d 50 01	 lea	 rdx, QWORD PTR [rax+1]
  000d0	8b c2		 mov	 eax, edx
  000d2	3a 0a		 cmp	 cl, BYTE PTR [rdx]
  000d4	75 37		 jne	 SHORT $LN13@deflate_rl
  000d6	8d 42 01	 lea	 eax, DWORD PTR [rdx+1]
  000d9	3a 4a 01	 cmp	 cl, BYTE PTR [rdx+1]
  000dc	75 2f		 jne	 SHORT $LN13@deflate_rl
  000de	8d 42 02	 lea	 eax, DWORD PTR [rdx+2]
  000e1	3a 4a 02	 cmp	 cl, BYTE PTR [rdx+2]
  000e4	75 27		 jne	 SHORT $LN13@deflate_rl
  000e6	8d 42 03	 lea	 eax, DWORD PTR [rdx+3]
  000e9	3a 4a 03	 cmp	 cl, BYTE PTR [rdx+3]
  000ec	75 1f		 jne	 SHORT $LN13@deflate_rl
  000ee	8d 42 04	 lea	 eax, DWORD PTR [rdx+4]
  000f1	3a 4a 04	 cmp	 cl, BYTE PTR [rdx+4]
  000f4	75 17		 jne	 SHORT $LN13@deflate_rl
  000f6	8d 42 05	 lea	 eax, DWORD PTR [rdx+5]
  000f9	3a 4a 05	 cmp	 cl, BYTE PTR [rdx+5]
  000fc	75 0f		 jne	 SHORT $LN13@deflate_rl
  000fe	48 83 c2 06	 add	 rdx, 6
  00102	8b c2		 mov	 eax, edx
  00104	3a 0a		 cmp	 cl, BYTE PTR [rdx]
  00106	75 05		 jne	 SHORT $LN13@deflate_rl
  00108	49 3b d1	 cmp	 rdx, r9
  0010b	72 b6		 jb	 SHORT $LL7@deflate_rl
$LN13@deflate_rl:

; 2043 :                          scan < strend);
; 2044 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  0010d	41 2b c1	 sub	 eax, r9d
  00110	05 02 01 00 00	 add	 eax, 258		; 00000102H
  00115	89 83 88 00 00
	00		 mov	 DWORD PTR [rbx+136], eax

; 2045 :                 if (s->match_length > s->lookahead)

  0011b	41 3b c0	 cmp	 eax, r8d
  0011e	76 09		 jbe	 SHORT $LN14@deflate_rl

; 2046 :                     s->match_length = s->lookahead;

  00120	44 89 83 88 00
	00 00		 mov	 DWORD PTR [rbx+136], r8d

; 2067 :         }
; 2068 :         if (bflush) FLUSH_BLOCK(s, 0);

  00127	eb 0c		 jmp	 SHORT $LN53@deflate_rl
$LN14@deflate_rl:

; 2047 :             }
; 2048 :             Assert(scan <= s->window + (uInt)(s->window_size - 1),
; 2049 :                    "wild scan");
; 2050 :         }
; 2051 : 
; 2052 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2053 :         if (s->match_length >= MIN_MATCH) {

  00129	44 8b c0	 mov	 r8d, eax
  0012c	83 f8 03	 cmp	 eax, 3
  0012f	0f 82 88 00 00
	00		 jb	 $LN15@deflate_rl
$LN53@deflate_rl:

; 2054 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2055 : 
; 2056 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  00135	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0013b	41 80 e8 03	 sub	 r8b, 3
  0013f	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00146	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
  0014a	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00150	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00156	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0015d	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  00161	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00167	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0016d	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00174	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  00178	8b cf		 mov	 ecx, edi
  0017a	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00180	41 0f b6 c0	 movzx	 eax, r8b
  00184	42 0f b6 04 20	 movzx	 eax, BYTE PTR [rax+r12]
  00189	66 ff 84 83 c0
	04 00 00	 inc	 WORD PTR [rbx+rax*4+1216]
  00191	66 ff 83 b0 09
	00 00		 inc	 WORD PTR [rbx+2480]
  00198	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  0019e	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax

; 2057 : 
; 2058 :             s->lookahead -= s->match_length;

  001a4	8b 83 88 00 00
	00		 mov	 eax, DWORD PTR [rbx+136]
  001aa	0f 94 c1	 sete	 cl

; 2059 :             s->strstart += s->match_length;
; 2060 :             s->match_length = 0;

  001ad	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  001b3	29 83 9c 00 00
	00		 sub	 DWORD PTR [rbx+156], eax
  001b9	01 06		 add	 DWORD PTR [rsi], eax

; 2061 :         } else {

  001bb	eb 6f		 jmp	 SHORT $LN80@deflate_rl
$LN15@deflate_rl:

; 2062 :             /* No match, output a literal byte */
; 2063 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2064 :             _tr_tally_lit(s, s->window[s->strstart], bflush);

  001bd	8b 0e		 mov	 ecx, DWORD PTR [rsi]
  001bf	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  001c3	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  001c7	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  001cd	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  001d4	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  001d8	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001de	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  001e4	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  001eb	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  001ef	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001f5	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  001fb	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00202	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00205	8b cf		 mov	 ecx, edi
  00207	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0020d	66 ff 84 93 bc
	00 00 00	 inc	 WORD PTR [rbx+rdx*4+188]
  00215	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  0021b	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax
  00221	0f 94 c1	 sete	 cl

; 2065 :             s->lookahead--;

  00224	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]

; 2066 :             s->strstart++;

  0022a	ff 06		 inc	 DWORD PTR [rsi]
$LN80@deflate_rl:

; 2067 :         }
; 2068 :         if (bflush) FLUSH_BLOCK(s, 0);

  0022c	44 8b 06	 mov	 r8d, DWORD PTR [rsi]
  0022f	85 c9		 test	 ecx, ecx
  00231	0f 84 09 fe ff
	ff		 je	 $LL2@deflate_rl
  00237	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  0023d	85 c0		 test	 eax, eax
  0023f	78 08		 js	 SHORT $LN26@deflate_rl
  00241	8b d0		 mov	 edx, eax
  00243	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00247	eb 03		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  00249	48 8b d7	 mov	 rdx, rdi
$LN27@deflate_rl:
  0024c	44 2b c0	 sub	 r8d, eax
  0024f	45 33 c9	 xor	 r9d, r9d
  00252	48 8b cb	 mov	 rcx, rbx
  00255	e8 00 00 00 00	 call	 _tr_flush_block
  0025a	41 8b 06	 mov	 eax, DWORD PTR [r14]
  0025d	49 8b f6	 mov	 rsi, r14
  00260	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00263	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00269	e8 00 00 00 00	 call	 flush_pending
  0026e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00271	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  00274	0f 85 c6 fd ff
	ff		 jne	 $LL2@deflate_rl
$LN37@deflate_rl:
  0027a	33 c0		 xor	 eax, eax
$LN1@deflate_rl:
  0027c	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]

; 2078 : }

  00281	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00286	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0028b	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  00290	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00294	41 5f		 pop	 r15
  00296	41 5c		 pop	 r12
  00298	5f		 pop	 rdi
  00299	c3		 ret	 0
$LN36@deflate_rl:

; 2069 :     }
; 2070 :     s->insert = 0;

  0029a	89 bb 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edi

; 2071 :     if (flush == Z_FINISH) {

  002a0	83 fd 04	 cmp	 ebp, 4
  002a3	75 49		 jne	 SHORT $LN19@deflate_rl

; 2072 :         FLUSH_BLOCK(s, 1);

  002a5	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  002ab	85 c0		 test	 eax, eax
  002ad	78 08		 js	 SHORT $LN28@deflate_rl
  002af	8b d0		 mov	 edx, eax
  002b1	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  002b5	eb 03		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  002b7	48 8b d7	 mov	 rdx, rdi
$LN29@deflate_rl:
  002ba	45 8b 07	 mov	 r8d, DWORD PTR [r15]
  002bd	41 b9 01 00 00
	00		 mov	 r9d, 1
  002c3	44 2b c0	 sub	 r8d, eax
  002c6	48 8b cb	 mov	 rcx, rbx
  002c9	e8 00 00 00 00	 call	 _tr_flush_block
  002ce	41 8b 07	 mov	 eax, DWORD PTR [r15]
  002d1	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  002d4	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  002da	e8 00 00 00 00	 call	 flush_pending
  002df	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002e2	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  002e5	40 0f 95 c7	 setne	 dil
  002e9	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]
  002ec	eb 8e		 jmp	 SHORT $LN1@deflate_rl
$LN19@deflate_rl:

; 2073 :         return finish_done;
; 2074 :     }
; 2075 :     if (s->sym_next)

  002ee	39 bb f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], edi
  002f4	74 42		 je	 SHORT $LN22@deflate_rl

; 2076 :         FLUSH_BLOCK(s, 0);

  002f6	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  002fc	85 c0		 test	 eax, eax
  002fe	78 06		 js	 SHORT $LN30@deflate_rl
  00300	8b f8		 mov	 edi, eax
  00302	48 03 7b 50	 add	 rdi, QWORD PTR [rbx+80]
$LN30@deflate_rl:
  00306	45 8b 07	 mov	 r8d, DWORD PTR [r15]
  00309	45 33 c9	 xor	 r9d, r9d
  0030c	44 2b c0	 sub	 r8d, eax
  0030f	48 8b d7	 mov	 rdx, rdi
  00312	48 8b cb	 mov	 rcx, rbx
  00315	e8 00 00 00 00	 call	 _tr_flush_block
  0031a	41 8b 07	 mov	 eax, DWORD PTR [r15]
  0031d	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00320	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00326	e8 00 00 00 00	 call	 flush_pending
  0032b	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0032e	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00332	0f 84 42 ff ff
	ff		 je	 $LN37@deflate_rl
$LN22@deflate_rl:

; 2077 :     return block_done;

  00338	b8 01 00 00 00	 mov	 eax, 1
  0033d	e9 3a ff ff ff	 jmp	 $LN1@deflate_rl
deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT deflate_huff
_TEXT	SEGMENT
s$ = 48
flush$ = 56
deflate_huff PROC					; COMDAT

; 2084 : local block_state deflate_huff(deflate_state *s, int flush) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	33 ff		 xor	 edi, edi
$LL2@deflate_hu:

; 2085 :     int bflush;             /* set if current block must be flushed */
; 2086 : 
; 2087 :     for (;;) {
; 2088 :         /* Make sure that we have a literal to write. */
; 2089 :         if (s->lookahead == 0) {

  00016	39 bb 9c 00 00
	00		 cmp	 DWORD PTR [rbx+156], edi
  0001c	75 14		 jne	 SHORT $LN6@deflate_hu

; 2090 :             fill_window(s);

  0001e	48 8b cb	 mov	 rcx, rbx
  00021	e8 00 00 00 00	 call	 fill_window

; 2091 :             if (s->lookahead == 0) {

  00026	39 bb 9c 00 00
	00		 cmp	 DWORD PTR [rbx+156], edi
  0002c	0f 84 de 00 00
	00		 je	 $LN23@deflate_hu
$LN6@deflate_hu:

; 2093 :                     return need_more;
; 2094 :                 break;      /* flush the current block */
; 2095 :             }
; 2096 :         }
; 2097 : 
; 2098 :         /* Output a literal byte */
; 2099 :         s->match_length = 0;
; 2100 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2101 :         _tr_tally_lit(s, s->window[s->strstart], bflush);

  00032	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  00038	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0003c	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  00042	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00046	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0004c	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00053	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  00057	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0005d	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00063	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0006a	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  0006e	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00074	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0007a	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00081	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00084	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0008a	66 ff 84 93 bc
	00 00 00	 inc	 WORD PTR [rbx+rdx*4+188]

; 2102 :         s->lookahead--;
; 2103 :         s->strstart++;

  00092	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  00099	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]
  0009f	41 ff c0	 inc	 r8d
  000a2	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  000a8	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d
  000af	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax

; 2104 :         if (bflush) FLUSH_BLOCK(s, 0);

  000b5	0f 85 5b ff ff
	ff		 jne	 $LL2@deflate_hu
  000bb	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  000c1	85 c0		 test	 eax, eax
  000c3	78 08		 js	 SHORT $LN15@deflate_hu
  000c5	8b d0		 mov	 edx, eax
  000c7	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  000cb	eb 03		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  000cd	48 8b d7	 mov	 rdx, rdi
$LN16@deflate_hu:
  000d0	44 2b c0	 sub	 r8d, eax
  000d3	45 33 c9	 xor	 r9d, r9d
  000d6	48 8b cb	 mov	 rcx, rbx
  000d9	e8 00 00 00 00	 call	 _tr_flush_block
  000de	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  000e4	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000e7	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  000ed	e8 00 00 00 00	 call	 flush_pending
  000f2	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000f5	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  000f8	0f 85 18 ff ff
	ff		 jne	 $LL2@deflate_hu
$LN24@deflate_hu:
  000fe	33 c0		 xor	 eax, eax

; 2113 :     return block_done;
; 2114 : }

  00100	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00105	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0010a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0010e	5f		 pop	 rdi
  0010f	c3		 ret	 0
$LN23@deflate_hu:

; 2092 :                 if (flush == Z_NO_FLUSH)

  00110	85 f6		 test	 esi, esi
  00112	74 ea		 je	 SHORT $LN24@deflate_hu

; 2105 :     }
; 2106 :     s->insert = 0;

  00114	89 bb 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edi

; 2107 :     if (flush == Z_FINISH) {

  0011a	83 fe 04	 cmp	 esi, 4
  0011d	75 5e		 jne	 SHORT $LN10@deflate_hu

; 2108 :         FLUSH_BLOCK(s, 1);

  0011f	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  00125	85 c0		 test	 eax, eax
  00127	78 08		 js	 SHORT $LN17@deflate_hu
  00129	8b d0		 mov	 edx, eax
  0012b	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  0012f	eb 03		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  00131	48 8b d7	 mov	 rdx, rdi
$LN18@deflate_hu:
  00134	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  0013b	41 b9 01 00 00
	00		 mov	 r9d, 1
  00141	44 2b c0	 sub	 r8d, eax
  00144	48 8b cb	 mov	 rcx, rbx
  00147	e8 00 00 00 00	 call	 _tr_flush_block
  0014c	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00152	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00155	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  0015b	e8 00 00 00 00	 call	 flush_pending
  00160	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00163	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  00166	40 0f 95 c7	 setne	 dil
  0016a	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]

; 2113 :     return block_done;
; 2114 : }

  0016d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00172	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00177	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0017b	5f		 pop	 rdi
  0017c	c3		 ret	 0
$LN10@deflate_hu:

; 2109 :         return finish_done;
; 2110 :     }
; 2111 :     if (s->sym_next)

  0017d	39 bb f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], edi
  00183	74 49		 je	 SHORT $LN13@deflate_hu

; 2112 :         FLUSH_BLOCK(s, 0);

  00185	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  0018b	85 c0		 test	 eax, eax
  0018d	78 06		 js	 SHORT $LN19@deflate_hu
  0018f	8b f8		 mov	 edi, eax
  00191	48 03 7b 50	 add	 rdi, QWORD PTR [rbx+80]
$LN19@deflate_hu:
  00195	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  0019c	45 33 c9	 xor	 r9d, r9d
  0019f	44 2b c0	 sub	 r8d, eax
  001a2	48 8b d7	 mov	 rdx, rdi
  001a5	48 8b cb	 mov	 rcx, rbx
  001a8	e8 00 00 00 00	 call	 _tr_flush_block
  001ad	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  001b3	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  001b6	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  001bc	e8 00 00 00 00	 call	 flush_pending
  001c1	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001c4	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  001c8	0f 84 30 ff ff
	ff		 je	 $LN24@deflate_hu
$LN13@deflate_hu:

; 2113 :     return block_done;
; 2114 : }

  001ce	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001d3	b8 01 00 00 00	 mov	 eax, 1
  001d8	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001dd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e1	5f		 pop	 rdi
  001e2	c3		 ret	 0
deflate_huff ENDP
_TEXT	ENDS
END
