; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

	TITLE	c:\users\chris\documents\github\fastcopy-m\external\zlib\contrib\vstudio\vc12\x86\zlibdllreleasewithoutasm\tmp\gzwrite.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@ ; `string'
PUBLIC	??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@ ; `string'
PUBLIC	??_C@_0CC@ENDIFONJ@string?5length?5does?5not?5fit?5in?5i@ ; `string'
EXTRN	__imp___write:PROC
;	COMDAT ??_C@_0CC@ENDIFONJ@string?5length?5does?5not?5fit?5in?5i@
CONST	SEGMENT
??_C@_0CC@ENDIFONJ@string?5length?5does?5not?5fit?5in?5i@ DB 'string leng'
	DB	'th does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@
CONST	SEGMENT
??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@ DB 'requested le'
	DB	'ngth does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@
CONST	SEGMENT
??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@ DB 'internal err'
	DB	'or: deflate stream corrupt', 00H		; `string'
PUBLIC	_gzsetparams@12
PUBLIC	_gzflush@8
PUBLIC	_gzprintf
PUBLIC	_gzvprintf
PUBLIC	_gzputs@8
PUBLIC	_gzputc@8
PUBLIC	_gzfwrite@16
PUBLIC	_gzwrite@12
PUBLIC	_gzclose_w@4
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzclose_w@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_w@4 PROC					; COMDAT

; 595  : int ZEXPORT gzclose_w(gzFile file) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 596  :     int ret = Z_OK;
; 597  :     gz_statep state;
; 598  : 
; 599  :     /* get internal structure */
; 600  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	33 ff		 xor	 edi, edi
  0000f	85 f6		 test	 esi, esi
  00011	0f 84 a7 00 00
	00		 je	 $LN11@gzclose_w

; 601  :         return Z_STREAM_ERROR;
; 602  :     state = (gz_statep)file;
; 603  : 
; 604  :     /* check that we're writing */
; 605  :     if (state->mode != GZ_WRITE)

  00017	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001e	0f 85 9a 00 00
	00		 jne	 $LN11@gzclose_w

; 606  :         return Z_STREAM_ERROR;
; 607  : 
; 608  :     /* check for seek request */
; 609  :     if (state->seek) {

  00024	39 7e 60	 cmp	 DWORD PTR [esi+96], edi
  00027	74 1b		 je	 SHORT $LN5@gzclose_w

; 610  :         state->seek = 0;
; 611  :         if (gz_zero(state, state->skip) == -1)

  00029	ff 76 5c	 push	 DWORD PTR [esi+92]
  0002c	8b ce		 mov	 ecx, esi
  0002e	89 7e 60	 mov	 DWORD PTR [esi+96], edi
  00031	ff 76 58	 push	 DWORD PTR [esi+88]
  00034	e8 00 00 00 00	 call	 _gz_zero
  00039	83 c4 08	 add	 esp, 8
  0003c	83 f8 ff	 cmp	 eax, -1
  0003f	75 03		 jne	 SHORT $LN5@gzclose_w

; 612  :             ret = state->err;

  00041	8b 7e 64	 mov	 edi, DWORD PTR [esi+100]
$LN5@gzclose_w:

; 613  :     }
; 614  : 
; 615  :     /* flush, free memory, and close file */
; 616  :     if (gz_comp(state, Z_FINISH) == -1)

  00044	ba 04 00 00 00	 mov	 edx, 4
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 _gz_comp
  00050	83 f8 ff	 cmp	 eax, -1
  00053	75 03		 jne	 SHORT $LN6@gzclose_w

; 617  :         ret = state->err;

  00055	8b 7e 64	 mov	 edi, DWORD PTR [esi+100]
$LN6@gzclose_w:

; 618  :     if (state->size) {

  00058	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0005c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__free
  00062	74 1f		 je	 SHORT $LN7@gzclose_w

; 619  :         if (!state->direct) {

  00064	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00068	75 11		 jne	 SHORT $LN8@gzclose_w

; 620  :             (void)deflateEnd(&(state->strm));

  0006a	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _deflateEnd@4

; 621  :             free(state->out);

  00073	ff 76 28	 push	 DWORD PTR [esi+40]
  00076	ff d3		 call	 ebx
  00078	83 c4 04	 add	 esp, 4
$LN8@gzclose_w:

; 622  :         }
; 623  :         free(state->in);

  0007b	ff 76 24	 push	 DWORD PTR [esi+36]
  0007e	ff d3		 call	 ebx
  00080	83 c4 04	 add	 esp, 4
$LN7@gzclose_w:

; 624  :     }
; 625  :     gz_error(state, Z_OK, NULL);

  00083	6a 00		 push	 0
  00085	33 d2		 xor	 edx, edx
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 _gz_error
  0008e	83 c4 04	 add	 esp, 4

; 626  :     free(state->path);

  00091	ff 76 18	 push	 DWORD PTR [esi+24]
  00094	ff d3		 call	 ebx
  00096	83 c4 04	 add	 esp, 4

; 627  :     if (close(state->fd) == -1)

  00099	ff 76 14	 push	 DWORD PTR [esi+20]
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___close
  000a2	83 c4 04	 add	 esp, 4
  000a5	83 c9 ff	 or	 ecx, -1
  000a8	3b c1		 cmp	 eax, ecx
  000aa	0f 44 f9	 cmove	 edi, ecx

; 628  :         ret = Z_ERRNO;
; 629  :     free(state);

  000ad	56		 push	 esi
  000ae	ff d3		 call	 ebx
  000b0	83 c4 04	 add	 esp, 4

; 630  :     return ret;

  000b3	8b c7		 mov	 eax, edi

; 631  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
$LN11@gzclose_w:
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
_gzclose_w@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gz_init
_TEXT	SEGMENT
_gz_init PROC						; COMDAT
; _state$ = ecx

; 11   : local int gz_init(gz_statep state) {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 12   :     int ret;
; 13   :     z_streamp strm = &(state->strm);
; 14   : 
; 15   :     /* allocate input buffer (double size for gzprintf) */
; 16   :     state->in = (unsigned char *)malloc(state->want << 1);

  00005	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00008	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
  0000b	03 c0		 add	 eax, eax
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00014	83 c4 04	 add	 esp, 4
  00017	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 17   :     if (state->in == NULL) {

  0001a	85 c0		 test	 eax, eax
  0001c	74 29		 je	 SHORT $LN9@gz_init

; 18   :         gz_error(state, Z_MEM_ERROR, "out of memory");
; 19   :         return -1;
; 20   :     }
; 21   : 
; 22   :     /* only need output buffer and deflate state if compressing */
; 23   :     if (!state->direct) {

  0001e	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00022	0f 85 a3 00 00
	00		 jne	 $LN8@gz_init

; 24   :         /* allocate output buffer */
; 25   :         state->out = (unsigned char *)malloc(state->want);

  00028	ff 77 20	 push	 DWORD PTR [edi+32]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00031	83 c4 04	 add	 esp, 4
  00034	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 26   :         if (state->out == NULL) {

  00037	85 c0		 test	 eax, eax
  00039	75 27		 jne	 SHORT $LN4@gz_init

; 27   :             free(state->in);

  0003b	ff 77 24	 push	 DWORD PTR [edi+36]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00044	83 c4 04	 add	 esp, 4
$LN9@gz_init:

; 55   :     }
; 56   :     return 0;
; 57   : }

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory@
  0004c	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 _gz_error
  00058	83 c4 04	 add	 esp, 4
  0005b	83 c8 ff	 or	 eax, -1
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	c3		 ret	 0
$LN4@gz_init:

; 28   :             gz_error(state, Z_MEM_ERROR, "out of memory");
; 29   :             return -1;
; 30   :         }
; 31   : 
; 32   :         /* allocate deflate memory, set up for gzip compression */
; 33   :         strm->zalloc = Z_NULL;
; 34   :         strm->zfree = Z_NULL;
; 35   :         strm->opaque = Z_NULL;
; 36   :         ret = deflateInit2(strm, state->level, Z_DEFLATED,

  00062	6a 38		 push	 56			; 00000038H
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MAILBDAG@1?42?413?41?9motley@
  00069	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00070	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00077	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0007e	ff 77 4c	 push	 DWORD PTR [edi+76]
  00081	6a 08		 push	 8
  00083	6a 1f		 push	 31			; 0000001fH
  00085	6a 08		 push	 8
  00087	ff 77 48	 push	 DWORD PTR [edi+72]
  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 _deflateInit2_@32

; 37   :                            MAX_WBITS + 16, DEF_MEM_LEVEL, state->strategy);
; 38   :         if (ret != Z_OK) {

  00090	85 c0		 test	 eax, eax
  00092	74 31		 je	 SHORT $LN5@gz_init

; 39   :             free(state->out);

  00094	ff 77 28	 push	 DWORD PTR [edi+40]
  00097	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__free
  0009d	ff d6		 call	 esi
  0009f	83 c4 04	 add	 esp, 4

; 40   :             free(state->in);

  000a2	ff 77 24	 push	 DWORD PTR [edi+36]
  000a5	ff d6		 call	 esi
  000a7	83 c4 04	 add	 esp, 4

; 41   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000aa	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  000af	8b cf		 mov	 ecx, edi
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory@
  000b6	e8 00 00 00 00	 call	 _gz_error
  000bb	83 c4 04	 add	 esp, 4

; 42   :             return -1;

  000be	83 c8 ff	 or	 eax, -1

; 55   :     }
; 56   :     return 0;
; 57   : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	c3		 ret	 0
$LN5@gz_init:

; 43   :         }
; 44   :         strm->next_in = NULL;

  000c5	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN8@gz_init:

; 45   :     }
; 46   : 
; 47   :     /* mark state as initialized */
; 48   :     state->size = state->want;
; 49   : 
; 50   :     /* initialize write buffer if compressing */
; 51   :     if (!state->direct) {

  000cb	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  000cf	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000d2	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  000d5	75 0c		 jne	 SHORT $LN6@gz_init

; 52   :         strm->avail_out = state->size;

  000d7	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 53   :         strm->next_out = state->out;

  000da	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000dd	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 54   :         state->x.next = strm->next_out;

  000e0	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN6@gz_init:

; 55   :     }
; 56   :     return 0;
; 57   : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	33 c0		 xor	 eax, eax
  000e7	5b		 pop	 ebx
  000e8	c3		 ret	 0
_gz_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gz_comp
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_gz_comp PROC						; COMDAT
; _state$ = ecx
; _flush$ = edx

; 65   : local int gz_comp(gz_statep state, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8b da		 mov	 ebx, edx
  0000b	89 5d fc	 mov	 DWORD PTR _flush$1$[ebp], ebx

; 66   :     int ret, writ;
; 67   :     unsigned have, put, max = ((unsigned)-1 >> 2) + 1;
; 68   :     z_streamp strm = &(state->strm);
; 69   : 
; 70   :     /* allocate memory if this is the first time through */
; 71   :     if (state->size == 0 && gz_init(state) == -1)

  0000e	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  00012	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
  00015	75 0e		 jne	 SHORT $LN38@gz_comp
  00017	e8 00 00 00 00	 call	 _gz_init
  0001c	83 f8 ff	 cmp	 eax, -1
  0001f	0f 84 53 01 00
	00		 je	 $LN43@gz_comp
$LN38@gz_comp:

; 72   :         return -1;
; 73   : 
; 74   :     /* write directly if requested */
; 75   :     if (state->direct) {

  00025	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00029	74 77		 je	 SHORT $LN10@gz_comp

; 76   :         while (strm->avail_in) {

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	85 c0		 test	 eax, eax
  00030	0f 84 25 01 00
	00		 je	 $LN20@gz_comp
  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00038	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  0003d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___write
$LL2@gz_comp:

; 77   :             put = strm->avail_in > max ? max : strm->avail_in;

  00043	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  00048	0f 47 c2	 cmova	 eax, edx

; 78   :             writ = write(state->fd, strm->next_in, put);

  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	ff 77 14	 push	 DWORD PTR [edi+20]
  00050	ff d3		 call	 ebx
  00052	8b c8		 mov	 ecx, eax
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 79   :             if (writ < 0) {

  00057	85 c9		 test	 ecx, ecx
  00059	78 1e		 js	 SHORT $LN29@gz_comp

; 80   :                 gz_error(state, Z_ERRNO, zstrerror());
; 81   :                 return -1;
; 82   :             }
; 83   :             strm->avail_in -= (unsigned)writ;

  0005b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005e	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H

; 84   :             strm->next_in += writ;

  00063	01 0e		 add	 DWORD PTR [esi], ecx
  00065	2b c1		 sub	 eax, ecx
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0006c	85 c0		 test	 eax, eax
  0006e	75 d3		 jne	 SHORT $LL2@gz_comp

; 136  : 
; 137  :     /* all done, no errors */
; 138  :     return 0;

  00070	33 c0		 xor	 eax, eax

; 139  : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN29@gz_comp:
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  0007f	ff 30		 push	 DWORD PTR [eax]
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strerror
  00087	83 c4 04	 add	 esp, 4
  0008a	83 ca ff	 or	 edx, -1
  0008d	8b cf		 mov	 ecx, edi
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _gz_error
  00095	83 c4 04	 add	 esp, 4
  00098	83 c8 ff	 or	 eax, -1
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
$LN10@gz_comp:

; 85   :         }
; 86   :         return 0;
; 87   :     }
; 88   : 
; 89   :     /* check for a pending reset */
; 90   :     if (state->reset) {

  000a2	83 7f 50 00	 cmp	 DWORD PTR [edi+80], 0
  000a6	74 17		 je	 SHORT $LN12@gz_comp

; 91   :         /* don't start a new gzip member unless there is data to write */
; 92   :         if (strm->avail_in == 0)

  000a8	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  000ac	0f 84 a9 00 00
	00		 je	 $LN20@gz_comp

; 93   :             return 0;
; 94   :         deflateReset(strm);

  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 _deflateReset@4

; 95   :         state->reset = 0;

  000b8	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
$LN12@gz_comp:

; 96   :     }
; 97   : 
; 98   :     /* run deflate() on provided input until it produces no more output */
; 99   :     ret = Z_OK;

  000bf	33 c0		 xor	 eax, eax
$LN45@gz_comp:

; 100  :     do {
; 101  :         /* write out current buffer contents if full, or if flushing, but if
; 102  :            doing Z_FINISH then don't write until we get to Z_STREAM_END */
; 103  :         if (strm->avail_out == 0 || (flush != Z_NO_FLUSH &&

  000c1	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000c5	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  000ca	74 0e		 je	 SHORT $LN28@gz_comp
  000cc	85 db		 test	 ebx, ebx
  000ce	74 60		 je	 SHORT $LN18@gz_comp
  000d0	83 fb 04	 cmp	 ebx, 4
  000d3	75 05		 jne	 SHORT $LN28@gz_comp
  000d5	83 f8 01	 cmp	 eax, 1
  000d8	75 56		 jne	 SHORT $LN18@gz_comp
$LN28@gz_comp:

; 104  :             (flush != Z_FINISH || ret == Z_STREAM_END))) {
; 105  :             while (strm->next_out > state->x.next) {

  000da	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000dd	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000e0	3b c1		 cmp	 eax, ecx
  000e2	76 34		 jbe	 SHORT $LN8@gz_comp
$LL7@gz_comp:

; 106  :                 put = strm->next_out - state->x.next > (int)max ? max :

  000e4	2b c1		 sub	 eax, ecx
  000e6	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  000eb	0f 4f c2	 cmovg	 eax, edx

; 107  :                       (unsigned)(strm->next_out - state->x.next);
; 108  :                 writ = write(state->fd, state->x.next, put);

  000ee	50		 push	 eax
  000ef	51		 push	 ecx
  000f0	ff 77 14	 push	 DWORD PTR [edi+20]
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___write
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  :                 if (writ < 0) {

  000fc	85 c0		 test	 eax, eax
  000fe	0f 88 75 ff ff
	ff		 js	 $LN29@gz_comp

; 110  :                     gz_error(state, Z_ERRNO, zstrerror());
; 111  :                     return -1;
; 112  :                 }
; 113  :                 state->x.next += writ;

  00104	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00107	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  0010c	03 c8		 add	 ecx, eax
  0010e	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  00111	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00114	3b c1		 cmp	 eax, ecx
  00116	77 cc		 ja	 SHORT $LL7@gz_comp
$LN8@gz_comp:

; 114  :             }
; 115  :             if (strm->avail_out == 0) {

  00118	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0011c	75 12		 jne	 SHORT $LN18@gz_comp

; 116  :                 strm->avail_out = state->size;

  0011e	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00121	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 117  :                 strm->next_out = state->out;

  00124	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00127	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 118  :                 state->x.next = state->out;

  0012a	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0012d	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN18@gz_comp:

; 119  :             }
; 120  :         }
; 121  : 
; 122  :         /* compress */
; 123  :         have = strm->avail_out;
; 124  :         ret = deflate(strm, flush);

  00130	ff 75 fc	 push	 DWORD PTR _flush$1$[ebp]
  00133	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00136	56		 push	 esi
  00137	e8 00 00 00 00	 call	 _deflate@8

; 125  :         if (ret == Z_STREAM_ERROR) {

  0013c	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  0013f	74 23		 je	 SHORT $LN32@gz_comp

; 127  :                       "internal error: deflate stream corrupt");
; 128  :             return -1;
; 129  :         }
; 130  :         have -= strm->avail_out;

  00141	2b 5e 10	 sub	 ebx, DWORD PTR [esi+16]

; 131  :     } while (have);

  00144	74 08		 je	 SHORT $LN31@gz_comp
  00146	8b 5d fc	 mov	 ebx, DWORD PTR _flush$1$[ebp]
  00149	e9 73 ff ff ff	 jmp	 $LN45@gz_comp
$LN31@gz_comp:

; 132  : 
; 133  :     /* if that completed a deflate stream, allow another to start */
; 134  :     if (flush == Z_FINISH)

  0014e	83 7d fc 04	 cmp	 DWORD PTR _flush$1$[ebp], 4
  00152	75 07		 jne	 SHORT $LN20@gz_comp

; 135  :         state->reset = 1;

  00154	c7 47 50 01 00
	00 00		 mov	 DWORD PTR [edi+80], 1
$LN20@gz_comp:

; 136  : 
; 137  :     /* all done, no errors */
; 138  :     return 0;

  0015b	33 c0		 xor	 eax, eax

; 139  : }

  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
$LN32@gz_comp:

; 126  :             gz_error(state, Z_STREAM_ERROR,

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@
  00169	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH

; 139  : }

  0016e	8b cf		 mov	 ecx, edi
  00170	e8 00 00 00 00	 call	 _gz_error
  00175	83 c4 04	 add	 esp, 4
$LN43@gz_comp:
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	83 c8 ff	 or	 eax, -1
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c3		 ret	 0
_gz_comp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gz_zero
_TEXT	SEGMENT
_first$1$ = -8						; size = 4
_len$2$ = -4						; size = 4
_len$ = 8						; size = 8
_gz_zero PROC						; COMDAT
; _state$ = ecx

; 143  : local int gz_zero(gz_statep state, z_off64_t len) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 144  :     int first;
; 145  :     unsigned n;
; 146  :     z_streamp strm = &(state->strm);
; 147  : 
; 148  :     /* consume whatever's left in the input buffer */
; 149  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  0000b	83 7e 70 00	 cmp	 DWORD PTR [esi+112], 0
  0000f	74 0c		 je	 SHORT $LN4@gz_zero
  00011	33 d2		 xor	 edx, edx
  00013	e8 00 00 00 00	 call	 _gz_comp
  00018	83 f8 ff	 cmp	 eax, -1
  0001b	74 7c		 je	 SHORT $LN11@gz_zero
$LN4@gz_zero:

; 150  :         return -1;
; 151  : 
; 152  :     /* compress len zeros (len guaranteed > 0) */
; 153  :     first = 1;
; 154  :     while (len) {

  0001d	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  00020	ba 01 00 00 00	 mov	 edx, 1
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp+4]
  00028	8b c3		 mov	 eax, ebx
  0002a	0b c1		 or	 eax, ecx
  0002c	89 55 f8	 mov	 DWORD PTR _first$1$[ebp], edx
  0002f	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  00032	74 5c		 je	 SHORT $LN3@gz_zero
$LL2@gz_zero:

; 155  :         n = GT_OFF(state->size) || (z_off64_t)state->size > len ?

  00034	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00037	33 c0		 xor	 eax, eax
  00039	3b c1		 cmp	 eax, ecx
  0003b	7f 06		 jg	 SHORT $LN8@gz_zero
  0003d	7c 06		 jl	 SHORT $LN9@gz_zero
  0003f	3b fb		 cmp	 edi, ebx
  00041	76 02		 jbe	 SHORT $LN9@gz_zero
$LN8@gz_zero:
  00043	8b fb		 mov	 edi, ebx
$LN9@gz_zero:

; 156  :             (unsigned)len : state->size;
; 157  :         if (first) {

  00045	85 d2		 test	 edx, edx
  00047	74 15		 je	 SHORT $LN5@gz_zero

; 158  :             memset(state->in, 0, n);

  00049	57		 push	 edi
  0004a	6a 00		 push	 0
  0004c	ff 76 24	 push	 DWORD PTR [esi+36]
  0004f	e8 00 00 00 00	 call	 _memset
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 159  :             first = 0;

  00057	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _first$1$[ebp], 0
$LN5@gz_zero:

; 160  :         }
; 161  :         strm->avail_in = n;

  0005e	89 7e 70	 mov	 DWORD PTR [esi+112], edi

; 162  :         strm->next_in = state->in;
; 163  :         state->x.pos += n;
; 164  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  00061	8b ce		 mov	 ecx, esi
  00063	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00066	89 46 6c	 mov	 DWORD PTR [esi+108], eax
  00069	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0006c	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  00070	33 d2		 xor	 edx, edx
  00072	e8 00 00 00 00	 call	 _gz_comp
  00077	83 f8 ff	 cmp	 eax, -1
  0007a	74 1d		 je	 SHORT $LN11@gz_zero

; 165  :             return -1;
; 166  :         len -= n;

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _len$2$[ebp]
  0007f	2b df		 sub	 ebx, edi
  00081	8b 55 f8	 mov	 edx, DWORD PTR _first$1$[ebp]
  00084	8b c3		 mov	 eax, ebx
  00086	83 d9 00	 sbb	 ecx, 0
  00089	0b c1		 or	 eax, ecx
  0008b	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  0008e	75 a4		 jne	 SHORT $LL2@gz_zero
$LN3@gz_zero:

; 167  :     }
; 168  :     return 0;

  00090	33 c0		 xor	 eax, eax

; 169  : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN11@gz_zero:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	83 c8 ff	 or	 eax, -1
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_gz_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gz_write
_TEXT	SEGMENT
_buf$1$ = -8						; size = 4
_put$1$ = -4						; size = 4
_len$ = 8						; size = 4
_gz_write PROC						; COMDAT
; _state$ = ecx
; _buf$ = edx

; 173  : local z_size_t gz_write(gz_statep state, voidpc buf, z_size_t len) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx

; 174  :     z_size_t put = len;

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0000d	89 5c 24 0c	 mov	 DWORD PTR _put$1$[esp+16], ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	57		 push	 edi
  00015	8b fa		 mov	 edi, edx
  00017	89 7c 24 10	 mov	 DWORD PTR _buf$1$[esp+24], edi

; 175  : 
; 176  :     /* if len is zero, avoid unnecessary operations */
; 177  :     if (len == 0)

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 91 00 00
	00		 je	 $LN25@gz_write

; 178  :         return 0;
; 179  : 
; 180  :     /* allocate memory if this is the first time through */
; 181  :     if (state->size == 0 && gz_init(state) == -1)

  00023	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00027	75 0e		 jne	 SHORT $LN32@gz_write
  00029	e8 00 00 00 00	 call	 _gz_init
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	0f 84 7d 00 00
	00		 je	 $LN25@gz_write
$LN32@gz_write:

; 182  :         return 0;
; 183  : 
; 184  :     /* check for seek request */
; 185  :     if (state->seek) {

  00037	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
  0003b	74 1c		 je	 SHORT $LN11@gz_write

; 186  :         state->seek = 0;
; 187  :         if (gz_zero(state, state->skip) == -1)

  0003d	ff 76 5c	 push	 DWORD PTR [esi+92]
  00040	8b ce		 mov	 ecx, esi
  00042	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00049	ff 76 58	 push	 DWORD PTR [esi+88]
  0004c	e8 00 00 00 00	 call	 _gz_zero
  00051	83 c4 08	 add	 esp, 8
  00054	83 f8 ff	 cmp	 eax, -1
  00057	74 5b		 je	 SHORT $LN25@gz_write
$LN11@gz_write:

; 188  :             return 0;
; 189  :     }
; 190  : 
; 191  :     /* for small len, copy to input buffer, otherwise compress directly */
; 192  :     if (len < state->size) {

  00059	3b 5e 1c	 cmp	 ebx, DWORD PTR [esi+28]
  0005c	73 5f		 jae	 SHORT $LN12@gz_write
  0005e	66 90		 npad	 2
$LL4@gz_write:

; 193  :         /* copy to input buffer, compress when full */
; 194  :         do {
; 195  :             unsigned have, copy;
; 196  : 
; 197  :             if (state->strm.avail_in == 0)

  00060	8b 7e 70	 mov	 edi, DWORD PTR [esi+112]
  00063	85 ff		 test	 edi, edi
  00065	75 06		 jne	 SHORT $LN29@gz_write

; 198  :                 state->strm.next_in = state->in;

  00067	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0006a	89 46 6c	 mov	 DWORD PTR [esi+108], eax
$LN29@gz_write:

; 199  :             have = (unsigned)((state->strm.next_in + state->strm.avail_in) -

  0006d	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00070	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]

; 200  :                               state->in);
; 201  :             copy = state->size - have;

  00073	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00076	2b ca		 sub	 ecx, edx
  00078	03 cf		 add	 ecx, edi

; 202  :             if (copy > len)
; 203  :                 copy = (unsigned)len;
; 204  :             memcpy(state->in + have, buf, copy);

  0007a	8b fb		 mov	 edi, ebx
  0007c	2b c1		 sub	 eax, ecx
  0007e	3b c3		 cmp	 eax, ebx
  00080	0f 46 f8	 cmovbe	 edi, eax
  00083	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00086	57		 push	 edi
  00087	ff 74 24 14	 push	 DWORD PTR _buf$1$[esp+28]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _memcpy

; 205  :             state->strm.avail_in += copy;

  00091	01 7e 70	 add	 DWORD PTR [esi+112], edi
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  :             state->x.pos += copy;

  00097	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0009a	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 207  :             buf = (const char *)buf + copy;

  0009e	01 7c 24 10	 add	 DWORD PTR _buf$1$[esp+24], edi

; 208  :             len -= copy;

  000a2	2b df		 sub	 ebx, edi

; 209  :             if (len && gz_comp(state, Z_NO_FLUSH) == -1)

  000a4	74 53		 je	 SHORT $LN6@gz_write
  000a6	33 d2		 xor	 edx, edx
  000a8	8b ce		 mov	 ecx, esi
  000aa	e8 00 00 00 00	 call	 _gz_comp
  000af	83 f8 ff	 cmp	 eax, -1
  000b2	75 ac		 jne	 SHORT $LL4@gz_write
$LN25@gz_write:

; 227  :                 return 0;

  000b4	33 c0		 xor	 eax, eax

; 234  : }

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN12@gz_write:

; 210  :                 return 0;
; 211  :         } while (len);
; 212  :     }
; 213  :     else {
; 214  :         /* consume whatever's left in the input buffer */
; 215  :         if (state->strm.avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  000bd	83 7e 70 00	 cmp	 DWORD PTR [esi+112], 0
  000c1	74 0e		 je	 SHORT $LN17@gz_write
  000c3	33 d2		 xor	 edx, edx
  000c5	8b ce		 mov	 ecx, esi
  000c7	e8 00 00 00 00	 call	 _gz_comp
  000cc	83 f8 ff	 cmp	 eax, -1
  000cf	74 e3		 je	 SHORT $LN25@gz_write
$LN17@gz_write:

; 216  :             return 0;
; 217  : 
; 218  :         /* directly compress user buffer to file */
; 219  :         state->strm.next_in = (z_const Bytef *)buf;

  000d1	89 7e 6c	 mov	 DWORD PTR [esi+108], edi
$LL7@gz_write:

; 220  :         do {
; 221  :             unsigned n = (unsigned)-1;

  000d4	83 cf ff	 or	 edi, -1

; 222  :             if (n > len)
; 223  :                 n = (unsigned)len;
; 224  :             state->strm.avail_in = n;
; 225  :             state->x.pos += n;
; 226  :             if (gz_comp(state, Z_NO_FLUSH) == -1)

  000d7	8b ce		 mov	 ecx, esi
  000d9	83 fb ff	 cmp	 ebx, -1
  000dc	0f 42 fb	 cmovb	 edi, ebx
  000df	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000e2	89 7e 70	 mov	 DWORD PTR [esi+112], edi
  000e5	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  000e9	33 d2		 xor	 edx, edx
  000eb	e8 00 00 00 00	 call	 _gz_comp
  000f0	83 f8 ff	 cmp	 eax, -1
  000f3	74 bf		 je	 SHORT $LN25@gz_write

; 228  :             len -= n;

  000f5	2b df		 sub	 ebx, edi

; 229  :         } while (len);

  000f7	75 db		 jne	 SHORT $LL7@gz_write
$LN6@gz_write:

; 230  :     }
; 231  : 
; 232  :     /* input was all buffered or compressed */
; 233  :     return put;

  000f9	8b 44 24 14	 mov	 eax, DWORD PTR _put$1$[esp+24]

; 234  : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
_gz_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzwrite@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzwrite@12 PROC					; COMDAT

; 237  : int ZEXPORT gzwrite(gzFile file, voidpc buf, unsigned len) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 238  :     gz_statep state;
; 239  : 
; 240  :     /* get internal structure */
; 241  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 28		 je	 SHORT $LN4@gzwrite

; 242  :         return 0;
; 243  :     state = (gz_statep)file;
; 244  : 
; 245  :     /* check that we're writing and that there's no error */
; 246  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 1f		 jne	 SHORT $LN4@gzwrite
  00013	83 79 64 00	 cmp	 DWORD PTR [ecx+100], 0
  00017	75 19		 jne	 SHORT $LN4@gzwrite

; 247  :         return 0;
; 248  : 
; 249  :     /* since an int is returned, make sure len fits in one, otherwise return
; 250  :        with an error (this avoids a flaw in the interface) */
; 251  :     if ((int)len < 0) {

  00019	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0001c	85 c0		 test	 eax, eax
  0001e	79 18		 jns	 SHORT $LN5@gzwrite

; 252  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@
  00025	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH
  0002a	e8 00 00 00 00	 call	 _gz_error
  0002f	83 c4 04	 add	 esp, 4
$LN4@gzwrite:

; 258  : }

  00032	33 c0		 xor	 eax, eax
  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
$LN5@gzwrite:

; 253  :         return 0;
; 254  :     }
; 255  : 
; 256  :     /* write len bytes from buf (the return value will fit in an int) */
; 257  :     return (int)gz_write(state, buf, len);

  00038	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _gz_write
  00041	83 c4 04	 add	 esp, 4

; 258  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
_gzwrite@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzfwrite@16
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_nitems$ = 16						; size = 4
_file$ = 20						; size = 4
_gzfwrite@16 PROC					; COMDAT

; 262  :                           gzFile file) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 263  :     z_size_t len;
; 264  :     gz_statep state;
; 265  : 
; 266  :     /* get internal structure */
; 267  :     if (file == NULL)

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 5d		 je	 SHORT $LN4@gzfwrite

; 268  :         return 0;
; 269  :     state = (gz_statep)file;
; 270  : 
; 271  :     /* check that we're writing and that there's no error */
; 272  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 54		 jne	 SHORT $LN4@gzfwrite
  00013	83 79 64 00	 cmp	 DWORD PTR [ecx+100], 0
  00017	75 4e		 jne	 SHORT $LN4@gzfwrite

; 274  : 
; 275  :     /* compute bytes to read -- error on overflow */
; 276  :     len = nitems * size;

  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  0001e	8b f7		 mov	 esi, edi
  00020	0f af 75 10	 imul	 esi, DWORD PTR _nitems$[ebp]

; 277  :     if (size && len / size != nitems) {

  00024	85 ff		 test	 edi, edi
  00026	74 25		 je	 SHORT $LN5@gzfwrite
  00028	33 d2		 xor	 edx, edx
  0002a	8b c6		 mov	 eax, esi
  0002c	f7 f7		 div	 edi
  0002e	3b 45 10	 cmp	 eax, DWORD PTR _nitems$[ebp]
  00031	74 1a		 je	 SHORT $LN5@gzfwrite

; 278  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_@
  00038	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0003d	e8 00 00 00 00	 call	 _gz_error
  00042	83 c4 04	 add	 esp, 4
$LN7@gzfwrite:

; 279  :         return 0;

  00045	5f		 pop	 edi
  00046	33 c0		 xor	 eax, eax
  00048	5e		 pop	 esi

; 284  : }

  00049	5d		 pop	 ebp
  0004a	c2 10 00	 ret	 16			; 00000010H
$LN5@gzfwrite:

; 280  :     }
; 281  : 
; 282  :     /* write len bytes to buf, return the number of full items written */
; 283  :     return len ? gz_write(state, buf, len) / size : 0;

  0004d	85 f6		 test	 esi, esi
  0004f	74 f4		 je	 SHORT $LN7@gzfwrite
  00051	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _gz_write
  0005a	83 c4 04	 add	 esp, 4
  0005d	33 d2		 xor	 edx, edx
  0005f	f7 f7		 div	 edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 284  : }

  00063	5d		 pop	 ebp
  00064	c2 10 00	 ret	 16			; 00000010H
$LN4@gzfwrite:

; 273  :         return 0;

  00067	33 c0		 xor	 eax, eax

; 284  : }

  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
_gzfwrite@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzputc@8
_TEXT	SEGMENT
_buf$ = -1						; size = 1
_file$ = 8						; size = 4
_c$ = 12						; size = 4
_gzputc@8 PROC						; COMDAT

; 287  : int ZEXPORT gzputc(gzFile file, int c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]

; 288  :     unsigned have;
; 289  :     unsigned char buf[1];
; 290  :     gz_statep state;
; 291  :     z_streamp strm;
; 292  : 
; 293  :     /* get internal structure */
; 294  :     if (file == NULL)

  0000e	85 f6		 test	 esi, esi
  00010	0f 84 9e 00 00
	00		 je	 $LN4@gzputc

; 295  :         return -1;
; 296  :     state = (gz_statep)file;
; 297  :     strm = &(state->strm);
; 298  : 
; 299  :     /* check that we're writing and that there's no error */
; 300  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00016	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001d	0f 85 91 00 00
	00		 jne	 $LN4@gzputc
  00023	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00027	0f 85 87 00 00
	00		 jne	 $LN4@gzputc

; 301  :         return -1;
; 302  : 
; 303  :     /* check for seek request */
; 304  :     if (state->seek) {

  0002d	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
  00031	74 1c		 je	 SHORT $LN6@gzputc

; 305  :         state->seek = 0;
; 306  :         if (gz_zero(state, state->skip) == -1)

  00033	ff 76 5c	 push	 DWORD PTR [esi+92]
  00036	8b ce		 mov	 ecx, esi
  00038	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0003f	ff 76 58	 push	 DWORD PTR [esi+88]
  00042	e8 00 00 00 00	 call	 _gz_zero
  00047	83 c4 08	 add	 esp, 8
  0004a	83 f8 ff	 cmp	 eax, -1
  0004d	74 65		 je	 SHORT $LN4@gzputc
$LN6@gzputc:

; 307  :             return -1;
; 308  :     }
; 309  : 
; 310  :     /* try writing to input buffer for speed (state->size == 0 if buffer not
; 311  :        initialized) */
; 312  :     if (state->size) {

  0004f	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00052	85 d2		 test	 edx, edx
  00054	74 37		 je	 SHORT $LN9@gzputc

; 313  :         if (strm->avail_in == 0)

  00056	83 7e 70 00	 cmp	 DWORD PTR [esi+112], 0
  0005a	75 06		 jne	 SHORT $LN12@gzputc

; 314  :             strm->next_in = state->in;

  0005c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0005f	89 46 6c	 mov	 DWORD PTR [esi+108], eax
$LN12@gzputc:

; 315  :         have = (unsigned)((strm->next_in + strm->avail_in) - state->in);

  00062	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00065	8b 5e 24	 mov	 ebx, DWORD PTR [esi+36]
  00068	2b cb		 sub	 ecx, ebx
  0006a	03 4e 70	 add	 ecx, DWORD PTR [esi+112]

; 316  :         if (have < state->size) {

  0006d	3b ca		 cmp	 ecx, edx
  0006f	73 1c		 jae	 SHORT $LN9@gzputc

; 317  :             state->in[have] = (unsigned char)c;

  00071	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  00074	88 04 0b	 mov	 BYTE PTR [ebx+ecx], al

; 318  :             strm->avail_in++;

  00077	ff 46 70	 inc	 DWORD PTR [esi+112]

; 319  :             state->x.pos++;

  0007a	83 46 08 01	 add	 DWORD PTR [esi+8], 1

; 320  :             return c & 0xff;

  0007e	0f b6 c0	 movzx	 eax, al
  00081	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 329  : }

  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8
$LN9@gzputc:

; 321  :         }
; 322  :     }
; 323  : 
; 324  :     /* no room in buffer or not initialized, use gz_write() */
; 325  :     buf[0] = (unsigned char)c;

  0008d	8b 5d 0c	 mov	 ebx, DWORD PTR _c$[ebp]

; 326  :     if (gz_write(state, buf, 1) != 1)

  00090	8d 54 24 0f	 lea	 edx, DWORD PTR _buf$[esp+16]
  00094	6a 01		 push	 1
  00096	8b ce		 mov	 ecx, esi
  00098	88 5c 24 13	 mov	 BYTE PTR _buf$[esp+20], bl
  0009c	e8 00 00 00 00	 call	 _gz_write
  000a1	83 c4 04	 add	 esp, 4
  000a4	83 f8 01	 cmp	 eax, 1
  000a7	75 0b		 jne	 SHORT $LN4@gzputc

; 327  :         return -1;
; 328  :     return c & 0xff;

  000a9	0f b6 c3	 movzx	 eax, bl

; 329  : }

  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 08 00	 ret	 8
$LN4@gzputc:
  000b4	5e		 pop	 esi
  000b5	83 c8 ff	 or	 eax, -1
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 08 00	 ret	 8
_gzputc@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzputs@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_s$ = 12						; size = 4
_gzputs@8 PROC						; COMDAT

; 332  : int ZEXPORT gzputs(gzFile file, const char *s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  :     z_size_t len, put;
; 334  :     gz_statep state;
; 335  : 
; 336  :     /* get internal structure */
; 337  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 58		 je	 SHORT $LN4@gzputs

; 338  :         return -1;
; 339  :     state = (gz_statep)file;
; 340  : 
; 341  :     /* check that we're writing and that there's no error */
; 342  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 4f		 jne	 SHORT $LN4@gzputs
  00013	83 79 64 00	 cmp	 DWORD PTR [ecx+100], 0
  00017	75 49		 jne	 SHORT $LN4@gzputs

; 344  : 
; 345  :     /* write string */
; 346  :     len = strlen(s);

  00019	8b 55 0c	 mov	 edx, DWORD PTR _s$[ebp]
  0001c	56		 push	 esi
  0001d	8b f2		 mov	 esi, edx
  0001f	57		 push	 edi
  00020	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL9@gzputs:
  00023	8a 06		 mov	 al, BYTE PTR [esi]
  00025	46		 inc	 esi
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL9@gzputs
  0002a	2b f7		 sub	 esi, edi

; 347  :     if ((int)len < 0 || (unsigned)len != len) {

  0002c	78 19		 js	 SHORT $LN6@gzputs

; 350  :     }
; 351  :     put = gz_write(state, s, len);

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _gz_write
  00034	83 c4 04	 add	 esp, 4

; 352  :     return put < len ? -1 : (int)len;

  00037	83 c9 ff	 or	 ecx, -1
  0003a	3b c6		 cmp	 eax, esi
  0003c	0f 42 f1	 cmovb	 esi, ecx
  0003f	5f		 pop	 edi
  00040	8b c6		 mov	 eax, esi
  00042	5e		 pop	 esi

; 353  : }

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN6@gzputs:

; 348  :         gz_error(state, Z_STREAM_ERROR, "string length does not fit in int");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@ENDIFONJ@string?5length?5does?5not?5fit?5in?5i@
  0004c	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  00051	e8 00 00 00 00	 call	 _gz_error
  00056	83 c4 04	 add	 esp, 4

; 349  :         return -1;

  00059	83 c8 ff	 or	 eax, -1
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 353  : }

  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
$LN4@gzputs:

; 343  :         return -1;

  00062	83 c8 ff	 or	 eax, -1

; 353  : }

  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
_gzputs@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzvprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_va$ = 16						; size = 4
_gzvprintf PROC						; COMDAT

; 359  : int ZEXPORTVA gzvprintf(gzFile file, const char *format, va_list va) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 360  :     int len;
; 361  :     unsigned left;
; 362  :     char *next;
; 363  :     gz_statep state;
; 364  :     z_streamp strm;
; 365  : 
; 366  :     /* get internal structure */
; 367  :     if (file == NULL)

  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 09 01 00
	00		 je	 $LN4@gzvprintf

; 368  :         return Z_STREAM_ERROR;
; 369  :     state = (gz_statep)file;
; 370  :     strm = &(state->strm);
; 371  : 
; 372  :     /* check that we're writing and that there's no error */
; 373  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	0f 85 fc 00 00
	00		 jne	 $LN4@gzvprintf
  00022	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00026	0f 85 f2 00 00
	00		 jne	 $LN4@gzvprintf

; 374  :         return Z_STREAM_ERROR;
; 375  : 
; 376  :     /* make sure we have some buffer space */
; 377  :     if (state->size == 0 && gz_init(state) == -1)

  0002c	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00030	75 16		 jne	 SHORT $LN18@gzvprintf
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 _gz_init
  00039	83 f8 ff	 cmp	 eax, -1
  0003c	75 0a		 jne	 SHORT $LN18@gzvprintf
$LN21@gzvprintf:

; 428  : }

  0003e	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN18@gzvprintf:

; 378  :         return state->err;
; 379  : 
; 380  :     /* check for seek request */
; 381  :     if (state->seek) {

  00048	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
  0004c	74 1c		 je	 SHORT $LN7@gzvprintf

; 382  :         state->seek = 0;
; 383  :         if (gz_zero(state, state->skip) == -1)

  0004e	ff 76 5c	 push	 DWORD PTR [esi+92]
  00051	8b ce		 mov	 ecx, esi
  00053	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0005a	ff 76 58	 push	 DWORD PTR [esi+88]
  0005d	e8 00 00 00 00	 call	 _gz_zero
  00062	83 c4 08	 add	 esp, 8
  00065	83 f8 ff	 cmp	 eax, -1
  00068	74 d4		 je	 SHORT $LN21@gzvprintf
$LN7@gzvprintf:

; 384  :             return state->err;
; 385  :     }
; 386  : 
; 387  :     /* do the printf() into the input buffer, put length in len -- the input
; 388  :        buffer is double-sized just for this function, so there is guaranteed to
; 389  :        be state->size bytes available after the current contents */
; 390  :     if (strm->avail_in == 0)

  0006a	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  0006d	85 c9		 test	 ecx, ecx
  0006f	75 06		 jne	 SHORT $LN19@gzvprintf

; 391  :         strm->next_in = state->in;

  00071	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00074	89 46 6c	 mov	 DWORD PTR [esi+108], eax
$LN19@gzvprintf:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h

; 1439 :         int const _Result = __stdio_common_vsprintf(

  00077	ff 75 10	 push	 DWORD PTR _va$[ebp]
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c

; 392  :     next = (char *)(state->in + (strm->next_in - state->in) + strm->avail_in);

  0007a	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 393  :     next[state->size - 1] = 0;

  0007d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00080	03 d9		 add	 ebx, ecx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h

; 1439 :         int const _Result = __stdio_common_vsprintf(

  00082	6a 00		 push	 0
  00084	ff 75 0c	 push	 DWORD PTR _format$[ebp]
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c

; 393  :     next[state->size - 1] = 0;

  00087	c6 44 18 ff 00	 mov	 BYTE PTR [eax+ebx-1], 0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h

; 1439 :         int const _Result = __stdio_common_vsprintf(

  0008c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0008f	53		 push	 ebx
  00090	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	ff 70 04	 push	 DWORD PTR [eax+4]
  0009a	83 c9 02	 or	 ecx, 2
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  000a4	8b f8		 mov	 edi, eax
  000a6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;

  000a9	83 c8 ff	 or	 eax, -1
  000ac	85 ff		 test	 edi, edi
  000ae	0f 48 f8	 cmovs	 edi, eax
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c

; 412  :     if (len == 0 || (unsigned)len >= state->size || next[state->size - 1] != 0)

  000b1	85 ff		 test	 edi, edi
  000b3	74 60		 je	 SHORT $LN10@gzvprintf
  000b5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000b8	3b f8		 cmp	 edi, eax
  000ba	73 59		 jae	 SHORT $LN10@gzvprintf
  000bc	80 7c 18 ff 00	 cmp	 BYTE PTR [eax+ebx-1], 0
  000c1	75 52		 jne	 SHORT $LN10@gzvprintf

; 414  : 
; 415  :     /* update buffer and position, compress first half if past that */
; 416  :     strm->avail_in += (unsigned)len;

  000c3	01 7e 70	 add	 DWORD PTR [esi+112], edi

; 417  :     state->x.pos += len;

  000c6	8b c7		 mov	 eax, edi
  000c8	99		 cdq
  000c9	01 46 08	 add	 DWORD PTR [esi+8], eax

; 418  :     if (strm->avail_in >= state->size) {

  000cc	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000cf	11 56 0c	 adc	 DWORD PTR [esi+12], edx
  000d2	8b 5e 70	 mov	 ebx, DWORD PTR [esi+112]
  000d5	3b d8		 cmp	 ebx, eax
  000d7	72 33		 jb	 SHORT $LN11@gzvprintf

; 419  :         left = strm->avail_in - state->size;
; 420  :         strm->avail_in = state->size;
; 421  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  000d9	33 d2		 xor	 edx, edx
  000db	89 46 70	 mov	 DWORD PTR [esi+112], eax
  000de	8b ce		 mov	 ecx, esi
  000e0	2b d8		 sub	 ebx, eax
  000e2	e8 00 00 00 00	 call	 _gz_comp
  000e7	83 f8 ff	 cmp	 eax, -1
  000ea	0f 84 4e ff ff
	ff		 je	 $LN21@gzvprintf

; 422  :             return state->err;
; 423  :         memmove(state->in, state->in + state->size, left);

  000f0	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  000f3	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000f6	53		 push	 ebx
  000f7	03 ca		 add	 ecx, edx
  000f9	51		 push	 ecx
  000fa	52		 push	 edx
  000fb	e8 00 00 00 00	 call	 _memmove

; 424  :         strm->next_in = state->in;

  00100	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
  00106	89 4e 6c	 mov	 DWORD PTR [esi+108], ecx

; 425  :         strm->avail_in = left;

  00109	89 5e 70	 mov	 DWORD PTR [esi+112], ebx
$LN11@gzvprintf:

; 426  :     }
; 427  :     return len;

  0010c	8b c7		 mov	 eax, edi

; 428  : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
$LN10@gzvprintf:

; 413  :         return 0;

  00115	33 c0		 xor	 eax, eax

; 428  : }

  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	5b		 pop	 ebx
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
$LN4@gzvprintf:
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
_gzvprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_gzprintf PROC						; COMDAT

; 430  : int ZEXPORTVA gzprintf(gzFile file, const char *format, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 431  :     va_list va;
; 432  :     int ret;
; 433  : 
; 434  :     va_start(va, format);
; 435  :     ret = gzvprintf(file, format, va);

  00003	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000d	e8 00 00 00 00	 call	 _gzvprintf
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 436  :     va_end(va);
; 437  :     return ret;
; 438  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_gzprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzflush@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_flush$ = 12						; size = 4
_gzflush@8 PROC						; COMDAT

; 528  : int ZEXPORT gzflush(gzFile file, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 529  :     gz_statep state;
; 530  : 
; 531  :     /* get internal structure */
; 532  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 4b		 je	 SHORT $LN4@gzflush

; 533  :         return Z_STREAM_ERROR;
; 534  :     state = (gz_statep)file;
; 535  : 
; 536  :     /* check that we're writing and that there's no error */
; 537  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000f	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00016	75 42		 jne	 SHORT $LN4@gzflush
  00018	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  0001c	75 3c		 jne	 SHORT $LN4@gzflush

; 539  : 
; 540  :     /* check flush parameter */
; 541  :     if (flush < 0 || flush > Z_FINISH)

  0001e	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00022	77 36		 ja	 SHORT $LN4@gzflush

; 542  :         return Z_STREAM_ERROR;
; 543  : 
; 544  :     /* check for seek request */
; 545  :     if (state->seek) {

  00024	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
  00028	74 1c		 je	 SHORT $LN11@gzflush

; 546  :         state->seek = 0;
; 547  :         if (gz_zero(state, state->skip) == -1)

  0002a	ff 76 5c	 push	 DWORD PTR [esi+92]
  0002d	8b ce		 mov	 ecx, esi
  0002f	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00036	ff 76 58	 push	 DWORD PTR [esi+88]
  00039	e8 00 00 00 00	 call	 _gz_zero
  0003e	83 c4 08	 add	 esp, 8
  00041	83 f8 ff	 cmp	 eax, -1
  00044	74 0a		 je	 SHORT $LN13@gzflush
$LN11@gzflush:

; 548  :             return state->err;
; 549  :     }
; 550  : 
; 551  :     /* compress remaining data with requested flush */
; 552  :     (void)gz_comp(state, flush);

  00046	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 _gz_comp
$LN13@gzflush:

; 553  :     return state->err;
; 554  : }

  00050	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN4@gzflush:

; 538  :         return Z_STREAM_ERROR;

  0005a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 553  :     return state->err;
; 554  : }

  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
_gzflush@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\gzwrite.c
;	COMDAT _gzsetparams@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_gzsetparams@12 PROC					; COMDAT

; 557  : int ZEXPORT gzsetparams(gzFile file, int level, int strategy) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000c	57		 push	 edi

; 558  :     gz_statep state;
; 559  :     z_streamp strm;
; 560  : 
; 561  :     /* get internal structure */
; 562  :     if (file == NULL)

  0000d	85 f6		 test	 esi, esi
  0000f	0f 84 9a 00 00
	00		 je	 $LN4@gzsetparam

; 563  :         return Z_STREAM_ERROR;
; 564  :     state = (gz_statep)file;
; 565  :     strm = &(state->strm);
; 566  : 
; 567  :     /* check that we're writing and that there's no error */
; 568  :     if (state->mode != GZ_WRITE || state->err != Z_OK || state->direct)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  0001f	0f 85 8a 00 00
	00		 jne	 $LN4@gzsetparam
  00025	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00029	0f 85 80 00 00
	00		 jne	 $LN4@gzsetparam
  0002f	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00033	75 7a		 jne	 SHORT $LN4@gzsetparam

; 569  :         return Z_STREAM_ERROR;
; 570  : 
; 571  :     /* if no change is requested, then do nothing */
; 572  :     if (level == state->level && strategy == state->strategy)

  00035	8b 5d 0c	 mov	 ebx, DWORD PTR _level$[ebp]
  00038	8b 7d 10	 mov	 edi, DWORD PTR _strategy$[ebp]
  0003b	3b 5e 48	 cmp	 ebx, DWORD PTR [esi+72]
  0003e	75 05		 jne	 SHORT $LN5@gzsetparam
  00040	3b 7e 4c	 cmp	 edi, DWORD PTR [esi+76]
  00043	74 5f		 je	 SHORT $LN17@gzsetparam
$LN5@gzsetparam:

; 573  :         return Z_OK;
; 574  : 
; 575  :     /* check for seek request */
; 576  :     if (state->seek) {

  00045	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
  00049	74 2b		 je	 SHORT $LN12@gzsetparam

; 577  :         state->seek = 0;
; 578  :         if (gz_zero(state, state->skip) == -1)

  0004b	ff 76 5c	 push	 DWORD PTR [esi+92]
  0004e	8b ce		 mov	 ecx, esi
  00050	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00057	ff 76 58	 push	 DWORD PTR [esi+88]
  0005a	e8 00 00 00 00	 call	 _gz_zero
  0005f	83 c4 08	 add	 esp, 8
  00062	83 f8 ff	 cmp	 eax, -1
  00065	75 0c		 jne	 SHORT $LN16@gzsetparam
$LN18@gzsetparam:

; 591  :     return Z_OK;
; 592  : }

  00067	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
$LN16@gzsetparam:

; 577  :         state->seek = 0;
; 578  :         if (gz_zero(state, state->skip) == -1)

  00073	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
$LN12@gzsetparam:

; 579  :             return state->err;
; 580  :     }
; 581  : 
; 582  :     /* change compression parameters for subsequent input */
; 583  :     if (state->size) {

  00076	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0007a	74 22		 je	 SHORT $LN8@gzsetparam

; 584  :         /* flush previous input with previous parameters before changing */
; 585  :         if (strm->avail_in && gz_comp(state, Z_BLOCK) == -1)

  0007c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00080	74 14		 je	 SHORT $LN9@gzsetparam
  00082	ba 05 00 00 00	 mov	 edx, 5
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 _gz_comp
  0008e	83 f8 ff	 cmp	 eax, -1
  00091	74 d4		 je	 SHORT $LN18@gzsetparam
  00093	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
$LN9@gzsetparam:

; 586  :             return state->err;
; 587  :         deflateParams(strm, level, strategy);

  00096	57		 push	 edi
  00097	53		 push	 ebx
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _deflateParams@12
$LN8@gzsetparam:

; 588  :     }
; 589  :     state->level = level;

  0009e	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 590  :     state->strategy = strategy;

  000a1	89 7e 4c	 mov	 DWORD PTR [esi+76], edi
$LN17@gzsetparam:

; 591  :     return Z_OK;
; 592  : }

  000a4	33 c0		 xor	 eax, eax
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 0c 00	 ret	 12			; 0000000cH
$LN4@gzsetparam:
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 0c 00	 ret	 12			; 0000000cH
_gzsetparams@12 ENDP
_TEXT	ENDS
END
