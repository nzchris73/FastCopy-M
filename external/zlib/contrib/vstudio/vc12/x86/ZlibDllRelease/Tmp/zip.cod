; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

	TITLE	c:\users\chris\documents\github\fastcopy-m\external\zlib\contrib\vstudio\vc12\x86\zlibdllrelease\tmp\zip.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
EXTRN	__time64:PROC
EXTRN	_rand:PROC
EXTRN	_srand:PROC
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
PUBLIC	_zipClose@8
PUBLIC	_zipCloseFileInZip@4
PUBLIC	_zipCloseFileInZipRaw64@16
PUBLIC	_zipCloseFileInZipRaw@12
PUBLIC	_zipWriteInFileInZip@12
PUBLIC	_zipOpenNewFileInZip@40
PUBLIC	_zipOpenNewFileInZip64@44
PUBLIC	_zipOpenNewFileInZip2_64@48
PUBLIC	_zipOpenNewFileInZip2@44
PUBLIC	_zipOpenNewFileInZip3_64@68
PUBLIC	_zipOpenNewFileInZip3@64
PUBLIC	_zipOpenNewFileInZip4_64@76
PUBLIC	_zipOpen64@8
PUBLIC	_zipOpen@8
PUBLIC	_zipOpen2_64@16
PUBLIC	_zipOpen2@16
PUBLIC	_zipOpen3@16
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
_BSS	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
_time	PROC						; COMDAT
; __Time$dead$ = ecx

; 552  :             return _time64(_Time);

  00000	6a 00		 push	 0
  00002	e8 00 00 00 00	 call	 __time64
  00007	83 c4 04	 add	 esp, 4

; 553  :         }

  0000a	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
;	COMDAT _decrypt_byte
_TEXT	SEGMENT
_decrypt_byte PROC					; COMDAT
; _pkeys$ = ecx
; _pcrc_32_tab$dead$ = edx

; 36   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 37   :                      * unpredictable manner on 16-bit systems; not a problem
; 38   :                      * with any known compiler so far, though */
; 39   : 
; 40   :     (void)pcrc_32_tab;
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	81 e1 fd ff 00
	00		 and	 ecx, 65533		; 0000fffdH
  00009	83 c9 02	 or	 ecx, 2

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  0000c	8b c1		 mov	 eax, ecx
  0000e	83 f0 01	 xor	 eax, 1
  00011	0f af c1	 imul	 eax, ecx
  00014	c1 e8 08	 shr	 eax, 8
  00017	0f b6 c0	 movzx	 eax, al

; 43   : }

  0001a	c3		 ret	 0
_decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
;	COMDAT _update_keys
_TEXT	SEGMENT
_c$ = 8							; size = 4
_update_keys PROC					; COMDAT
; _pkeys$ = ecx
; _pcrc_32_tab$ = edx

; 48   : static int update_keys(unsigned long* pkeys, const z_crc_t* pcrc_32_tab, int c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	57		 push	 edi
  00007	8b fa		 mov	 edi, edx

; 49   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00009	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0000b	8b c1		 mov	 eax, ecx
  0000d	33 45 08	 xor	 eax, DWORD PTR _c$[ebp]

; 50   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;
; 51   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;
; 52   :     {
; 53   :       register int keyshift = (int)((*(pkeys+1)) >> 24);
; 54   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	0f b6 c0	 movzx	 eax, al
  00016	c1 e9 08	 shr	 ecx, 8
  00019	33 0c 87	 xor	 ecx, DWORD PTR [edi+eax*4]
  0001c	0f b6 c1	 movzx	 eax, cl
  0001f	03 43 04	 add	 eax, DWORD PTR [ebx+4]
  00022	89 0b		 mov	 DWORD PTR [ebx], ecx
  00024	69 c8 05 84 08
	08		 imul	 ecx, eax, 134775813

; 55   :     }
; 56   :     return c;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  0002d	41		 inc	 ecx
  0002e	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  00031	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00034	33 ca		 xor	 ecx, edx
  00036	c1 ea 08	 shr	 edx, 8
  00039	0f b6 c9	 movzx	 ecx, cl
  0003c	33 14 8f	 xor	 edx, DWORD PTR [edi+ecx*4]
  0003f	5f		 pop	 edi
  00040	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  00043	5b		 pop	 ebx

; 57   : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
;	COMDAT _init_keys
_TEXT	SEGMENT
_pcrc_32_tab$ = 8					; size = 4
_init_keys PROC						; COMDAT
; _passwd$ = ecx
; _pkeys$ = edx

; 64   : static void init_keys(const char* passwd, unsigned long* pkeys, const z_crc_t* pcrc_32_tab) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b fa		 mov	 edi, edx
  00007	8b f1		 mov	 esi, ecx

; 65   :     *(pkeys+0) = 305419896L;

  00009	c7 07 78 56 34
	12		 mov	 DWORD PTR [edi], 305419896 ; 12345678H

; 66   :     *(pkeys+1) = 591751049L;

  0000f	c7 47 04 89 67
	45 23		 mov	 DWORD PTR [edi+4], 591751049 ; 23456789H

; 67   :     *(pkeys+2) = 878082192L;

  00016	c7 47 08 90 78
	56 34		 mov	 DWORD PTR [edi+8], 878082192 ; 34567890H

; 68   :     while (*passwd != '\0') {

  0001d	8a 06		 mov	 al, BYTE PTR [esi]
  0001f	84 c0		 test	 al, al
  00021	74 1f		 je	 SHORT $LN3@init_keys
  00023	53		 push	 ebx
  00024	8b 5d 08	 mov	 ebx, DWORD PTR _pcrc_32_tab$[ebp]
$LL2@init_keys:

; 69   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00027	0f be c0	 movsx	 eax, al
  0002a	8b d3		 mov	 edx, ebx
  0002c	50		 push	 eax
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 _update_keys
  00034	8a 46 01	 mov	 al, BYTE PTR [esi+1]

; 70   :         passwd++;

  00037	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0003a	83 c4 04	 add	 esp, 4
  0003d	84 c0		 test	 al, al
  0003f	75 e6		 jne	 SHORT $LL2@init_keys

; 68   :     while (*passwd != '\0') {

  00041	5b		 pop	 ebx
$LN3@init_keys:
  00042	5f		 pop	 edi

; 71   :     }
; 72   : }

  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
;	COMDAT _crypthead
_TEXT	SEGMENT
_header$ = -28						; size = 10
tv313 = -16						; size = 4
_t$2$ = -16						; size = 4
_passwd$1$ = -16					; size = 4
tv318 = -12						; size = 4
tv314 = -12						; size = 4
_buf$1$ = -8						; size = 4
tv305 = -1						; size = 1
_bufSize$dead$ = 8					; size = 4
_pkeys$ = 12						; size = 4
_pcrc_32_tab$ = 16					; size = 4
_crcForCrypting$ = 20					; size = 4
_crypthead PROC						; COMDAT
; _passwd$ = ecx
; _buf$ = edx

; 93   :                           unsigned long crcForCrypting) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 94   :     unsigned n;                  /* index in random header */
; 95   :     int t;                       /* temporary */
; 96   :     int c;                       /* random byte */
; 97   :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 98   :     static unsigned calls = 0;   /* ensure different random header each time */
; 99   : 
; 100  :     if (bufSize<RAND_HEAD_LEN)
; 101  :       return 0;
; 102  : 
; 103  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 104  :      * output of rand() to get less predictability, since rand() is
; 105  :      * often poorly implemented.
; 106  :      */
; 107  :     if (++calls == 1)

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  0000b	53		 push	 ebx
  0000c	40		 inc	 eax
  0000d	89 55 f8	 mov	 DWORD PTR _buf$1$[ebp], edx
  00010	a3 00 00 00 00	 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00015	8b d9		 mov	 ebx, ecx
  00017	89 5d f0	 mov	 DWORD PTR _passwd$1$[ebp], ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 15		 jne	 SHORT $LN9@crypthead
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h

; 552  :             return _time64(_Time);

  00021	6a 00		 push	 0
  00023	e8 00 00 00 00	 call	 __time64
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h

; 109  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00028	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _srand
  00033	83 c4 08	 add	 esp, 8
$LN9@crypthead:

; 110  :     }
; 111  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00036	ff 75 10	 push	 DWORD PTR _pcrc_32_tab$[ebp]
  00039	8b 7d 0c	 mov	 edi, DWORD PTR _pkeys$[ebp]
  0003c	8b cb		 mov	 ecx, ebx
  0003e	8b d7		 mov	 edx, edi
  00040	e8 00 00 00 00	 call	 _init_keys
  00045	83 c4 04	 add	 esp, 4
  00048	33 f6		 xor	 esi, esi
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL4@crypthead:

; 112  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 113  :     {
; 114  :         c = (rand() >> 7) & 0xff;

  00050	e8 00 00 00 00	 call	 _rand
  00055	c1 f8 07	 sar	 eax, 7

; 115  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  00058	8b cf		 mov	 ecx, edi
  0005a	0f b6 d0	 movzx	 edx, al
  0005d	89 55 f4	 mov	 DWORD PTR tv318[ebp], edx
  00060	e8 00 00 00 00	 call	 _decrypt_byte
  00065	52		 push	 edx
  00066	8b 55 10	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  00069	8b cf		 mov	 ecx, edi
  0006b	8b d8		 mov	 ebx, eax
  0006d	e8 00 00 00 00	 call	 _update_keys
  00072	8b 45 f4	 mov	 eax, DWORD PTR tv318[ebp]
  00075	83 c4 04	 add	 esp, 4
  00078	32 c3		 xor	 al, bl
  0007a	88 44 35 e4	 mov	 BYTE PTR _header$[ebp+esi], al
  0007e	46		 inc	 esi
  0007f	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00082	72 cc		 jb	 SHORT $LL4@crypthead

; 116  :     }
; 117  :     /* Encrypt random header (last two bytes is high word of crc) */
; 118  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00084	ff 75 10	 push	 DWORD PTR _pcrc_32_tab$[ebp]
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _passwd$1$[ebp]
  0008a	8b d7		 mov	 edx, edi
  0008c	e8 00 00 00 00	 call	 _init_keys
  00091	8b 75 f8	 mov	 esi, DWORD PTR _buf$1$[ebp]
  00094	8d 55 e4	 lea	 edx, DWORD PTR _header$[ebp]
  00097	83 c4 04	 add	 esp, 4
  0009a	c7 45 f4 0a 00
	00 00		 mov	 DWORD PTR tv314[ebp], 10 ; 0000000aH
  000a1	2b d6		 sub	 edx, esi
  000a3	89 55 f0	 mov	 DWORD PTR tv313[ebp], edx
$LL7@crypthead:

; 119  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 120  :     {
; 121  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  000a6	8b cf		 mov	 ecx, edi
  000a8	e8 00 00 00 00	 call	 _decrypt_byte
  000ad	8b d8		 mov	 ebx, eax
  000af	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  000b2	8b 55 10	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  000b5	0f b6 c8	 movzx	 ecx, al
  000b8	51		 push	 ecx
  000b9	8b cf		 mov	 ecx, edi
  000bb	88 45 ff	 mov	 BYTE PTR tv305[ebp], al
  000be	e8 00 00 00 00	 call	 _update_keys
  000c3	8a 45 ff	 mov	 al, BYTE PTR tv305[ebp]
  000c6	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000c9	8b 55 f0	 mov	 edx, DWORD PTR tv313[ebp]
  000cc	32 c3		 xor	 al, bl
  000ce	83 c4 04	 add	 esp, 4
  000d1	88 46 ff	 mov	 BYTE PTR [esi-1], al
  000d4	83 6d f4 01	 sub	 DWORD PTR tv314[ebp], 1
  000d8	75 cc		 jne	 SHORT $LL7@crypthead

; 122  :     }
; 123  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  000da	8b cf		 mov	 ecx, edi
  000dc	e8 00 00 00 00	 call	 _decrypt_byte
  000e1	8b 75 14	 mov	 esi, DWORD PTR _crcForCrypting$[ebp]
  000e4	8b de		 mov	 ebx, esi
  000e6	8b 55 10	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  000e9	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000ec	0f b6 cb	 movzx	 ecx, bl
  000ef	51		 push	 ecx
  000f0	8b cf		 mov	 ecx, edi
  000f2	89 45 f0	 mov	 DWORD PTR _t$2$[ebp], eax
  000f5	e8 00 00 00 00	 call	 _update_keys
  000fa	8b 45 f8	 mov	 eax, DWORD PTR _buf$1$[ebp]

; 124  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  000fd	8b cf		 mov	 ecx, edi
  000ff	32 5d f0	 xor	 bl, BYTE PTR _t$2$[ebp]
  00102	88 58 0a	 mov	 BYTE PTR [eax+10], bl
  00105	e8 00 00 00 00	 call	 _decrypt_byte
  0010a	8b 55 10	 mov	 edx, DWORD PTR _pcrc_32_tab$[ebp]
  0010d	8b cf		 mov	 ecx, edi
  0010f	c1 ee 18	 shr	 esi, 24			; 00000018H
  00112	8b d8		 mov	 ebx, eax
  00114	56		 push	 esi
  00115	e8 00 00 00 00	 call	 _update_keys
  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _buf$1$[ebp]
  0011d	83 c4 08	 add	 esp, 8
  00120	8b c6		 mov	 eax, esi
  00122	32 c3		 xor	 al, bl

; 125  :     return n;

  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	88 41 0b	 mov	 BYTE PTR [ecx+11], al
  00129	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0012e	5b		 pop	 ebx

; 126  : }

  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
_crypthead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _allocate_new_datablock
_TEXT	SEGMENT
_allocate_new_datablock PROC				; COMDAT

; 186  :     linkedlist_datablock_internal* ldi;
; 187  :     ldi = (linkedlist_datablock_internal*)

  00000	68 00 10 00 00	 push	 4096			; 00001000H
  00005	e8 00 00 00 00	 call	 _malloc
  0000a	83 c4 04	 add	 esp, 4

; 188  :                  ALLOC(sizeof(linkedlist_datablock_internal));
; 189  :     if (ldi!=NULL)

  0000d	85 c0		 test	 eax, eax
  0000f	74 14		 je	 SHORT $LN2@allocate_n

; 190  :     {
; 191  :         ldi->next_datablock = NULL ;

  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 192  :         ldi->filled_in_this_block = 0 ;

  00017	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 193  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  0001e	c7 40 04 f0 0f
	00 00		 mov	 DWORD PTR [eax+4], 4080	; 00000ff0H
$LN2@allocate_n:

; 194  :     }
; 195  :     return ldi;
; 196  : }

  00025	c3		 ret	 0
_allocate_new_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _free_datablock
_TEXT	SEGMENT
_free_datablock PROC					; COMDAT
; _ldi$ = ecx

; 199  :     while (ldi!=NULL)

  00000	85 c9		 test	 ecx, ecx
  00002	74 13		 je	 SHORT $LN3@free_datab
  00004	56		 push	 esi
$LL2@free_datab:

; 200  :     {
; 201  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00005	8b 31		 mov	 esi, DWORD PTR [ecx]

; 202  :         free(ldi);

  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 _free
  0000d	83 c4 04	 add	 esp, 4

; 203  :         ldi = ldinext;

  00010	8b ce		 mov	 ecx, esi
  00012	85 f6		 test	 esi, esi
  00014	75 ef		 jne	 SHORT $LL2@free_datab

; 199  :     while (ldi!=NULL)

  00016	5e		 pop	 esi
$LN3@free_datab:

; 204  :     }
; 205  : }

  00017	c3		 ret	 0
_free_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _init_linkedlist
_TEXT	SEGMENT
_init_linkedlist PROC					; COMDAT
; _ll$ = ecx

; 208  :     ll->first_block = ll->last_block = NULL;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 209  : }

  0000d	c3		 ret	 0
_init_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _free_linkedlist
_TEXT	SEGMENT
_free_linkedlist PROC					; COMDAT
; _ll$ = ecx

; 211  : local void free_linkedlist(linkedlist_data* ll) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 212  :     free_datablock(ll->first_block);

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 _free_datablock

; 213  :     ll->first_block = ll->last_block = NULL;

  0000a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00017	5e		 pop	 esi

; 214  : }

  00018	c3		 ret	 0
_free_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _add_data_in_datablock
_TEXT	SEGMENT
_ll$1$ = -8						; size = 4
_from_copy$1$ = -4					; size = 4
_len$ = 8						; size = 4
_add_data_in_datablock PROC				; COMDAT
; _ll$ = ecx
; _buf$ = edx

; 217  : local int add_data_in_datablock(linkedlist_data* ll, const void* buf, uLong len) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	89 55 fc	 mov	 DWORD PTR _from_copy$1$[ebp], edx
  0000e	89 7d f8	 mov	 DWORD PTR _ll$1$[ebp], edi

; 218  :     linkedlist_datablock_internal* ldi;
; 219  :     const unsigned char* from_copy;
; 220  : 
; 221  :     if (ll==NULL)

  00011	85 ff		 test	 edi, edi
  00013	74 7c		 je	 SHORT $LN17@add_data_i

; 222  :         return ZIP_INTERNALERROR;
; 223  : 
; 224  :     if (ll->last_block == NULL)

  00015	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00018	85 f6		 test	 esi, esi
  0001a	75 10		 jne	 SHORT $LN9@add_data_i

; 225  :     {
; 226  :         ll->first_block = ll->last_block = allocate_new_datablock();

  0001c	e8 00 00 00 00	 call	 _allocate_new_datablock
  00021	8b f0		 mov	 esi, eax
  00023	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00026	89 37		 mov	 DWORD PTR [edi], esi

; 227  :         if (ll->first_block == NULL)

  00028	85 f6		 test	 esi, esi
  0002a	74 65		 je	 SHORT $LN17@add_data_i
$LN9@add_data_i:

; 228  :             return ZIP_INTERNALERROR;
; 229  :     }
; 230  : 
; 231  :     ldi = ll->last_block;
; 232  :     from_copy = (const unsigned char*)buf;
; 233  : 
; 234  :     while (len>0)

  0002c	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0002f	85 db		 test	 ebx, ebx
  00031	74 55		 je	 SHORT $LN3@add_data_i
$LL2@add_data_i:

; 235  :     {
; 236  :         uInt copy_this;
; 237  :         uInt i;
; 238  :         unsigned char* to_copy;
; 239  : 
; 240  :         if (ldi->avail_in_this_block==0)

  00033	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00037	75 10		 jne	 SHORT $LN10@add_data_i

; 241  :         {
; 242  :             ldi->next_datablock = allocate_new_datablock();

  00039	e8 00 00 00 00	 call	 _allocate_new_datablock
  0003e	89 06		 mov	 DWORD PTR [esi], eax

; 243  :             if (ldi->next_datablock == NULL)

  00040	85 c0		 test	 eax, eax
  00042	74 4d		 je	 SHORT $LN17@add_data_i

; 244  :                 return ZIP_INTERNALERROR;
; 245  :             ldi = ldi->next_datablock ;

  00044	8b f0		 mov	 esi, eax

; 246  :             ll->last_block = ldi;

  00046	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN10@add_data_i:

; 247  :         }
; 248  : 
; 249  :         if (ldi->avail_in_this_block < len)

  00049	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 250  :             copy_this = (uInt)ldi->avail_in_this_block;
; 251  :         else
; 252  :             copy_this = (uInt)len;
; 253  : 
; 254  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  0004c	3b fb		 cmp	 edi, ebx
  0004e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00051	0f 43 fb	 cmovae	 edi, ebx
  00054	83 c0 10	 add	 eax, 16			; 00000010H
  00057	03 c6		 add	 eax, esi
  00059	33 d2		 xor	 edx, edx

; 255  : 
; 256  :         for (i=0;i<copy_this;i++)

  0005b	85 ff		 test	 edi, edi
  0005d	74 16		 je	 SHORT $LN5@add_data_i

; 247  :         }
; 248  : 
; 249  :         if (ldi->avail_in_this_block < len)

  0005f	8b 5d fc	 mov	 ebx, DWORD PTR _from_copy$1$[ebp]
  00062	2b d8		 sub	 ebx, eax
$LL20@add_data_i:

; 257  :             *(to_copy+i)=*(from_copy+i);

  00064	8a 0c 03	 mov	 cl, BYTE PTR [ebx+eax]
  00067	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0006a	42		 inc	 edx
  0006b	88 48 ff	 mov	 BYTE PTR [eax-1], cl
  0006e	3b d7		 cmp	 edx, edi
  00070	72 f2		 jb	 SHORT $LL20@add_data_i
  00072	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
$LN5@add_data_i:

; 258  : 
; 259  :         ldi->filled_in_this_block += copy_this;

  00075	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 260  :         ldi->avail_in_this_block -= copy_this;

  00078	29 7e 04	 sub	 DWORD PTR [esi+4], edi

; 261  :         from_copy += copy_this ;

  0007b	01 7d fc	 add	 DWORD PTR _from_copy$1$[ebp], edi

; 262  :         len -= copy_this;

  0007e	2b df		 sub	 ebx, edi
  00080	8b 7d f8	 mov	 edi, DWORD PTR _ll$1$[ebp]
  00083	89 5d 08	 mov	 DWORD PTR _len$[ebp], ebx
  00086	75 ab		 jne	 SHORT $LL2@add_data_i
$LN3@add_data_i:
  00088	5f		 pop	 edi

; 263  :     }
; 264  :     return ZIP_OK;
; 265  : }

  00089	5e		 pop	 esi
  0008a	33 c0		 xor	 eax, eax
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN17@add_data_i:
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_add_data_in_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_putValue
_TEXT	SEGMENT
_filestream$1$ = -4					; size = 4
_buf$ = 8						; size = 8
_x$ = 8							; size = 8
_nbByte$ = 16						; size = 4
_zip64local_putValue PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 277  : local int zip64local_putValue(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T x, int nbByte) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 278  :     unsigned char buf[8];
; 279  :     int n;
; 280  :     for (n = 0; n < nbByte; n++)

  00004	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp+4]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7d 10	 mov	 edi, DWORD PTR _nbByte$[ebp]
  0000d	33 f6		 xor	 esi, esi
  0000f	89 55 fc	 mov	 DWORD PTR _filestream$1$[ebp], edx
  00012	8b d9		 mov	 ebx, ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00017	85 ff		 test	 edi, edi
  00019	7e 15		 jle	 SHORT $LN3@zip64local
  0001b	0f 1f 44 00 00	 npad	 5
$LL16@zip64local:

; 281  :     {
; 282  :         buf[n] = (unsigned char)(x & 0xff);

  00020	88 4c 35 08	 mov	 BYTE PTR _buf$[ebp+esi], cl
  00024	46		 inc	 esi

; 283  :         x >>= 8;

  00025	0f ac c1 08	 shrd	 ecx, eax, 8
  00029	c1 e8 08	 shr	 eax, 8
  0002c	3b f7		 cmp	 esi, edi
  0002e	7c f0		 jl	 SHORT $LL16@zip64local
$LN3@zip64local:

; 284  :     }
; 285  :     if (x != 0)

  00030	0b c8		 or	 ecx, eax
  00032	74 16		 je	 SHORT $LN6@zip64local

; 286  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 287  :       for (n = 0; n < nbByte; n++)

  00034	85 ff		 test	 edi, edi
  00036	7e 12		 jle	 SHORT $LN6@zip64local
  00038	57		 push	 edi
  00039	8d 45 08	 lea	 eax, DWORD PTR _buf$[ebp]
  0003c	68 ff 00 00 00	 push	 255			; 000000ffH
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _memset
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@zip64local:

; 288  :         {
; 289  :           buf[n] = 0xff;
; 290  :         }
; 291  :       }
; 292  : 
; 293  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,(uLong)nbByte)!=(uLong)nbByte)

  0004a	57		 push	 edi
  0004b	8d 45 08	 lea	 eax, DWORD PTR _buf$[ebp]
  0004e	50		 push	 eax
  0004f	ff 75 fc	 push	 DWORD PTR _filestream$1$[ebp]
  00052	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00055	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00058	ff d0		 call	 eax
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	2b c7		 sub	 eax, edi
  0005f	f7 d8		 neg	 eax
  00061	1b c0		 sbb	 eax, eax
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx

; 294  :         return ZIP_ERRNO;
; 295  :     else
; 296  :         return ZIP_OK;
; 297  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_zip64local_putValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_putValue_inmemory
_TEXT	SEGMENT
_x$ = 8							; size = 8
_zip64local_putValue_inmemory PROC			; COMDAT
; _dest$ = ecx
; _nbByte$ = edx

; 299  : local void zip64local_putValue_inmemory (void* dest, ZPOS64_T x, int nbByte) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 300  :     unsigned char* buf=(unsigned char*)dest;
; 301  :     int n;
; 302  :     for (n = 0; n < nbByte; n++) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _x$[ebp+4]
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	85 d2		 test	 edx, edx
  0000f	7e 0f		 jle	 SHORT $LN3@zip64local
$LL14@zip64local:

; 303  :         buf[n] = (unsigned char)(x & 0xff);

  00011	88 04 0f	 mov	 BYTE PTR [edi+ecx], al
  00014	47		 inc	 edi

; 304  :         x >>= 8;

  00015	0f ac f0 08	 shrd	 eax, esi, 8
  00019	c1 ee 08	 shr	 esi, 8
  0001c	3b fa		 cmp	 edi, edx
  0001e	7c f1		 jl	 SHORT $LL14@zip64local
$LN3@zip64local:

; 305  :     }
; 306  : 
; 307  :     if (x != 0)

  00020	5f		 pop	 edi
  00021	0b c6		 or	 eax, esi
  00023	5e		 pop	 esi
  00024	74 13		 je	 SHORT $LN6@zip64local

; 308  :     {     /* data overflow - hack for ZIP64 */
; 309  :        for (n = 0; n < nbByte; n++)

  00026	85 d2		 test	 edx, edx
  00028	7e 0f		 jle	 SHORT $LN6@zip64local
  0002a	52		 push	 edx
  0002b	68 ff 00 00 00	 push	 255			; 000000ffH
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 _memset
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@zip64local:

; 310  :        {
; 311  :           buf[n] = 0xff;
; 312  :        }
; 313  :     }
; 314  : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
_zip64local_putValue_inmemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_TmzDateToDosDate
_TEXT	SEGMENT
_zip64local_TmzDateToDosDate PROC			; COMDAT
; _ptm$ = ecx

; 319  : local uLong zip64local_TmzDateToDosDate(const tm_zip* ptm) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 320  :     uLong year = (uLong)ptm->tm_year;

  00003	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 321  :     if (year>=1980)

  00006	81 fa bc 07 00
	00		 cmp	 edx, 1980		; 000007bcH
  0000c	72 08		 jb	 SHORT $LN2@zip64local

; 322  :         year-=1980;

  0000e	81 ea bc 07 00
	00		 sub	 edx, 1980		; 000007bcH
  00014	eb 08		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:

; 323  :     else if (year>=80)

  00016	83 fa 50	 cmp	 edx, 80			; 00000050H
  00019	72 03		 jb	 SHORT $LN4@zip64local

; 324  :         year-=80;

  0001b	83 ea 50	 sub	 edx, 80			; 00000050H
$LN4@zip64local:

; 325  :     return

  0001e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00021	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00023	c1 e0 06	 shl	 eax, 6
  00026	03 46 04	 add	 eax, DWORD PTR [esi+4]
  00029	d1 e9		 shr	 ecx, 1
  0002b	c1 e0 05	 shl	 eax, 5
  0002e	03 c1		 add	 eax, ecx
  00030	c1 e2 04	 shl	 edx, 4
  00033	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00036	41		 inc	 ecx
  00037	03 ca		 add	 ecx, edx
  00039	c1 e1 05	 shl	 ecx, 5
  0003c	03 4e 0c	 add	 ecx, DWORD PTR [esi+12]
  0003f	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00042	0b c1		 or	 eax, ecx
  00044	5e		 pop	 esi

; 326  :       (uLong) (((uLong)(ptm->tm_mday) + (32 * (uLong)(ptm->tm_mon+1)) + (512 * year)) << 16) |
; 327  :         (((uLong)ptm->tm_sec/2) + (32 * (uLong)ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));
; 328  : }

  00045	c3		 ret	 0
_zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getByte
_TEXT	SEGMENT
_c$ = -1						; size = 1
_pi$ = 8						; size = 4
_zip64local_getByte PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 333  : local int zip64local_getByte(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int* pi) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 334  :     unsigned char c;
; 335  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00006	6a 01		 push	 1
  00008	8b f1		 mov	 esi, ecx
  0000a	8d 45 ff	 lea	 eax, DWORD PTR _c$[ebp]
  0000d	50		 push	 eax
  0000e	8b fa		 mov	 edi, edx
  00010	57		 push	 edi
  00011	ff 76 1c	 push	 DWORD PTR [esi+28]
  00014	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00017	ff d0		 call	 eax
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 336  :     if (err==1)

  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 11		 jne	 SHORT $LN2@zip64local

; 337  :     {
; 338  :         *pi = (int)c;

  00021	8b 45 08	 mov	 eax, DWORD PTR _pi$[ebp]
  00024	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00028	5f		 pop	 edi

; 344  :             return ZIP_ERRNO;
; 345  :         else
; 346  :             return ZIP_EOF;
; 347  :     }
; 348  : }

  00029	5e		 pop	 esi
  0002a	89 08		 mov	 DWORD PTR [eax], ecx
  0002c	33 c0		 xor	 eax, eax
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN2@zip64local:

; 339  :         return ZIP_OK;
; 340  :     }
; 341  :     else
; 342  :     {
; 343  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00032	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00035	57		 push	 edi
  00036	ff 76 1c	 push	 DWORD PTR [esi+28]
  00039	ff d0		 call	 eax
  0003b	83 c4 08	 add	 esp, 8
  0003e	f7 d8		 neg	 eax
  00040	1b c0		 sbb	 eax, eax
  00042	5f		 pop	 edi

; 344  :             return ZIP_ERRNO;
; 345  :         else
; 346  :             return ZIP_EOF;
; 347  :     }
; 348  : }

  00043	5e		 pop	 esi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_zip64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getShort
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pX$ = 8						; size = 4
_zip64local_getShort PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 354  : local int zip64local_getShort(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 355  :     uLong x ;
; 356  :     int i = 0;
; 357  :     int err;
; 358  : 
; 359  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00011	50		 push	 eax
  00012	8b f2		 mov	 esi, edx
  00014	8b f9		 mov	 edi, ecx
  00016	e8 00 00 00 00	 call	 _zip64local_getByte

; 360  :     x = (uLong)i;

  0001b	8b 5d fc	 mov	 ebx, DWORD PTR _i$[ebp]
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 04	 add	 esp, 4

; 361  : 
; 362  :     if (err==ZIP_OK)

  00023	85 d2		 test	 edx, edx
  00025	75 2c		 jne	 SHORT $LN3@zip64local

; 363  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00027	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0002a	8b d6		 mov	 edx, esi
  0002c	50		 push	 eax
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 _zip64local_getByte
  00034	8b d0		 mov	 edx, eax
  00036	83 c4 04	 add	 esp, 4

; 364  :     x += ((uLong)i)<<8;
; 365  : 
; 366  :     if (err==ZIP_OK)

  00039	85 d2		 test	 edx, edx
  0003b	75 16		 jne	 SHORT $LN3@zip64local

; 367  :         *pX = x;
; 368  :     else
; 369  :         *pX = 0;
; 370  :     return err;

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00043	c1 e1 08	 shl	 ecx, 8
  00046	5f		 pop	 edi
  00047	03 cb		 add	 ecx, ebx

; 371  : }

  00049	5e		 pop	 esi
  0004a	89 08		 mov	 DWORD PTR [eax], ecx
  0004c	8b c2		 mov	 eax, edx
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN3@zip64local:

; 367  :         *pX = x;
; 368  :     else
; 369  :         *pX = 0;
; 370  :     return err;

  00053	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00056	5f		 pop	 edi

; 371  : }

  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0005f	8b c2		 mov	 eax, edx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_zip64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getLong
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pX$ = 8						; size = 4
_zip64local_getLong PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 373  : local int zip64local_getLong(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 374  :     uLong x ;
; 375  :     int i = 0;
; 376  :     int err;
; 377  : 
; 378  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00007	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00011	50		 push	 eax
  00012	8b fa		 mov	 edi, edx
  00014	8b d9		 mov	 ebx, ecx
  00016	e8 00 00 00 00	 call	 _zip64local_getByte

; 379  :     x = (uLong)i;

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0001e	8b d0		 mov	 edx, eax
  00020	83 c4 04	 add	 esp, 4
  00023	8b f1		 mov	 esi, ecx

; 380  : 
; 381  :     if (err==ZIP_OK)

  00025	85 d2		 test	 edx, edx
  00027	75 15		 jne	 SHORT $LN2@zip64local

; 382  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00029	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0002c	8b d7		 mov	 edx, edi
  0002e	50		 push	 eax
  0002f	8b cb		 mov	 ecx, ebx
  00031	e8 00 00 00 00	 call	 _zip64local_getByte
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00039	83 c4 04	 add	 esp, 4
  0003c	8b d0		 mov	 edx, eax
$LN2@zip64local:

; 383  :     x += ((uLong)i)<<8;

  0003e	8b c1		 mov	 eax, ecx
  00040	c1 e0 08	 shl	 eax, 8
  00043	03 f0		 add	 esi, eax

; 384  : 
; 385  :     if (err==ZIP_OK)

  00045	85 d2		 test	 edx, edx
  00047	75 15		 jne	 SHORT $LN3@zip64local

; 386  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00049	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0004c	8b d7		 mov	 edx, edi
  0004e	50		 push	 eax
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 _zip64local_getByte
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00059	83 c4 04	 add	 esp, 4
  0005c	8b d0		 mov	 edx, eax
$LN3@zip64local:

; 387  :     x += ((uLong)i)<<16;

  0005e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00061	03 f1		 add	 esi, ecx

; 388  : 
; 389  :     if (err==ZIP_OK)

  00063	85 d2		 test	 edx, edx
  00065	75 2c		 jne	 SHORT $LN5@zip64local

; 390  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00067	8d 45 fc	 lea	 eax, DWORD PTR _i$[ebp]
  0006a	8b d7		 mov	 edx, edi
  0006c	50		 push	 eax
  0006d	8b cb		 mov	 ecx, ebx
  0006f	e8 00 00 00 00	 call	 _zip64local_getByte
  00074	8b d0		 mov	 edx, eax
  00076	83 c4 04	 add	 esp, 4

; 391  :     x += ((uLong)i)<<24;
; 392  : 
; 393  :     if (err==ZIP_OK)

  00079	85 d2		 test	 edx, edx
  0007b	75 16		 jne	 SHORT $LN5@zip64local

; 394  :         *pX = x;
; 395  :     else
; 396  :         *pX = 0;
; 397  :     return err;

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00080	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00083	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00086	5f		 pop	 edi
  00087	03 ce		 add	 ecx, esi

; 398  : }

  00089	5e		 pop	 esi
  0008a	89 08		 mov	 DWORD PTR [eax], ecx
  0008c	8b c2		 mov	 eax, edx
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN5@zip64local:

; 394  :         *pX = x;
; 395  :     else
; 396  :         *pX = 0;
; 397  :     return err;

  00093	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00096	5f		 pop	 edi

; 398  : }

  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009f	8b c2		 mov	 eax, edx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_zip64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_getLong64
_TEXT	SEGMENT
$T1 = -20						; size = 8
_pzlib_filefunc_def$1$ = -16				; size = 4
_filestream$1$ = -12					; size = 4
_i$ = -8						; size = 4
_pX$ = 8						; size = 4
_zip64local_getLong64 PROC				; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 401  : local int zip64local_getLong64(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	8b c2		 mov	 eax, edx
  00009	89 4d f0	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], ecx
  0000c	56		 push	 esi

; 402  :   ZPOS64_T x;
; 403  :   int i = 0;
; 404  :   int err;
; 405  : 
; 406  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0000d	8d 55 f8	 lea	 edx, DWORD PTR _i$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR _filestream$1$[ebp], eax
  00013	57		 push	 edi
  00014	52		 push	 edx
  00015	8b d0		 mov	 edx, eax
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	e8 00 00 00 00	 call	 _zip64local_getByte

; 407  :   x = (ZPOS64_T)i;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00026	8b f0		 mov	 esi, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	83 c4 04	 add	 esp, 4
  0002d	99		 cdq
  0002e	8b f8		 mov	 edi, eax
  00030	8b da		 mov	 ebx, edx

; 408  : 
; 409  :   if (err==ZIP_OK)

  00032	85 f6		 test	 esi, esi
  00034	75 17		 jne	 SHORT $LN2@zip64local

; 410  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00036	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00039	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _zip64local_getByte
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00048	83 c4 04	 add	 esp, 4
  0004b	8b f0		 mov	 esi, eax
$LN2@zip64local:

; 411  :   x += ((ZPOS64_T)i)<<8;

  0004d	8b c1		 mov	 eax, ecx
  0004f	99		 cdq
  00050	0f a4 c2 08	 shld	 edx, eax, 8
  00054	c1 e0 08	 shl	 eax, 8
  00057	03 f8		 add	 edi, eax
  00059	13 da		 adc	 ebx, edx

; 412  : 
; 413  :   if (err==ZIP_OK)

  0005b	85 f6		 test	 esi, esi
  0005d	75 17		 jne	 SHORT $LN3@zip64local

; 414  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0005f	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00062	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _zip64local_getByte
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00071	83 c4 04	 add	 esp, 4
  00074	8b f0		 mov	 esi, eax
$LN3@zip64local:

; 415  :   x += ((ZPOS64_T)i)<<16;

  00076	8b c1		 mov	 eax, ecx
  00078	99		 cdq
  00079	0f a4 c2 10	 shld	 edx, eax, 16
  0007d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00080	03 f8		 add	 edi, eax
  00082	13 da		 adc	 ebx, edx

; 416  : 
; 417  :   if (err==ZIP_OK)

  00084	85 f6		 test	 esi, esi
  00086	75 17		 jne	 SHORT $LN4@zip64local

; 418  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00088	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  0008b	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  0008e	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _zip64local_getByte
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0009a	83 c4 04	 add	 esp, 4
  0009d	8b f0		 mov	 esi, eax
$LN4@zip64local:

; 419  :   x += ((ZPOS64_T)i)<<24;

  0009f	8b c1		 mov	 eax, ecx
  000a1	99		 cdq
  000a2	0f a4 c2 18	 shld	 edx, eax, 24
  000a6	c1 e0 18	 shl	 eax, 24			; 00000018H
  000a9	03 f8		 add	 edi, eax
  000ab	13 da		 adc	 ebx, edx

; 420  : 
; 421  :   if (err==ZIP_OK)

  000ad	85 f6		 test	 esi, esi
  000af	75 17		 jne	 SHORT $LN5@zip64local

; 422  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000b1	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000b4	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  000b7	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _zip64local_getByte
  000c0	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000c3	83 c4 04	 add	 esp, 4
  000c6	8b f0		 mov	 esi, eax
$LN5@zip64local:

; 423  :   x += ((ZPOS64_T)i)<<32;

  000c8	8b c1		 mov	 eax, ecx
  000ca	83 c7 00	 add	 edi, 0
  000cd	99		 cdq
  000ce	13 d8		 adc	 ebx, eax

; 424  : 
; 425  :   if (err==ZIP_OK)

  000d0	85 f6		 test	 esi, esi
  000d2	75 17		 jne	 SHORT $LN6@zip64local

; 426  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000d4	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000d7	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  000da	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _zip64local_getByte
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000e6	83 c4 04	 add	 esp, 4
  000e9	8b f0		 mov	 esi, eax
$LN6@zip64local:

; 427  :   x += ((ZPOS64_T)i)<<40;

  000eb	8b c1		 mov	 eax, ecx
  000ed	99		 cdq
  000ee	c1 e0 08	 shl	 eax, 8
  000f1	83 c7 00	 add	 edi, 0
  000f4	13 d8		 adc	 ebx, eax

; 428  : 
; 429  :   if (err==ZIP_OK)

  000f6	85 f6		 test	 esi, esi
  000f8	75 17		 jne	 SHORT $LN7@zip64local

; 430  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000fa	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000fd	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00100	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _zip64local_getByte
  00109	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0010c	83 c4 04	 add	 esp, 4
  0010f	8b f0		 mov	 esi, eax
$LN7@zip64local:

; 431  :   x += ((ZPOS64_T)i)<<48;

  00111	8b c1		 mov	 eax, ecx
  00113	99		 cdq
  00114	c1 e0 10	 shl	 eax, 16			; 00000010H
  00117	83 c7 00	 add	 edi, 0
  0011a	13 d8		 adc	 ebx, eax

; 432  : 
; 433  :   if (err==ZIP_OK)

  0011c	85 f6		 test	 esi, esi
  0011e	75 38		 jne	 SHORT $LN9@zip64local

; 434  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00120	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00123	8d 45 f8	 lea	 eax, DWORD PTR _i$[ebp]
  00126	8b 4d f0	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _zip64local_getByte
  0012f	8b f0		 mov	 esi, eax
  00131	83 c4 04	 add	 esp, 4

; 436  : 
; 437  :   if (err==ZIP_OK)

  00134	85 f6		 test	 esi, esi
  00136	75 20		 jne	 SHORT $LN9@zip64local

; 435  :   x += ((ZPOS64_T)i)<<56;

  00138	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0013b	99		 cdq
  0013c	8b c8		 mov	 ecx, eax
  0013e	33 d2		 xor	 edx, edx

; 438  :     *pX = x;
; 439  :   else
; 440  :     *pX = 0;
; 441  : 
; 442  :   return err;

  00140	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  00143	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00146	03 d7		 add	 edx, edi
  00148	13 cb		 adc	 ecx, ebx
  0014a	89 10		 mov	 DWORD PTR [eax], edx
  0014c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0014f	8b c6		 mov	 eax, esi

; 443  : }

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5b		 pop	 ebx
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c3		 ret	 0
$LN9@zip64local:

; 438  :     *pX = x;
; 439  :   else
; 440  :     *pX = 0;
; 441  : 
; 442  :   return err;

  00158	8b 45 08	 mov	 eax, DWORD PTR _pX$[ebp]
  0015b	0f 57 c0	 xorps	 xmm0, xmm0
  0015e	66 0f 13 45 ec	 movlpd	 QWORD PTR $T1[ebp], xmm0
  00163	8b 55 ec	 mov	 edx, DWORD PTR $T1[ebp]
  00166	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp+4]
  00169	89 10		 mov	 DWORD PTR [eax], edx

; 443  : }

  0016b	5f		 pop	 edi
  0016c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0016f	8b c6		 mov	 eax, esi
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_zip64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir
_TEXT	SEGMENT
_uPosFound$ = -48					; size = 8
_uReadPos$2$ = -44					; size = 4
_uReadPos$1$ = -40					; size = 4
_uSizeFile$2$ = -36					; size = 4
_uSizeFile$1$ = -32					; size = 4
_pzlib_filefunc_def$1$ = -28				; size = 4
_filestream$1$ = -24					; size = 4
_uPosFound$1$ = -20					; size = 4
_uPosFound$2$ = -16					; size = 4
_uMaxBack$2$ = -12					; size = 4
_buf$1$ = -8						; size = 4
_uMaxBack$1$ = -4					; size = 4
_zip64local_SearchCentralDir PROC			; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 452  : local ZPOS64_T zip64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 453  :   unsigned char* buf;
; 454  :   ZPOS64_T uSizeFile;
; 455  :   ZPOS64_T uBackRead;
; 456  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 457  :   ZPOS64_T uPosFound=0;
; 458  : 
; 459  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00009	6a 02		 push	 2
  0000b	8b f2		 mov	 esi, edx
  0000d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$2$[ebp], 0
  00014	8b d9		 mov	 ebx, ecx
  00016	89 75 e8	 mov	 DWORD PTR _filestream$1$[ebp], esi
  00019	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0001e	89 5d e4	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], ebx
  00021	0f 57 c0	 xorps	 xmm0, xmm0
  00024	89 45 fc	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00027	6a 00		 push	 0
  00029	6a 00		 push	 0
  0002b	66 0f 13 45 d0	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  00030	e8 00 00 00 00	 call	 _call_zseek64
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	85 c0		 test	 eax, eax
  0003a	0f 85 9a 01 00
	00		 jne	 $LN31@zip64local

; 460  :     return 0;
; 461  : 
; 462  : 
; 463  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00040	8b d6		 mov	 edx, esi
  00042	8b cb		 mov	 ecx, ebx
  00044	e8 00 00 00 00	 call	 _call_ztell64
  00049	8b ca		 mov	 ecx, edx
  0004b	89 45 e0	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  0004e	89 4d dc	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 464  : 
; 465  :   if (uMaxBack>uSizeFile)

  00051	85 c9		 test	 ecx, ecx
  00053	77 0f		 ja	 SHORT $LN8@zip64local
  00055	72 07		 jb	 SHORT $LN34@zip64local
  00057	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005c	73 06		 jae	 SHORT $LN8@zip64local
$LN34@zip64local:

; 466  :     uMaxBack = uSizeFile;

  0005e	89 45 fc	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00061	89 4d f4	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
$LN8@zip64local:

; 467  : 
; 468  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00064	68 04 04 00 00	 push	 1028			; 00000404H
  00069	e8 00 00 00 00	 call	 _malloc
  0006e	8b f0		 mov	 esi, eax
  00070	83 c4 04	 add	 esp, 4
  00073	89 75 f8	 mov	 DWORD PTR _buf$1$[ebp], esi

; 469  :   if (buf==NULL)

  00076	85 f6		 test	 esi, esi
  00078	0f 84 5c 01 00
	00		 je	 $LN31@zip64local

; 470  :     return 0;
; 471  : 
; 472  :   uBackRead = 4;

  0007e	33 db		 xor	 ebx, ebx
  00080	bf 04 00 00 00	 mov	 edi, 4

; 473  :   while (uBackRead<uMaxBack)

  00085	3b 5d f4	 cmp	 ebx, DWORD PTR _uMaxBack$2$[ebp]
  00088	0f 87 11 01 00
	00		 ja	 $LN43@zip64local
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _uMaxBack$1$[ebp]
  00091	72 08		 jb	 SHORT $LN41@zip64local
  00093	3b f8		 cmp	 edi, eax
  00095	0f 83 04 01 00
	00		 jae	 $LN43@zip64local
$LN41@zip64local:
  0009b	8b 4d d0	 mov	 ecx, DWORD PTR _uPosFound$[ebp]
  0009e	8b 55 d4	 mov	 edx, DWORD PTR _uPosFound$[ebp+4]
  000a1	89 4d f0	 mov	 DWORD PTR _uPosFound$2$[ebp], ecx
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  000a7	89 55 ec	 mov	 DWORD PTR _uPosFound$1$[ebp], edx
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL2@zip64local:

; 474  :   {
; 475  :     uLong uReadSize;
; 476  :     ZPOS64_T uReadPos ;
; 477  :     int i;
; 478  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000b0	81 c7 00 04 00
	00		 add	 edi, 1024		; 00000400H
  000b6	83 d3 00	 adc	 ebx, 0
  000b9	3b d9		 cmp	 ebx, ecx
  000bb	72 0a		 jb	 SHORT $LN11@zip64local
  000bd	77 04		 ja	 SHORT $LN36@zip64local
  000bf	3b f8		 cmp	 edi, eax
  000c1	76 04		 jbe	 SHORT $LN11@zip64local
$LN36@zip64local:

; 479  :       uBackRead = uMaxBack;

  000c3	8b f8		 mov	 edi, eax
  000c5	8b d9		 mov	 ebx, ecx
$LN11@zip64local:

; 480  :     else
; 481  :       uBackRead+=BUFREADCOMMENT;
; 482  :     uReadPos = uSizeFile-uBackRead ;

  000c7	8b 55 e0	 mov	 edx, DWORD PTR _uSizeFile$1$[ebp]
  000ca	8b c2		 mov	 eax, edx
  000cc	8b 4d dc	 mov	 ecx, DWORD PTR _uSizeFile$2$[ebp]
  000cf	2b c7		 sub	 eax, edi
  000d1	89 45 d8	 mov	 DWORD PTR _uReadPos$1$[ebp], eax
  000d4	1b cb		 sbb	 ecx, ebx
  000d6	89 4d d4	 mov	 DWORD PTR _uReadPos$2$[ebp], ecx

; 483  : 
; 484  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  000d9	85 db		 test	 ebx, ebx
  000db	72 11		 jb	 SHORT $LN17@zip64local
  000dd	77 08		 ja	 SHORT $LN37@zip64local
  000df	81 ff 04 04 00
	00		 cmp	 edi, 1028		; 00000404H
  000e5	76 07		 jbe	 SHORT $LN17@zip64local
$LN37@zip64local:
  000e7	be 04 04 00 00	 mov	 esi, 1028		; 00000404H
  000ec	eb 04		 jmp	 SHORT $LN18@zip64local
$LN17@zip64local:
  000ee	8b f2		 mov	 esi, edx
  000f0	2b f0		 sub	 esi, eax
$LN18@zip64local:

; 485  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 486  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f2	8b 55 e8	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000f5	6a 00		 push	 0
  000f7	51		 push	 ecx
  000f8	8b 4d e4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _call_zseek64
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH
  00104	85 c0		 test	 eax, eax
  00106	0f 85 b5 00 00
	00		 jne	 $LN45@zip64local

; 487  :       break;
; 488  : 
; 489  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0010c	8b 45 e4	 mov	 eax, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  0010f	56		 push	 esi
  00110	ff 75 f8	 push	 DWORD PTR _buf$1$[ebp]
  00113	ff 75 e8	 push	 DWORD PTR _filestream$1$[ebp]
  00116	ff 70 1c	 push	 DWORD PTR [eax+28]
  00119	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0011c	ff d0		 call	 eax
  0011e	83 c4 10	 add	 esp, 16			; 00000010H
  00121	3b c6		 cmp	 eax, esi
  00123	0f 85 98 00 00
	00		 jne	 $LN45@zip64local

; 490  :       break;
; 491  : 
; 492  :     for (i=(int)uReadSize-3; (i--)>0;)

  00129	8d 4e fd	 lea	 ecx, DWORD PTR [esi-3]
  0012c	8b 75 f8	 mov	 esi, DWORD PTR _buf$1$[ebp]
  0012f	85 c9		 test	 ecx, ecx
  00131	7e 3e		 jle	 SHORT $LN33@zip64local
  00133	8d 46 03	 lea	 eax, DWORD PTR [esi+3]
  00136	03 c1		 add	 eax, ecx
$LL4@zip64local:
  00138	8b d1		 mov	 edx, ecx
  0013a	8d 40 ff	 lea	 eax, DWORD PTR [eax-1]
  0013d	49		 dec	 ecx

; 493  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 494  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  0013e	80 78 fd 50	 cmp	 BYTE PTR [eax-3], 80	; 00000050H
  00142	75 11		 jne	 SHORT $LN14@zip64local
  00144	80 3c 32 4b	 cmp	 BYTE PTR [edx+esi], 75	; 0000004bH
  00148	75 0b		 jne	 SHORT $LN14@zip64local
  0014a	80 78 ff 05	 cmp	 BYTE PTR [eax-1], 5
  0014e	75 05		 jne	 SHORT $LN14@zip64local
  00150	80 38 06	 cmp	 BYTE PTR [eax], 6
  00153	74 06		 je	 SHORT $LN21@zip64local
$LN14@zip64local:

; 490  :       break;
; 491  : 
; 492  :     for (i=(int)uReadSize-3; (i--)>0;)

  00155	85 c9		 test	 ecx, ecx
  00157	7f df		 jg	 SHORT $LL4@zip64local
  00159	eb 16		 jmp	 SHORT $LN33@zip64local
$LN21@zip64local:

; 495  :       {
; 496  :         uPosFound = uReadPos+(unsigned)i;

  0015b	8b d1		 mov	 edx, ecx
  0015d	33 c9		 xor	 ecx, ecx
  0015f	03 55 d8	 add	 edx, DWORD PTR _uReadPos$1$[ebp]

; 497  :         break;
; 498  :       }
; 499  : 
; 500  :     if (uPosFound!=0)

  00162	8b c2		 mov	 eax, edx
  00164	89 55 f0	 mov	 DWORD PTR _uPosFound$2$[ebp], edx
  00167	13 4d d4	 adc	 ecx, DWORD PTR _uReadPos$2$[ebp]
  0016a	0b c1		 or	 eax, ecx
  0016c	89 4d ec	 mov	 DWORD PTR _uPosFound$1$[ebp], ecx
  0016f	75 53		 jne	 SHORT $LN38@zip64local
$LN33@zip64local:

; 473  :   while (uBackRead<uMaxBack)

  00171	8b 4d f4	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  00174	8b 45 fc	 mov	 eax, DWORD PTR _uMaxBack$1$[ebp]
  00177	3b d9		 cmp	 ebx, ecx
  00179	0f 82 31 ff ff
	ff		 jb	 $LL2@zip64local
  0017f	77 43		 ja	 SHORT $LN38@zip64local
  00181	3b f8		 cmp	 edi, eax
  00183	0f 82 27 ff ff
	ff		 jb	 $LL2@zip64local

; 501  :       break;
; 502  :   }
; 503  :   free(buf);

  00189	56		 push	 esi
  0018a	e8 00 00 00 00	 call	 _free

; 504  :   return uPosFound;

  0018f	8b 45 f0	 mov	 eax, DWORD PTR _uPosFound$2$[ebp]
  00192	83 c4 04	 add	 esp, 4
  00195	8b 55 ec	 mov	 edx, DWORD PTR _uPosFound$1$[ebp]

; 505  : }

  00198	5f		 pop	 edi
  00199	5e		 pop	 esi
  0019a	5b		 pop	 ebx
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
$LN43@zip64local:

; 473  :   while (uBackRead<uMaxBack)

  0019f	8b 45 d4	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  001a2	89 45 ec	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  001a5	8b 45 d0	 mov	 eax, DWORD PTR _uPosFound$[ebp]

; 501  :       break;
; 502  :   }
; 503  :   free(buf);

  001a8	56		 push	 esi
  001a9	89 45 f0	 mov	 DWORD PTR _uPosFound$2$[ebp], eax
  001ac	e8 00 00 00 00	 call	 _free

; 504  :   return uPosFound;

  001b1	8b 45 f0	 mov	 eax, DWORD PTR _uPosFound$2$[ebp]
  001b4	83 c4 04	 add	 esp, 4
  001b7	8b 55 ec	 mov	 edx, DWORD PTR _uPosFound$1$[ebp]

; 505  : }

  001ba	5f		 pop	 edi
  001bb	5e		 pop	 esi
  001bc	5b		 pop	 ebx
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
$LN45@zip64local:

; 501  :       break;
; 502  :   }
; 503  :   free(buf);

  001c1	8b 75 f8	 mov	 esi, DWORD PTR _buf$1$[ebp]
$LN38@zip64local:
  001c4	56		 push	 esi
  001c5	e8 00 00 00 00	 call	 _free

; 504  :   return uPosFound;

  001ca	8b 45 f0	 mov	 eax, DWORD PTR _uPosFound$2$[ebp]
  001cd	83 c4 04	 add	 esp, 4
  001d0	8b 55 ec	 mov	 edx, DWORD PTR _uPosFound$1$[ebp]

; 505  : }

  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	5b		 pop	 ebx
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c3		 ret	 0
$LN31@zip64local:
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	33 c0		 xor	 eax, eax
  001de	33 d2		 xor	 edx, edx
  001e0	5b		 pop	 ebx
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c3		 ret	 0
_zip64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64local_SearchCentralDir64
_TEXT	SEGMENT
_relativeOffset$ = -48					; size = 8
_uPosFound$ = -48					; size = 8
_uReadPos$2$ = -44					; size = 4
_uReadPos$1$ = -40					; size = 4
_uSizeFile$2$ = -36					; size = 4
_uSizeFile$1$ = -32					; size = 4
_pzlib_filefunc_def$1$ = -28				; size = 4
_uPosFound$1$ = -24					; size = 4
_uPosFound$2$ = -20					; size = 4
_uMaxBack$2$ = -16					; size = 4
_filestream$1$ = -12					; size = 4
_buf$1$ = -8						; size = 4
_uMaxBack$1$ = -4					; size = 4
_uL$ = -4						; size = 4
_zip64local_SearchCentralDir64 PROC			; COMDAT
; _pzlib_filefunc_def$ = ecx
; _filestream$ = edx

; 511  : local ZPOS64_T zip64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 512  :   unsigned char* buf;
; 513  :   ZPOS64_T uSizeFile;
; 514  :   ZPOS64_T uBackRead;
; 515  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 516  :   ZPOS64_T uPosFound=0;
; 517  :   uLong uL;
; 518  :   ZPOS64_T relativeOffset;
; 519  : 
; 520  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00009	6a 02		 push	 2
  0000b	8b f2		 mov	 esi, edx
  0000d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uMaxBack$2$[ebp], 0
  00014	8b d9		 mov	 ebx, ecx
  00016	89 75 f4	 mov	 DWORD PTR _filestream$1$[ebp], esi
  00019	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0001e	89 5d e4	 mov	 DWORD PTR _pzlib_filefunc_def$1$[ebp], ebx
  00021	0f 57 c0	 xorps	 xmm0, xmm0
  00024	89 45 fc	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00027	6a 00		 push	 0
  00029	6a 00		 push	 0
  0002b	66 0f 13 45 d0	 movlpd	 QWORD PTR _uPosFound$[ebp], xmm0
  00030	e8 00 00 00 00	 call	 _call_zseek64
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	85 c0		 test	 eax, eax
  0003a	0f 85 31 02 00
	00		 jne	 $LN42@zip64local

; 521  :     return 0;
; 522  : 
; 523  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00040	8b d6		 mov	 edx, esi
  00042	8b cb		 mov	 ecx, ebx
  00044	e8 00 00 00 00	 call	 _call_ztell64
  00049	8b ca		 mov	 ecx, edx
  0004b	89 45 e0	 mov	 DWORD PTR _uSizeFile$1$[ebp], eax
  0004e	89 4d dc	 mov	 DWORD PTR _uSizeFile$2$[ebp], ecx

; 524  : 
; 525  :   if (uMaxBack>uSizeFile)

  00051	85 c9		 test	 ecx, ecx
  00053	77 0f		 ja	 SHORT $LN8@zip64local
  00055	72 07		 jb	 SHORT $LN56@zip64local
  00057	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0005c	73 06		 jae	 SHORT $LN8@zip64local
$LN56@zip64local:

; 526  :     uMaxBack = uSizeFile;

  0005e	89 45 fc	 mov	 DWORD PTR _uMaxBack$1$[ebp], eax
  00061	89 4d f0	 mov	 DWORD PTR _uMaxBack$2$[ebp], ecx
$LN8@zip64local:

; 527  : 
; 528  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00064	68 04 04 00 00	 push	 1028			; 00000404H
  00069	e8 00 00 00 00	 call	 _malloc
  0006e	8b f0		 mov	 esi, eax
  00070	83 c4 04	 add	 esp, 4
  00073	89 75 f8	 mov	 DWORD PTR _buf$1$[ebp], esi

; 529  :   if (buf==NULL)

  00076	85 f6		 test	 esi, esi
  00078	0f 84 f3 01 00
	00		 je	 $LN42@zip64local

; 530  :     return 0;
; 531  : 
; 532  :   uBackRead = 4;

  0007e	33 db		 xor	 ebx, ebx
  00080	bf 04 00 00 00	 mov	 edi, 4

; 533  :   while (uBackRead<uMaxBack)

  00085	3b 5d f0	 cmp	 ebx, DWORD PTR _uMaxBack$2$[ebp]
  00088	0f 87 f9 00 00
	00		 ja	 $LN65@zip64local
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _uMaxBack$1$[ebp]
  00091	72 08		 jb	 SHORT $LN63@zip64local
  00093	3b f8		 cmp	 edi, eax
  00095	0f 83 ec 00 00
	00		 jae	 $LN65@zip64local
$LN63@zip64local:
  0009b	8b 4d d4	 mov	 ecx, DWORD PTR _uPosFound$[ebp+4]
  0009e	8b 55 d0	 mov	 edx, DWORD PTR _uPosFound$[ebp]
  000a1	89 4d e8	 mov	 DWORD PTR _uPosFound$1$[ebp], ecx
  000a4	8b 4d f0	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  000a7	89 55 ec	 mov	 DWORD PTR _uPosFound$2$[ebp], edx
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL2@zip64local:

; 534  :   {
; 535  :     uLong uReadSize;
; 536  :     ZPOS64_T uReadPos;
; 537  :     int i;
; 538  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000b0	81 c7 00 04 00
	00		 add	 edi, 1024		; 00000400H
  000b6	83 d3 00	 adc	 ebx, 0
  000b9	3b d9		 cmp	 ebx, ecx
  000bb	72 0a		 jb	 SHORT $LN11@zip64local
  000bd	77 04		 ja	 SHORT $LN58@zip64local
  000bf	3b f8		 cmp	 edi, eax
  000c1	76 04		 jbe	 SHORT $LN11@zip64local
$LN58@zip64local:

; 539  :       uBackRead = uMaxBack;

  000c3	8b f8		 mov	 edi, eax
  000c5	8b d9		 mov	 ebx, ecx
$LN11@zip64local:

; 540  :     else
; 541  :       uBackRead+=BUFREADCOMMENT;
; 542  :     uReadPos = uSizeFile-uBackRead ;

  000c7	8b 55 e0	 mov	 edx, DWORD PTR _uSizeFile$1$[ebp]
  000ca	8b c2		 mov	 eax, edx
  000cc	8b 4d dc	 mov	 ecx, DWORD PTR _uSizeFile$2$[ebp]
  000cf	2b c7		 sub	 eax, edi
  000d1	89 45 d8	 mov	 DWORD PTR _uReadPos$1$[ebp], eax
  000d4	1b cb		 sbb	 ecx, ebx
  000d6	89 4d d4	 mov	 DWORD PTR _uReadPos$2$[ebp], ecx

; 543  : 
; 544  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  000d9	85 db		 test	 ebx, ebx
  000db	72 11		 jb	 SHORT $LN28@zip64local
  000dd	77 08		 ja	 SHORT $LN59@zip64local
  000df	81 ff 04 04 00
	00		 cmp	 edi, 1028		; 00000404H
  000e5	76 07		 jbe	 SHORT $LN28@zip64local
$LN59@zip64local:
  000e7	be 04 04 00 00	 mov	 esi, 1028		; 00000404H
  000ec	eb 04		 jmp	 SHORT $LN29@zip64local
$LN28@zip64local:
  000ee	8b f2		 mov	 esi, edx
  000f0	2b f0		 sub	 esi, eax
$LN29@zip64local:

; 545  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 546  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f2	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  000f5	6a 00		 push	 0
  000f7	51		 push	 ecx
  000f8	8b 4d e4	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _call_zseek64
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH
  00104	85 c0		 test	 eax, eax
  00106	0f 85 89 00 00
	00		 jne	 $LN67@zip64local

; 547  :       break;
; 548  : 
; 549  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0010c	8b 45 e4	 mov	 eax, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  0010f	56		 push	 esi
  00110	ff 75 f8	 push	 DWORD PTR _buf$1$[ebp]
  00113	ff 75 f4	 push	 DWORD PTR _filestream$1$[ebp]
  00116	ff 70 1c	 push	 DWORD PTR [eax+28]
  00119	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0011c	ff d0		 call	 eax
  0011e	83 c4 10	 add	 esp, 16			; 00000010H
  00121	3b c6		 cmp	 eax, esi
  00123	75 70		 jne	 SHORT $LN67@zip64local

; 550  :       break;
; 551  : 
; 552  :     for (i=(int)uReadSize-3; (i--)>0;)

  00125	8d 4e fd	 lea	 ecx, DWORD PTR [esi-3]
  00128	8b 75 f8	 mov	 esi, DWORD PTR _buf$1$[ebp]
  0012b	85 c9		 test	 ecx, ecx
  0012d	7e 3e		 jle	 SHORT $LN55@zip64local
  0012f	8d 46 03	 lea	 eax, DWORD PTR [esi+3]
  00132	03 c1		 add	 eax, ecx
$LL4@zip64local:
  00134	8b d1		 mov	 edx, ecx
  00136	8d 40 ff	 lea	 eax, DWORD PTR [eax-1]
  00139	49		 dec	 ecx

; 553  :     {
; 554  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 555  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  0013a	80 78 fd 50	 cmp	 BYTE PTR [eax-3], 80	; 00000050H
  0013e	75 11		 jne	 SHORT $LN14@zip64local
  00140	80 3c 32 4b	 cmp	 BYTE PTR [edx+esi], 75	; 0000004bH
  00144	75 0b		 jne	 SHORT $LN14@zip64local
  00146	80 78 ff 06	 cmp	 BYTE PTR [eax-1], 6
  0014a	75 05		 jne	 SHORT $LN14@zip64local
  0014c	80 38 07	 cmp	 BYTE PTR [eax], 7
  0014f	74 06		 je	 SHORT $LN32@zip64local
$LN14@zip64local:

; 550  :       break;
; 551  : 
; 552  :     for (i=(int)uReadSize-3; (i--)>0;)

  00151	85 c9		 test	 ecx, ecx
  00153	7f df		 jg	 SHORT $LL4@zip64local
  00155	eb 16		 jmp	 SHORT $LN55@zip64local
$LN32@zip64local:

; 556  :       {
; 557  :         uPosFound = uReadPos+(unsigned)i;

  00157	8b d1		 mov	 edx, ecx
  00159	33 c9		 xor	 ecx, ecx
  0015b	03 55 d8	 add	 edx, DWORD PTR _uReadPos$1$[ebp]

; 558  :         break;
; 559  :       }
; 560  :     }
; 561  : 
; 562  :       if (uPosFound!=0)

  0015e	8b c2		 mov	 eax, edx
  00160	89 55 ec	 mov	 DWORD PTR _uPosFound$2$[ebp], edx
  00163	13 4d d4	 adc	 ecx, DWORD PTR _uReadPos$2$[ebp]
  00166	0b c1		 or	 eax, ecx
  00168	89 4d e8	 mov	 DWORD PTR _uPosFound$1$[ebp], ecx
  0016b	75 2b		 jne	 SHORT $LN60@zip64local
$LN55@zip64local:

; 533  :   while (uBackRead<uMaxBack)

  0016d	8b 4d f0	 mov	 ecx, DWORD PTR _uMaxBack$2$[ebp]
  00170	8b 45 fc	 mov	 eax, DWORD PTR _uMaxBack$1$[ebp]
  00173	3b d9		 cmp	 ebx, ecx
  00175	0f 82 35 ff ff
	ff		 jb	 $LL2@zip64local
  0017b	77 1b		 ja	 SHORT $LN60@zip64local
  0017d	3b f8		 cmp	 edi, eax
  0017f	0f 82 2b ff ff
	ff		 jb	 $LL2@zip64local
  00185	eb 11		 jmp	 SHORT $LN60@zip64local
$LN65@zip64local:
  00187	8b 45 d4	 mov	 eax, DWORD PTR _uPosFound$[ebp+4]
  0018a	89 45 e8	 mov	 DWORD PTR _uPosFound$1$[ebp], eax
  0018d	8b 45 d0	 mov	 eax, DWORD PTR _uPosFound$[ebp]
  00190	89 45 ec	 mov	 DWORD PTR _uPosFound$2$[ebp], eax

; 547  :       break;
; 548  : 
; 549  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  00193	eb 03		 jmp	 SHORT $LN60@zip64local
$LN67@zip64local:

; 563  :         break;
; 564  :   }
; 565  : 
; 566  :   free(buf);

  00195	8b 75 f8	 mov	 esi, DWORD PTR _buf$1$[ebp]
$LN60@zip64local:
  00198	56		 push	 esi
  00199	e8 00 00 00 00	 call	 _free

; 567  :   if (uPosFound == 0)

  0019e	8b 55 ec	 mov	 edx, DWORD PTR _uPosFound$2$[ebp]
  001a1	83 c4 04	 add	 esp, 4
  001a4	8b 4d e8	 mov	 ecx, DWORD PTR _uPosFound$1$[ebp]
  001a7	8b c2		 mov	 eax, edx
  001a9	0b c1		 or	 eax, ecx
  001ab	0f 84 c0 00 00
	00		 je	 $LN42@zip64local

; 568  :     return 0;
; 569  : 
; 570  :   /* Zip64 end of central directory locator */
; 571  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  001b1	8b 75 f4	 mov	 esi, DWORD PTR _filestream$1$[ebp]
  001b4	8b 5d e4	 mov	 ebx, DWORD PTR _pzlib_filefunc_def$1$[ebp]
  001b7	6a 00		 push	 0
  001b9	51		 push	 ecx
  001ba	52		 push	 edx
  001bb	8b d6		 mov	 edx, esi
  001bd	8b cb		 mov	 ecx, ebx
  001bf	e8 00 00 00 00	 call	 _call_zseek64
  001c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c7	85 c0		 test	 eax, eax
  001c9	0f 85 a2 00 00
	00		 jne	 $LN42@zip64local

; 572  :     return 0;
; 573  : 
; 574  :   /* the signature, already checked */
; 575  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001cf	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001d2	8b d6		 mov	 edx, esi
  001d4	50		 push	 eax
  001d5	8b cb		 mov	 ecx, ebx
  001d7	e8 00 00 00 00	 call	 _zip64local_getLong
  001dc	83 c4 04	 add	 esp, 4
  001df	85 c0		 test	 eax, eax
  001e1	0f 85 8a 00 00
	00		 jne	 $LN42@zip64local

; 576  :     return 0;
; 577  : 
; 578  :   /* number of the disk with the start of the zip64 end of  central directory */
; 579  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001e7	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001ea	8b d6		 mov	 edx, esi
  001ec	50		 push	 eax
  001ed	8b cb		 mov	 ecx, ebx
  001ef	e8 00 00 00 00	 call	 _zip64local_getLong
  001f4	83 c4 04	 add	 esp, 4
  001f7	85 c0		 test	 eax, eax
  001f9	75 76		 jne	 SHORT $LN42@zip64local

; 580  :     return 0;
; 581  :   if (uL != 0)

  001fb	39 45 fc	 cmp	 DWORD PTR _uL$[ebp], eax
  001fe	75 71		 jne	 SHORT $LN42@zip64local

; 582  :     return 0;
; 583  : 
; 584  :   /* relative offset of the zip64 end of central directory record */
; 585  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  00200	8d 45 d0	 lea	 eax, DWORD PTR _relativeOffset$[ebp]
  00203	8b d6		 mov	 edx, esi
  00205	50		 push	 eax
  00206	8b cb		 mov	 ecx, ebx
  00208	e8 00 00 00 00	 call	 _zip64local_getLong64
  0020d	83 c4 04	 add	 esp, 4
  00210	85 c0		 test	 eax, eax
  00212	75 5d		 jne	 SHORT $LN42@zip64local

; 586  :     return 0;
; 587  : 
; 588  :   /* total number of disks */
; 589  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00214	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  00217	8b d6		 mov	 edx, esi
  00219	50		 push	 eax
  0021a	8b cb		 mov	 ecx, ebx
  0021c	e8 00 00 00 00	 call	 _zip64local_getLong
  00221	83 c4 04	 add	 esp, 4
  00224	85 c0		 test	 eax, eax
  00226	75 49		 jne	 SHORT $LN42@zip64local

; 590  :     return 0;
; 591  :   if (uL != 1)

  00228	83 7d fc 01	 cmp	 DWORD PTR _uL$[ebp], 1
  0022c	75 43		 jne	 SHORT $LN42@zip64local

; 592  :     return 0;
; 593  : 
; 594  :   /* Goto Zip64 end of central directory record */
; 595  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0022e	8b 75 d4	 mov	 esi, DWORD PTR _relativeOffset$[ebp+4]
  00231	8b cb		 mov	 ecx, ebx
  00233	8b 7d d0	 mov	 edi, DWORD PTR _relativeOffset$[ebp]
  00236	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  00239	50		 push	 eax
  0023a	56		 push	 esi
  0023b	57		 push	 edi
  0023c	e8 00 00 00 00	 call	 _call_zseek64
  00241	83 c4 0c	 add	 esp, 12			; 0000000cH
  00244	85 c0		 test	 eax, eax
  00246	75 29		 jne	 SHORT $LN42@zip64local

; 596  :     return 0;
; 597  : 
; 598  :   /* the signature */
; 599  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00248	8b 55 f4	 mov	 edx, DWORD PTR _filestream$1$[ebp]
  0024b	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  0024e	50		 push	 eax
  0024f	8b cb		 mov	 ecx, ebx
  00251	e8 00 00 00 00	 call	 _zip64local_getLong
  00256	83 c4 04	 add	 esp, 4
  00259	85 c0		 test	 eax, eax
  0025b	75 14		 jne	 SHORT $LN42@zip64local

; 600  :     return 0;
; 601  : 
; 602  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  0025d	81 7d fc 50 4b
	06 06		 cmp	 DWORD PTR _uL$[ebp], 101075792 ; 06064b50H
  00264	75 0b		 jne	 SHORT $LN42@zip64local

; 603  :     return 0;
; 604  : 
; 605  :   return relativeOffset;

  00266	8b c7		 mov	 eax, edi
  00268	8b d6		 mov	 edx, esi

; 606  : }

  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	5b		 pop	 ebx
  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	c3		 ret	 0
$LN42@zip64local:
  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	33 c0		 xor	 eax, eax
  00275	33 d2		 xor	 edx, edx
  00277	5b		 pop	 ebx
  00278	8b e5		 mov	 esp, ebp
  0027a	5d		 pop	 ebp
  0027b	c3		 ret	 0
_zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _LoadCentralDirectoryRecord
_TEXT	SEGMENT
$T1 = -56						; size = 8
_size_comment$ = -56					; size = 4
_size_central_dir$ = -56				; size = 8
_number_entry_CD$ = -56					; size = 8
_sizeEndOfCentralDirectory$2 = -56			; size = 8
tv619 = -52						; size = 4
_VersionNeeded$ = -52					; size = 4
_VersionMadeBy$ = -52					; size = 4
_number_entry_CD$2$ = -48				; size = 4
_number_entry_CD$1$ = -44				; size = 4
_offset_central_dir$ = -40				; size = 8
_number_entry$ = -40					; size = 8
$T3 = -36						; size = 4
_buf_read$1$ = -36					; size = 4
tv408 = -36						; size = 4
$T4 = -32						; size = 8
_read_this$2$ = -28					; size = 4
_size_comment$1$ = -28					; size = 4
_offset_central_dir$1$ = -20				; size = 4
_read_this$1$ = -20					; size = 4
_number_disk_with_CD$ = -20				; size = 4
_size_central_dir_to_read$2$ = -16			; size = 4
_number_disk$ = -16					; size = 4
_byte_before_the_zipfile$1$ = -12			; size = 4
_byte_before_the_zipfile$2$ = -8			; size = 4
_offset_central_dir$2$ = -4				; size = 4
tv620 = -4						; size = 4
_uL$ = -4						; size = 4
_LoadCentralDirectoryRecord PROC			; COMDAT
; _pziinit$ = ecx

; 608  : local int LoadCentralDirectoryRecord(zip64_internal* pziinit) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 609  :   int err=ZIP_OK;

  0000b	33 ff		 xor	 edi, edi

; 610  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 611  : 
; 612  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 613  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 614  :   ZPOS64_T central_pos;
; 615  :   uLong uL;
; 616  : 
; 617  :   uLong number_disk;          /* number of the current dist, used for
; 618  :                               spanning ZIP, unsupported, always 0*/
; 619  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 620  :                               for spanning ZIP, unsupported, always 0*/
; 621  :   ZPOS64_T number_entry;
; 622  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 623  :                                 the central dir
; 624  :                                 (same than number_entry on nospan) */
; 625  :   uLong VersionMadeBy;
; 626  :   uLong VersionNeeded;
; 627  :   uLong size_comment;
; 628  : 
; 629  :   int hasZIP64Record = 0;
; 630  : 
; 631  :   // check first if we find a ZIP64 record
; 632  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  0000d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00010	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir64
  00015	8b ca		 mov	 ecx, edx
  00017	89 45 f8	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax
  0001a	89 4d f4	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], ecx

; 633  :   if(central_pos > 0)

  0001d	85 c9		 test	 ecx, ecx
  0001f	0f 85 a8 01 00
	00		 jne	 $LN55@LoadCentra
  00025	85 c0		 test	 eax, eax
  00027	0f 85 a0 01 00
	00		 jne	 $LN55@LoadCentra

; 634  :   {
; 635  :     hasZIP64Record = 1;
; 636  :   }
; 637  :   else if(central_pos == 0)
; 638  :   {
; 639  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  0002d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 _zip64local_SearchCentralDir
  00037	8b ca		 mov	 ecx, edx
  00039	89 45 f8	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax

; 695  :       err=ZIP_ERRNO;
; 696  : 
; 697  :     // TODO..
; 698  :     // read the comment from the standard central header.
; 699  :     size_comment = 0;
; 700  :   }
; 701  :   else
; 702  :   {
; 703  :     // Read End of central Directory info
; 704  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0003c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0003f	57		 push	 edi
  00040	51		 push	 ecx
  00041	89 4d f4	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], ecx
  00044	8b ce		 mov	 ecx, esi
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _call_zseek64

; 705  :       err=ZIP_ERRNO;
; 706  : 
; 707  :     /* the signature, already checked */
; 708  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  0004c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00052	83 cb ff	 or	 ebx, -1
  00055	8b ce		 mov	 ecx, esi
  00057	85 c0		 test	 eax, eax
  00059	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  0005c	50		 push	 eax
  0005d	0f 45 fb	 cmovne	 edi, ebx
  00060	e8 00 00 00 00	 call	 _zip64local_getLong

; 709  :       err=ZIP_ERRNO;
; 710  : 
; 711  :     /* number of this disk */
; 712  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00065	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00068	83 c4 04	 add	 esp, 4
  0006b	85 c0		 test	 eax, eax
  0006d	8b ce		 mov	 ecx, esi
  0006f	8d 45 f0	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00072	0f 45 fb	 cmovne	 edi, ebx
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _zip64local_getShort

; 713  :       err=ZIP_ERRNO;
; 714  : 
; 715  :     /* number of the disk with the start of the central directory */
; 716  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  0007b	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0007e	83 c4 04	 add	 esp, 4
  00081	85 c0		 test	 eax, eax
  00083	8b ce		 mov	 ecx, esi
  00085	8d 45 ec	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  00088	0f 45 fb	 cmovne	 edi, ebx
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _zip64local_getShort

; 717  :       err=ZIP_ERRNO;
; 718  : 
; 719  :     /* total number of entries in the central dir on this disk */
; 720  :     number_entry = 0;
; 721  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00091	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00094	83 c4 04	 add	 esp, 4
  00097	85 c0		 test	 eax, eax
  00099	8b ce		 mov	 ecx, esi
  0009b	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  0009e	0f 45 fb	 cmovne	 edi, ebx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _zip64local_getShort
  000a7	83 c4 04	 add	 esp, 4
  000aa	85 c0		 test	 eax, eax
  000ac	74 12		 je	 SHORT $LN26@LoadCentra

; 722  :       err=ZIP_ERRNO;

  000ae	0f 57 c0	 xorps	 xmm0, xmm0
  000b1	0b fb		 or	 edi, ebx
  000b3	66 0f 13 45 c8	 movlpd	 QWORD PTR $T1[ebp], xmm0
  000b8	8b 5d cc	 mov	 ebx, DWORD PTR $T1[ebp+4]
  000bb	8b 45 c8	 mov	 eax, DWORD PTR $T1[ebp]
  000be	eb 05		 jmp	 SHORT $LN66@LoadCentra
$LN26@LoadCentra:

; 723  :     else
; 724  :       number_entry = uL;

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  000c3	33 db		 xor	 ebx, ebx
$LN66@LoadCentra:

; 725  : 
; 726  :     /* total number of entries in the central dir */
; 727  :     number_entry_CD = 0;
; 728  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  000c5	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c8	0f 57 c0	 xorps	 xmm0, xmm0
  000cb	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax
  000ce	8b ce		 mov	 ecx, esi
  000d0	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  000d3	66 0f 13 45 c8	 movlpd	 QWORD PTR _number_entry_CD$[ebp], xmm0
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 _zip64local_getShort
  000de	83 c4 04	 add	 esp, 4
  000e1	85 c0		 test	 eax, eax
  000e3	74 1f		 je	 SHORT $LN28@LoadCentra

; 729  :       err=ZIP_ERRNO;

  000e5	8b 45 cc	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  000e8	0f 57 c0	 xorps	 xmm0, xmm0
  000eb	89 45 d0	 mov	 DWORD PTR _number_entry_CD$2$[ebp], eax
  000ee	83 cf ff	 or	 edi, -1
  000f1	8b 45 c8	 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  000f4	66 0f 13 45 e0	 movlpd	 QWORD PTR $T4[ebp], xmm0
  000f9	8b 4d e0	 mov	 ecx, DWORD PTR $T4[ebp]
  000fc	89 45 d4	 mov	 DWORD PTR _number_entry_CD$1$[ebp], eax
  000ff	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp+4]
  00102	eb 0f		 jmp	 SHORT $LN29@LoadCentra
$LN28@LoadCentra:

; 730  :     else
; 731  :       number_entry_CD = uL;

  00104	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  00107	33 d2		 xor	 edx, edx
  00109	89 45 d4	 mov	 DWORD PTR _number_entry_CD$1$[ebp], eax
  0010c	8b c8		 mov	 ecx, eax
  0010e	89 55 d0	 mov	 DWORD PTR _number_entry_CD$2$[ebp], edx
  00111	8b c2		 mov	 eax, edx
$LN29@LoadCentra:

; 732  : 
; 733  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00113	3b 4d dc	 cmp	 ecx, DWORD PTR $T3[ebp]
  00116	75 10		 jne	 SHORT $LN31@LoadCentra
  00118	3b c3		 cmp	 eax, ebx
  0011a	75 0c		 jne	 SHORT $LN31@LoadCentra
  0011c	83 7d ec 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  00120	75 06		 jne	 SHORT $LN31@LoadCentra
  00122	83 7d f0 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  00126	74 05		 je	 SHORT $LN30@LoadCentra
$LN31@LoadCentra:

; 734  :       err=ZIP_BADZIPFILE;

  00128	bf 99 ff ff ff	 mov	 edi, -103		; ffffff99H
$LN30@LoadCentra:

; 735  : 
; 736  :     /* size of the central directory */
; 737  :     size_central_dir = 0;
; 738  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0012d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00130	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  00133	0f 57 c0	 xorps	 xmm0, xmm0
  00136	8b ce		 mov	 ecx, esi
  00138	50		 push	 eax
  00139	66 0f 13 45 c8	 movlpd	 QWORD PTR _size_central_dir$[ebp], xmm0
  0013e	e8 00 00 00 00	 call	 _zip64local_getLong
  00143	83 c4 04	 add	 esp, 4
  00146	85 c0		 test	 eax, eax
  00148	74 0e		 je	 SHORT $LN32@LoadCentra

; 739  :       err=ZIP_ERRNO;

  0014a	8b 45 cc	 mov	 eax, DWORD PTR _size_central_dir$[ebp+4]
  0014d	83 cf ff	 or	 edi, -1
  00150	8b 5d c8	 mov	 ebx, DWORD PTR _size_central_dir$[ebp]
  00153	89 45 f0	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
  00156	eb 0a		 jmp	 SHORT $LN33@LoadCentra
$LN32@LoadCentra:

; 740  :     else
; 741  :       size_central_dir = uL;

  00158	8b 5d fc	 mov	 ebx, DWORD PTR _uL$[ebp]
  0015b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], 0
$LN33@LoadCentra:

; 742  : 
; 743  :     /* offset of start of central directory with respect to the starting disk number */
; 744  :     offset_central_dir = 0;
; 745  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00162	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00165	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  00168	0f 57 c0	 xorps	 xmm0, xmm0
  0016b	8b ce		 mov	 ecx, esi
  0016d	50		 push	 eax
  0016e	66 0f 13 45 d8	 movlpd	 QWORD PTR _offset_central_dir$[ebp], xmm0
  00173	e8 00 00 00 00	 call	 _zip64local_getLong
  00178	83 c4 04	 add	 esp, 4
  0017b	85 c0		 test	 eax, eax
  0017d	74 0e		 je	 SHORT $LN34@LoadCentra

; 746  :       err=ZIP_ERRNO;

  0017f	8b 45 dc	 mov	 eax, DWORD PTR _offset_central_dir$[ebp+4]
  00182	83 cf ff	 or	 edi, -1
  00185	89 45 ec	 mov	 DWORD PTR _offset_central_dir$1$[ebp], eax
  00188	8b 45 d8	 mov	 eax, DWORD PTR _offset_central_dir$[ebp]
  0018b	eb 0a		 jmp	 SHORT $LN67@LoadCentra
$LN34@LoadCentra:

; 747  :     else
; 748  :       offset_central_dir = uL;

  0018d	8b 45 fc	 mov	 eax, DWORD PTR _uL$[ebp]
  00190	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _offset_central_dir$1$[ebp], 0
$LN67@LoadCentra:

; 749  : 
; 750  : 
; 751  :     /* zipfile global comment length */
; 752  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  00197	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0019a	8b ce		 mov	 ecx, esi
  0019c	89 45 fc	 mov	 DWORD PTR _offset_central_dir$2$[ebp], eax
  0019f	8d 45 c8	 lea	 eax, DWORD PTR _size_comment$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _zip64local_getShort
  001a8	8b 55 c8	 mov	 edx, DWORD PTR _size_comment$[ebp]
  001ab	83 c4 04	 add	 esp, 4
  001ae	8b 4d f8	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  001b1	89 55 e4	 mov	 DWORD PTR _size_comment$1$[ebp], edx
  001b4	85 c0		 test	 eax, eax
  001b6	0f 84 4a 01 00
	00		 je	 $LN36@LoadCentra

; 753  :       err=ZIP_ERRNO;

  001bc	8b 45 f4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  001bf	83 cf ff	 or	 edi, -1
  001c2	89 4d f8	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], ecx
  001c5	89 45 f4	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], eax
  001c8	e9 39 01 00 00	 jmp	 $LN36@LoadCentra
$LN55@LoadCentra:

; 640  :   }
; 641  : 
; 642  : /* disable to allow appending to empty ZIP archive
; 643  :         if (central_pos==0)
; 644  :             err=ZIP_ERRNO;
; 645  : */
; 646  : 
; 647  :   if(hasZIP64Record)
; 648  :   {
; 649  :     ZPOS64_T sizeEndOfCentralDirectory;
; 650  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  001cd	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001d0	6a 00		 push	 0
  001d2	51		 push	 ecx
  001d3	50		 push	 eax
  001d4	8b ce		 mov	 ecx, esi
  001d6	e8 00 00 00 00	 call	 _call_zseek64

; 651  :       err=ZIP_ERRNO;
; 652  : 
; 653  :     /* the signature, already checked */
; 654  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  001db	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001de	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e1	83 cb ff	 or	 ebx, -1
  001e4	8b ce		 mov	 ecx, esi
  001e6	85 c0		 test	 eax, eax
  001e8	8d 45 fc	 lea	 eax, DWORD PTR _uL$[ebp]
  001eb	50		 push	 eax
  001ec	0f 45 fb	 cmovne	 edi, ebx
  001ef	e8 00 00 00 00	 call	 _zip64local_getLong

; 655  :       err=ZIP_ERRNO;
; 656  : 
; 657  :     /* size of zip64 end of central directory record */
; 658  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  001f4	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001f7	83 c4 04	 add	 esp, 4
  001fa	85 c0		 test	 eax, eax
  001fc	8b ce		 mov	 ecx, esi
  001fe	8d 45 c8	 lea	 eax, DWORD PTR _sizeEndOfCentralDirectory$2[ebp]
  00201	0f 45 fb	 cmovne	 edi, ebx
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 _zip64local_getLong64

; 659  :       err=ZIP_ERRNO;
; 660  : 
; 661  :     /* version made by */
; 662  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  0020a	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0020d	83 c4 04	 add	 esp, 4
  00210	85 c0		 test	 eax, eax
  00212	8b ce		 mov	 ecx, esi
  00214	8d 45 cc	 lea	 eax, DWORD PTR _VersionMadeBy$[ebp]
  00217	0f 45 fb	 cmovne	 edi, ebx
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 _zip64local_getShort

; 663  :       err=ZIP_ERRNO;
; 664  : 
; 665  :     /* version needed to extract */
; 666  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  00220	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00223	83 c4 04	 add	 esp, 4
  00226	85 c0		 test	 eax, eax
  00228	8b ce		 mov	 ecx, esi
  0022a	8d 45 cc	 lea	 eax, DWORD PTR _VersionNeeded$[ebp]
  0022d	0f 45 fb	 cmovne	 edi, ebx
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 _zip64local_getShort

; 667  :       err=ZIP_ERRNO;
; 668  : 
; 669  :     /* number of this disk */
; 670  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00236	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00239	83 c4 04	 add	 esp, 4
  0023c	85 c0		 test	 eax, eax
  0023e	8b ce		 mov	 ecx, esi
  00240	8d 45 f0	 lea	 eax, DWORD PTR _number_disk$[ebp]
  00243	0f 45 fb	 cmovne	 edi, ebx
  00246	50		 push	 eax
  00247	e8 00 00 00 00	 call	 _zip64local_getLong

; 671  :       err=ZIP_ERRNO;
; 672  : 
; 673  :     /* number of the disk with the start of the central directory */
; 674  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  0024c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0024f	83 c4 04	 add	 esp, 4
  00252	85 c0		 test	 eax, eax
  00254	8b ce		 mov	 ecx, esi
  00256	8d 45 ec	 lea	 eax, DWORD PTR _number_disk_with_CD$[ebp]
  00259	0f 45 fb	 cmovne	 edi, ebx
  0025c	50		 push	 eax
  0025d	e8 00 00 00 00	 call	 _zip64local_getLong

; 675  :       err=ZIP_ERRNO;
; 676  : 
; 677  :     /* total number of entries in the central directory on this disk */
; 678  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  00262	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00265	83 c4 04	 add	 esp, 4
  00268	85 c0		 test	 eax, eax
  0026a	8b ce		 mov	 ecx, esi
  0026c	8d 45 d8	 lea	 eax, DWORD PTR _number_entry$[ebp]
  0026f	0f 45 fb	 cmovne	 edi, ebx
  00272	50		 push	 eax
  00273	e8 00 00 00 00	 call	 _zip64local_getLong64

; 679  :       err=ZIP_ERRNO;
; 680  : 
; 681  :     /* total number of entries in the central directory */
; 682  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  00278	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0027b	83 c4 04	 add	 esp, 4
  0027e	85 c0		 test	 eax, eax
  00280	8b ce		 mov	 ecx, esi
  00282	8d 45 c8	 lea	 eax, DWORD PTR _number_entry_CD$[ebp]
  00285	0f 45 fb	 cmovne	 edi, ebx
  00288	50		 push	 eax
  00289	e8 00 00 00 00	 call	 _zip64local_getLong64
  0028e	83 c4 04	 add	 esp, 4
  00291	85 c0		 test	 eax, eax

; 683  :       err=ZIP_ERRNO;
; 684  : 
; 685  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00293	8b 45 c8	 mov	 eax, DWORD PTR _number_entry_CD$[ebp]
  00296	0f 45 fb	 cmovne	 edi, ebx
  00299	89 45 d4	 mov	 DWORD PTR _number_entry_CD$1$[ebp], eax
  0029c	3b 45 d8	 cmp	 eax, DWORD PTR _number_entry$[ebp]
  0029f	8b 45 cc	 mov	 eax, DWORD PTR _number_entry_CD$[ebp+4]
  002a2	89 45 d0	 mov	 DWORD PTR _number_entry_CD$2$[ebp], eax
  002a5	75 11		 jne	 SHORT $LN19@LoadCentra
  002a7	3b 45 dc	 cmp	 eax, DWORD PTR _number_entry$[ebp+4]
  002aa	75 0c		 jne	 SHORT $LN19@LoadCentra
  002ac	83 7d ec 00	 cmp	 DWORD PTR _number_disk_with_CD$[ebp], 0
  002b0	75 06		 jne	 SHORT $LN19@LoadCentra
  002b2	83 7d f0 00	 cmp	 DWORD PTR _number_disk$[ebp], 0
  002b6	74 05		 je	 SHORT $LN18@LoadCentra
$LN19@LoadCentra:

; 686  :       err=ZIP_BADZIPFILE;

  002b8	bf 99 ff ff ff	 mov	 edi, -103		; ffffff99H
$LN18@LoadCentra:

; 687  : 
; 688  :     /* size of the central directory */
; 689  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  002bd	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  002c0	8d 45 c8	 lea	 eax, DWORD PTR _size_central_dir$[ebp]
  002c3	50		 push	 eax
  002c4	8b ce		 mov	 ecx, esi
  002c6	e8 00 00 00 00	 call	 _zip64local_getLong64

; 690  :       err=ZIP_ERRNO;
; 691  : 
; 692  :     /* offset of start of central directory with respect to the
; 693  :     starting disk number */
; 694  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  002cb	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  002ce	83 c4 04	 add	 esp, 4
  002d1	85 c0		 test	 eax, eax
  002d3	8b ce		 mov	 ecx, esi
  002d5	8d 45 d8	 lea	 eax, DWORD PTR _offset_central_dir$[ebp]
  002d8	0f 45 fb	 cmovne	 edi, ebx
  002db	50		 push	 eax
  002dc	e8 00 00 00 00	 call	 _zip64local_getLong64

; 749  : 
; 750  : 
; 751  :     /* zipfile global comment length */
; 752  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  002e1	8b 4d dc	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp+4]
  002e4	83 c4 04	 add	 esp, 4
  002e7	85 c0		 test	 eax, eax
  002e9	89 4d ec	 mov	 DWORD PTR _offset_central_dir$1$[ebp], ecx
  002ec	8b 4d d8	 mov	 ecx, DWORD PTR _offset_central_dir$[ebp]
  002ef	8b 45 cc	 mov	 eax, DWORD PTR _size_central_dir$[ebp+4]
  002f2	0f 45 fb	 cmovne	 edi, ebx
  002f5	8b 5d c8	 mov	 ebx, DWORD PTR _size_central_dir$[ebp]
  002f8	33 d2		 xor	 edx, edx
  002fa	89 4d fc	 mov	 DWORD PTR _offset_central_dir$2$[ebp], ecx
  002fd	8b 4d f8	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  00300	89 55 e4	 mov	 DWORD PTR _size_comment$1$[ebp], edx
  00303	89 45 f0	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
$LN36@LoadCentra:

; 754  :   }
; 755  : 
; 756  :   if ((central_pos<offset_central_dir+size_central_dir) &&

  00306	8b 45 fc	 mov	 eax, DWORD PTR _offset_central_dir$2$[ebp]
  00309	03 c3		 add	 eax, ebx
  0030b	89 45 dc	 mov	 DWORD PTR tv408[ebp], eax
  0030e	8b 45 ec	 mov	 eax, DWORD PTR _offset_central_dir$1$[ebp]
  00311	13 45 f0	 adc	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  00314	39 45 f4	 cmp	 DWORD PTR _byte_before_the_zipfile$1$[ebp], eax
  00317	0f 82 79 01 00
	00		 jb	 $LN51@LoadCentra
  0031d	77 09		 ja	 SHORT $LN56@LoadCentra
  0031f	3b 4d dc	 cmp	 ecx, DWORD PTR tv408[ebp]
  00322	0f 82 6e 01 00
	00		 jb	 $LN51@LoadCentra
$LN56@LoadCentra:

; 757  :     (err==ZIP_OK))
; 758  :     err=ZIP_BADZIPFILE;
; 759  : 
; 760  :   if (err!=ZIP_OK)

  00328	85 ff		 test	 edi, edi
  0032a	0f 85 66 01 00
	00		 jne	 $LN51@LoadCentra

; 764  :   }
; 765  : 
; 766  :   if (size_comment>0)

  00330	85 d2		 test	 edx, edx
  00332	74 32		 je	 SHORT $LN40@LoadCentra

; 767  :   {
; 768  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  00334	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00337	50		 push	 eax
  00338	e8 00 00 00 00	 call	 _malloc
  0033d	83 c4 04	 add	 esp, 4
  00340	89 86 00 01 01
	00		 mov	 DWORD PTR [esi+65792], eax

; 769  :     if (pziinit->globalcomment)

  00346	85 c0		 test	 eax, eax
  00348	74 1c		 je	 SHORT $LN40@LoadCentra

; 770  :     {
; 771  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  0034a	ff 75 e4	 push	 DWORD PTR _size_comment$1$[ebp]
  0034d	50		 push	 eax
  0034e	ff 76 2c	 push	 DWORD PTR [esi+44]
  00351	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00354	ff 76 1c	 push	 DWORD PTR [esi+28]
  00357	ff d0		 call	 eax

; 772  :       pziinit->globalcomment[size_comment]=0;

  00359	8b 8e 00 01 01
	00		 mov	 ecx, DWORD PTR [esi+65792]
  0035f	83 c4 10	 add	 esp, 16			; 00000010H
  00362	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN40@LoadCentra:

; 773  :     }
; 774  :   }
; 775  : 
; 776  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  00366	8b 45 f8	 mov	 eax, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  00369	2b 45 fc	 sub	 eax, DWORD PTR _offset_central_dir$2$[ebp]
  0036c	8b 4d f4	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  0036f	1b 4d ec	 sbb	 ecx, DWORD PTR _offset_central_dir$1$[ebp]
  00372	2b c3		 sub	 eax, ebx

; 777  :   pziinit->add_position_when_writing_offset = byte_before_the_zipfile;
; 778  : 
; 779  :   {
; 780  :     ZPOS64_T size_central_dir_to_read = size_central_dir;
; 781  :     size_t buf_size = SIZEDATA_INDATABLOCK;
; 782  :     void* buf_read = (void*)ALLOC(buf_size);

  00374	68 f0 0f 00 00	 push	 4080			; 00000ff0H
  00379	1b 4d f0	 sbb	 ecx, DWORD PTR _size_central_dir_to_read$2$[ebp]
  0037c	89 45 f8	 mov	 DWORD PTR _byte_before_the_zipfile$2$[ebp], eax
  0037f	89 4d f4	 mov	 DWORD PTR _byte_before_the_zipfile$1$[ebp], ecx
  00382	89 86 f0 00 01
	00		 mov	 DWORD PTR [esi+65776], eax
  00388	89 8e f4 00 01
	00		 mov	 DWORD PTR [esi+65780], ecx
  0038e	e8 00 00 00 00	 call	 _malloc

; 783  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  00393	8b 4d f8	 mov	 ecx, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  00396	83 c4 04	 add	 esp, 4
  00399	03 4d fc	 add	 ecx, DWORD PTR _offset_central_dir$2$[ebp]
  0039c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0039f	89 45 dc	 mov	 DWORD PTR _buf_read$1$[ebp], eax
  003a2	8b 45 f4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  003a5	13 45 ec	 adc	 eax, DWORD PTR _offset_central_dir$1$[ebp]
  003a8	6a 00		 push	 0
  003aa	50		 push	 eax
  003ab	89 4d cc	 mov	 DWORD PTR tv619[ebp], ecx
  003ae	51		 push	 ecx
  003af	8b ce		 mov	 ecx, esi
  003b1	89 45 fc	 mov	 DWORD PTR tv620[ebp], eax
  003b4	e8 00 00 00 00	 call	 _call_zseek64
  003b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  003bc	85 c0		 test	 eax, eax
  003be	b8 ff ff ff ff	 mov	 eax, -1
  003c3	0f 45 f8	 cmovne	 edi, eax

; 784  :       err=ZIP_ERRNO;
; 785  : 
; 786  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  003c6	8b 45 f0	 mov	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  003c9	85 c0		 test	 eax, eax
  003cb	75 04		 jne	 SHORT $LL2@LoadCentra
  003cd	85 db		 test	 ebx, ebx
  003cf	74 6e		 je	 SHORT $LN60@LoadCentra
$LL2@LoadCentra:
  003d1	85 ff		 test	 edi, edi
  003d3	75 6a		 jne	 SHORT $LN60@LoadCentra

; 787  :     {
; 788  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;

  003d5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _read_this$2$[ebp], 0
  003dc	bf f0 0f 00 00	 mov	 edi, 4080		; 00000ff0H
  003e1	89 7d ec	 mov	 DWORD PTR _read_this$1$[ebp], edi

; 789  :       if (read_this > size_central_dir_to_read)

  003e4	85 c0		 test	 eax, eax
  003e6	77 0e		 ja	 SHORT $LN42@LoadCentra
  003e8	72 04		 jb	 SHORT $LN58@LoadCentra
  003ea	3b df		 cmp	 ebx, edi
  003ec	73 08		 jae	 SHORT $LN42@LoadCentra
$LN58@LoadCentra:

; 790  :         read_this = size_central_dir_to_read;

  003ee	8b fb		 mov	 edi, ebx
  003f0	89 5d ec	 mov	 DWORD PTR _read_this$1$[ebp], ebx
  003f3	89 45 e4	 mov	 DWORD PTR _read_this$2$[ebp], eax
$LN42@LoadCentra:

; 791  : 
; 792  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  003f6	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  003f9	57		 push	 edi
  003fa	ff 75 dc	 push	 DWORD PTR _buf_read$1$[ebp]
  003fd	ff 76 2c	 push	 DWORD PTR [esi+44]
  00400	ff 76 1c	 push	 DWORD PTR [esi+28]
  00403	ff d0		 call	 eax
  00405	83 c4 10	 add	 esp, 16			; 00000010H
  00408	33 c9		 xor	 ecx, ecx
  0040a	3b c7		 cmp	 eax, edi
  0040c	75 18		 jne	 SHORT $LN59@LoadCentra
  0040e	3b 4d e4	 cmp	 ecx, DWORD PTR _read_this$2$[ebp]
  00411	75 13		 jne	 SHORT $LN59@LoadCentra

; 794  : 
; 795  :       if (err==ZIP_OK)
; 796  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  00413	8b 55 dc	 mov	 edx, DWORD PTR _buf_read$1$[ebp]
  00416	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00419	57		 push	 edi
  0041a	e8 00 00 00 00	 call	 _add_data_in_datablock
  0041f	83 c4 04	 add	 esp, 4
  00422	8b f8		 mov	 edi, eax
  00424	eb 03		 jmp	 SHORT $LN44@LoadCentra
$LN59@LoadCentra:

; 793  :         err=ZIP_ERRNO;

  00426	83 cf ff	 or	 edi, -1
$LN44@LoadCentra:

; 797  : 
; 798  :       size_central_dir_to_read-=read_this;

  00429	2b 5d ec	 sub	 ebx, DWORD PTR _read_this$1$[ebp]
  0042c	8b 45 f0	 mov	 eax, DWORD PTR _size_central_dir_to_read$2$[ebp]
  0042f	1b 45 e4	 sbb	 eax, DWORD PTR _read_this$2$[ebp]
  00432	89 45 f0	 mov	 DWORD PTR _size_central_dir_to_read$2$[ebp], eax
  00435	85 c0		 test	 eax, eax
  00437	77 98		 ja	 SHORT $LL2@LoadCentra

; 784  :       err=ZIP_ERRNO;
; 785  : 
; 786  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  00439	72 04		 jb	 SHORT $LN60@LoadCentra
  0043b	85 db		 test	 ebx, ebx
  0043d	75 92		 jne	 SHORT $LL2@LoadCentra
$LN60@LoadCentra:

; 799  :     }
; 800  :     free(buf_read);

  0043f	ff 75 dc	 push	 DWORD PTR _buf_read$1$[ebp]
  00442	e8 00 00 00 00	 call	 _free

; 801  :   }
; 802  :   pziinit->begin_pos = byte_before_the_zipfile;

  00447	8b 45 f8	 mov	 eax, DWORD PTR _byte_before_the_zipfile$2$[ebp]
  0044a	83 c4 04	 add	 esp, 4

; 803  :   pziinit->number_entry = number_entry_CD;
; 804  : 
; 805  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  0044d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00450	8b ce		 mov	 ecx, esi
  00452	89 86 e8 00 01
	00		 mov	 DWORD PTR [esi+65768], eax
  00458	8b 45 f4	 mov	 eax, DWORD PTR _byte_before_the_zipfile$1$[ebp]
  0045b	6a 00		 push	 0
  0045d	ff 75 fc	 push	 DWORD PTR tv620[ebp]
  00460	89 86 ec 00 01
	00		 mov	 DWORD PTR [esi+65772], eax
  00466	8b 45 d4	 mov	 eax, DWORD PTR _number_entry_CD$1$[ebp]
  00469	ff 75 cc	 push	 DWORD PTR tv619[ebp]
  0046c	89 86 f8 00 01
	00		 mov	 DWORD PTR [esi+65784], eax
  00472	8b 45 d0	 mov	 eax, DWORD PTR _number_entry_CD$2$[ebp]
  00475	89 86 fc 00 01
	00		 mov	 DWORD PTR [esi+65788], eax
  0047b	e8 00 00 00 00	 call	 _call_zseek64
  00480	83 c4 0c	 add	 esp, 12			; 0000000cH
  00483	85 c0		 test	 eax, eax
  00485	b8 ff ff ff ff	 mov	 eax, -1
  0048a	0f 45 f8	 cmovne	 edi, eax

; 806  :     err=ZIP_ERRNO;
; 807  : 
; 808  :   return err;

  0048d	8b c7		 mov	 eax, edi

; 809  : }

  0048f	5f		 pop	 edi
  00490	5e		 pop	 esi
  00491	5b		 pop	 ebx
  00492	8b e5		 mov	 esp, ebp
  00494	5d		 pop	 ebp
  00495	c3		 ret	 0
$LN51@LoadCentra:

; 761  :   {
; 762  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  00496	ff 76 2c	 push	 DWORD PTR [esi+44]
  00499	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0049c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0049f	ff d1		 call	 ecx
  004a1	83 c4 08	 add	 esp, 8

; 763  :     return ZIP_ERRNO;

  004a4	83 c8 ff	 or	 eax, -1

; 809  : }

  004a7	5f		 pop	 edi
  004a8	5e		 pop	 esi
  004a9	5b		 pop	 ebx
  004aa	8b e5		 mov	 esp, ebp
  004ac	5d		 pop	 ebp
  004ad	c3		 ret	 0
_LoadCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen3@16
_TEXT	SEGMENT
_ziinit$ = -65800					; size = 65800
_globalcomment$ = 8					; size = 4
_pzlib_filefunc64_32_def$ = 12				; size = 4
_zipOpen3@16 PROC					; COMDAT
; _pathname$ = ecx
; _append$ = edx

; 816  : extern zipFile ZEXPORT zipOpen3(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	b8 0c 01 01 00	 mov	 eax, 65804		; 0001010cH
  0000b	e8 00 00 00 00	 call	 __chkstk

; 817  :     zip64_internal ziinit;
; 818  :     zip64_internal* zi;
; 819  :     int err=ZIP_OK;
; 820  : 
; 821  :     ziinit.z_filefunc.zseek32_file = NULL;
; 822  :     ziinit.z_filefunc.ztell32_file = NULL;
; 823  :     if (pzlib_filefunc64_32_def==NULL)

  00010	8b 45 0c	 mov	 eax, DWORD PTR _pzlib_filefunc64_32_def$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	33 db		 xor	 ebx, ebx
  00017	89 5c 24 34	 mov	 DWORD PTR _ziinit$[esp+65852], ebx
  0001b	89 5c 24 30	 mov	 DWORD PTR _ziinit$[esp+65848], ebx
  0001f	57		 push	 edi
  00020	8b fa		 mov	 edi, edx
  00022	8b d1		 mov	 edx, ecx
  00024	85 c0		 test	 eax, eax
  00026	75 0b		 jne	 SHORT $LN2@zipOpen3

; 824  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  00028	8d 4c 24 10	 lea	 ecx, DWORD PTR _ziinit$[esp+65816]
  0002c	e8 00 00 00 00	 call	 _fill_fopen64_filefunc
  00031	eb 23		 jmp	 SHORT $LN3@zipOpen3
$LN2@zipOpen3:

; 825  :     else
; 826  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  00033	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00036	0f 11 44 24 10	 movups	 XMMWORD PTR _ziinit$[esp+65816], xmm0
  0003b	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0003f	0f 11 44 24 20	 movups	 XMMWORD PTR _ziinit$[esp+65832], xmm0
  00044	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00049	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0004c	66 0f d6 44 24
	30		 movq	 QWORD PTR _ziinit$[esp+65848], xmm0
  00052	89 44 24 38	 mov	 DWORD PTR _ziinit$[esp+65856], eax
$LN3@zipOpen3:

; 827  : 
; 828  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,

  00056	33 c0		 xor	 eax, eax
  00058	8d 4c 24 10	 lea	 ecx, DWORD PTR _ziinit$[esp+65816]
  0005c	85 ff		 test	 edi, edi
  0005e	0f 94 c0	 sete	 al
  00061	8d 04 85 07 00
	00 00		 lea	 eax, DWORD PTR [eax*4+7]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _call_zopen64
  0006e	8b f0		 mov	 esi, eax
  00070	83 c4 04	 add	 esp, 4
  00073	89 74 24 3c	 mov	 DWORD PTR _ziinit$[esp+65860], esi

; 829  :                   pathname,
; 830  :                   (append == APPEND_STATUS_CREATE) ?
; 831  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 832  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));
; 833  : 
; 834  :     if (ziinit.filestream == NULL)

  00077	85 f6		 test	 esi, esi
  00079	74 7d		 je	 SHORT $LN12@zipOpen3

; 835  :         return NULL;
; 836  : 
; 837  :     if (append == APPEND_STATUS_CREATEAFTER)

  0007b	83 ff 01	 cmp	 edi, 1
  0007e	75 14		 jne	 SHORT $LN5@zipOpen3

; 838  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  00080	6a 02		 push	 2
  00082	6a 00		 push	 0
  00084	6a 00		 push	 0
  00086	8b d6		 mov	 edx, esi
  00088	8d 4c 24 1c	 lea	 ecx, DWORD PTR _ziinit$[esp+65828]
  0008c	e8 00 00 00 00	 call	 _call_zseek64
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@zipOpen3:

; 839  : 
; 840  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  00094	8b d6		 mov	 edx, esi
  00096	8d 4c 24 10	 lea	 ecx, DWORD PTR _ziinit$[esp+65816]
  0009a	e8 00 00 00 00	 call	 _call_ztell64
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
  000a2	89 84 24 f8 00
	01 00		 mov	 DWORD PTR _ziinit$[esp+131584], eax

; 841  :     ziinit.in_opened_file_inzip = 0;
; 842  :     ziinit.ci.stream_initialised = 0;
; 843  :     ziinit.number_entry = 0;
; 844  :     ziinit.add_position_when_writing_offset = 0;
; 845  :     init_linkedlist(&(ziinit.central_dir));

  000a9	8d 4c 24 40	 lea	 ecx, DWORD PTR _ziinit$[esp+65864]
  000ad	89 94 24 fc 00
	01 00		 mov	 DWORD PTR _ziinit$[esp+131588], edx
  000b4	89 5c 24 48	 mov	 DWORD PTR _ziinit$[esp+65872], ebx
  000b8	89 9c 24 88 00
	00 00		 mov	 DWORD PTR _ziinit$[esp+65936], ebx
  000bf	66 0f 13 84 24
	08 01 01 00	 movlpd	 QWORD PTR _ziinit$[esp+131600], xmm0
  000c8	66 0f 13 84 24
	00 01 01 00	 movlpd	 QWORD PTR _ziinit$[esp+131592], xmm0
  000d1	e8 00 00 00 00	 call	 _init_linkedlist

; 846  : 
; 847  : 
; 848  : 
; 849  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  000d6	68 08 01 01 00	 push	 65800			; 00010108H
  000db	e8 00 00 00 00	 call	 _malloc
  000e0	8b f0		 mov	 esi, eax
  000e2	83 c4 04	 add	 esp, 4

; 850  :     if (zi==NULL)

  000e5	85 f6		 test	 esi, esi
  000e7	75 1a		 jne	 SHORT $LN6@zipOpen3

; 851  :     {
; 852  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  000e9	ff 74 24 3c	 push	 DWORD PTR _ziinit$[esp+65860]
  000ed	ff 74 24 30	 push	 DWORD PTR _ziinit$[esp+65848]
  000f1	ff 54 24 2c	 call	 DWORD PTR _ziinit$[esp+65844]
  000f5	83 c4 08	 add	 esp, 8
$LN12@zipOpen3:

; 883  :     }
; 884  : }

  000f8	33 c0		 xor	 eax, eax
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 08 00	 ret	 8
$LN6@zipOpen3:

; 853  :         return NULL;
; 854  :     }
; 855  : 
; 856  :     /* now we add file in a zipfile */
; 857  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 858  :     ziinit.globalcomment = NULL;

  00103	33 c0		 xor	 eax, eax
  00105	89 84 24 10 01
	01 00		 mov	 DWORD PTR _ziinit$[esp+131608], eax

; 859  :     if (append == APPEND_STATUS_ADDINZIP)

  0010c	83 ff 02	 cmp	 edi, 2
  0010f	75 12		 jne	 SHORT $LN7@zipOpen3

; 860  :     {
; 861  :       // Read and Cache Central Directory Records
; 862  :       err = LoadCentralDirectoryRecord(&ziinit);

  00111	8d 4c 24 10	 lea	 ecx, DWORD PTR _ziinit$[esp+65816]
  00115	e8 00 00 00 00	 call	 _LoadCentralDirectoryRecord
  0011a	8b d8		 mov	 ebx, eax
  0011c	8b 84 24 10 01
	01 00		 mov	 eax, DWORD PTR _ziinit$[esp+131608]
$LN7@zipOpen3:

; 863  :     }
; 864  : 
; 865  :     if (globalcomment)

  00123	8b 4d 08	 mov	 ecx, DWORD PTR _globalcomment$[ebp]
  00126	85 c9		 test	 ecx, ecx
  00128	74 02		 je	 SHORT $LN8@zipOpen3

; 866  :     {
; 867  :       *globalcomment = ziinit.globalcomment;

  0012a	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@zipOpen3:

; 868  :     }
; 869  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 870  : 
; 871  :     if (err != ZIP_OK)

  0012c	85 db		 test	 ebx, ebx
  0012e	74 1d		 je	 SHORT $LN9@zipOpen3

; 872  :     {
; 873  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 874  :         free(ziinit.globalcomment);

  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 _free
  00136	83 c4 04	 add	 esp, 4

; 875  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 876  :         free(zi);

  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 _free
  0013f	83 c4 04	 add	 esp, 4

; 877  :         return NULL;

  00142	33 c0		 xor	 eax, eax

; 883  :     }
; 884  : }

  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 08 00	 ret	 8
$LN9@zipOpen3:

; 878  :     }
; 879  :     else
; 880  :     {
; 881  :         *zi = ziinit;

  0014d	68 08 01 01 00	 push	 65800			; 00010108H
  00152	8d 44 24 14	 lea	 eax, DWORD PTR _ziinit$[esp+65820]
  00156	50		 push	 eax
  00157	56		 push	 esi
  00158	e8 00 00 00 00	 call	 _memcpy
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 882  :         return (zipFile)zi;

  00160	8b c6		 mov	 eax, esi

; 883  :     }
; 884  : }

  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx
  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c2 08 00	 ret	 8
_zipOpen3@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen2@16
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc32_def$ = 20				; size = 4
_zipOpen2@16 PROC					; COMDAT

; 886  : extern zipFile ZEXPORT zipOpen2(const char *pathname, int append, zipcharpc* globalcomment, zlib_filefunc_def* pzlib_filefunc32_def) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 887  :     if (pzlib_filefunc32_def != NULL)

  00006	8b 55 14	 mov	 edx, DWORD PTR _pzlib_filefunc32_def$[ebp]
  00009	83 ec 30	 sub	 esp, 48			; 00000030H
  0000c	85 d2		 test	 edx, edx
  0000e	74 20		 je	 SHORT $LN2@zipOpen2

; 888  :     {
; 889  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 890  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00010	8d 4c 24 04	 lea	 ecx, DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+48]
  00014	e8 00 00 00 00	 call	 _fill_zlib_filefunc64_32_def_from_filefunc32

; 891  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);
; 892  :     }
; 893  :     else
; 894  :         return zipOpen3(pathname, append, globalcomment, NULL);
; 895  : }

  00019	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  0001c	8b c1		 mov	 eax, ecx
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00021	50		 push	 eax
  00022	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  00025	e8 00 00 00 00	 call	 _zipOpen3@16
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
$LN2@zipOpen2:
  00030	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00036	6a 00		 push	 0
  00038	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  0003b	e8 00 00 00 00	 call	 _zipOpen3@16
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 10 00	 ret	 16			; 00000010H
_zipOpen2@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen2_64@16
_TEXT	SEGMENT
_zlib_filefunc64_32_def_fill$1 = -44			; size = 44
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_globalcomment$ = 16					; size = 4
_pzlib_filefunc_def$ = 20				; size = 4
_zipOpen2_64@16 PROC					; COMDAT

; 897  : extern zipFile ZEXPORT zipOpen2_64(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 898  :     if (pzlib_filefunc_def != NULL)

  00006	8b 45 14	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00009	83 ec 30	 sub	 esp, 48			; 00000030H
  0000c	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	74 34		 je	 SHORT $LN2@zipOpen2_6

; 899  :     {
; 900  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 901  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  00016	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 902  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00019	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+84], 0

; 903  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00021	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+88], 0
  00029	0f 11 44 24 04	 movups	 XMMWORD PTR _zlib_filefunc64_32_def_fill$1[esp+48], xmm0
  0002e	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]

; 904  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00032	8d 44 24 04	 lea	 eax, DWORD PTR _zlib_filefunc64_32_def_fill$1[esp+48]
  00036	50		 push	 eax

; 908  : }

  00037	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  0003a	0f 11 44 24 1c	 movups	 XMMWORD PTR _zlib_filefunc64_32_def_fill$1[esp+72], xmm0
  0003f	e8 00 00 00 00	 call	 _zipOpen3@16
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 10 00	 ret	 16			; 00000010H
$LN2@zipOpen2_6:

; 905  :     }
; 906  :     else
; 907  :         return zipOpen3(pathname, append, globalcomment, NULL);

  0004a	6a 00		 push	 0

; 908  : }

  0004c	ff 75 10	 push	 DWORD PTR _globalcomment$[ebp]
  0004f	e8 00 00 00 00	 call	 _zipOpen3@16
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 10 00	 ret	 16			; 00000010H
_zipOpen2_64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen@8 PROC						; COMDAT

; 912  : extern zipFile ZEXPORT zipOpen(const char* pathname, int append) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 913  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	e8 00 00 00 00	 call	 _zipOpen3@16

; 914  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
_zipOpen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpen64@8
_TEXT	SEGMENT
_pathname$ = 8						; size = 4
_append$ = 12						; size = 4
_zipOpen64@8 PROC					; COMDAT

; 916  : extern zipFile ZEXPORT zipOpen64(const void* pathname, int append) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 917  :     return zipOpen3(pathname,append,NULL,NULL);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _append$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pathname$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	e8 00 00 00 00	 call	 _zipOpen3@16

; 918  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
_zipOpen64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _Write_LocalFileHeader
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -16						; size = 8
_filename$1$ = -4					; size = 4
_size_extrafield_local$ = 8				; size = 4
_extrafield_local$ = 12					; size = 4
_Write_LocalFileHeader PROC				; COMDAT
; _zi$ = ecx
; _filename$ = edx

; 920  : local int Write_LocalFileHeader(zip64_internal* zi, const char* filename, uInt size_extrafield_local, const void* extrafield_local) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b c2		 mov	 eax, edx
  0000a	8b f1		 mov	 esi, ecx
  0000c	57		 push	 edi

; 921  :   /* write the local header */
; 922  :   int err;
; 923  :   uInt size_filename = (uInt)strlen(filename);

  0000d	8b f8		 mov	 edi, eax
  0000f	89 45 fc	 mov	 DWORD PTR _filename$1$[ebp], eax
  00012	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL27@Write_Loca:
  00015	8a 07		 mov	 al, BYTE PTR [edi]
  00017	47		 inc	 edi
  00018	84 c0		 test	 al, al
  0001a	75 f9		 jne	 SHORT $LL27@Write_Loca

; 924  :   uInt size_extrafield = size_extrafield_local;
; 925  : 
; 926  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  0001c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0001f	2b f9		 sub	 edi, ecx
  00021	6a 04		 push	 4
  00023	6a 00		 push	 0
  00025	68 50 4b 03 04	 push	 67324752		; 04034b50H
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 _zip64local_putValue
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 927  : 
; 928  :   if (err==ZIP_OK)

  00034	85 c0		 test	 eax, eax
  00036	0f 85 fc 01 00
	00		 jne	 $LN22@Write_Loca

; 929  :   {
; 930  :     if(zi->ci.zip64)

  0003c	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax

; 931  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */

  00042	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH
  00047	75 05		 jne	 SHORT $LN4@Write_Loca

; 932  :     else
; 933  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  00049	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
$LN4@Write_Loca:

; 934  :   }
; 935  : 
; 936  :   if (err==ZIP_OK)

  0004e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00051	8b ce		 mov	 ecx, esi
  00053	6a 02		 push	 2
  00055	6a 00		 push	 0
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _zip64local_putValue
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	85 c0		 test	 eax, eax
  00062	0f 85 d0 01 00
	00		 jne	 $LN22@Write_Loca

; 937  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  00068	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0006b	8b ce		 mov	 ecx, esi
  0006d	6a 02		 push	 2
  0006f	50		 push	 eax
  00070	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  00076	e8 00 00 00 00	 call	 _zip64local_putValue
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 938  : 
; 939  :   if (err==ZIP_OK)

  0007e	85 c0		 test	 eax, eax
  00080	0f 85 b2 01 00
	00		 jne	 $LN22@Write_Loca

; 940  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  00086	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00089	8b ce		 mov	 ecx, esi
  0008b	6a 02		 push	 2
  0008d	50		 push	 eax
  0008e	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  00094	e8 00 00 00 00	 call	 _zip64local_putValue
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH

; 941  : 
; 942  :   if (err==ZIP_OK)

  0009c	85 c0		 test	 eax, eax
  0009e	0f 85 94 01 00
	00		 jne	 $LN22@Write_Loca

; 943  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  000a4	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000a7	8b ce		 mov	 ecx, esi
  000a9	6a 04		 push	 4
  000ab	50		 push	 eax
  000ac	ff b6 a4 00 01
	00		 push	 DWORD PTR [esi+65700]
  000b2	e8 00 00 00 00	 call	 _zip64local_putValue
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 944  : 
; 945  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 946  :   if (err==ZIP_OK)

  000ba	85 c0		 test	 eax, eax
  000bc	0f 85 76 01 00
	00		 jne	 $LN22@Write_Loca

; 947  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  000c2	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c5	8b ce		 mov	 ecx, esi
  000c7	6a 04		 push	 4
  000c9	50		 push	 eax
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _zip64local_putValue
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 948  :   if (err==ZIP_OK)

  000d3	85 c0		 test	 eax, eax
  000d5	0f 85 5d 01 00
	00		 jne	 $LN22@Write_Loca

; 949  :   {
; 950  :     if(zi->ci.zip64)

  000db	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax
  000e1	74 07		 je	 SHORT $LN10@Write_Loca

; 951  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */

  000e3	83 c8 ff	 or	 eax, -1
  000e6	33 c9		 xor	 ecx, ecx
  000e8	eb 0e		 jmp	 SHORT $LN11@Write_Loca
$LN10@Write_Loca:
  000ea	0f 57 c0	 xorps	 xmm0, xmm0

; 952  :     else
; 953  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  000ed	66 0f 13 45 f0	 movlpd	 QWORD PTR $T2[ebp], xmm0
  000f2	8b 4d f4	 mov	 ecx, DWORD PTR $T2[ebp+4]
  000f5	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
$LN11@Write_Loca:

; 954  :   }
; 955  :   if (err==ZIP_OK)

  000f8	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000fb	6a 04		 push	 4
  000fd	51		 push	 ecx
  000fe	50		 push	 eax
  000ff	8b ce		 mov	 ecx, esi
  00101	e8 00 00 00 00	 call	 _zip64local_putValue
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
  00109	85 c0		 test	 eax, eax
  0010b	0f 85 27 01 00
	00		 jne	 $LN22@Write_Loca

; 956  :   {
; 957  :     if(zi->ci.zip64)

  00111	39 86 b0 00 01
	00		 cmp	 DWORD PTR [esi+65712], eax
  00117	74 07		 je	 SHORT $LN13@Write_Loca

; 958  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */

  00119	83 c8 ff	 or	 eax, -1
  0011c	33 c9		 xor	 ecx, ecx
  0011e	eb 0e		 jmp	 SHORT $LN14@Write_Loca
$LN13@Write_Loca:
  00120	0f 57 c0	 xorps	 xmm0, xmm0

; 959  :     else
; 960  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  00123	66 0f 13 45 f0	 movlpd	 QWORD PTR $T1[ebp], xmm0
  00128	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp+4]
  0012b	8b 45 f0	 mov	 eax, DWORD PTR $T1[ebp]
$LN14@Write_Loca:

; 961  :   }
; 962  : 
; 963  :   if (err==ZIP_OK)

  0012e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00131	6a 04		 push	 4
  00133	51		 push	 ecx
  00134	50		 push	 eax
  00135	8b ce		 mov	 ecx, esi
  00137	e8 00 00 00 00	 call	 _zip64local_putValue
  0013c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013f	85 c0		 test	 eax, eax
  00141	0f 85 f1 00 00
	00		 jne	 $LN22@Write_Loca

; 964  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  00147	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0014a	8b ce		 mov	 ecx, esi
  0014c	6a 02		 push	 2
  0014e	50		 push	 eax
  0014f	57		 push	 edi
  00150	e8 00 00 00 00	 call	 _zip64local_putValue
  00155	83 c4 0c	 add	 esp, 12			; 0000000cH

; 965  : 
; 966  :   if(zi->ci.zip64)
; 967  :   {
; 968  :     size_extrafield += 20;
; 969  :   }
; 970  : 
; 971  :   if (err==ZIP_OK)

  00158	85 c0		 test	 eax, eax
  0015a	0f 85 d8 00 00
	00		 jne	 $LN22@Write_Loca
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _size_extrafield_local$[ebp]
  00163	83 be b0 00 01
	00 00		 cmp	 DWORD PTR [esi+65712], 0

; 972  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  0016a	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0016d	6a 02		 push	 2
  0016f	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00172	0f 44 c1	 cmove	 eax, ecx
  00175	8b ce		 mov	 ecx, esi
  00177	6a 00		 push	 0
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 _zip64local_putValue
  0017f	8b d8		 mov	 ebx, eax
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH

; 973  : 
; 974  :   if ((err==ZIP_OK) && (size_filename > 0))

  00184	85 db		 test	 ebx, ebx
  00186	0f 85 aa 00 00
	00		 jne	 $LN29@Write_Loca
  0018c	85 ff		 test	 edi, edi
  0018e	74 20		 je	 SHORT $LN24@Write_Loca

; 975  :   {
; 976  :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  00190	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00193	57		 push	 edi
  00194	ff 75 fc	 push	 DWORD PTR _filename$1$[ebp]
  00197	ff 76 2c	 push	 DWORD PTR [esi+44]
  0019a	ff 76 1c	 push	 DWORD PTR [esi+28]
  0019d	ff d0		 call	 eax
  0019f	83 c4 10	 add	 esp, 16			; 00000010H
  001a2	3b c7		 cmp	 eax, edi
  001a4	74 0a		 je	 SHORT $LN24@Write_Loca
$LN32@Write_Loca:

; 1003 :   }
; 1004 : 
; 1005 :   return err;
; 1006 : }

  001a6	83 c8 ff	 or	 eax, -1
  001a9	5f		 pop	 edi
  001aa	5e		 pop	 esi
  001ab	5b		 pop	 ebx
  001ac	8b e5		 mov	 esp, ebp
  001ae	5d		 pop	 ebp
  001af	c3		 ret	 0
$LN24@Write_Loca:

; 977  :       err = ZIP_ERRNO;
; 978  :   }
; 979  : 
; 980  :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  001b0	8b 7d 08	 mov	 edi, DWORD PTR _size_extrafield_local$[ebp]
  001b3	85 ff		 test	 edi, edi
  001b5	74 16		 je	 SHORT $LN25@Write_Loca

; 981  :   {
; 982  :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  001b7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ba	57		 push	 edi
  001bb	ff 75 0c	 push	 DWORD PTR _extrafield_local$[ebp]
  001be	ff 76 2c	 push	 DWORD PTR [esi+44]
  001c1	ff 76 1c	 push	 DWORD PTR [esi+28]
  001c4	ff d0		 call	 eax
  001c6	83 c4 10	 add	 esp, 16			; 00000010H
  001c9	3b c7		 cmp	 eax, edi
  001cb	75 d9		 jne	 SHORT $LN32@Write_Loca
$LN25@Write_Loca:

; 983  :       err = ZIP_ERRNO;
; 984  :   }
; 985  : 
; 986  : 
; 987  :   if ((err==ZIP_OK) && (zi->ci.zip64))

  001cd	83 be b0 00 01
	00 00		 cmp	 DWORD PTR [esi+65712], 0
  001d4	74 60		 je	 SHORT $LN29@Write_Loca

; 988  :   {
; 989  :       // write the Zip64 extended info
; 990  :       short HeaderID = 1;
; 991  :       short DataSize = 16;
; 992  :       ZPOS64_T CompressedSize = 0;
; 993  :       ZPOS64_T UncompressedSize = 0;
; 994  : 
; 995  :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 996  :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  001d6	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001d9	8b ce		 mov	 ecx, esi
  001db	e8 00 00 00 00	 call	 _call_ztell64

; 997  : 
; 998  :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)HeaderID,2);

  001e0	6a 02		 push	 2
  001e2	89 96 bc 00 01
	00		 mov	 DWORD PTR [esi+65724], edx
  001e8	8b ce		 mov	 ecx, esi
  001ea	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001ed	6a 00		 push	 0
  001ef	6a 01		 push	 1
  001f1	89 86 b8 00 01
	00		 mov	 DWORD PTR [esi+65720], eax
  001f7	e8 00 00 00 00	 call	 _zip64local_putValue

; 999  :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)DataSize,2);

  001fc	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  001ff	8b ce		 mov	 ecx, esi
  00201	6a 02		 push	 2
  00203	6a 00		 push	 0
  00205	6a 10		 push	 16			; 00000010H
  00207	e8 00 00 00 00	 call	 _zip64local_putValue

; 1000 : 
; 1001 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  0020c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0020f	8b ce		 mov	 ecx, esi
  00211	6a 08		 push	 8
  00213	6a 00		 push	 0
  00215	6a 00		 push	 0
  00217	e8 00 00 00 00	 call	 _zip64local_putValue

; 1002 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  0021c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0021f	8b ce		 mov	 ecx, esi
  00221	6a 08		 push	 8
  00223	6a 00		 push	 0
  00225	6a 00		 push	 0
  00227	e8 00 00 00 00	 call	 _zip64local_putValue
  0022c	83 c4 30	 add	 esp, 48			; 00000030H

; 1003 :   }
; 1004 : 
; 1005 :   return err;
; 1006 : }

  0022f	5f		 pop	 edi
  00230	5e		 pop	 esi
  00231	5b		 pop	 ebx
  00232	8b e5		 mov	 esp, ebp
  00234	5d		 pop	 ebp
  00235	c3		 ret	 0
$LN29@Write_Loca:
  00236	8b c3		 mov	 eax, ebx
$LN22@Write_Loca:
  00238	5f		 pop	 edi
  00239	5e		 pop	 esi
  0023a	5b		 pop	 ebx
  0023b	8b e5		 mov	 esp, ebp
  0023d	5d		 pop	 ebp
  0023e	c3		 ret	 0
_Write_LocalFileHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip4_64@76
_TEXT	SEGMENT
_size_comment$1$ = -28					; size = 4
tv1144 = -24						; size = 4
tv1163 = -20						; size = 4
$T1 = -16						; size = 8
_bufHead$2 = -16					; size = 12
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_versionMadeBy$ = 72					; size = 4
_flagBase$ = 76						; size = 4
_zip64$ = 80						; size = 4
_zipOpenNewFileInZip4_64@76 PROC			; COMDAT

; 1022 :                                            uLong versionMadeBy, uLong flagBase, int zip64) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR _filename$[ebp]

; 1023 :     zip64_internal* zi;
; 1024 :     uInt size_filename;
; 1025 :     uInt size_comment;
; 1026 :     uInt i;
; 1027 :     int err = ZIP_OK;
; 1028 : 
; 1029 : #    ifdef NOCRYPT
; 1030 :     (crcForCrypting);
; 1031 :     if (password != NULL)
; 1032 :         return ZIP_PARAMERROR;
; 1033 : #    endif
; 1034 : 
; 1035 :     if (file == NULL)

  00012	85 f6		 test	 esi, esi
  00014	0f 84 20 05 00
	00		 je	 $LN59@zipOpenNew

; 1036 :         return ZIP_PARAMERROR;
; 1037 : 
; 1038 : #ifdef HAVE_BZIP2
; 1039 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1040 :       return ZIP_PARAMERROR;
; 1041 : #else
; 1042 :     if ((method!=0) && (method!=Z_DEFLATED))

  0001a	8b 45 28	 mov	 eax, DWORD PTR _method$[ebp]
  0001d	85 c0		 test	 eax, eax
  0001f	74 09		 je	 SHORT $LN12@zipOpenNew
  00021	83 f8 08	 cmp	 eax, 8
  00024	0f 85 10 05 00
	00		 jne	 $LN59@zipOpenNew
$LN12@zipOpenNew:

; 1044 : #endif
; 1045 : 
; 1046 :     zi = (zip64_internal*)file;
; 1047 : 
; 1048 :     if (zi->in_opened_file_inzip == 1)

  0002a	83 7e 38 01	 cmp	 DWORD PTR [esi+56], 1
  0002e	75 0e		 jne	 SHORT $LN14@zipOpenNew

; 1049 :     {
; 1050 :         err = zipCloseFileInZip (file);

  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _zipCloseFileInZip@4

; 1051 :         if (err != ZIP_OK)

  00036	85 c0		 test	 eax, eax
  00038	0f 85 01 05 00
	00		 jne	 $LN1@zipOpenNew
$LN14@zipOpenNew:

; 1052 :             return err;
; 1053 :     }
; 1054 : 
; 1055 :     if (filename==NULL)
; 1056 :         filename="-";
; 1057 : 
; 1058 :     if (comment==NULL)

  0003e	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  00041	85 ff		 test	 edi, edi
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_01JOAMLHOP@?9@
  00048	0f 45 cf	 cmovne	 ecx, edi
  0004b	89 4c 24 14	 mov	 DWORD PTR tv1163[esp+40], ecx
  0004f	85 c0		 test	 eax, eax
  00051	75 04		 jne	 SHORT $LN16@zipOpenNew

; 1059 :         size_comment = 0;

  00053	33 db		 xor	 ebx, ebx
  00055	eb 12		 jmp	 SHORT $LN64@zipOpenNew
$LN16@zipOpenNew:

; 1060 :     else
; 1061 :         size_comment = (uInt)strlen(comment);

  00057	8b d8		 mov	 ebx, eax
  00059	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  0005c	0f 1f 40 00	 npad	 4
$LL61@zipOpenNew:
  00060	8a 03		 mov	 al, BYTE PTR [ebx]
  00062	43		 inc	 ebx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL61@zipOpenNew
  00067	2b da		 sub	 ebx, edx
$LN64@zipOpenNew:

; 1062 : 
; 1063 :     size_filename = (uInt)strlen(filename);

  00069	8b f9		 mov	 edi, ecx
  0006b	89 5c 24 0c	 mov	 DWORD PTR _size_comment$1$[esp+40], ebx
  0006f	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL62@zipOpenNew:
  00072	8a 07		 mov	 al, BYTE PTR [edi]
  00074	47		 inc	 edi
  00075	84 c0		 test	 al, al
  00077	75 f9		 jne	 SHORT $LL62@zipOpenNew

; 1064 : 
; 1065 :     if (zipfi == NULL)

  00079	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  0007c	2b f9		 sub	 edi, ecx
  0007e	85 c0		 test	 eax, eax
  00080	75 04		 jne	 SHORT $LN18@zipOpenNew

; 1066 :         zi->ci.dosDate = 0;

  00082	33 c9		 xor	 ecx, ecx
  00084	eb 10		 jmp	 SHORT $LN21@zipOpenNew
$LN18@zipOpenNew:

; 1067 :     else
; 1068 :     {
; 1069 :         if (zipfi->dosDate != 0)

  00086	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00089	85 c9		 test	 ecx, ecx
  0008b	75 09		 jne	 SHORT $LN21@zipOpenNew

; 1070 :             zi->ci.dosDate = zipfi->dosDate;
; 1071 :         else
; 1072 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  0008d	8b c8		 mov	 ecx, eax
  0008f	e8 00 00 00 00	 call	 _zip64local_TmzDateToDosDate
  00094	8b c8		 mov	 ecx, eax
$LN21@zipOpenNew:

; 1073 :     }
; 1074 : 
; 1075 :     zi->ci.flag = flagBase;

  00096	8b 45 4c	 mov	 eax, DWORD PTR _flagBase$[ebp]
  00099	89 8e a4 00 01
	00		 mov	 DWORD PTR [esi+65700], ecx

; 1076 :     if ((level==8) || (level==9))

  0009f	8b 4d 2c	 mov	 ecx, DWORD PTR _level$[ebp]
  000a2	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  000a8	83 f9 08	 cmp	 ecx, 8
  000ab	74 05		 je	 SHORT $LN23@zipOpenNew
  000ad	83 f9 09	 cmp	 ecx, 9
  000b0	75 09		 jne	 SHORT $LN22@zipOpenNew
$LN23@zipOpenNew:

; 1077 :       zi->ci.flag |= 2;

  000b2	83 c8 02	 or	 eax, 2
  000b5	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN22@zipOpenNew:

; 1078 :     if (level==2)

  000bb	83 f9 02	 cmp	 ecx, 2
  000be	75 05		 jne	 SHORT $LN24@zipOpenNew

; 1079 :       zi->ci.flag |= 4;

  000c0	83 c8 04	 or	 eax, 4
  000c3	eb 08		 jmp	 SHORT $LN65@zipOpenNew
$LN24@zipOpenNew:

; 1080 :     if (level==1)

  000c5	83 f9 01	 cmp	 ecx, 1
  000c8	75 09		 jne	 SHORT $LN25@zipOpenNew

; 1081 :       zi->ci.flag |= 6;

  000ca	83 c8 06	 or	 eax, 6
$LN65@zipOpenNew:

; 1082 :     if (password != NULL)

  000cd	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN25@zipOpenNew:
  000d3	83 7d 40 00	 cmp	 DWORD PTR _password$[ebp], 0
  000d7	74 09		 je	 SHORT $LN26@zipOpenNew

; 1083 :       zi->ci.flag |= 1;

  000d9	83 c8 01	 or	 eax, 1
  000dc	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
$LN26@zipOpenNew:

; 1084 : 
; 1085 :     zi->ci.crc32 = 0;
; 1086 :     zi->ci.method = method;

  000e2	8b 45 28	 mov	 eax, DWORD PTR _method$[ebp]

; 1087 :     zi->ci.encrypt = 0;
; 1088 :     zi->ci.stream_initialised = 0;
; 1089 :     zi->ci.pos_in_buffered_data = 0;
; 1090 :     zi->ci.raw = raw;
; 1091 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  000e5	8b ce		 mov	 ecx, esi
  000e7	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000ea	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
  000f0	8b 45 30	 mov	 eax, DWORD PTR _raw$[ebp]
  000f3	c7 86 a8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65704], 0
  000fd	c7 86 ac 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65708], 0
  00107	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  0010e	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  00115	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
  0011b	e8 00 00 00 00	 call	 _call_ztell64

; 1092 : 
; 1093 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  00120	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  00123	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  00129	83 c1 2e	 add	 ecx, 46			; 0000002eH
  0012c	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0012f	89 96 84 00 00
	00		 mov	 DWORD PTR [esi+132], edx
  00135	03 c1		 add	 eax, ecx

; 1094 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  00137	c7 86 94 00 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+148], 32	; 00000020H
  00141	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 1095 : 
; 1096 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  00147	83 c0 20	 add	 eax, 32			; 00000020H
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 _malloc
  00150	83 c4 04	 add	 esp, 4
  00153	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  00159	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]

; 1097 : 
; 1098 :     zi->ci.size_centralExtra = size_extrafield_global;
; 1099 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  0015f	ba 04 00 00 00	 mov	 edx, 4
  00164	89 4c 24 10	 mov	 DWORD PTR tv1144[esp+40], ecx
  00168	8b 4d 20	 mov	 ecx, DWORD PTR _size_extrafield_global$[ebp]
  0016b	89 8e 8c 00 00
	00		 mov	 DWORD PTR [esi+140], ecx
  00171	8b c8		 mov	 ecx, eax
  00173	6a 00		 push	 0
  00175	68 50 4b 01 02	 push	 33639248		; 02014b50H
  0017a	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1100 :     /* version info */
; 1101 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  0017f	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00185	ba 02 00 00 00	 mov	 edx, 2
  0018a	6a 00		 push	 0
  0018c	ff 75 48	 push	 DWORD PTR _versionMadeBy$[ebp]
  0018f	83 c1 04	 add	 ecx, 4
  00192	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1102 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  00197	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0019d	ba 02 00 00 00	 mov	 edx, 2
  001a2	6a 00		 push	 0
  001a4	6a 14		 push	 20			; 00000014H
  001a6	83 c1 06	 add	 ecx, 6
  001a9	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1103 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  001ae	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  001b4	ba 02 00 00 00	 mov	 edx, 2
  001b9	6a 00		 push	 0
  001bb	ff b6 98 00 00
	00		 push	 DWORD PTR [esi+152]
  001c1	83 c1 08	 add	 ecx, 8
  001c4	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1104 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  001c9	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  001cf	ba 02 00 00 00	 mov	 edx, 2
  001d4	6a 00		 push	 0
  001d6	ff b6 9c 00 00
	00		 push	 DWORD PTR [esi+156]
  001dc	83 c1 0a	 add	 ecx, 10			; 0000000aH
  001df	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1105 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  001e4	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  001ea	ba 04 00 00 00	 mov	 edx, 4
  001ef	6a 00		 push	 0
  001f1	ff b6 a4 00 01
	00		 push	 DWORD PTR [esi+65700]
  001f7	83 c1 0c	 add	 ecx, 12			; 0000000cH
  001fa	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1106 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  001ff	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00205	ba 04 00 00 00	 mov	 edx, 4
  0020a	6a 00		 push	 0
  0020c	6a 00		 push	 0
  0020e	83 c1 10	 add	 ecx, 16			; 00000010H
  00211	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1107 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  00216	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0021c	ba 04 00 00 00	 mov	 edx, 4
  00221	6a 00		 push	 0
  00223	6a 00		 push	 0
  00225	83 c1 14	 add	 ecx, 20			; 00000014H
  00228	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1108 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  0022d	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00233	83 c4 40	 add	 esp, 64			; 00000040H
  00236	83 c1 18	 add	 ecx, 24			; 00000018H
  00239	ba 04 00 00 00	 mov	 edx, 4
  0023e	6a 00		 push	 0
  00240	6a 00		 push	 0
  00242	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1109 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  00247	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0024d	ba 02 00 00 00	 mov	 edx, 2
  00252	6a 00		 push	 0
  00254	57		 push	 edi
  00255	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00258	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1110 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  0025d	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00263	ba 02 00 00 00	 mov	 edx, 2
  00268	6a 00		 push	 0
  0026a	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  0026d	83 c1 1e	 add	 ecx, 30			; 0000001eH
  00270	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1111 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  00275	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0027b	ba 02 00 00 00	 mov	 edx, 2
  00280	6a 00		 push	 0
  00282	53		 push	 ebx
  00283	83 c1 20	 add	 ecx, 32			; 00000020H
  00286	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1112 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  0028b	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00291	ba 02 00 00 00	 mov	 edx, 2
  00296	6a 00		 push	 0
  00298	6a 00		 push	 0
  0029a	83 c1 22	 add	 ecx, 34			; 00000022H
  0029d	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1113 : 
; 1114 :     if (zipfi==NULL)

  002a2	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  002a8	83 c4 28	 add	 esp, 40			; 00000028H
  002ab	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  002ae	83 c1 24	 add	 ecx, 36			; 00000024H
  002b1	ba 02 00 00 00	 mov	 edx, 2
  002b6	6a 00		 push	 0
  002b8	85 c0		 test	 eax, eax
  002ba	75 1c		 jne	 SHORT $LN27@zipOpenNew

; 1115 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  002bc	50		 push	 eax
  002bd	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  002c2	0f 57 c0	 xorps	 xmm0, xmm0
  002c5	83 c4 08	 add	 esp, 8

; 1118 : 
; 1119 :     if (zipfi==NULL)
; 1120 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  002c8	66 0f 13 44 24
	18		 movlpd	 QWORD PTR $T1[esp+40], xmm0
  002ce	8b 44 24 1c	 mov	 eax, DWORD PTR $T1[esp+44]
  002d2	8b 54 24 18	 mov	 edx, DWORD PTR $T1[esp+40]
  002d6	eb 13		 jmp	 SHORT $LN66@zipOpenNew
$LN27@zipOpenNew:

; 1116 :     else
; 1117 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  002d8	ff 70 1c	 push	 DWORD PTR [eax+28]
  002db	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1121 :     else
; 1122 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  002e0	8b 45 10	 mov	 eax, DWORD PTR _zipfi$[ebp]
  002e3	83 c4 08	 add	 esp, 8
  002e6	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  002e9	33 c0		 xor	 eax, eax
$LN66@zipOpenNew:

; 1123 : 
; 1124 :     if(zi->ci.pos_local_header >= 0xffffffff)

  002eb	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  002f1	8b 09		 mov	 ecx, DWORD PTR [ecx]
  002f3	50		 push	 eax
  002f4	52		 push	 edx
  002f5	83 c1 26	 add	 ecx, 38			; 00000026H
  002f8	ba 04 00 00 00	 mov	 edx, 4
  002fd	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00302	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00308	83 c4 08	 add	 esp, 8
  0030b	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  00312	77 15		 ja	 SHORT $LN63@zipOpenNew
  00314	83 f8 ff	 cmp	 eax, -1
  00317	73 10		 jae	 SHORT $LN63@zipOpenNew

; 1126 :     else
; 1127 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writing_offset,4);

  00319	33 c9		 xor	 ecx, ecx
  0031b	2b 86 f0 00 01
	00		 sub	 eax, DWORD PTR [esi+65776]
  00321	1b 8e f4 00 01
	00		 sbb	 ecx, DWORD PTR [esi+65780]
  00327	eb 05		 jmp	 SHORT $LN32@zipOpenNew
$LN63@zipOpenNew:

; 1125 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);

  00329	83 c8 ff	 or	 eax, -1
  0032c	33 c9		 xor	 ecx, ecx
$LN32@zipOpenNew:

; 1128 : 
; 1129 :     for (i=0;i<size_filename;i++)

  0032e	51		 push	 ecx
  0032f	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00335	ba 04 00 00 00	 mov	 edx, 4
  0033a	50		 push	 eax
  0033b	83 c1 2a	 add	 ecx, 42			; 0000002aH
  0033e	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00343	83 c4 08	 add	 esp, 8
  00346	33 d2		 xor	 edx, edx
  00348	85 ff		 test	 edi, edi
  0034a	74 1e		 je	 SHORT $LN3@zipOpenNew
  0034c	0f 1f 40 00	 npad	 4
$LL4@zipOpenNew:

; 1130 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  00350	8b 44 24 14	 mov	 eax, DWORD PTR tv1163[esp+40]
  00354	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0035a	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  0035d	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  00361	42		 inc	 edx
  00362	3b d7		 cmp	 edx, edi
  00364	72 ea		 jb	 SHORT $LL4@zipOpenNew
  00366	8b 5c 24 0c	 mov	 ebx, DWORD PTR _size_comment$1$[esp+40]
$LN3@zipOpenNew:

; 1131 : 
; 1132 :     for (i=0;i<size_extrafield_global;i++)

  0036a	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  0036d	85 c0		 test	 eax, eax
  0036f	74 24		 je	 SHORT $LN6@zipOpenNew

; 1133 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =

  00371	8b 5c 24 10	 mov	 ebx, DWORD PTR tv1144[esp+40]
  00375	33 f6		 xor	 esi, esi
$LL7@zipOpenNew:
  00377	8b 45 1c	 mov	 eax, DWORD PTR _extrafield_global$[ebp]
  0037a	8d 14 3e	 lea	 edx, DWORD PTR [esi+edi]
  0037d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0037f	8a 04 06	 mov	 al, BYTE PTR [esi+eax]
  00382	46		 inc	 esi
  00383	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  00387	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  0038a	3b f0		 cmp	 esi, eax
  0038c	72 e9		 jb	 SHORT $LL7@zipOpenNew
  0038e	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00391	8b 5c 24 0c	 mov	 ebx, DWORD PTR _size_comment$1$[esp+40]
$LN6@zipOpenNew:

; 1134 :               *(((const char*)extrafield_global)+i);
; 1135 : 
; 1136 :     for (i=0;i<size_comment;i++)

  00395	85 db		 test	 ebx, ebx
  00397	74 27		 je	 SHORT $LN9@zipOpenNew

; 1137 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1138 :               size_extrafield_global+i) = *(comment+i);

  00399	33 f6		 xor	 esi, esi
  0039b	0f 1f 44 00 00	 npad	 5
$LL10@zipOpenNew:
  003a0	8d 14 3e	 lea	 edx, DWORD PTR [esi+edi]
  003a3	03 d0		 add	 edx, eax
  003a5	8b 44 24 10	 mov	 eax, DWORD PTR tv1144[esp+40]
  003a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ab	8b 45 24	 mov	 eax, DWORD PTR _comment$[ebp]
  003ae	8a 04 06	 mov	 al, BYTE PTR [esi+eax]
  003b1	46		 inc	 esi
  003b2	88 44 0a 2e	 mov	 BYTE PTR [edx+ecx+46], al
  003b6	8b 45 20	 mov	 eax, DWORD PTR _size_extrafield_global$[ebp]
  003b9	3b f3		 cmp	 esi, ebx
  003bb	72 e3		 jb	 SHORT $LL10@zipOpenNew
  003bd	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
$LN9@zipOpenNew:

; 1139 :     if (zi->ci.central_header == NULL)

  003c0	83 be 88 00 00
	00 00		 cmp	 DWORD PTR [esi+136], 0
  003c7	75 0e		 jne	 SHORT $LN33@zipOpenNew

; 1140 :         return ZIP_INTERNALERROR;

  003c9	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H

; 1223 : }

  003ce	5f		 pop	 edi
  003cf	5e		 pop	 esi
  003d0	5b		 pop	 ebx
  003d1	8b e5		 mov	 esp, ebp
  003d3	5d		 pop	 ebp
  003d4	c2 4c 00	 ret	 76			; 0000004cH
$LN33@zipOpenNew:

; 1141 : 
; 1142 :     zi->ci.zip64 = zip64;
; 1143 :     zi->ci.totalCompressedData = 0;
; 1144 :     zi->ci.totalUncompressedData = 0;
; 1145 :     zi->ci.pos_zip64extrainfo = 0;
; 1146 : 
; 1147 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  003d7	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  003da	8b 45 50	 mov	 eax, DWORD PTR _zip64$[ebp]
  003dd	8b ce		 mov	 ecx, esi
  003df	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  003e2	8b 54 24 1c	 mov	 edx, DWORD PTR tv1163[esp+48]
  003e6	89 86 b0 00 01
	00		 mov	 DWORD PTR [esi+65712], eax
  003ec	c7 86 c0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65728], 0
  003f6	c7 86 c4 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65732], 0
  00400	c7 86 c8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65736], 0
  0040a	c7 86 cc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65740], 0
  00414	c7 86 b8 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65720], 0
  0041e	c7 86 bc 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65724], 0
  00428	e8 00 00 00 00	 call	 _Write_LocalFileHeader
  0042d	8b d8		 mov	 ebx, eax

; 1148 : 
; 1149 : #ifdef HAVE_BZIP2
; 1150 :     zi->ci.bstream.avail_in = (uInt)0;
; 1151 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1152 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1153 :     zi->ci.bstream.total_in_hi32 = 0;
; 1154 :     zi->ci.bstream.total_in_lo32 = 0;
; 1155 :     zi->ci.bstream.total_out_hi32 = 0;
; 1156 :     zi->ci.bstream.total_out_lo32 = 0;
; 1157 : #endif
; 1158 : 
; 1159 :     zi->ci.stream.avail_in = (uInt)0;

  0042f	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  00436	83 c4 08	 add	 esp, 8

; 1160 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00439	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H

; 1161 :     zi->ci.stream.next_out = zi->ci.buffered_data;
; 1162 :     zi->ci.stream.total_in = 0;

  00440	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00447	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  0044d	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx

; 1163 :     zi->ci.stream.total_out = 0;

  00450	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 1164 :     zi->ci.stream.data_type = Z_BINARY;

  00457	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1165 : 
; 1166 : #ifdef HAVE_BZIP2
; 1167 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1168 : #else
; 1169 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0045e	85 db		 test	 ebx, ebx
  00460	75 57		 jne	 SHORT $LN38@zipOpenNew
  00462	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  00469	75 4e		 jne	 SHORT $LN38@zipOpenNew
  0046b	39 86 a0 00 00
	00		 cmp	 DWORD PTR [esi+160], eax
  00471	75 46		 jne	 SHORT $LN38@zipOpenNew

; 1170 : #endif
; 1171 :     {
; 1172 :         if(zi->ci.method == Z_DEFLATED)
; 1173 :         {
; 1174 :           zi->ci.stream.zalloc = (alloc_func)0;
; 1175 :           zi->ci.stream.zfree = (free_func)0;
; 1176 :           zi->ci.stream.opaque = (voidpf)0;
; 1177 : 
; 1178 :           if (windowBits>0)
; 1179 :               windowBits = -windowBits;
; 1180 : 
; 1181 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  00473	8b 4d 34	 mov	 ecx, DWORD PTR _windowBits$[ebp]
  00476	6a 38		 push	 56			; 00000038H
  00478	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MAILBDAG@1?42?413?41?9motley@
  0047d	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00480	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00483	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00486	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00489	89 46 68	 mov	 DWORD PTR [esi+104], eax
  0048c	8b c1		 mov	 eax, ecx
  0048e	f7 d8		 neg	 eax
  00490	85 c9		 test	 ecx, ecx
  00492	0f 4e c1	 cmovle	 eax, ecx
  00495	50		 push	 eax
  00496	6a 08		 push	 8
  00498	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0049b	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  0049e	50		 push	 eax
  0049f	e8 00 00 00 00	 call	 _deflateInit2_@32
  004a4	8b d8		 mov	 ebx, eax

; 1182 : 
; 1183 :           if (err==Z_OK)

  004a6	85 db		 test	 ebx, ebx
  004a8	75 0f		 jne	 SHORT $LN38@zipOpenNew

; 1184 :               zi->ci.stream_initialised = Z_DEFLATED;

  004aa	c7 46 78 08 00
	00 00		 mov	 DWORD PTR [esi+120], 8
  004b1	89 86 e0 00 01
	00		 mov	 DWORD PTR [esi+65760], eax
  004b7	eb 0e		 jmp	 SHORT $LN57@zipOpenNew
$LN38@zipOpenNew:

; 1185 :         }
; 1186 :         else if(zi->ci.method == Z_BZIP2ED)
; 1187 :         {
; 1188 : #ifdef HAVE_BZIP2
; 1189 :             // Init BZip stuff here
; 1190 :           zi->ci.bstream.bzalloc = 0;
; 1191 :           zi->ci.bstream.bzfree = 0;
; 1192 :           zi->ci.bstream.opaque = (voidpf)0;
; 1193 : 
; 1194 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1195 :           if(err == BZ_OK)
; 1196 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1197 : #endif
; 1198 :         }
; 1199 : 
; 1200 :     }
; 1201 : 
; 1202 : #    ifndef NOCRYPT
; 1203 :     zi->ci.crypt_header_size = 0;

  004b9	c7 86 e0 00 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+65760], 0

; 1204 :     if ((err==Z_OK) && (password != NULL))

  004c3	85 db		 test	 ebx, ebx
  004c5	75 68		 jne	 SHORT $LN42@zipOpenNew
$LN57@zipOpenNew:
  004c7	8b 7d 40	 mov	 edi, DWORD PTR _password$[ebp]
  004ca	85 ff		 test	 edi, edi
  004cc	74 5a		 je	 SHORT $LN56@zipOpenNew

; 1205 :     {
; 1206 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1207 :         unsigned int sizeHead;
; 1208 :         zi->ci.encrypt = 1;

  004ce	c7 86 ac 00 01
	00 01 00 00 00	 mov	 DWORD PTR [esi+65708], 1

; 1209 :         zi->ci.pcrc_32_tab = get_crc_table();

  004d8	e8 00 00 00 00	 call	 _get_crc_table@0

; 1210 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1211 : 
; 1212 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  004dd	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  004e0	89 86 dc 00 01
	00		 mov	 DWORD PTR [esi+65756], eax
  004e6	8d 54 24 1c	 lea	 edx, DWORD PTR _bufHead$2[esp+44]
  004ea	50		 push	 eax
  004eb	8d 86 d0 00 01
	00		 lea	 eax, DWORD PTR [esi+65744]
  004f1	50		 push	 eax
  004f2	51		 push	 ecx
  004f3	8b cf		 mov	 ecx, edi
  004f5	e8 00 00 00 00	 call	 _crypthead

; 1213 :         zi->ci.crypt_header_size = sizeHead;
; 1214 : 
; 1215 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  004fa	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  004fd	8b f8		 mov	 edi, eax
  004ff	57		 push	 edi
  00500	8d 44 24 2c	 lea	 eax, DWORD PTR _bufHead$2[esp+60]
  00504	89 be e0 00 01
	00		 mov	 DWORD PTR [esi+65760], edi
  0050a	50		 push	 eax
  0050b	ff 76 2c	 push	 DWORD PTR [esi+44]
  0050e	ff 76 1c	 push	 DWORD PTR [esi+28]
  00511	ff d1		 call	 ecx
  00513	83 c4 20	 add	 esp, 32			; 00000020H
  00516	3b c7		 cmp	 eax, edi
  00518	74 0e		 je	 SHORT $LN56@zipOpenNew

; 1216 :                 err = ZIP_ERRNO;

  0051a	83 cb ff	 or	 ebx, -1

; 1222 :     return err;

  0051d	8b c3		 mov	 eax, ebx

; 1223 : }

  0051f	5f		 pop	 edi
  00520	5e		 pop	 esi
  00521	5b		 pop	 ebx
  00522	8b e5		 mov	 esp, ebp
  00524	5d		 pop	 ebp
  00525	c2 4c 00	 ret	 76			; 0000004cH
$LN56@zipOpenNew:

; 1217 :     }
; 1218 : #    endif
; 1219 : 
; 1220 :     if (err==Z_OK)
; 1221 :         zi->in_opened_file_inzip = 1;

  00528	c7 46 38 01 00
	00 00		 mov	 DWORD PTR [esi+56], 1
$LN42@zipOpenNew:

; 1222 :     return err;

  0052f	8b c3		 mov	 eax, ebx

; 1223 : }

  00531	5f		 pop	 edi
  00532	5e		 pop	 esi
  00533	5b		 pop	 ebx
  00534	8b e5		 mov	 esp, ebp
  00536	5d		 pop	 ebp
  00537	c2 4c 00	 ret	 76			; 0000004cH
$LN59@zipOpenNew:

; 1043 :       return ZIP_PARAMERROR;

  0053a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
$LN1@zipOpenNew:

; 1223 : }

  0053f	5f		 pop	 edi
  00540	5e		 pop	 esi
  00541	5b		 pop	 ebx
  00542	8b e5		 mov	 esp, ebp
  00544	5d		 pop	 ebp
  00545	c2 4c 00	 ret	 76			; 0000004cH
_zipOpenNewFileInZip4_64@76 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip3@64
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zipOpenNewFileInZip3@64 PROC				; COMDAT

; 1245 :                                         const char* password, uLong crcForCrypting) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1246 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  0000c	ff 75 40	 push	 DWORD PTR _password$[ebp]
  0000f	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00012	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00015	ff 75 34	 push	 DWORD PTR _windowBits$[ebp]
  00018	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  0001b	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001e	ff 75 28	 push	 DWORD PTR _method$[ebp]
  00021	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00024	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00027	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  0002a	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  0002d	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  00030	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  00033	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00036	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00039	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1247 :                                    extrafield_local, size_extrafield_local,
; 1248 :                                    extrafield_global, size_extrafield_global,
; 1249 :                                    comment, method, level, raw,
; 1250 :                                    windowBits, memLevel, strategy,
; 1251 :                                    password, crcForCrypting, VERSIONMADEBY, 0, 0);
; 1252 : }

  0003e	5d		 pop	 ebp
  0003f	c2 40 00	 ret	 64			; 00000040H
_zipOpenNewFileInZip3@64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip3_64@68
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_windowBits$ = 52					; size = 4
_memLevel$ = 56						; size = 4
_strategy$ = 60						; size = 4
_password$ = 64						; size = 4
_crcForCrypting$ = 68					; size = 4
_zip64$ = 72						; size = 4
_zipOpenNewFileInZip3_64@68 PROC			; COMDAT

; 1259 :                                          const char* password, uLong crcForCrypting, int zip64) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1260 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  00003	ff 75 48	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	ff 75 44	 push	 DWORD PTR _crcForCrypting$[ebp]
  0000d	ff 75 40	 push	 DWORD PTR _password$[ebp]
  00010	ff 75 3c	 push	 DWORD PTR _strategy$[ebp]
  00013	ff 75 38	 push	 DWORD PTR _memLevel$[ebp]
  00016	ff 75 34	 push	 DWORD PTR _windowBits$[ebp]
  00019	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  0001c	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001f	ff 75 28	 push	 DWORD PTR _method$[ebp]
  00022	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00025	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00028	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  0002b	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  0002e	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  00031	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  00034	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00037	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0003a	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1261 :                                    extrafield_local, size_extrafield_local,
; 1262 :                                    extrafield_global, size_extrafield_global,
; 1263 :                                    comment, method, level, raw,
; 1264 :                                    windowBits, memLevel, strategy,
; 1265 :                                    password, crcForCrypting, VERSIONMADEBY, 0, zip64);
; 1266 : }

  0003f	5d		 pop	 ebp
  00040	c2 44 00	 ret	 68			; 00000044H
_zipOpenNewFileInZip3_64@68 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip2@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zipOpenNewFileInZip2@44 PROC				; COMDAT

; 1271 :                                         const char* comment, int method, int level, int raw) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1272 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 08		 push	 8
  00011	6a f1		 push	 -15			; fffffff1H
  00013	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  00016	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00019	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001c	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001f	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00022	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00025	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00028	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002b	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00031	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00034	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1273 :                                    extrafield_local, size_extrafield_local,
; 1274 :                                    extrafield_global, size_extrafield_global,
; 1275 :                                    comment, method, level, raw,
; 1276 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1277 :                                    NULL, 0, VERSIONMADEBY, 0, 0);
; 1278 : }

  00039	5d		 pop	 ebp
  0003a	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip2@44 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip2_64@48
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_raw$ = 48						; size = 4
_zip64$ = 52						; size = 4
_zipOpenNewFileInZip2_64@48 PROC			; COMDAT

; 1283 :                                            const char* comment, int method, int level, int raw, int zip64) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1284 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  00003	ff 75 34	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	6a 08		 push	 8
  00012	6a f1		 push	 -15			; fffffff1H
  00014	ff 75 30	 push	 DWORD PTR _raw$[ebp]
  00017	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  0001a	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001d	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  00020	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00023	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00026	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00029	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002c	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002f	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00032	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00035	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1285 :                                    extrafield_local, size_extrafield_local,
; 1286 :                                    extrafield_global, size_extrafield_global,
; 1287 :                                    comment, method, level, raw,
; 1288 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1289 :                                    NULL, 0, VERSIONMADEBY, 0, zip64);
; 1290 : }

  0003a	5d		 pop	 ebp
  0003b	c2 30 00	 ret	 48			; 00000030H
_zipOpenNewFileInZip2_64@48 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip64@44
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zip64$ = 48						; size = 4
_zipOpenNewFileInZip64@44 PROC				; COMDAT

; 1295 :                                          const char* comment, int method, int level, int zip64) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1296 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  00003	ff 75 30	 push	 DWORD PTR _zip64$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	6a 08		 push	 8
  00012	6a f1		 push	 -15			; fffffff1H
  00014	6a 00		 push	 0
  00016	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00019	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001c	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001f	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00022	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00025	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00028	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002b	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00031	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00034	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1297 :                                    extrafield_local, size_extrafield_local,
; 1298 :                                    extrafield_global, size_extrafield_global,
; 1299 :                                    comment, method, level, 0,
; 1300 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1301 :                                    NULL, 0, VERSIONMADEBY, 0, zip64);
; 1302 : }

  00039	5d		 pop	 ebp
  0003a	c2 2c 00	 ret	 44			; 0000002cH
_zipOpenNewFileInZip64@44 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipOpenNewFileInZip@40
_TEXT	SEGMENT
_file$ = 8						; size = 4
_filename$ = 12						; size = 4
_zipfi$ = 16						; size = 4
_extrafield_local$ = 20					; size = 4
_size_extrafield_local$ = 24				; size = 4
_extrafield_global$ = 28				; size = 4
_size_extrafield_global$ = 32				; size = 4
_comment$ = 36						; size = 4
_method$ = 40						; size = 4
_level$ = 44						; size = 4
_zipOpenNewFileInZip@40 PROC				; COMDAT

; 1307 :                                        const char* comment, int method, int level) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1308 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	6a 00		 push	 0
  0000f	6a 08		 push	 8
  00011	6a f1		 push	 -15			; fffffff1H
  00013	6a 00		 push	 0
  00015	ff 75 2c	 push	 DWORD PTR _level$[ebp]
  00018	ff 75 28	 push	 DWORD PTR _method$[ebp]
  0001b	ff 75 24	 push	 DWORD PTR _comment$[ebp]
  0001e	ff 75 20	 push	 DWORD PTR _size_extrafield_global$[ebp]
  00021	ff 75 1c	 push	 DWORD PTR _extrafield_global$[ebp]
  00024	ff 75 18	 push	 DWORD PTR _size_extrafield_local$[ebp]
  00027	ff 75 14	 push	 DWORD PTR _extrafield_local$[ebp]
  0002a	ff 75 10	 push	 DWORD PTR _zipfi$[ebp]
  0002d	ff 75 0c	 push	 DWORD PTR _filename$[ebp]
  00030	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00033	e8 00 00 00 00	 call	 _zipOpenNewFileInZip4_64@76

; 1309 :                                    extrafield_local, size_extrafield_local,
; 1310 :                                    extrafield_global, size_extrafield_global,
; 1311 :                                    comment, method, level, 0,
; 1312 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1313 :                                    NULL, 0, VERSIONMADEBY, 0, 0);
; 1314 : }

  00038	5d		 pop	 ebp
  00039	c2 28 00	 ret	 40			; 00000028H
_zipOpenNewFileInZip@40 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zip64FlushWriteBuffer
_TEXT	SEGMENT
tv263 = -4						; size = 4
_zip64FlushWriteBuffer PROC				; COMDAT
; _zi$ = ecx

; 1316 : local int zip64FlushWriteBuffer(zip64_internal* zi) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 1317 :     int err=ZIP_OK;

  00008	33 db		 xor	 ebx, ebx
  0000a	57		 push	 edi

; 1318 : 
; 1319 :     if (zi->ci.encrypt != 0)

  0000b	39 9e ac 00 01
	00		 cmp	 DWORD PTR [esi+65708], ebx
  00011	74 53		 je	 SHORT $LN3@zip64Flush

; 1320 :     {
; 1321 : #ifndef NOCRYPT
; 1322 :         uInt i;
; 1323 :         int t;
; 1324 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  00013	39 5e 7c	 cmp	 DWORD PTR [esi+124], ebx
  00016	76 4e		 jbe	 SHORT $LN3@zip64Flush
  00018	b9 5c ff ff ff	 mov	 ecx, -164		; ffffff5cH
  0001d	8d 86 d0 00 01
	00		 lea	 eax, DWORD PTR [esi+65744]
  00023	2b ce		 sub	 ecx, esi
  00025	8d be a4 00 00
	00		 lea	 edi, DWORD PTR [esi+164]
  0002b	89 4d fc	 mov	 DWORD PTR tv263[ebp], ecx
  0002e	66 90		 npad	 2
$LL4@zip64Flush:

; 1325 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 _decrypt_byte
  00037	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  0003a	8b d8		 mov	 ebx, eax
  0003c	8b 96 dc 00 01
	00		 mov	 edx, DWORD PTR [esi+65756]
  00042	51		 push	 ecx
  00043	8d 8e d0 00 01
	00		 lea	 ecx, DWORD PTR [esi+65744]
  00049	e8 00 00 00 00	 call	 _update_keys
  0004e	30 1f		 xor	 BYTE PTR [edi], bl
  00050	83 c4 04	 add	 esp, 4
  00053	8b 45 fc	 mov	 eax, DWORD PTR tv263[ebp]
  00056	47		 inc	 edi
  00057	03 c7		 add	 eax, edi
  00059	3b 46 7c	 cmp	 eax, DWORD PTR [esi+124]
  0005c	8d 86 d0 00 01
	00		 lea	 eax, DWORD PTR [esi+65744]
  00062	72 cc		 jb	 SHORT $LL4@zip64Flush
  00064	33 db		 xor	 ebx, ebx
$LN3@zip64Flush:

; 1326 : #endif
; 1327 :     }
; 1328 : 
; 1329 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  00066	8b 7e 7c	 mov	 edi, DWORD PTR [esi+124]
  00069	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  0006f	57		 push	 edi
  00070	50		 push	 eax
  00071	ff 76 2c	 push	 DWORD PTR [esi+44]
  00074	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00077	ff 76 1c	 push	 DWORD PTR [esi+28]
  0007a	ff d0		 call	 eax
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 1330 :       err = ZIP_ERRNO;
; 1331 : 
; 1332 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;
; 1333 : 
; 1334 : #ifdef HAVE_BZIP2
; 1335 :     if(zi->ci.method == Z_BZIP2ED)
; 1336 :     {
; 1337 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1338 :       zi->ci.bstream.total_in_lo32 = 0;
; 1339 :       zi->ci.bstream.total_in_hi32 = 0;
; 1340 :     }
; 1341 :     else
; 1342 : #endif
; 1343 :     {
; 1344 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;
; 1345 :       zi->ci.stream.total_in = 0;
; 1346 :     }
; 1347 : 
; 1348 : 
; 1349 :     zi->ci.pos_in_buffered_data = 0;

  0007f	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  00086	83 c9 ff	 or	 ecx, -1
  00089	3b c7		 cmp	 eax, edi
  0008b	0f 45 d9	 cmovne	 ebx, ecx
  0008e	01 be c0 00 01
	00		 add	 DWORD PTR [esi+65728], edi
  00094	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]

; 1350 : 
; 1351 :     return err;

  00097	8b c3		 mov	 eax, ebx
  00099	83 96 c4 00 01
	00 00		 adc	 DWORD PTR [esi+65732], 0
  000a0	01 8e c8 00 01
	00		 add	 DWORD PTR [esi+65736], ecx
  000a6	5f		 pop	 edi
  000a7	83 96 cc 00 01
	00 00		 adc	 DWORD PTR [esi+65740], 0
  000ae	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx

; 1352 : }

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_zip64FlushWriteBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipWriteInFileInZip@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_zipWriteInFileInZip@12 PROC				; COMDAT

; 1354 : extern int ZEXPORT zipWriteInFileInZip(zipFile file, const void* buf, unsigned int len) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]

; 1355 :     zip64_internal* zi;
; 1356 :     int err=ZIP_OK;
; 1357 : 
; 1358 :     if (file == NULL)

  00007	85 f6		 test	 esi, esi
  00009	0f 84 ec 00 00
	00		 je	 $LN30@zipWriteIn

; 1359 :         return ZIP_PARAMERROR;
; 1360 :     zi = (zip64_internal*)file;
; 1361 : 
; 1362 :     if (zi->in_opened_file_inzip == 0)

  0000f	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00013	0f 84 e2 00 00
	00		 je	 $LN30@zipWriteIn

; 1364 : 
; 1365 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  00019	53		 push	 ebx
  0001a	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0001d	57		 push	 edi
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  00021	53		 push	 ebx
  00022	57		 push	 edi
  00023	ff b6 a8 00 01
	00		 push	 DWORD PTR [esi+65704]
  00029	e8 00 00 00 00	 call	 _crc32@12
  0002e	89 86 a8 00 01
	00		 mov	 DWORD PTR [esi+65704], eax

; 1366 : 
; 1367 : #ifdef HAVE_BZIP2
; 1368 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1369 :     {
; 1370 :       zi->ci.bstream.next_in = (void*)buf;
; 1371 :       zi->ci.bstream.avail_in = len;
; 1372 :       err = BZ_RUN_OK;
; 1373 : 
; 1374 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1375 :       {
; 1376 :         if (zi->ci.bstream.avail_out == 0)
; 1377 :         {
; 1378 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1379 :             err = ZIP_ERRNO;
; 1380 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1381 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1382 :         }
; 1383 : 
; 1384 : 
; 1385 :         if(err != BZ_RUN_OK)
; 1386 :           break;
; 1387 : 
; 1388 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1389 :         {
; 1390 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1391 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1392 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1393 : 
; 1394 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1395 :         }
; 1396 :       }
; 1397 : 
; 1398 :       if(err == BZ_RUN_OK)
; 1399 :         err = ZIP_OK;
; 1400 :     }
; 1401 :     else
; 1402 : #endif
; 1403 :     {
; 1404 :       zi->ci.stream.next_in = (Bytef*)(uintptr_t)buf;

  00034	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  00037	89 38		 mov	 DWORD PTR [eax], edi

; 1405 :       zi->ci.stream.avail_in = len;

  00039	83 cf ff	 or	 edi, -1
  0003c	89 5e 44	 mov	 DWORD PTR [esi+68], ebx
  0003f	33 db		 xor	 ebx, ebx
$LL2@zipWriteIn:

; 1406 : 
; 1407 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00041	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  00045	0f 86 a7 00 00
	00		 jbe	 $LN32@zipWriteIn

; 1408 :       {
; 1409 :           if (zi->ci.stream.avail_out == 0)

  0004b	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0004e	85 c9		 test	 ecx, ecx
  00050	75 25		 jne	 SHORT $LN29@zipWriteIn

; 1410 :           {
; 1411 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  00059	83 f8 ff	 cmp	 eax, -1

; 1412 :                   err = ZIP_ERRNO;
; 1413 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  0005c	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H

; 1414 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  00063	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  00069	b9 00 00 01 00	 mov	 ecx, 65536		; 00010000H
  0006e	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00071	0f 44 df	 cmove	 ebx, edi
  00074	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
$LN29@zipWriteIn:

; 1415 :           }
; 1416 : 
; 1417 : 
; 1418 :           if(err != ZIP_OK)

  00077	85 db		 test	 ebx, ebx
  00079	75 77		 jne	 SHORT $LN32@zipWriteIn

; 1419 :               break;
; 1420 : 
; 1421 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0007b	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  00082	75 28		 jne	 SHORT $LN25@zipWriteIn
  00084	39 9e a0 00 00
	00		 cmp	 DWORD PTR [esi+160], ebx
  0008a	75 20		 jne	 SHORT $LN25@zipWriteIn

; 1422 :           {
; 1423 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  0008c	8b 7e 54	 mov	 edi, DWORD PTR [esi+84]

; 1424 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  0008f	53		 push	 ebx
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _deflate@8

; 1425 : 
; 1426 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00096	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00099	8b d8		 mov	 ebx, eax
  0009b	2b cf		 sub	 ecx, edi
  0009d	01 4e 7c	 add	 DWORD PTR [esi+124], ecx
  000a0	85 db		 test	 ebx, ebx
  000a2	75 4e		 jne	 SHORT $LN32@zipWriteIn

; 1406 : 
; 1407 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  000a4	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  000a7	83 cf ff	 or	 edi, -1
  000aa	eb 95		 jmp	 SHORT $LL2@zipWriteIn
$LN25@zipWriteIn:

; 1427 :           }
; 1428 :           else
; 1429 :           {
; 1430 :               uInt copy_this,i;
; 1431 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  000ac	8b 7e 44	 mov	 edi, DWORD PTR [esi+68]

; 1432 :                   copy_this = zi->ci.stream.avail_in;
; 1433 :               else
; 1434 :                   copy_this = zi->ci.stream.avail_out;
; 1435 : 
; 1436 :               for (i = 0; i < copy_this; i++)

  000af	3b f9		 cmp	 edi, ecx
  000b1	0f 43 f9	 cmovae	 edi, ecx
  000b4	33 d2		 xor	 edx, edx
  000b6	85 ff		 test	 edi, edi
  000b8	74 1c		 je	 SHORT $LN5@zipWriteIn
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL21@zipWriteIn:

; 1437 :                   *(((char*)zi->ci.stream.next_out)+i) =

  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000c5	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  000c8	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000cb	42		 inc	 edx
  000cc	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  000cf	3b d7		 cmp	 edx, edi
  000d1	72 ed		 jb	 SHORT $LL21@zipWriteIn
  000d3	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
$LN5@zipWriteIn:

; 1438 :                       *(((const char*)zi->ci.stream.next_in)+i);
; 1439 :               {
; 1440 :                   zi->ci.stream.avail_in -= copy_this;

  000d6	29 7e 44	 sub	 DWORD PTR [esi+68], edi

; 1441 :                   zi->ci.stream.avail_out-= copy_this;

  000d9	29 7e 50	 sub	 DWORD PTR [esi+80], edi

; 1442 :                   zi->ci.stream.next_in+= copy_this;

  000dc	01 38		 add	 DWORD PTR [eax], edi

; 1443 :                   zi->ci.stream.next_out+= copy_this;

  000de	01 7e 4c	 add	 DWORD PTR [esi+76], edi

; 1444 :                   zi->ci.stream.total_in+= copy_this;

  000e1	01 7e 48	 add	 DWORD PTR [esi+72], edi

; 1445 :                   zi->ci.stream.total_out+= copy_this;

  000e4	01 7e 54	 add	 DWORD PTR [esi+84], edi

; 1446 :                   zi->ci.pos_in_buffered_data += copy_this;

  000e7	01 7e 7c	 add	 DWORD PTR [esi+124], edi
  000ea	83 cf ff	 or	 edi, -1
  000ed	e9 4f ff ff ff	 jmp	 $LL2@zipWriteIn
$LN32@zipWriteIn:

; 1447 :               }
; 1448 :           }
; 1449 :       }// while(...)
; 1450 :     }
; 1451 : 
; 1452 :     return err;

  000f2	5f		 pop	 edi
  000f3	8b c3		 mov	 eax, ebx
  000f5	5b		 pop	 ebx
  000f6	5e		 pop	 esi

; 1453 : }

  000f7	5d		 pop	 ebp
  000f8	c2 0c 00	 ret	 12			; 0000000cH
$LN30@zipWriteIn:

; 1363 :         return ZIP_PARAMERROR;

  000fb	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00100	5e		 pop	 esi

; 1453 : }

  00101	5d		 pop	 ebp
  00102	c2 0c 00	 ret	 12			; 0000000cH
_zipWriteInFileInZip@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 4
_crc32$ = 16						; size = 4
_zipCloseFileInZipRaw@12 PROC				; COMDAT

; 1455 : extern int ZEXPORT zipCloseFileInZipRaw(zipFile file, uLong uncompressed_size, uLong crc32) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 1456 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00006	ff 75 10	 push	 DWORD PTR _crc32$[ebp]
  00009	6a 00		 push	 0
  0000b	ff 75 0c	 push	 DWORD PTR _uncompressed_size$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _file$[ebp]
  00011	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw64@16

; 1457 : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
_zipCloseFileInZipRaw@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZipRaw64@16
_TEXT	SEGMENT
$T1 = -32						; size = 4
_cur_pos_inzip$2$ = -32					; size = 4
_compressed_size$2$ = -28				; size = 4
_crc32$1$ = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_compressed_size$1$ = -12				; size = 4
_cur_pos_inzip$1$ = -8					; size = 4
_datasize$1$ = -8					; size = 4
tv740 = -4						; size = 4
_file$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 8
_crc32$ = 20						; size = 4
_zipCloseFileInZipRaw64@16 PROC				; COMDAT

; 1459 : extern int ZEXPORT zipCloseFileInZipRaw64(zipFile file, ZPOS64_T uncompressed_size, uLong crc32) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 24	 sub	 esp, 36			; 00000024H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]

; 1460 :     zip64_internal* zi;
; 1461 :     ZPOS64_T compressed_size;
; 1462 :     uLong invalidValue = 0xffffffff;
; 1463 :     unsigned datasize = 0;

  0000e	33 c0		 xor	 eax, eax

; 1464 :     int err=ZIP_OK;

  00010	33 db		 xor	 ebx, ebx
  00012	89 44 24 24	 mov	 DWORD PTR _datasize$1$[esp+44], eax
  00016	57		 push	 edi

; 1465 : 
; 1466 :     if (file == NULL)

  00017	85 f6		 test	 esi, esi
  00019	0f 84 18 05 00
	00		 je	 $LN56@zipCloseFi

; 1467 :         return ZIP_PARAMERROR;
; 1468 :     zi = (zip64_internal*)file;
; 1469 : 
; 1470 :     if (zi->in_opened_file_inzip == 0)

  0001f	39 46 38	 cmp	 DWORD PTR [esi+56], eax
  00022	0f 84 0f 05 00
	00		 je	 $LN56@zipCloseFi

; 1471 :         return ZIP_PARAMERROR;
; 1472 :     zi->ci.stream.avail_in = 0;
; 1473 : 
; 1474 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00028	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  0002f	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00032	75 4d		 jne	 SHORT $LN11@zipCloseFi
  00034	39 86 a0 00 00
	00		 cmp	 DWORD PTR [esi+160], eax
  0003a	75 45		 jne	 SHORT $LN11@zipCloseFi
  0003c	0f 1f 40 00	 npad	 4
$LL78@zipCloseFi:

; 1475 :                 {
; 1476 :                         while (err==ZIP_OK)
; 1477 :                         {
; 1478 :                                 uLong uTotalOutBefore;
; 1479 :                                 if (zi->ci.stream.avail_out == 0)

  00040	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  00044	8d 5e 40	 lea	 ebx, DWORD PTR [esi+64]
  00047	75 17		 jne	 SHORT $LN8@zipCloseFi

; 1480 :                                 {
; 1481 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer

; 1482 :                                                 err = ZIP_ERRNO;
; 1483 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1484 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  00050	8d 86 a4 00 00
	00		 lea	 eax, DWORD PTR [esi+164]
  00056	c7 46 50 00 00
	01 00		 mov	 DWORD PTR [esi+80], 65536 ; 00010000H
  0005d	89 46 4c	 mov	 DWORD PTR [esi+76], eax
$LN8@zipCloseFi:

; 1485 :                                 }
; 1486 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  00060	8b 7e 54	 mov	 edi, DWORD PTR [esi+84]

; 1487 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  00063	6a 04		 push	 4
  00065	53		 push	 ebx
  00066	e8 00 00 00 00	 call	 _deflate@8
  0006b	8b d8		 mov	 ebx, eax

; 1488 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  0006d	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00070	2b c7		 sub	 eax, edi
  00072	01 46 7c	 add	 DWORD PTR [esi+124], eax
  00075	85 db		 test	 ebx, ebx
  00077	74 c7		 je	 SHORT $LL78@zipCloseFi

; 1489 :                         }
; 1490 :                 }
; 1491 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1492 :     {
; 1493 : #ifdef HAVE_BZIP2
; 1494 :       err = BZ_FINISH_OK;
; 1495 :       while (err==BZ_FINISH_OK)
; 1496 :       {
; 1497 :         uLong uTotalOutBefore;
; 1498 :         if (zi->ci.bstream.avail_out == 0)
; 1499 :         {
; 1500 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1501 :             err = ZIP_ERRNO;
; 1502 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1503 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1504 :         }
; 1505 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1506 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1507 :         if(err == BZ_STREAM_END)
; 1508 :           err = Z_STREAM_END;
; 1509 : 
; 1510 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1511 :       }
; 1512 : 
; 1513 :       if(err == BZ_FINISH_OK)
; 1514 :         err = ZIP_OK;
; 1515 : #endif
; 1516 :     }
; 1517 : 
; 1518 :     if (err==Z_STREAM_END)

  00079	33 c0		 xor	 eax, eax
  0007b	83 fb 01	 cmp	 ebx, 1
  0007e	0f 44 d8	 cmove	 ebx, eax
$LN11@zipCloseFi:

; 1519 :         err=ZIP_OK; /* this is normal */
; 1520 : 
; 1521 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  00081	83 cf ff	 or	 edi, -1
  00084	83 7e 7c 00	 cmp	 DWORD PTR [esi+124], 0
  00088	76 10		 jbe	 SHORT $LN13@zipCloseFi
  0008a	85 db		 test	 ebx, ebx
  0008c	75 0c		 jne	 SHORT $LN13@zipCloseFi

; 1522 :                 {
; 1523 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 _zip64FlushWriteBuffer
  00095	3b c7		 cmp	 eax, edi
  00097	0f 44 df	 cmove	 ebx, edi
$LN13@zipCloseFi:

; 1524 :             err = ZIP_ERRNO;
; 1525 :                 }
; 1526 : 
; 1527 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0009a	83 be 9c 00 00
	00 08		 cmp	 DWORD PTR [esi+156], 8
  000a1	75 1e		 jne	 SHORT $LN14@zipCloseFi
  000a3	83 be a0 00 00
	00 00		 cmp	 DWORD PTR [esi+160], 0
  000aa	75 32		 jne	 SHORT $LN71@zipCloseFi

; 1528 :     {
; 1529 :         int tmp_err = deflateEnd(&zi->ci.stream);

  000ac	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _deflateEnd@4

; 1530 :         if (err == ZIP_OK)

  000b5	85 db		 test	 ebx, ebx

; 1531 :             err = tmp_err;
; 1532 :         zi->ci.stream_initialised = 0;

  000b7	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000be	0f 44 d8	 cmove	 ebx, eax
$LN14@zipCloseFi:

; 1533 :     }
; 1534 : #ifdef HAVE_BZIP2
; 1535 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1536 :     {
; 1537 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1538 :                         if (err==ZIP_OK)
; 1539 :                                 err = tmperr;
; 1540 :                         zi->ci.stream_initialised = 0;
; 1541 :     }
; 1542 : #endif
; 1543 : 
; 1544 :     if (!zi->ci.raw)

  000c1	83 be a0 00 00
	00 00		 cmp	 DWORD PTR [esi+160], 0
  000c8	75 14		 jne	 SHORT $LN71@zipCloseFi

; 1545 :     {
; 1546 :         crc32 = (uLong)zi->ci.crc32;

  000ca	8b 86 a8 00 01
	00		 mov	 eax, DWORD PTR [esi+65704]

; 1547 :         uncompressed_size = zi->ci.totalUncompressedData;

  000d0	8b 8e c8 00 01
	00		 mov	 ecx, DWORD PTR [esi+65736]
  000d6	8b 96 cc 00 01
	00		 mov	 edx, DWORD PTR [esi+65740]
  000dc	eb 09		 jmp	 SHORT $LN81@zipCloseFi
$LN71@zipCloseFi:

; 1533 :     }
; 1534 : #ifdef HAVE_BZIP2
; 1535 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1536 :     {
; 1537 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1538 :                         if (err==ZIP_OK)
; 1539 :                                 err = tmperr;
; 1540 :                         zi->ci.stream_initialised = 0;
; 1541 :     }
; 1542 : #endif
; 1543 : 
; 1544 :     if (!zi->ci.raw)

  000de	8b 45 14	 mov	 eax, DWORD PTR _crc32$[ebp]
  000e1	8b 55 10	 mov	 edx, DWORD PTR _uncompressed_size$[ebp+4]
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR _uncompressed_size$[ebp]
$LN81@zipCloseFi:

; 1548 :     }
; 1549 :     compressed_size = zi->ci.totalCompressedData;
; 1550 : 
; 1551 : #    ifndef NOCRYPT
; 1552 :     compressed_size += zi->ci.crypt_header_size;

  000e7	8b be e0 00 01
	00		 mov	 edi, DWORD PTR [esi+65760]
  000ed	89 44 24 18	 mov	 DWORD PTR _crc32$1$[esp+48], eax
  000f1	33 c0		 xor	 eax, eax
  000f3	03 be c0 00 01
	00		 add	 edi, DWORD PTR [esi+65728]
  000f9	89 4c 24 1c	 mov	 DWORD PTR $T2[esp+48], ecx
  000fd	13 86 c4 00 01
	00		 adc	 eax, DWORD PTR [esi+65732]
  00103	89 54 24 20	 mov	 DWORD PTR $T3[esp+48], edx
  00107	89 7c 24 14	 mov	 DWORD PTR _compressed_size$2$[esp+48], edi
  0010b	89 44 24 24	 mov	 DWORD PTR _compressed_size$1$[esp+48], eax

; 1553 : #    endif
; 1554 : 
; 1555 :     // update Current Item crc and sizes,
; 1556 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  0010f	85 c0		 test	 eax, eax
  00111	77 55		 ja	 SHORT $LN18@zipCloseFi
  00113	72 05		 jb	 SHORT $LN58@zipCloseFi
  00115	83 ff ff	 cmp	 edi, -1
  00118	73 4e		 jae	 SHORT $LN18@zipCloseFi
$LN58@zipCloseFi:
  0011a	85 d2		 test	 edx, edx
  0011c	77 4a		 ja	 SHORT $LN18@zipCloseFi
  0011e	72 05		 jb	 SHORT $LN59@zipCloseFi
  00120	83 f9 ff	 cmp	 ecx, -1
  00123	73 43		 jae	 SHORT $LN18@zipCloseFi
$LN59@zipCloseFi:
  00125	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  0012c	77 3a		 ja	 SHORT $LN18@zipCloseFi
  0012e	72 09		 jb	 SHORT $LN60@zipCloseFi
  00130	83 be 80 00 00
	00 ff		 cmp	 DWORD PTR [esi+128], -1
  00137	73 2f		 jae	 SHORT $LN18@zipCloseFi
$LN60@zipCloseFi:

; 1560 :       /*version needed*/
; 1561 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  00139	33 c9		 xor	 ecx, ecx
  0013b	8d 86 88 00 00
	00		 lea	 eax, DWORD PTR [esi+136]
  00141	51		 push	 ecx
  00142	ff 74 24 1c	 push	 DWORD PTR _crc32$1$[esp+52]
  00146	89 4c 24 34	 mov	 DWORD PTR tv740[esp+56], ecx
  0014a	ba 04 00 00 00	 mov	 edx, 4
  0014f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00151	83 c1 10	 add	 ecx, 16			; 00000010H
  00154	89 44 24 18	 mov	 DWORD PTR $T1[esp+56], eax
  00158	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1634 :       zi->ci.size_centralheader += datasize + 4;
; 1635 : 
; 1636 :       // Update the extra info size field
; 1637 :       zi->ci.size_centralExtra += datasize + 4;
; 1638 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  0015d	8b 44 24 2c	 mov	 eax, DWORD PTR _compressed_size$1$[esp+56]
  00161	83 c4 08	 add	 esp, 8
  00164	8b cf		 mov	 ecx, edi
  00166	eb 70		 jmp	 SHORT $LN20@zipCloseFi
$LN18@zipCloseFi:

; 1557 :     {
; 1558 :       /*version Made by*/
; 1559 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  00168	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0016e	ba 02 00 00 00	 mov	 edx, 2
  00173	6a 00		 push	 0
  00175	6a 2d		 push	 45			; 0000002dH
  00177	83 c1 04	 add	 ecx, 4
  0017a	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1560 :       /*version needed*/
; 1561 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  0017f	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  00185	ba 02 00 00 00	 mov	 edx, 2
  0018a	6a 00		 push	 0
  0018c	6a 2d		 push	 45			; 0000002dH
  0018e	83 c1 06	 add	 ecx, 6
  00191	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1562 : 
; 1563 :     }
; 1564 : 
; 1565 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  00196	8b 4c 24 28	 mov	 ecx, DWORD PTR _crc32$1$[esp+64]
  0019a	8d 86 88 00 00
	00		 lea	 eax, DWORD PTR [esi+136]
  001a0	33 d2		 xor	 edx, edx
  001a2	89 4c 24 28	 mov	 DWORD PTR _crc32$1$[esp+64], ecx
  001a6	52		 push	 edx
  001a7	51		 push	 ecx
  001a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001aa	89 54 24 44	 mov	 DWORD PTR tv740[esp+72], edx
  001ae	83 c1 10	 add	 ecx, 16			; 00000010H
  001b1	ba 04 00 00 00	 mov	 edx, 4
  001b6	89 44 24 28	 mov	 DWORD PTR $T1[esp+72], eax
  001ba	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1566 : 
; 1567 : 
; 1568 :     if(compressed_size >= 0xffffffff)

  001bf	8b 44 24 3c	 mov	 eax, DWORD PTR _compressed_size$1$[esp+72]
  001c3	83 c4 18	 add	 esp, 24			; 00000018H
  001c6	85 c0		 test	 eax, eax
  001c8	75 09		 jne	 SHORT $LN61@zipCloseFi
  001ca	83 ff ff	 cmp	 edi, -1
  001cd	73 04		 jae	 SHORT $LN61@zipCloseFi

; 1570 :     else
; 1571 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/

  001cf	8b cf		 mov	 ecx, edi
  001d1	eb 05		 jmp	 SHORT $LN20@zipCloseFi
$LN61@zipCloseFi:

; 1569 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  001d3	83 c9 ff	 or	 ecx, -1
  001d6	33 c0		 xor	 eax, eax
$LN20@zipCloseFi:

; 1572 : 
; 1573 :     /// set internal file attributes field
; 1574 :     if (zi->ci.stream.data_type == Z_ASCII)

  001d8	50		 push	 eax
  001d9	51		 push	 ecx
  001da	8b 4c 24 18	 mov	 ecx, DWORD PTR $T1[esp+56]
  001de	ba 04 00 00 00	 mov	 edx, 4
  001e3	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001e5	83 c1 14	 add	 ecx, 20			; 00000014H
  001e8	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  001ed	83 c4 08	 add	 esp, 8
  001f0	83 7e 6c 01	 cmp	 DWORD PTR [esi+108], 1
  001f4	75 1a		 jne	 SHORT $LN21@zipCloseFi

; 1575 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  001f6	8b 44 24 10	 mov	 eax, DWORD PTR $T1[esp+48]
  001fa	ba 02 00 00 00	 mov	 edx, 2
  001ff	6a 00		 push	 0
  00201	6a 01		 push	 1
  00203	8b 08		 mov	 ecx, DWORD PTR [eax]
  00205	83 c1 24	 add	 ecx, 36			; 00000024H
  00208	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0020d	83 c4 08	 add	 esp, 8
$LN21@zipCloseFi:

; 1576 : 
; 1577 :     if(uncompressed_size >= 0xffffffff)

  00210	8b 4c 24 20	 mov	 ecx, DWORD PTR $T3[esp+48]
  00214	85 c9		 test	 ecx, ecx
  00216	75 29		 jne	 SHORT $LN62@zipCloseFi
  00218	8b 44 24 1c	 mov	 eax, DWORD PTR $T2[esp+48]
  0021c	83 f8 ff	 cmp	 eax, -1
  0021f	73 20		 jae	 SHORT $LN62@zipCloseFi

; 1579 :     else
; 1580 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/

  00221	51		 push	 ecx
  00222	50		 push	 eax
  00223	8b 44 24 18	 mov	 eax, DWORD PTR $T1[esp+56]
  00227	ba 04 00 00 00	 mov	 edx, 4
  0022c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022e	83 c1 18	 add	 ecx, 24			; 00000018H
  00231	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00236	8b 4c 24 18	 mov	 ecx, DWORD PTR $T1[esp+56]
  0023a	83 c4 08	 add	 esp, 8
  0023d	33 c0		 xor	 eax, eax
  0023f	eb 39		 jmp	 SHORT $LN24@zipCloseFi
$LN62@zipCloseFi:

; 1578 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/

  00241	8b 44 24 10	 mov	 eax, DWORD PTR $T1[esp+48]
  00245	ba 04 00 00 00	 mov	 edx, 4
  0024a	6a 00		 push	 0
  0024c	6a ff		 push	 -1
  0024e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00250	83 c1 18	 add	 ecx, 24			; 00000018H
  00253	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1581 : 
; 1582 :     // Add ZIP64 extra info field for uncompressed size
; 1583 :     if(uncompressed_size >= 0xffffffff)
; 1584 :       datasize += 8;

  00258	8b 4c 24 18	 mov	 ecx, DWORD PTR $T1[esp+56]
  0025c	83 c4 08	 add	 esp, 8
  0025f	33 d2		 xor	 edx, edx
  00261	89 4c 24 10	 mov	 DWORD PTR $T1[esp+48], ecx
  00265	b8 08 00 00 00	 mov	 eax, 8
  0026a	89 54 24 2c	 mov	 DWORD PTR tv740[esp+48], edx
  0026e	8b 54 24 18	 mov	 edx, DWORD PTR _crc32$1$[esp+48]
  00272	89 44 24 28	 mov	 DWORD PTR _datasize$1$[esp+48], eax
  00276	89 54 24 18	 mov	 DWORD PTR _crc32$1$[esp+48], edx
$LN24@zipCloseFi:

; 1585 : 
; 1586 :     // Add ZIP64 extra info field for compressed size
; 1587 :     if(compressed_size >= 0xffffffff)

  0027a	83 7c 24 24 00	 cmp	 DWORD PTR _compressed_size$1$[esp+48], 0
  0027f	77 05		 ja	 SHORT $LN63@zipCloseFi
  00281	83 ff ff	 cmp	 edi, -1
  00284	72 07		 jb	 SHORT $LN25@zipCloseFi
$LN63@zipCloseFi:

; 1588 :       datasize += 8;

  00286	83 c0 08	 add	 eax, 8
  00289	89 44 24 28	 mov	 DWORD PTR _datasize$1$[esp+48], eax
$LN25@zipCloseFi:

; 1589 : 
; 1590 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1591 :     if(zi->ci.pos_local_header >= 0xffffffff)

  0028d	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  00294	77 09		 ja	 SHORT $LN64@zipCloseFi
  00296	83 be 80 00 00
	00 ff		 cmp	 DWORD PTR [esi+128], -1
  0029d	72 07		 jb	 SHORT $LN26@zipCloseFi
$LN64@zipCloseFi:

; 1592 :       datasize += 8;

  0029f	83 c0 08	 add	 eax, 8
  002a2	89 44 24 28	 mov	 DWORD PTR _datasize$1$[esp+48], eax
$LN26@zipCloseFi:

; 1593 : 
; 1594 :     if(datasize > 0)

  002a6	85 c0		 test	 eax, eax
  002a8	0f 84 fe 00 00
	00		 je	 $LN54@zipCloseFi

; 1595 :     {
; 1596 :       char* p = NULL;
; 1597 : 
; 1598 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  002ae	83 c0 04	 add	 eax, 4
  002b1	3b 86 94 00 00
	00		 cmp	 eax, DWORD PTR [esi+148]
  002b7	76 0e		 jbe	 SHORT $LN28@zipCloseFi

; 1599 :       {
; 1600 :         // we can not write more data to the buffer that we have room for.
; 1601 :         return ZIP_BADZIPFILE;

  002b9	b8 99 ff ff ff	 mov	 eax, -103		; ffffff99H

; 1692 : }

  002be	5f		 pop	 edi
  002bf	5e		 pop	 esi
  002c0	5b		 pop	 ebx
  002c1	8b e5		 mov	 esp, ebp
  002c3	5d		 pop	 ebp
  002c4	c2 10 00	 ret	 16			; 00000010H
$LN28@zipCloseFi:

; 1602 :       }
; 1603 : 
; 1604 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  002c7	8b be 90 00 00
	00		 mov	 edi, DWORD PTR [esi+144]

; 1605 : 
; 1606 :       // Add Extra Information Header for 'ZIP64 information'
; 1607 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  002cd	ba 02 00 00 00	 mov	 edx, 2
  002d2	03 39		 add	 edi, DWORD PTR [ecx]
  002d4	6a 00		 push	 0
  002d6	6a 01		 push	 1
  002d8	8b cf		 mov	 ecx, edi
  002da	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1608 :       p += 2;
; 1609 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  002df	8b 44 24 30	 mov	 eax, DWORD PTR _datasize$1$[esp+56]
  002e3	8d 4f 02	 lea	 ecx, DWORD PTR [edi+2]
  002e6	6a 00		 push	 0
  002e8	50		 push	 eax
  002e9	ba 02 00 00 00	 mov	 edx, 2
  002ee	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory

; 1610 :       p += 2;
; 1611 : 
; 1612 :       if(uncompressed_size >= 0xffffffff)

  002f3	8b 4c 24 30	 mov	 ecx, DWORD PTR $T3[esp+64]
  002f7	83 c4 10	 add	 esp, 16			; 00000010H
  002fa	8b 44 24 1c	 mov	 eax, DWORD PTR $T2[esp+48]
  002fe	83 c7 04	 add	 edi, 4
  00301	85 c9		 test	 ecx, ecx
  00303	75 05		 jne	 SHORT $LN65@zipCloseFi
  00305	83 f8 ff	 cmp	 eax, -1
  00308	72 14		 jb	 SHORT $LN29@zipCloseFi
$LN65@zipCloseFi:

; 1613 :       {
; 1614 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  0030a	51		 push	 ecx
  0030b	50		 push	 eax
  0030c	ba 08 00 00 00	 mov	 edx, 8
  00311	8b cf		 mov	 ecx, edi
  00313	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00318	83 c4 08	 add	 esp, 8

; 1615 :         p += 8;

  0031b	83 c7 08	 add	 edi, 8
$LN29@zipCloseFi:

; 1616 :       }
; 1617 : 
; 1618 :       if(compressed_size >= 0xffffffff)

  0031e	8b 4c 24 24	 mov	 ecx, DWORD PTR _compressed_size$1$[esp+48]
  00322	8b 44 24 14	 mov	 eax, DWORD PTR _compressed_size$2$[esp+48]
  00326	85 c9		 test	 ecx, ecx
  00328	75 05		 jne	 SHORT $LN66@zipCloseFi
  0032a	83 f8 ff	 cmp	 eax, -1
  0032d	72 14		 jb	 SHORT $LN30@zipCloseFi
$LN66@zipCloseFi:

; 1619 :       {
; 1620 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  0032f	51		 push	 ecx
  00330	50		 push	 eax
  00331	ba 08 00 00 00	 mov	 edx, 8
  00336	8b cf		 mov	 ecx, edi
  00338	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  0033d	83 c4 08	 add	 esp, 8

; 1621 :         p += 8;

  00340	83 c7 08	 add	 edi, 8
$LN30@zipCloseFi:

; 1622 :       }
; 1623 : 
; 1624 :       if(zi->ci.pos_local_header >= 0xffffffff)

  00343	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]
  00349	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  0034f	85 c9		 test	 ecx, ecx
  00351	75 05		 jne	 SHORT $LN67@zipCloseFi
  00353	83 f8 ff	 cmp	 eax, -1
  00356	72 11		 jb	 SHORT $LN31@zipCloseFi
$LN67@zipCloseFi:

; 1625 :       {
; 1626 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  00358	51		 push	 ecx
  00359	50		 push	 eax
  0035a	ba 08 00 00 00	 mov	 edx, 8
  0035f	8b cf		 mov	 ecx, edi
  00361	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  00366	83 c4 08	 add	 esp, 8
$LN31@zipCloseFi:

; 1627 :         p += 8;
; 1628 :       }
; 1629 : 
; 1630 :       // Update how much extra free space we got in the memory buffer
; 1631 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1632 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1633 :       zi->ci.size_centralExtraFree -= datasize + 4;

  00369	8b 4c 24 28	 mov	 ecx, DWORD PTR _datasize$1$[esp+48]
  0036d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH

; 1634 :       zi->ci.size_centralheader += datasize + 4;
; 1635 : 
; 1636 :       // Update the extra info size field
; 1637 :       zi->ci.size_centralExtra += datasize + 4;
; 1638 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  00372	8b 7c 24 10	 mov	 edi, DWORD PTR $T1[esp+48]
  00376	2b c1		 sub	 eax, ecx
  00378	01 86 94 00 00
	00		 add	 DWORD PTR [esi+148], eax
  0037e	ba 02 00 00 00	 mov	 edx, 2
  00383	6a 00		 push	 0
  00385	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00388	01 86 90 00 00
	00		 add	 DWORD PTR [esi+144], eax
  0038e	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00391	01 86 8c 00 00
	00		 add	 DWORD PTR [esi+140], eax
  00397	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00399	ff b6 8c 00 00
	00		 push	 DWORD PTR [esi+140]
  0039f	83 c1 1e	 add	 ecx, 30			; 0000001eH
  003a2	e8 00 00 00 00	 call	 _zip64local_putValue_inmemory
  003a7	83 c4 08	 add	 esp, 8
  003aa	eb 04		 jmp	 SHORT $LN27@zipCloseFi
$LN54@zipCloseFi:
  003ac	8b 7c 24 10	 mov	 edi, DWORD PTR $T1[esp+48]
$LN27@zipCloseFi:

; 1639 :     }
; 1640 : 
; 1641 :     if (err==ZIP_OK)

  003b0	85 db		 test	 ebx, ebx
  003b2	75 15		 jne	 SHORT $LN32@zipCloseFi

; 1642 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  003b4	ff b6 90 00 00
	00		 push	 DWORD PTR [esi+144]
  003ba	8b 17		 mov	 edx, DWORD PTR [edi]
  003bc	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  003bf	e8 00 00 00 00	 call	 _add_data_in_datablock
  003c4	83 c4 04	 add	 esp, 4
  003c7	8b d8		 mov	 ebx, eax
$LN32@zipCloseFi:

; 1643 : 
; 1644 :     free(zi->ci.central_header);

  003c9	ff 37		 push	 DWORD PTR [edi]
  003cb	e8 00 00 00 00	 call	 _free
  003d0	83 c4 04	 add	 esp, 4

; 1645 : 
; 1646 :     if (err==ZIP_OK)

  003d3	85 db		 test	 ebx, ebx
  003d5	0f 85 3c 01 00
	00		 jne	 $LN46@zipCloseFi

; 1647 :     {
; 1648 :         // Update the LocalFileHeader with the new values.
; 1649 : 
; 1650 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  003db	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  003de	8b ce		 mov	 ecx, esi
  003e0	e8 00 00 00 00	 call	 _call_ztell64

; 1651 : 
; 1652 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  003e5	8b be 80 00 00
	00		 mov	 edi, DWORD PTR [esi+128]
  003eb	8b 8e 84 00 00
	00		 mov	 ecx, DWORD PTR [esi+132]
  003f1	83 c7 0e	 add	 edi, 14			; 0000000eH
  003f4	53		 push	 ebx
  003f5	13 cb		 adc	 ecx, ebx
  003f7	89 54 24 2c	 mov	 DWORD PTR _cur_pos_inzip$1$[esp+52], edx
  003fb	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  003fe	51		 push	 ecx
  003ff	57		 push	 edi
  00400	8b ce		 mov	 ecx, esi
  00402	89 44 24 1c	 mov	 DWORD PTR _cur_pos_inzip$2$[esp+60], eax
  00406	e8 00 00 00 00	 call	 _call_zseek64
  0040b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0040e	85 c0		 test	 eax, eax
  00410	74 05		 je	 SHORT $LN52@zipCloseFi

; 1653 :             err = ZIP_ERRNO;

  00412	83 cb ff	 or	 ebx, -1

; 1654 : 
; 1655 :         if (err==ZIP_OK)

  00415	eb 19		 jmp	 SHORT $LN35@zipCloseFi
$LN52@zipCloseFi:

; 1656 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  00417	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0041a	8b ce		 mov	 ecx, esi
  0041c	6a 04		 push	 4
  0041e	ff 74 24 30	 push	 DWORD PTR tv740[esp+52]
  00422	ff 74 24 20	 push	 DWORD PTR _crc32$1$[esp+56]
  00426	e8 00 00 00 00	 call	 _zip64local_putValue
  0042b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042e	8b d8		 mov	 ebx, eax
$LN35@zipCloseFi:

; 1657 : 
; 1658 :         if(uncompressed_size >= 0xffffffff || compressed_size >= 0xffffffff )

  00430	83 7c 24 20 00	 cmp	 DWORD PTR $T3[esp+48], 0
  00435	77 4b		 ja	 SHORT $LN75@zipCloseFi
  00437	72 07		 jb	 SHORT $LN68@zipCloseFi
  00439	83 7c 24 1c ff	 cmp	 DWORD PTR $T2[esp+48], -1
  0043e	73 42		 jae	 SHORT $LN75@zipCloseFi
$LN68@zipCloseFi:
  00440	8b 44 24 24	 mov	 eax, DWORD PTR _compressed_size$1$[esp+48]
  00444	8b 7c 24 14	 mov	 edi, DWORD PTR _compressed_size$2$[esp+48]
  00448	85 c0		 test	 eax, eax
  0044a	77 3a		 ja	 SHORT $LN38@zipCloseFi
  0044c	72 05		 jb	 SHORT $LN69@zipCloseFi
  0044e	83 ff ff	 cmp	 edi, -1
  00451	73 33		 jae	 SHORT $LN38@zipCloseFi
$LN69@zipCloseFi:

; 1674 :         }
; 1675 :         else
; 1676 :         {
; 1677 :           if (err==ZIP_OK) /* compressed size, unknown */

  00453	85 db		 test	 ebx, ebx
  00455	0f 85 9b 00 00
	00		 jne	 $LN40@zipCloseFi

; 1678 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  0045b	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0045e	8b ce		 mov	 ecx, esi
  00460	6a 04		 push	 4
  00462	50		 push	 eax
  00463	57		 push	 edi
  00464	e8 00 00 00 00	 call	 _zip64local_putValue
  00469	8b d8		 mov	 ebx, eax
  0046b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1679 : 
; 1680 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  0046e	85 db		 test	 ebx, ebx
  00470	0f 85 80 00 00
	00		 jne	 $LN40@zipCloseFi

; 1681 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  00476	6a 04		 push	 4
  00478	ff 74 24 24	 push	 DWORD PTR $T3[esp+52]
  0047c	ff 74 24 24	 push	 DWORD PTR $T2[esp+56]
  00480	eb 65		 jmp	 SHORT $LN82@zipCloseFi
$LN75@zipCloseFi:

; 1659 :         {
; 1660 :           if(zi->ci.pos_zip64extrainfo > 0)

  00482	8b 7c 24 14	 mov	 edi, DWORD PTR _compressed_size$2$[esp+48]
$LN38@zipCloseFi:
  00486	8b 8e bc 00 01
	00		 mov	 ecx, DWORD PTR [esi+65724]
  0048c	8b 86 b8 00 01
	00		 mov	 eax, DWORD PTR [esi+65720]
  00492	85 c9		 test	 ecx, ecx
  00494	75 09		 jne	 SHORT $LN70@zipCloseFi
  00496	85 c0		 test	 eax, eax
  00498	75 05		 jne	 SHORT $LN70@zipCloseFi

; 1671 :           }
; 1672 :           else
; 1673 :               err = ZIP_BADZIPFILE; // Caller passed zip64 = 0, so no room for zip64 info -> fatal

  0049a	8d 58 99	 lea	 ebx, DWORD PTR [eax-103]
  0049d	eb 57		 jmp	 SHORT $LN40@zipCloseFi
$LN70@zipCloseFi:

; 1661 :           {
; 1662 :             // Update the size in the ZIP64 extended field.
; 1663 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0049f	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  004a2	83 c0 04	 add	 eax, 4
  004a5	6a 00		 push	 0
  004a7	83 d1 00	 adc	 ecx, 0
  004aa	51		 push	 ecx
  004ab	50		 push	 eax
  004ac	8b ce		 mov	 ecx, esi
  004ae	e8 00 00 00 00	 call	 _call_zseek64
  004b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b6	85 c0		 test	 eax, eax
  004b8	74 05		 je	 SHORT $LN41@zipCloseFi

; 1664 :               err = ZIP_ERRNO;

  004ba	83 cb ff	 or	 ebx, -1

; 1665 : 
; 1666 :             if (err==ZIP_OK) /* compressed size, unknown */

  004bd	eb 37		 jmp	 SHORT $LN40@zipCloseFi
$LN41@zipCloseFi:
  004bf	85 db		 test	 ebx, ebx
  004c1	75 33		 jne	 SHORT $LN40@zipCloseFi

; 1667 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  004c3	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  004c6	8b ce		 mov	 ecx, esi
  004c8	6a 08		 push	 8
  004ca	ff 74 24 24	 push	 DWORD PTR $T3[esp+52]
  004ce	ff 74 24 24	 push	 DWORD PTR $T2[esp+56]
  004d2	e8 00 00 00 00	 call	 _zip64local_putValue
  004d7	8b d8		 mov	 ebx, eax
  004d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1668 : 
; 1669 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  004dc	85 db		 test	 ebx, ebx
  004de	75 16		 jne	 SHORT $LN40@zipCloseFi

; 1670 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  004e0	6a 08		 push	 8
  004e2	ff 74 24 28	 push	 DWORD PTR _compressed_size$1$[esp+52]
  004e6	57		 push	 edi
$LN82@zipCloseFi:

; 1682 :         }
; 1683 : 
; 1684 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  004e7	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  004ea	8b ce		 mov	 ecx, esi
  004ec	e8 00 00 00 00	 call	 _zip64local_putValue
  004f1	8b d8		 mov	 ebx, eax
  004f3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN40@zipCloseFi:
  004f6	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  004f9	8b ce		 mov	 ecx, esi
  004fb	6a 00		 push	 0
  004fd	ff 74 24 2c	 push	 DWORD PTR _cur_pos_inzip$1$[esp+52]
  00501	ff 74 24 18	 push	 DWORD PTR _cur_pos_inzip$2$[esp+56]
  00505	e8 00 00 00 00	 call	 _call_zseek64
  0050a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0050d	85 c0		 test	 eax, eax
  0050f	b8 ff ff ff ff	 mov	 eax, -1
  00514	0f 45 d8	 cmovne	 ebx, eax
$LN46@zipCloseFi:

; 1685 :             err = ZIP_ERRNO;
; 1686 :     }
; 1687 : 
; 1688 :     zi->number_entry ++;

  00517	83 86 f8 00 01
	00 01		 add	 DWORD PTR [esi+65784], 1

; 1689 :     zi->in_opened_file_inzip = 0;
; 1690 : 
; 1691 :     return err;

  0051e	8b c3		 mov	 eax, ebx
  00520	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00527	83 96 fc 00 01
	00 00		 adc	 DWORD PTR [esi+65788], 0

; 1692 : }

  0052e	5f		 pop	 edi
  0052f	5e		 pop	 esi
  00530	5b		 pop	 ebx
  00531	8b e5		 mov	 esp, ebp
  00533	5d		 pop	 ebp
  00534	c2 10 00	 ret	 16			; 00000010H
$LN56@zipCloseFi:
  00537	5f		 pop	 edi
  00538	5e		 pop	 esi
  00539	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0053e	5b		 pop	 ebx
  0053f	8b e5		 mov	 esp, ebp
  00541	5d		 pop	 ebp
  00542	c2 10 00	 ret	 16			; 00000010H
_zipCloseFileInZipRaw64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipCloseFileInZip@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_zipCloseFileInZip@4 PROC				; COMDAT

; 1694 : extern int ZEXPORT zipCloseFileInZip(zipFile file) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1695 :     return zipCloseFileInZipRaw (file,0,0);

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000a	e8 00 00 00 00	 call	 _zipCloseFileInZipRaw@12

; 1696 : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
_zipCloseFileInZip@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
_zip64eocd_pos_inzip$ = 8				; size = 8
_Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT
; _zi$ = ecx

; 1698 : local int Write_Zip64EndOfCentralDirectoryLocator(zip64_internal* zi, ZPOS64_T zip64eocd_pos_inzip) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1699 :   int err = ZIP_OK;
; 1700 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writing_offset;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _zip64eocd_pos_inzip$[ebp+4]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _zip64eocd_pos_inzip$[ebp]
  0000c	8b f1		 mov	 esi, ecx

; 1701 : 
; 1702 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  0000e	6a 04		 push	 4
  00010	6a 00		 push	 0
  00012	68 50 4b 06 07	 push	 117853008		; 07064b50H
  00017	2b be f0 00 01
	00		 sub	 edi, DWORD PTR [esi+65776]
  0001d	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00020	1b 9e f4 00 01
	00		 sbb	 ebx, DWORD PTR [esi+65780]
  00026	e8 00 00 00 00	 call	 _zip64local_putValue
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1703 : 
; 1704 :   /*num disks*/
; 1705 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0002e	85 c0		 test	 eax, eax
  00030	75 3c		 jne	 SHORT $LN4@Write_Zip6

; 1706 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00032	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00035	8b ce		 mov	 ecx, esi
  00037	6a 04		 push	 4
  00039	50		 push	 eax
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _zip64local_putValue
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1707 : 
; 1708 :   /*relative offset*/
; 1709 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00043	85 c0		 test	 eax, eax
  00045	75 27		 jne	 SHORT $LN4@Write_Zip6

; 1710 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  00047	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0004a	8b ce		 mov	 ecx, esi
  0004c	6a 08		 push	 8
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 _zip64local_putValue
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1711 : 
; 1712 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1713 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00058	85 c0		 test	 eax, eax
  0005a	75 12		 jne	 SHORT $LN4@Write_Zip6

; 1714 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  0005c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0005f	8b ce		 mov	 ecx, esi
  00061	6a 04		 push	 4
  00063	50		 push	 eax
  00064	6a 01		 push	 1
  00066	e8 00 00 00 00	 call	 _zip64local_putValue
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Write_Zip6:

; 1715 : 
; 1716 :     return err;
; 1717 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
_centraldir_pos_inzip$ = 8				; size = 8
_Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT
; _zi$ = ecx
; _size_centraldir$ = edx

; 1719 : local int Write_Zip64EndOfCentralDirectoryRecord(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx
  00007	8b fa		 mov	 edi, edx

; 1720 :   int err = ZIP_OK;
; 1721 : 
; 1722 :   uLong Zip64DataSize = 44;
; 1723 : 
; 1724 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00009	6a 04		 push	 4
  0000b	6a 00		 push	 0
  0000d	68 50 4b 06 06	 push	 101075792		; 06064b50H
  00012	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00015	e8 00 00 00 00	 call	 _zip64local_putValue
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1725 : 
; 1726 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  0001d	85 c0		 test	 eax, eax
  0001f	0f 85 f2 00 00
	00		 jne	 $LN10@Write_Zip6

; 1727 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00025	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00028	8b ce		 mov	 ecx, esi
  0002a	6a 08		 push	 8
  0002c	50		 push	 eax
  0002d	6a 2c		 push	 44			; 0000002cH
  0002f	e8 00 00 00 00	 call	 _zip64local_putValue
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1728 : 
; 1729 :   if (err==ZIP_OK) /* version made by */

  00037	85 c0		 test	 eax, eax
  00039	0f 85 d8 00 00
	00		 jne	 $LN10@Write_Zip6

; 1730 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0003f	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00042	8b ce		 mov	 ecx, esi
  00044	6a 02		 push	 2
  00046	50		 push	 eax
  00047	6a 2d		 push	 45			; 0000002dH
  00049	e8 00 00 00 00	 call	 _zip64local_putValue
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1731 : 
; 1732 :   if (err==ZIP_OK) /* version needed */

  00051	85 c0		 test	 eax, eax
  00053	0f 85 be 00 00
	00		 jne	 $LN10@Write_Zip6

; 1733 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00059	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0005c	8b ce		 mov	 ecx, esi
  0005e	6a 02		 push	 2
  00060	50		 push	 eax
  00061	6a 2d		 push	 45			; 0000002dH
  00063	e8 00 00 00 00	 call	 _zip64local_putValue
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1734 : 
; 1735 :   if (err==ZIP_OK) /* number of this disk */

  0006b	85 c0		 test	 eax, eax
  0006d	0f 85 a4 00 00
	00		 jne	 $LN10@Write_Zip6

; 1736 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00073	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00076	8b ce		 mov	 ecx, esi
  00078	6a 04		 push	 4
  0007a	50		 push	 eax
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _zip64local_putValue
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1737 : 
; 1738 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00084	85 c0		 test	 eax, eax
  00086	0f 85 8b 00 00
	00		 jne	 $LN10@Write_Zip6

; 1739 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  0008c	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0008f	8b ce		 mov	 ecx, esi
  00091	6a 04		 push	 4
  00093	50		 push	 eax
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _zip64local_putValue
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1740 : 
; 1741 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  0009d	85 c0		 test	 eax, eax
  0009f	75 76		 jne	 SHORT $LN10@Write_Zip6

; 1742 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000a1	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000a4	8b ce		 mov	 ecx, esi
  000a6	6a 08		 push	 8
  000a8	ff b6 fc 00 01
	00		 push	 DWORD PTR [esi+65788]
  000ae	ff b6 f8 00 01
	00		 push	 DWORD PTR [esi+65784]
  000b4	e8 00 00 00 00	 call	 _zip64local_putValue
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1743 : 
; 1744 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000bc	85 c0		 test	 eax, eax
  000be	75 57		 jne	 SHORT $LN10@Write_Zip6

; 1745 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000c0	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c3	8b ce		 mov	 ecx, esi
  000c5	6a 08		 push	 8
  000c7	ff b6 fc 00 01
	00		 push	 DWORD PTR [esi+65788]
  000cd	ff b6 f8 00 01
	00		 push	 DWORD PTR [esi+65784]
  000d3	e8 00 00 00 00	 call	 _zip64local_putValue
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1746 : 
; 1747 :   if (err==ZIP_OK) /* size of the central directory */

  000db	85 c0		 test	 eax, eax
  000dd	75 38		 jne	 SHORT $LN10@Write_Zip6

; 1748 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  000df	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000e2	8b ce		 mov	 ecx, esi
  000e4	6a 08		 push	 8
  000e6	50		 push	 eax
  000e7	57		 push	 edi
  000e8	e8 00 00 00 00	 call	 _zip64local_putValue
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1749 : 
; 1750 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000f0	85 c0		 test	 eax, eax
  000f2	75 23		 jne	 SHORT $LN10@Write_Zip6

; 1751 :   {
; 1752 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp]
  000f7	2b 8e f0 00 01
	00		 sub	 ecx, DWORD PTR [esi+65776]
  000fd	8b 45 0c	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  00100	1b 86 f4 00 01
	00		 sbb	 eax, DWORD PTR [esi+65780]

; 1753 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  00106	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00109	6a 08		 push	 8
  0010b	50		 push	 eax
  0010c	51		 push	 ecx
  0010d	8b ce		 mov	 ecx, esi
  0010f	e8 00 00 00 00	 call	 _zip64local_putValue
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@Write_Zip6:

; 1754 :   }
; 1755 :   return err;
; 1756 : }

  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
_Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
tv298 = -8						; size = 8
_centraldir_pos_inzip$ = 8				; size = 8
_Write_EndOfCentralDirectoryRecord PROC			; COMDAT
; _zi$ = ecx
; _size_centraldir$ = edx

; 1758 : local int Write_EndOfCentralDirectoryRecord(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b da		 mov	 ebx, edx

; 1759 :   int err = ZIP_OK;
; 1760 : 
; 1761 :   /*signature*/
; 1762 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  0000d	6a 04		 push	 4
  0000f	6a 00		 push	 0
  00011	68 50 4b 05 06	 push	 101010256		; 06054b50H
  00016	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00019	e8 00 00 00 00	 call	 _zip64local_putValue
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1763 : 
; 1764 :   if (err==ZIP_OK) /* number of this disk */

  00021	85 c0		 test	 eax, eax
  00023	0f 85 f7 00 00
	00		 jne	 $LN13@Write_EndO

; 1765 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00029	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0002c	8b ce		 mov	 ecx, esi
  0002e	6a 02		 push	 2
  00030	50		 push	 eax
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _zip64local_putValue
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1766 : 
; 1767 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 de 00 00
	00		 jne	 $LN13@Write_EndO

; 1768 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00042	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00045	8b ce		 mov	 ecx, esi
  00047	6a 02		 push	 2
  00049	50		 push	 eax
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _zip64local_putValue
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1769 : 
; 1770 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00053	85 c0		 test	 eax, eax
  00055	0f 85 c5 00 00
	00		 jne	 $LN13@Write_EndO

; 1771 :   {
; 1772 :     {
; 1773 :       if(zi->number_entry >= 0xFFFF)

  0005b	83 be fc 00 01
	00 00		 cmp	 DWORD PTR [esi+65788], 0
  00062	8b 86 f8 00 01
	00		 mov	 eax, DWORD PTR [esi+65784]
  00068	77 07		 ja	 SHORT $LN15@Write_EndO
  0006a	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0006f	72 05		 jb	 SHORT $LN24@Write_EndO
$LN15@Write_EndO:

; 1774 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  00071	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
$LN24@Write_EndO:

; 1775 :       else
; 1776 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);
; 1777 :     }
; 1778 :   }
; 1779 : 
; 1780 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  00076	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00079	8b fe		 mov	 edi, esi
  0007b	6a 02		 push	 2
  0007d	6a 00		 push	 0
  0007f	50		 push	 eax
  00080	8b cf		 mov	 ecx, edi
  00082	e8 00 00 00 00	 call	 _zip64local_putValue
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	85 c0		 test	 eax, eax
  0008c	0f 85 8e 00 00
	00		 jne	 $LN13@Write_EndO

; 1781 :   {
; 1782 :     if(zi->number_entry >= 0xFFFF)

  00092	83 be fc 00 01
	00 00		 cmp	 DWORD PTR [esi+65788], 0
  00099	8b 86 f8 00 01
	00		 mov	 eax, DWORD PTR [esi+65784]
  0009f	77 07		 ja	 SHORT $LN16@Write_EndO
  000a1	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  000a6	72 05		 jb	 SHORT $LN9@Write_EndO
$LN16@Write_EndO:

; 1783 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  000a8	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
$LN9@Write_EndO:

; 1784 :     else
; 1785 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);
; 1786 :   }
; 1787 : 
; 1788 :   if (err==ZIP_OK) /* size of the central directory */

  000ad	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000b0	8b cf		 mov	 ecx, edi
  000b2	6a 02		 push	 2
  000b4	6a 00		 push	 0
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _zip64local_putValue
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bf	85 c0		 test	 eax, eax
  000c1	75 5d		 jne	 SHORT $LN13@Write_EndO

; 1789 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  000c3	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000c6	8b ce		 mov	 ecx, esi
  000c8	6a 04		 push	 4
  000ca	50		 push	 eax
  000cb	53		 push	 ebx
  000cc	e8 00 00 00 00	 call	 _zip64local_putValue
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1790 : 
; 1791 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000d4	85 c0		 test	 eax, eax
  000d6	75 48		 jne	 SHORT $LN13@Write_EndO

; 1792 :   {
; 1793 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _centraldir_pos_inzip$[ebp]
  000db	8b f9		 mov	 edi, ecx
  000dd	8b 9e f0 00 01
	00		 mov	 ebx, DWORD PTR [esi+65776]
  000e3	2b fb		 sub	 edi, ebx
  000e5	8b 45 0c	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[ebp+4]
  000e8	1b 86 f4 00 01
	00		 sbb	 eax, DWORD PTR [esi+65780]
  000ee	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]

; 1794 :     if(pos >= 0xffffffff)

  000f1	75 1d		 jne	 SHORT $LN17@Write_EndO
  000f3	83 ff ff	 cmp	 edi, -1
  000f6	73 18		 jae	 SHORT $LN17@Write_EndO

; 1797 :     }
; 1798 :     else
; 1799 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writing_offset),4);

  000f8	6a 04		 push	 4
  000fa	2b cb		 sub	 ecx, ebx
  000fc	6a 00		 push	 0
  000fe	51		 push	 ecx

; 1800 :   }
; 1801 : 
; 1802 :    return err;
; 1803 : }

  000ff	8b ce		 mov	 ecx, esi
  00101	e8 00 00 00 00	 call	 _zip64local_putValue
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
$LN17@Write_EndO:

; 1795 :     {
; 1796 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);

  00110	6a 04		 push	 4
  00112	6a 00		 push	 0
  00114	6a ff		 push	 -1

; 1800 :   }
; 1801 : 
; 1802 :    return err;
; 1803 : }

  00116	8b ce		 mov	 ecx, esi
  00118	e8 00 00 00 00	 call	 _zip64local_putValue
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@Write_EndO:
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
_Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _Write_GlobalComment
_TEXT	SEGMENT
_global_comment$1$ = -4					; size = 4
_Write_GlobalComment PROC				; COMDAT
; _zi$ = ecx
; _global_comment$ = edx

; 1805 : local int Write_GlobalComment(zip64_internal* zi, const char* global_comment) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b c2		 mov	 eax, edx

; 1806 :   int err = ZIP_OK;
; 1807 :   uInt size_global_comment = 0;

  00008	33 f6		 xor	 esi, esi
  0000a	89 45 fc	 mov	 DWORD PTR _global_comment$1$[ebp], eax
  0000d	8b d9		 mov	 ebx, ecx
  0000f	57		 push	 edi

; 1808 : 
; 1809 :   if(global_comment != NULL)

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN2@Write_Glob

; 1810 :     size_global_comment = (uInt)strlen(global_comment);

  00014	8b f0		 mov	 esi, eax
  00016	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@Write_Glob:
  00020	8a 06		 mov	 al, BYTE PTR [esi]
  00022	46		 inc	 esi
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL6@Write_Glob
  00027	2b f1		 sub	 esi, ecx
$LN2@Write_Glob:

; 1811 : 
; 1812 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00029	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  0002c	8b cb		 mov	 ecx, ebx
  0002e	6a 02		 push	 2
  00030	6a 00		 push	 0
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 _zip64local_putValue
  00038	8b f8		 mov	 edi, eax
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1813 : 
; 1814 :   if (err == ZIP_OK && size_global_comment > 0)

  0003d	85 ff		 test	 edi, edi
  0003f	75 1e		 jne	 SHORT $LN7@Write_Glob
  00041	85 f6		 test	 esi, esi
  00043	74 1a		 je	 SHORT $LN7@Write_Glob

; 1815 :   {
; 1816 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  00045	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00048	56		 push	 esi
  00049	ff 75 fc	 push	 DWORD PTR _global_comment$1$[ebp]
  0004c	ff 73 2c	 push	 DWORD PTR [ebx+44]
  0004f	ff 73 1c	 push	 DWORD PTR [ebx+28]
  00052	ff d1		 call	 ecx
  00054	83 c9 ff	 or	 ecx, -1
  00057	83 c4 10	 add	 esp, 16			; 00000010H
  0005a	3b c6		 cmp	 eax, esi
  0005c	0f 45 f9	 cmovne	 edi, ecx
$LN7@Write_Glob:

; 1817 :       err = ZIP_ERRNO;
; 1818 :   }
; 1819 :   return err;
; 1820 : }

  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_Write_GlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT _zipClose@8
_TEXT	SEGMENT
_size_centraldir$1$ = -16				; size = 4
_err$1$ = -12						; size = 4
_centraldir_pos_inzip$2$ = -8				; size = 4
_centraldir_pos_inzip$1$ = -4				; size = 4
_file$ = 8						; size = 4
_global_comment$ = 12					; size = 4
_zipClose@8 PROC					; COMDAT

; 1822 : extern int ZEXPORT zipClose(zipFile file, const char* global_comment) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1823 :     zip64_internal* zi;
; 1824 :     int err = 0;
; 1825 :     uLong size_centraldir = 0;
; 1826 :     ZPOS64_T centraldir_pos_inzip;
; 1827 :     ZPOS64_T pos;
; 1828 : 
; 1829 :     if (file == NULL)

  0000b	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000e	33 db		 xor	 ebx, ebx
  00010	89 5c 24 10	 mov	 DWORD PTR _err$1$[esp+28], ebx
  00014	89 5c 24 0c	 mov	 DWORD PTR _size_centraldir$1$[esp+28], ebx
  00018	57		 push	 edi
  00019	85 f6		 test	 esi, esi
  0001b	75 0c		 jne	 SHORT $LN4@zipClose

; 1830 :         return ZIP_PARAMERROR;

  0001d	8d 43 9a	 lea	 eax, DWORD PTR [ebx-102]

; 1888 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
$LN4@zipClose:

; 1831 : 
; 1832 :     zi = (zip64_internal*)file;
; 1833 : 
; 1834 :     if (zi->in_opened_file_inzip == 1)

  00029	83 7e 38 01	 cmp	 DWORD PTR [esi+56], 1
  0002d	75 0c		 jne	 SHORT $LN5@zipClose

; 1835 :     {
; 1836 :         err = zipCloseFileInZip (file);

  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _zipCloseFileInZip@4
  00035	8b d8		 mov	 ebx, eax
  00037	89 44 24 14	 mov	 DWORD PTR _err$1$[esp+32], eax
$LN5@zipClose:

; 1837 :     }
; 1838 : 
; 1839 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1840 :     if (global_comment==NULL)

  0003b	83 7d 0c 00	 cmp	 DWORD PTR _global_comment$[ebp], 0
  0003f	75 09		 jne	 SHORT $LN22@zipClose

; 1841 :         global_comment = zi->globalcomment;

  00041	8b 86 00 01 01
	00		 mov	 eax, DWORD PTR [esi+65792]
  00047	89 45 0c	 mov	 DWORD PTR _global_comment$[ebp], eax
$LN22@zipClose:

; 1842 : #endif
; 1843 : 
; 1844 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  0004a	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 _call_ztell64
  00054	89 44 24 18	 mov	 DWORD PTR _centraldir_pos_inzip$2$[esp+32], eax
  00058	89 54 24 1c	 mov	 DWORD PTR _centraldir_pos_inzip$1$[esp+32], edx

; 1845 : 
; 1846 :     if (err==ZIP_OK)

  0005c	85 db		 test	 ebx, ebx
  0005e	75 4e		 jne	 SHORT $LN3@zipClose

; 1847 :     {
; 1848 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  00060	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]

; 1849 :         while (ldi!=NULL)

  00063	85 ff		 test	 edi, edi
  00065	74 47		 je	 SHORT $LN3@zipClose
  00067	33 c0		 xor	 eax, eax
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@zipClose:

; 1850 :         {
; 1851 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  00070	85 db		 test	 ebx, ebx
  00072	75 29		 jne	 SHORT $LN9@zipClose
  00074	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00077	85 c9		 test	 ecx, ecx
  00079	74 22		 je	 SHORT $LN9@zipClose

; 1852 :             {
; 1853 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  0007b	51		 push	 ecx
  0007c	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0007f	50		 push	 eax
  00080	ff 76 2c	 push	 DWORD PTR [esi+44]
  00083	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00086	ff 76 1c	 push	 DWORD PTR [esi+28]
  00089	ff d0		 call	 eax
  0008b	83 c4 10	 add	 esp, 16			; 00000010H
  0008e	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00091	b8 ff ff ff ff	 mov	 eax, -1
  00096	0f 45 d8	 cmovne	 ebx, eax
  00099	8b 44 24 10	 mov	 eax, DWORD PTR _size_centraldir$1$[esp+32]
$LN9@zipClose:

; 1854 :                     err = ZIP_ERRNO;
; 1855 :             }
; 1856 : 
; 1857 :             size_centraldir += ldi->filled_in_this_block;

  0009d	03 47 08	 add	 eax, DWORD PTR [edi+8]

; 1858 :             ldi = ldi->next_datablock;

  000a0	8b 3f		 mov	 edi, DWORD PTR [edi]
  000a2	89 44 24 10	 mov	 DWORD PTR _size_centraldir$1$[esp+32], eax
  000a6	85 ff		 test	 edi, edi
  000a8	75 c6		 jne	 SHORT $LL2@zipClose
  000aa	89 5c 24 14	 mov	 DWORD PTR _err$1$[esp+32], ebx
$LN3@zipClose:

; 1859 :         }
; 1860 :     }
; 1861 :     free_linkedlist(&(zi->central_dir));

  000ae	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  000b1	e8 00 00 00 00	 call	 _free_linkedlist

; 1862 : 
; 1863 :     pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000b6	8b 54 24 18	 mov	 edx, DWORD PTR _centraldir_pos_inzip$2$[esp+32]
  000ba	8b ca		 mov	 ecx, edx
  000bc	2b 8e f0 00 01
	00		 sub	 ecx, DWORD PTR [esi+65776]
  000c2	8b 7c 24 1c	 mov	 edi, DWORD PTR _centraldir_pos_inzip$1$[esp+32]
  000c6	8b c7		 mov	 eax, edi
  000c8	1b 86 f4 00 01
	00		 sbb	 eax, DWORD PTR [esi+65780]

; 1864 :     if(pos >= 0xffffffff || zi->number_entry > 0xFFFF)

  000ce	85 c0		 test	 eax, eax
  000d0	77 1c		 ja	 SHORT $LN24@zipClose
  000d2	72 05		 jb	 SHORT $LN23@zipClose
  000d4	83 f9 ff	 cmp	 ecx, -1
  000d7	73 15		 jae	 SHORT $LN24@zipClose
$LN23@zipClose:
  000d9	83 be fc 00 01
	00 00		 cmp	 DWORD PTR [esi+65788], 0
  000e0	77 0c		 ja	 SHORT $LN24@zipClose
  000e2	81 be f8 00 01
	00 ff ff 00 00	 cmp	 DWORD PTR [esi+65784], 65535 ; 0000ffffH
  000ec	76 39		 jbe	 SHORT $LN10@zipClose
$LN24@zipClose:

; 1865 :     {
; 1866 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  000ee	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  000f1	8b ce		 mov	 ecx, esi
  000f3	e8 00 00 00 00	 call	 _call_ztell64

; 1867 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000f8	ff 74 24 1c	 push	 DWORD PTR _centraldir_pos_inzip$1$[esp+32]
  000fc	8b fa		 mov	 edi, edx
  000fe	8b ce		 mov	 ecx, esi
  00100	ff 74 24 1c	 push	 DWORD PTR _centraldir_pos_inzip$2$[esp+36]
  00104	8b 54 24 18	 mov	 edx, DWORD PTR _size_centraldir$1$[esp+40]
  00108	8b d8		 mov	 ebx, eax
  0010a	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryRecord

; 1868 : 
; 1869 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  0010f	57		 push	 edi
  00110	53		 push	 ebx
  00111	8b ce		 mov	 ecx, esi
  00113	e8 00 00 00 00	 call	 _Write_Zip64EndOfCentralDirectoryLocator
  00118	8b 5c 24 24	 mov	 ebx, DWORD PTR _err$1$[esp+48]
  0011c	83 c4 10	 add	 esp, 16			; 00000010H
  0011f	8b 54 24 18	 mov	 edx, DWORD PTR _centraldir_pos_inzip$2$[esp+32]
  00123	8b 7c 24 1c	 mov	 edi, DWORD PTR _centraldir_pos_inzip$1$[esp+32]
$LN10@zipClose:

; 1870 :     }
; 1871 : 
; 1872 :     if (err==ZIP_OK)

  00127	85 db		 test	 ebx, ebx
  00129	75 22		 jne	 SHORT $LN13@zipClose

; 1873 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  0012b	57		 push	 edi
  0012c	52		 push	 edx
  0012d	8b 54 24 18	 mov	 edx, DWORD PTR _size_centraldir$1$[esp+40]
  00131	8b ce		 mov	 ecx, esi
  00133	e8 00 00 00 00	 call	 _Write_EndOfCentralDirectoryRecord
  00138	8b d8		 mov	 ebx, eax
  0013a	83 c4 08	 add	 esp, 8

; 1874 : 
; 1875 :     if(err == ZIP_OK)

  0013d	85 db		 test	 ebx, ebx
  0013f	75 0c		 jne	 SHORT $LN13@zipClose

; 1876 :       err = Write_GlobalComment(zi, global_comment);

  00141	8b 55 0c	 mov	 edx, DWORD PTR _global_comment$[ebp]
  00144	8b ce		 mov	 ecx, esi
  00146	e8 00 00 00 00	 call	 _Write_GlobalComment
  0014b	8b d8		 mov	 ebx, eax
$LN13@zipClose:

; 1877 : 
; 1878 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  0014d	ff 76 2c	 push	 DWORD PTR [esi+44]
  00150	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00153	ff 76 1c	 push	 DWORD PTR [esi+28]
  00156	ff d0		 call	 eax
  00158	83 c4 08	 add	 esp, 8
  0015b	85 c0		 test	 eax, eax
  0015d	74 0a		 je	 SHORT $LN15@zipClose

; 1879 :         if (err == ZIP_OK)

  0015f	85 db		 test	 ebx, ebx
  00161	b8 ff ff ff ff	 mov	 eax, -1
  00166	0f 44 d8	 cmove	 ebx, eax
$LN15@zipClose:

; 1880 :             err = ZIP_ERRNO;
; 1881 : 
; 1882 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1883 :     free(zi->globalcomment);

  00169	ff b6 00 01 01
	00		 push	 DWORD PTR [esi+65792]
  0016f	e8 00 00 00 00	 call	 _free
  00174	83 c4 04	 add	 esp, 4

; 1884 : #endif
; 1885 :     free(zi);

  00177	56		 push	 esi
  00178	e8 00 00 00 00	 call	 _free
  0017d	83 c4 04	 add	 esp, 4

; 1886 : 
; 1887 :     return err;

  00180	8b c3		 mov	 eax, ebx

; 1888 : }

  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c2 08 00	 ret	 8
_zipClose@8 ENDP
_TEXT	ENDS
END
