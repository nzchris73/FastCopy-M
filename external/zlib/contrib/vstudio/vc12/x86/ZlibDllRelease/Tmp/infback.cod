; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	c:\users\chris\documents\github\fastcopy-m\external\zlib\contrib\vstudio\vc12\x86\zlibdllrelease\tmp\infback.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type@		; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@	; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ ; `string'
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ DB 'invalid distanc'
	DB	'e too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code@ DB 'invalid distance code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ DB 'invalid literal/le'
	DB	'ngth code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set@ DB 'invalid distances set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ DB 'invalid literal/le'
	DB	'ngths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ DB 'invalid c'
	DB	'ode -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ DB 'invalid bit length r'
	DB	'epeat', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@ DB 'invalid code lengths '
	DB	'set', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ DB 'too many len'
	DB	'gth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ DB 'invalid stored bl'
	DB	'ock lengths', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 ce 00 00
	00		 je	 $LN3@inflateBac
  00012	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00015	0f 85 c5 00 00
	00		 jne	 $LN3@inflateBac
  0001b	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001f	0f 85 bb 00 00
	00		 jne	 $LN3@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 a5 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 9a 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	0f 87 8b 00 00
	00		 ja	 $LN5@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00049	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0004c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00053	85 c0		 test	 eax, eax
  00055	75 13		 jne	 SHORT $LN10@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;
; 49   :         strm->opaque = (voidpf)0;

  00057	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc
  00063	b8 00 00 00 00	 mov	 eax, OFFSET _zcalloc
  00068	eb 03		 jmp	 SHORT $LN6@inflateBac
$LN10@inflateBac:
  0006a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
$LN6@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  0006d	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00071	75 07		 jne	 SHORT $LN7@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00073	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0007a	68 d0 1b 00 00	 push	 7120			; 00001bd0H
  0007f	6a 01		 push	 1
  00081	51		 push	 ecx
  00082	ff d0		 call	 eax
  00084	8b d0		 mov	 edx, eax
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00089	85 d2		 test	 edx, edx
  0008b	75 0a		 jne	 SHORT $LN8@inflateBac
  0008d	5f		 pop	 edi
  0008e	5b		 pop	 ebx
  0008f	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00092	5e		 pop	 esi

; 71   : }

  00093	5d		 pop	 ebp
  00094	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  00097	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = (uInt)windowBits;
; 65   :     state->wsize = 1U << windowBits;

  0009a	8b cf		 mov	 ecx, edi
  0009c	89 7a 28	 mov	 DWORD PTR [edx+40], edi
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	5f		 pop	 edi
  000a5	d3 e0		 shl	 eax, cl

; 66   :     state->window = window;

  000a7	89 5a 38	 mov	 DWORD PTR [edx+56], ebx
  000aa	5b		 pop	 ebx
  000ab	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     state->sane = 1;
; 70   :     return Z_OK;

  000ae	33 c0		 xor	 eax, eax
  000b0	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H
  000b7	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  000be	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000c5	c7 82 c4 1b 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+7108], 1
  000cf	5e		 pop	 esi

; 71   : }

  000d0	5d		 pop	 ebp
  000d1	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000d4	5f		 pop	 edi
  000d5	5b		 pop	 ebx

; 42   :         return Z_STREAM_ERROR;

  000d6	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000db	5e		 pop	 esi

; 71   : }

  000dc	5d		 pop	 ebp
  000dd	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000e0	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  000e5	5e		 pop	 esi

; 71   : }

  000e6	5d		 pop	 ebp
  000e7	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 86   : #ifdef BUILDFIXED
; 87   :     static int virgin = 1;
; 88   :     static code *lenfix, *distfix;
; 89   :     static code fixed[544];
; 90   : 
; 91   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 92   :     if (virgin) {
; 93   :         unsigned sym, bits;
; 94   :         static code *next;
; 95   : 
; 96   :         /* literal/length table */
; 97   :         sym = 0;
; 98   :         while (sym < 144) state->lens[sym++] = 8;
; 99   :         while (sym < 256) state->lens[sym++] = 9;
; 100  :         while (sym < 280) state->lens[sym++] = 7;
; 101  :         while (sym < 288) state->lens[sym++] = 8;
; 102  :         next = fixed;
; 103  :         lenfix = next;
; 104  :         bits = 9;
; 105  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 106  : 
; 107  :         /* distance table */
; 108  :         sym = 0;
; 109  :         while (sym < 32) state->lens[sym++] = 5;
; 110  :         distfix = next;
; 111  :         bits = 5;
; 112  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 113  : 
; 114  :         /* do this just once */
; 115  :         virgin = 0;
; 116  :     }
; 117  : #else /* !BUILDFIXED */
; 118  : #   include "inffixed.h"
; 119  : #endif /* BUILDFIXED */
; 120  :     state->lencode = lenfix;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 121  :     state->lenbits = 9;

  00007	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9

; 122  :     state->distcode = distfix;

  0000e	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 123  :     state->distbits = 5;

  00015	c7 41 5c 05 00
	00 00		 mov	 DWORD PTR [ecx+92], 5

; 124  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
tv3472 = -52						; size = 4
tv3466 = -52						; size = 4
tv3380 = -52						; size = 4
tv3355 = -52						; size = 4
$T1 = -48						; size = 4
$T2 = -48						; size = 4
_copy$3$ = -48						; size = 4
tv3481 = -48						; size = 4
tv3479 = -48						; size = 4
tv3440 = -48						; size = 4
tv3438 = -48						; size = 4
tv3436 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -44						; size = 4
tv3478 = -44						; size = 4
tv3373 = -44						; size = 4
tv3346 = -44						; size = 4
tv3345 = -44						; size = 4
tv3333 = -44						; size = 4
tv3332 = -44						; size = 4
tv3441 = -40						; size = 4
tv3381 = -36						; size = 4
$T5 = -32						; size = 4
$T6 = -32						; size = 4
tv3376 = -32						; size = 4
tv3372 = -32						; size = 4
tv3371 = -32						; size = 4
_copy$1$ = -28						; size = 4
_bits$1$ = -24						; size = 4
_put$1$ = -20						; size = 4
_left$1$ = -16						; size = 4
_hold$1$ = -12						; size = 4
tv3439 = -12						; size = 4
tv3437 = -12						; size = 4
_state$1$ = -8						; size = 4
_next$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 258  :     struct inflate_state FAR *state;
; 259  :     z_const unsigned char FAR *next;    /* next input */
; 260  :     unsigned char FAR *put;     /* next output */
; 261  :     unsigned have, left;        /* available input and output */
; 262  :     unsigned long hold;         /* bit buffer */
; 263  :     unsigned bits;              /* bits in bit buffer */
; 264  :     unsigned copy;              /* number of stored or match bytes to copy */
; 265  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 266  :     code here;                  /* current decoding table entry */
; 267  :     code last;                  /* parent table entry */
; 268  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 269  :     int ret;                    /* return code */
; 270  :     static const unsigned short order[19] = /* permutation of code lengths */
; 271  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 272  : 
; 273  :     /* Check that the strm exists and that the state was initialized */
; 274  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 34	 sub	 esp, 52			; 00000034H
  00009	85 c9		 test	 ecx, ecx
  0000b	0f 84 19 0d 00
	00		 je	 $LN254@inflateBac
  00011	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00014	89 55 f8	 mov	 DWORD PTR _state$1$[ebp], edx
  00017	85 d2		 test	 edx, edx
  00019	0f 84 0b 0d 00
	00		 je	 $LN254@inflateBac

; 276  :     state = (struct inflate_state FAR *)strm->state;
; 277  : 
; 278  :     /* Reset the state */
; 279  :     strm->msg = Z_NULL;

  0001f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00026	53		 push	 ebx

; 280  :     state->mode = TYPE;

  00027	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 281  :     state->last = 0;

  0002e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 282  :     state->whave = 0;

  00035	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 283  :     next = strm->next_in;

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00041	56		 push	 esi
  00042	57		 push	 edi
  00043	85 c0		 test	 eax, eax

; 284  :     have = next != Z_NULL ? strm->avail_in : 0;

  00045	74 05		 je	 SHORT $LN343@inflateBac
  00047	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004a	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004c	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 285  :     hold = 0;
; 286  :     bits = 0;
; 287  :     put = state->window;

  0004e	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00051	33 ff		 xor	 edi, edi

; 288  :     left = state->wsize;

  00053	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00056	33 db		 xor	 ebx, ebx
  00058	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  0005b	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
$LN491@inflateBac:

; 289  : 
; 290  :     /* Inflate until end of block marked as last */
; 291  :     for (;;)
; 292  :         switch (state->mode) {

  0005e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00061	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00066	83 f8 12	 cmp	 eax, 18			; 00000012H
  00069	0f 87 77 0c 00
	00		 ja	 $LN339@inflateBac
  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  00072	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN481@inflateBac[eax]
  00079	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN482@inflateBac[eax*4]
$LN255@inflateBac:

; 293  :         case TYPE:
; 294  :             /* determine and dispatch block type */
; 295  :             if (state->last) {

  00080	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00084	74 12		 je	 SHORT $LN12@inflateBac

; 296  :                 BYTEBITS();

  00086	8b cb		 mov	 ecx, ebx

; 297  :                 state->mode = DONE;

  00088	c7 42 04 50 3f
	00 00		 mov	 DWORD PTR [edx+4], 16208 ; 00003f50H
  0008f	83 e1 07	 and	 ecx, 7
  00092	d3 ef		 shr	 edi, cl
  00094	2b d9		 sub	 ebx, ecx

; 298  :                 break;

  00096	eb c6		 jmp	 SHORT $LN491@inflateBac
$LN12@inflateBac:

; 299  :             }
; 300  :             NEEDBITS(3);

  00098	83 fb 03	 cmp	 ebx, 3
  0009b	73 3a		 jae	 SHORT $LN10@inflateBac
  0009d	0f 1f 00	 npad	 3
$LL13@inflateBac:
  000a0	85 f6		 test	 esi, esi
  000a2	75 15		 jne	 SHORT $LN18@inflateBac
  000a4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  000a7	50		 push	 eax
  000a8	51		 push	 ecx
  000a9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000ac	8b f0		 mov	 esi, eax
  000ae	83 c4 08	 add	 esp, 8
  000b1	85 f6		 test	 esi, esi
  000b3	0f 84 ef 0b 00
	00		 je	 $LN369@inflateBac
$LN18@inflateBac:
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  000bc	8b cb		 mov	 ecx, ebx
  000be	83 c3 08	 add	 ebx, 8
  000c1	4e		 dec	 esi
  000c2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000c5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  000c8	d3 e0		 shl	 eax, cl
  000ca	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  000cd	03 f8		 add	 edi, eax
  000cf	83 fb 03	 cmp	 ebx, 3
  000d2	72 cc		 jb	 SHORT $LL13@inflateBac
  000d4	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN10@inflateBac:

; 301  :             state->last = BITS(1);

  000d7	8b c7		 mov	 eax, edi

; 302  :             DROPBITS(1);

  000d9	d1 ef		 shr	 edi, 1
  000db	83 e0 01	 and	 eax, 1
  000de	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 303  :             switch (BITS(2)) {

  000e1	8b c7		 mov	 eax, edi
  000e3	83 e0 03	 and	 eax, 3
  000e6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN483@inflateBac[eax*4]
$LN259@inflateBac:

; 323  :             }
; 324  :             DROPBITS(2);

  000ed	c1 ef 02	 shr	 edi, 2
  000f0	83 eb 03	 sub	 ebx, 3
  000f3	c7 42 04 41 3f
	00 00		 mov	 DWORD PTR [edx+4], 16193 ; 00003f41H

; 325  :             break;

  000fa	e9 5f ff ff ff	 jmp	 $LN491@inflateBac
$LN260@inflateBac:

; 304  :             case 0:                             /* stored block */
; 305  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 306  :                         state->last ? " (last)" : ""));
; 307  :                 state->mode = STORED;
; 308  :                 break;
; 309  :             case 1:                             /* fixed block */
; 310  :                 fixedtables(state);

  000ff	8b ca		 mov	 ecx, edx
  00101	e8 00 00 00 00	 call	 _fixedtables

; 323  :             }
; 324  :             DROPBITS(2);

  00106	c1 ef 02	 shr	 edi, 2
  00109	83 eb 03	 sub	 ebx, 3
  0010c	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H

; 325  :             break;

  00113	e9 46 ff ff ff	 jmp	 $LN491@inflateBac
$LN261@inflateBac:

; 323  :             }
; 324  :             DROPBITS(2);

  00118	c1 ef 02	 shr	 edi, 2
  0011b	83 eb 03	 sub	 ebx, 3
  0011e	c7 42 04 44 3f
	00 00		 mov	 DWORD PTR [edx+4], 16196 ; 00003f44H

; 325  :             break;

  00125	e9 34 ff ff ff	 jmp	 $LN491@inflateBac
$LN262@inflateBac:

; 311  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 312  :                         state->last ? " (last)" : ""));
; 313  :                 state->mode = LEN;              /* decode codes */
; 314  :                 break;
; 315  :             case 2:                             /* dynamic block */
; 316  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 317  :                         state->last ? " (last)" : ""));
; 318  :                 state->mode = TABLE;
; 319  :                 break;
; 320  :             case 3:
; 321  :                 strm->msg = (char *)"invalid block type";

  0012a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0012d	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type@

; 322  :                 state->mode = BAD;

  00134	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
$LN28@inflateBac:

; 323  :             }
; 324  :             DROPBITS(2);

  0013b	c1 ef 02	 shr	 edi, 2
  0013e	83 eb 03	 sub	 ebx, 3

; 325  :             break;

  00141	e9 18 ff ff ff	 jmp	 $LN491@inflateBac
$LN31@inflateBac:

; 326  : 
; 327  :         case STORED:
; 328  :             /* get and verify stored block length */
; 329  :             BYTEBITS();                         /* go to byte boundary */

  00146	8b cb		 mov	 ecx, ebx
  00148	83 e1 07	 and	 ecx, 7
  0014b	2b d9		 sub	 ebx, ecx
  0014d	d3 ef		 shr	 edi, cl

; 330  :             NEEDBITS(32);

  0014f	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00152	73 36		 jae	 SHORT $LN32@inflateBac
$LL35@inflateBac:
  00154	85 f6		 test	 esi, esi
  00156	75 17		 jne	 SHORT $LN40@inflateBac
  00158	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0015b	50		 push	 eax
  0015c	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0015f	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00162	8b f0		 mov	 esi, eax
  00164	83 c4 08	 add	 esp, 8
  00167	85 f6		 test	 esi, esi
  00169	0f 84 39 0b 00
	00		 je	 $LN369@inflateBac
$LN40@inflateBac:
  0016f	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00172	8b cb		 mov	 ecx, ebx
  00174	83 c3 08	 add	 ebx, 8
  00177	4e		 dec	 esi
  00178	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0017b	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  0017e	d3 e0		 shl	 eax, cl
  00180	03 f8		 add	 edi, eax
  00182	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00185	72 cd		 jb	 SHORT $LL35@inflateBac
  00187	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN32@inflateBac:

; 331  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  0018a	8b c7		 mov	 eax, edi
  0018c	0f b7 cf	 movzx	 ecx, di
  0018f	f7 d0		 not	 eax
  00191	89 4d d0	 mov	 DWORD PTR $T2[ebp], ecx
  00194	c1 e8 10	 shr	 eax, 16			; 00000010H
  00197	3b c8		 cmp	 ecx, eax
  00199	74 16		 je	 SHORT $LN266@inflateBac

; 332  :                 strm->msg = (char *)"invalid stored block lengths";

  0019b	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0019e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@

; 333  :                 state->mode = BAD;

  001a5	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 334  :                 break;

  001ac	e9 ad fe ff ff	 jmp	 $LN491@inflateBac
$LN266@inflateBac:

; 335  :             }
; 336  :             state->length = (unsigned)hold & 0xffff;

  001b1	8b 7d d0	 mov	 edi, DWORD PTR $T2[ebp]

; 337  :             Tracev((stderr, "inflate:       stored length %u\n",
; 338  :                     state->length));
; 339  :             INITBITS();

  001b4	33 c0		 xor	 eax, eax
  001b6	33 db		 xor	 ebx, ebx
  001b8	89 7a 44	 mov	 DWORD PTR [edx+68], edi
  001bb	89 45 f4	 mov	 DWORD PTR _hold$1$[ebp], eax

; 340  : 
; 341  :             /* copy stored block from input to output */
; 342  :             while (state->length != 0) {

  001be	85 ff		 test	 edi, edi
  001c0	0f 84 91 00 00
	00		 je	 $LN47@inflateBac
  001c6	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
  001c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL46@inflateBac:

; 343  :                 copy = state->length;
; 344  :                 PULL();

  001d0	85 f6		 test	 esi, esi
  001d2	75 1d		 jne	 SHORT $LN48@inflateBac
  001d4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  001d7	50		 push	 eax
  001d8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  001db	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  001de	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  001e1	8b f0		 mov	 esi, eax
  001e3	83 c4 08	 add	 esp, 8
  001e6	85 f6		 test	 esi, esi
  001e8	0f 84 cb 0a 00
	00		 je	 $LN371@inflateBac
  001ee	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 345  :                 ROOM();

  001f1	85 c9		 test	 ecx, ecx
  001f3	75 25		 jne	 SHORT $LN51@inflateBac
  001f5	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  001f8	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  001fb	51		 push	 ecx
  001fc	50		 push	 eax
  001fd	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00200	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  00203	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
  00206	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00209	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0020c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020f	85 c0		 test	 eax, eax
  00211	0f 85 98 0a 00
	00		 jne	 $LN372@inflateBac
  00217	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
$LN51@inflateBac:

; 346  :                 if (copy > have) copy = have;
; 347  :                 if (copy > left) copy = left;
; 348  :                 zmemcpy(put, next, copy);

  0021a	8b 55 ec	 mov	 edx, DWORD PTR _put$1$[ebp]
  0021d	3b fe		 cmp	 edi, esi
  0021f	8b c6		 mov	 eax, esi
  00221	0f 46 c7	 cmovbe	 eax, edi
  00224	8b f9		 mov	 edi, ecx
  00226	3b c1		 cmp	 eax, ecx
  00228	0f 46 f8	 cmovbe	 edi, eax
  0022b	57		 push	 edi
  0022c	ff 75 fc	 push	 DWORD PTR _next$[ebp]
  0022f	52		 push	 edx
  00230	e8 00 00 00 00	 call	 _memcpy

; 349  :                 have -= copy;
; 350  :                 next += copy;
; 351  :                 left -= copy;
; 352  :                 put += copy;
; 353  :                 state->length -= copy;

  00235	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00238	2b f7		 sub	 esi, edi
  0023a	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
  0023d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00240	01 7d fc	 add	 DWORD PTR _next$[ebp], edi
  00243	2b cf		 sub	 ecx, edi
  00245	01 7d ec	 add	 DWORD PTR _put$1$[ebp], edi
  00248	29 7a 44	 sub	 DWORD PTR [edx+68], edi
  0024b	8b 7a 44	 mov	 edi, DWORD PTR [edx+68]
  0024e	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
  00251	0f 85 79 ff ff
	ff		 jne	 $LL46@inflateBac
$LN47@inflateBac:

; 289  : 
; 290  :     /* Inflate until end of block marked as last */
; 291  :     for (;;)
; 292  :         switch (state->mode) {

  00257	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]

; 354  :             }
; 355  :             Tracev((stderr, "inflate:       stored end\n"));
; 356  :             state->mode = TYPE;

  0025a	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH
  00261	e9 f8 fd ff ff	 jmp	 $LN491@inflateBac
$LN56@inflateBac:

; 357  :             break;
; 358  : 
; 359  :         case TABLE:
; 360  :             /* get dynamic table entries descriptor */
; 361  :             NEEDBITS(14);

  00266	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  00269	73 3c		 jae	 SHORT $LN54@inflateBac
  0026b	0f 1f 44 00 00	 npad	 5
$LL57@inflateBac:
  00270	85 f6		 test	 esi, esi
  00272	75 15		 jne	 SHORT $LN62@inflateBac
  00274	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00277	50		 push	 eax
  00278	51		 push	 ecx
  00279	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0027c	8b f0		 mov	 esi, eax
  0027e	83 c4 08	 add	 esp, 8
  00281	85 f6		 test	 esi, esi
  00283	0f 84 1f 0a 00
	00		 je	 $LN369@inflateBac
$LN62@inflateBac:
  00289	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  0028c	8b cb		 mov	 ecx, ebx
  0028e	83 c3 08	 add	 ebx, 8
  00291	4e		 dec	 esi
  00292	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00295	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00298	d3 e0		 shl	 eax, cl
  0029a	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  0029d	03 f8		 add	 edi, eax
  0029f	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  002a2	72 cc		 jb	 SHORT $LL57@inflateBac
  002a4	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN54@inflateBac:

; 362  :             state->nlen = BITS(5) + 257;

  002a7	8b cf		 mov	 ecx, edi

; 363  :             DROPBITS(5);
; 364  :             state->ndist = BITS(5) + 1;
; 365  :             DROPBITS(5);
; 366  :             state->ncode = BITS(4) + 4;
; 367  :             DROPBITS(4);

  002a9	83 eb 0e	 sub	 ebx, 14			; 0000000eH
  002ac	c1 ef 05	 shr	 edi, 5
  002af	83 e1 1f	 and	 ecx, 31			; 0000001fH
  002b2	8b c7		 mov	 eax, edi
  002b4	81 c1 01 01 00
	00		 add	 ecx, 257		; 00000101H
  002ba	83 e0 1f	 and	 eax, 31			; 0000001fH
  002bd	c1 ef 05	 shr	 edi, 5
  002c0	40		 inc	 eax
  002c1	89 4a 64	 mov	 DWORD PTR [edx+100], ecx
  002c4	89 45 d0	 mov	 DWORD PTR tv3479[ebp], eax
  002c7	89 42 68	 mov	 DWORD PTR [edx+104], eax
  002ca	8b c7		 mov	 eax, edi
  002cc	83 e0 0f	 and	 eax, 15			; 0000000fH
  002cf	c1 ef 04	 shr	 edi, 4
  002d2	83 c0 04	 add	 eax, 4
  002d5	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  002d8	89 45 d4	 mov	 DWORD PTR tv3478[ebp], eax
  002db	89 42 60	 mov	 DWORD PTR [edx+96], eax

; 368  : #ifndef PKZIP_BUG_WORKAROUND
; 369  :             if (state->nlen > 286 || state->ndist > 30) {

  002de	81 f9 1e 01 00
	00		 cmp	 ecx, 286		; 0000011eH
  002e4	0f 87 15 05 00
	00		 ja	 $LN277@inflateBac
  002ea	83 7d d0 1e	 cmp	 DWORD PTR tv3479[ebp], 30 ; 0000001eH
  002ee	0f 87 0b 05 00
	00		 ja	 $LN277@inflateBac

; 373  :             }
; 374  : #endif
; 375  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 376  : 
; 377  :             /* get code length code lengths (not a typo) */
; 378  :             state->have = 0;

  002f4	33 c0		 xor	 eax, eax
  002f6	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 379  :             while (state->have < state->ncode) {

  002fd	39 45 d4	 cmp	 DWORD PTR tv3478[ebp], eax
  00300	76 6e		 jbe	 SHORT $LN472@inflateBac
$LL74@inflateBac:

; 380  :                 NEEDBITS(3);

  00302	83 fb 03	 cmp	 ebx, 3
  00305	73 40		 jae	 SHORT $LN76@inflateBac
  00307	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  0030a	66 0f 1f 44 00
	00		 npad	 6
$LL79@inflateBac:
  00310	85 f6		 test	 esi, esi
  00312	75 1a		 jne	 SHORT $LN84@inflateBac
  00314	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00317	50		 push	 eax
  00318	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0031b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0031e	8b f0		 mov	 esi, eax
  00320	83 c4 08	 add	 esp, 8
  00323	85 f6		 test	 esi, esi
  00325	0f 84 7d 09 00
	00		 je	 $LN369@inflateBac
  0032b	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  0032e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00331	8b cb		 mov	 ecx, ebx
  00333	d3 e0		 shl	 eax, cl
  00335	42		 inc	 edx
  00336	83 c3 08	 add	 ebx, 8
  00339	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  0033c	4e		 dec	 esi
  0033d	03 f8		 add	 edi, eax
  0033f	83 fb 03	 cmp	 ebx, 3
  00342	72 cc		 jb	 SHORT $LL79@inflateBac
  00344	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN76@inflateBac:

; 381  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  00347	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0034a	8b cf		 mov	 ecx, edi
  0034c	83 e1 07	 and	 ecx, 7

; 382  :                 DROPBITS(3);

  0034f	c1 ef 03	 shr	 edi, 3
  00352	83 eb 03	 sub	 ebx, 3
  00355	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00358	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00360	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  00365	ff 42 6c	 inc	 DWORD PTR [edx+108]
  00368	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0036b	3b 42 60	 cmp	 eax, DWORD PTR [edx+96]
  0036e	72 92		 jb	 SHORT $LL74@inflateBac
$LN472@inflateBac:

; 383  :             }
; 384  :             while (state->have < 19)

  00370	83 f8 13	 cmp	 eax, 19			; 00000013H
  00373	73 26		 jae	 SHORT $LN91@inflateBac
  00375	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL90@inflateBac:

; 385  :                 state->lens[order[state->have++]] = 0;

  00380	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00388	33 c9		 xor	 ecx, ecx
  0038a	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  0038f	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00392	40		 inc	 eax
  00393	89 42 6c	 mov	 DWORD PTR [edx+108], eax
  00396	83 f8 13	 cmp	 eax, 19			; 00000013H
  00399	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 386  :             state->next = state->codes;

  0039b	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]

; 387  :             state->lencode = (code const FAR *)(state->next);
; 388  :             state->lenbits = 7;

  003a1	c7 42 58 07 00
	00 00		 mov	 DWORD PTR [edx+88], 7
  003a8	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]
  003ab	89 42 50	 mov	 DWORD PTR [edx+80], eax
  003ae	89 01		 mov	 DWORD PTR [ecx], eax
  003b0	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  003b3	89 4d d0	 mov	 DWORD PTR tv3440[ebp], ecx

; 389  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003b6	8d 8a f4 02 00
	00		 lea	 ecx, DWORD PTR [edx+756]
  003bc	51		 push	 ecx
  003bd	89 4d dc	 mov	 DWORD PTR tv3381[ebp], ecx
  003c0	83 c2 74	 add	 edx, 116		; 00000074H
  003c3	8b 4d d0	 mov	 ecx, DWORD PTR tv3440[ebp]
  003c6	50		 push	 eax
  003c7	51		 push	 ecx
  003c8	6a 13		 push	 19			; 00000013H
  003ca	33 c9		 xor	 ecx, ecx
  003cc	89 45 d8	 mov	 DWORD PTR tv3441[ebp], eax
  003cf	89 55 cc	 mov	 DWORD PTR tv3380[ebp], edx
  003d2	e8 00 00 00 00	 call	 _inflate_table

; 390  :                                 &(state->lenbits), state->work);
; 391  :             if (ret) {

  003d7	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  003da	83 c4 10	 add	 esp, 16			; 00000010H
  003dd	85 c0		 test	 eax, eax
  003df	74 16		 je	 SHORT $LN280@inflateBac

; 392  :                 strm->msg = (char *)"invalid code lengths set";

  003e1	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  003e4	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@

; 393  :                 state->mode = BAD;

  003eb	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 394  :                 break;

  003f2	e9 67 fc ff ff	 jmp	 $LN491@inflateBac
$LN280@inflateBac:

; 395  :             }
; 396  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 397  : 
; 398  :             /* get length and distance code code lengths */
; 399  :             state->have = 0;
; 400  :             while (state->have < state->nlen + state->ndist) {

  003f7	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  003fa	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0
  00401	03 42 64	 add	 eax, DWORD PTR [edx+100]
  00404	0f 84 9d 02 00
	00		 je	 $LN498@inflateBac
  0040a	66 0f 1f 44 00
	00		 npad	 6
$LL92@inflateBac:

; 401  :                 for (;;) {
; 402  :                     here = state->lencode[BITS(state->lenbits)];

  00410	8b 45 d8	 mov	 eax, DWORD PTR tv3441[ebp]
  00413	ba 01 00 00 00	 mov	 edx, 1
  00418	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041a	d3 e2		 shl	 edx, cl
  0041c	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  0041f	4a		 dec	 edx
  00420	23 d7		 and	 edx, edi

; 403  :                     if ((unsigned)(here.bits) <= bits) break;

  00422	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00425	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00428	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0042b	8b c8		 mov	 ecx, eax
  0042d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00430	8b d0		 mov	 edx, eax
  00432	c1 ea 08	 shr	 edx, 8
  00435	89 4d d4	 mov	 DWORD PTR $T3[ebp], ecx
  00438	0f b6 ca	 movzx	 ecx, dl
  0043b	89 55 e0	 mov	 DWORD PTR $T6[ebp], edx
  0043e	3b cb		 cmp	 ecx, ebx
  00440	76 68		 jbe	 SHORT $LN489@inflateBac
$LL94@inflateBac:

; 404  :                     PULLBYTE();

  00442	85 f6		 test	 esi, esi
  00444	75 1a		 jne	 SHORT $LN100@inflateBac
  00446	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00449	50		 push	 eax
  0044a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0044d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00450	8b f0		 mov	 esi, eax
  00452	83 c4 08	 add	 esp, 8
  00455	85 f6		 test	 esi, esi
  00457	0f 84 4b 08 00
	00		 je	 $LN369@inflateBac
  0045d	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  00460	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00463	8b cb		 mov	 ecx, ebx
  00465	d3 e0		 shl	 eax, cl
  00467	47		 inc	 edi
  00468	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  0046b	ba 01 00 00 00	 mov	 edx, 1
  00470	8b 45 d8	 mov	 eax, DWORD PTR tv3441[ebp]
  00473	83 c3 08	 add	 ebx, 8
  00476	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00479	4e		 dec	 esi
  0047a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0047c	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  0047f	d3 e2		 shl	 edx, cl
  00481	4a		 dec	 edx
  00482	23 55 f4	 and	 edx, DWORD PTR _hold$1$[ebp]
  00485	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00488	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0048b	8b c8		 mov	 ecx, eax
  0048d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00490	8b d0		 mov	 edx, eax
  00492	c1 ea 08	 shr	 edx, 8
  00495	89 4d d4	 mov	 DWORD PTR tv3332[ebp], ecx
  00498	0f b6 ca	 movzx	 ecx, dl
  0049b	89 55 e0	 mov	 DWORD PTR $T6[ebp], edx
  0049e	3b cb		 cmp	 ecx, ebx
  004a0	77 a0		 ja	 SHORT $LL94@inflateBac

; 403  :                     if ((unsigned)(here.bits) <= bits) break;

  004a2	8b 4d d4	 mov	 ecx, DWORD PTR tv3332[ebp]
  004a5	0f b7 c9	 movzx	 ecx, cx
  004a8	eb 03		 jmp	 SHORT $LN375@inflateBac
$LN489@inflateBac:
  004aa	8b 4d d4	 mov	 ecx, DWORD PTR $T3[ebp]
$LN375@inflateBac:

; 405  :                 }
; 406  :                 if (here.val < 16) {

  004ad	0f b7 d1	 movzx	 edx, cx
  004b0	89 55 d4	 mov	 DWORD PTR tv3333[ebp], edx
  004b3	8b 55 e0	 mov	 edx, DWORD PTR $T6[ebp]
  004b6	66 83 f9 10	 cmp	 cx, 16			; 00000010H
  004ba	73 2d		 jae	 SHORT $LN284@inflateBac

; 407  :                     DROPBITS(here.bits);

  004bc	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  004bf	8a ca		 mov	 cl, dl

; 408  :                     state->lens[state->have++] = here.val;

  004c1	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  004c4	d3 ef		 shr	 edi, cl
  004c6	8b c8		 mov	 ecx, eax
  004c8	c1 e9 08	 shr	 ecx, 8
  004cb	0f b6 c9	 movzx	 ecx, cl
  004ce	2b d9		 sub	 ebx, ecx
  004d0	c1 e8 10	 shr	 eax, 16			; 00000010H
  004d3	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  004d6	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  004d9	66 89 44 4a 74	 mov	 WORD PTR [edx+ecx*2+116], ax
  004de	ff 42 6c	 inc	 DWORD PTR [edx+108]
  004e1	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]

; 409  :                 }

  004e4	e9 b0 01 00 00	 jmp	 $LN406@inflateBac
$LN284@inflateBac:

; 410  :                 else {
; 411  :                     if (here.val == 16) {

  004e9	8b 4d d4	 mov	 ecx, DWORD PTR tv3333[ebp]
  004ec	66 83 f9 10	 cmp	 cx, 16			; 00000010H
  004f0	0f 85 85 00 00
	00		 jne	 $LN286@inflateBac

; 412  :                         NEEDBITS(here.bits + 2);

  004f6	c1 e8 08	 shr	 eax, 8
  004f9	0f b6 c8	 movzx	 ecx, al
  004fc	0f b6 c2	 movzx	 eax, dl
  004ff	83 c0 02	 add	 eax, 2
  00502	89 4d e0	 mov	 DWORD PTR tv3376[ebp], ecx
  00505	89 45 d4	 mov	 DWORD PTR tv3373[ebp], eax
  00508	3b d8		 cmp	 ebx, eax
  0050a	73 3c		 jae	 SHORT $LN106@inflateBac
  0050c	0f 1f 40 00	 npad	 4
$LL109@inflateBac:
  00510	85 f6		 test	 esi, esi
  00512	75 1a		 jne	 SHORT $LN114@inflateBac
  00514	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00517	50		 push	 eax
  00518	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0051b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0051e	8b f0		 mov	 esi, eax
  00520	83 c4 08	 add	 esp, 8
  00523	85 f6		 test	 esi, esi
  00525	0f 84 7d 07 00
	00		 je	 $LN369@inflateBac
  0052b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN114@inflateBac:
  0052e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00531	8b cb		 mov	 ecx, ebx
  00533	d3 e0		 shl	 eax, cl
  00535	47		 inc	 edi
  00536	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  00539	83 c3 08	 add	 ebx, 8
  0053c	4e		 dec	 esi
  0053d	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00540	3b 5d d4	 cmp	 ebx, DWORD PTR tv3373[ebp]
  00543	72 cb		 jb	 SHORT $LL109@inflateBac
  00545	8b 4d e0	 mov	 ecx, DWORD PTR tv3376[ebp]
$LN106@inflateBac:

; 413  :                         DROPBITS(here.bits);
; 414  :                         if (state->have == 0) {

  00548	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  0054b	2b d9		 sub	 ebx, ecx
  0054d	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00550	d3 ef		 shr	 edi, cl
  00552	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00555	85 c0		 test	 eax, eax
  00557	0f 84 77 01 00
	00		 je	 $LN380@inflateBac

; 415  :                             strm->msg = (char *)"invalid bit length repeat";
; 416  :                             state->mode = BAD;
; 417  :                             break;
; 418  :                         }
; 419  :                         len = (unsigned)(state->lens[state->have - 1]);
; 420  :                         copy = 3 + BITS(2);
; 421  :                         DROPBITS(2);

  0055d	0f b7 44 42 72	 movzx	 eax, WORD PTR [edx+eax*2+114]
  00562	8b cf		 mov	 ecx, edi
  00564	83 e1 03	 and	 ecx, 3
  00567	c1 ef 02	 shr	 edi, 2
  0056a	83 c1 03	 add	 ecx, 3
  0056d	89 45 e0	 mov	 DWORD PTR $T5[ebp], eax
  00570	89 4d e4	 mov	 DWORD PTR _copy$1$[ebp], ecx
  00573	83 eb 02	 sub	 ebx, 2

; 422  :                     }

  00576	e9 d6 00 00 00	 jmp	 $LN502@inflateBac
$LN286@inflateBac:

; 423  :                     else if (here.val == 17) {

  0057b	66 83 f9 11	 cmp	 cx, 17			; 00000011H
  0057f	0f b6 cc	 movzx	 ecx, ah
  00582	0f b6 c2	 movzx	 eax, dl
  00585	75 5f		 jne	 SHORT $LN142@inflateBac

; 424  :                         NEEDBITS(here.bits + 3);

  00587	83 c0 03	 add	 eax, 3
  0058a	89 4d e0	 mov	 DWORD PTR tv3372[ebp], ecx
  0058d	89 45 d4	 mov	 DWORD PTR tv3346[ebp], eax
  00590	3b d8		 cmp	 ebx, eax
  00592	73 38		 jae	 SHORT $LN123@inflateBac
$LL126@inflateBac:
  00594	85 f6		 test	 esi, esi
  00596	75 1a		 jne	 SHORT $LN131@inflateBac
  00598	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0059b	50		 push	 eax
  0059c	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0059f	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005a2	8b f0		 mov	 esi, eax
  005a4	83 c4 08	 add	 esp, 8
  005a7	85 f6		 test	 esi, esi
  005a9	0f 84 f9 06 00
	00		 je	 $LN369@inflateBac
  005af	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN131@inflateBac:
  005b2	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  005b5	8b cb		 mov	 ecx, ebx
  005b7	d3 e0		 shl	 eax, cl
  005b9	47		 inc	 edi
  005ba	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  005bd	83 c3 08	 add	 ebx, 8
  005c0	4e		 dec	 esi
  005c1	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  005c4	3b 5d d4	 cmp	 ebx, DWORD PTR tv3346[ebp]
  005c7	72 cb		 jb	 SHORT $LL126@inflateBac
  005c9	8b 4d e0	 mov	 ecx, DWORD PTR tv3372[ebp]
$LN123@inflateBac:

; 425  :                         DROPBITS(here.bits);

  005cc	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  005cf	d3 ef		 shr	 edi, cl

; 426  :                         len = 0;
; 427  :                         copy = 3 + BITS(3);

  005d1	8b c7		 mov	 eax, edi
  005d3	83 e0 07	 and	 eax, 7
  005d6	83 c0 03	 add	 eax, 3

; 428  :                         DROPBITS(3);

  005d9	c1 ef 03	 shr	 edi, 3
  005dc	89 45 e4	 mov	 DWORD PTR _copy$1$[ebp], eax
  005df	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 429  :                     }

  005e4	eb 5d		 jmp	 SHORT $LN503@inflateBac
$LN142@inflateBac:

; 430  :                     else {
; 431  :                         NEEDBITS(here.bits + 7);

  005e6	83 c0 07	 add	 eax, 7
  005e9	89 4d e0	 mov	 DWORD PTR tv3371[ebp], ecx
  005ec	89 45 d4	 mov	 DWORD PTR tv3345[ebp], eax
  005ef	3b d8		 cmp	 ebx, eax
  005f1	73 38		 jae	 SHORT $LN140@inflateBac
$LL143@inflateBac:
  005f3	85 f6		 test	 esi, esi
  005f5	75 1a		 jne	 SHORT $LN148@inflateBac
  005f7	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  005fa	50		 push	 eax
  005fb	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005fe	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00601	8b f0		 mov	 esi, eax
  00603	83 c4 08	 add	 esp, 8
  00606	85 f6		 test	 esi, esi
  00608	0f 84 9a 06 00
	00		 je	 $LN369@inflateBac
  0060e	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN148@inflateBac:
  00611	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00614	8b cb		 mov	 ecx, ebx
  00616	d3 e0		 shl	 eax, cl
  00618	47		 inc	 edi
  00619	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  0061c	83 c3 08	 add	 ebx, 8
  0061f	4e		 dec	 esi
  00620	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00623	3b 5d d4	 cmp	 ebx, DWORD PTR tv3345[ebp]
  00626	72 cb		 jb	 SHORT $LL143@inflateBac
  00628	8b 4d e0	 mov	 ecx, DWORD PTR tv3371[ebp]
$LN140@inflateBac:

; 432  :                         DROPBITS(here.bits);

  0062b	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0062e	d3 ef		 shr	 edi, cl

; 433  :                         len = 0;
; 434  :                         copy = 11 + BITS(7);

  00630	8b c7		 mov	 eax, edi
  00632	83 e0 7f	 and	 eax, 127		; 0000007fH
  00635	83 c0 0b	 add	 eax, 11			; 0000000bH

; 435  :                         DROPBITS(7);

  00638	c1 ef 07	 shr	 edi, 7
  0063b	89 45 e4	 mov	 DWORD PTR _copy$1$[ebp], eax
  0063e	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN503@inflateBac:

; 436  :                     }
; 437  :                     if (state->have + copy > state->nlen + state->ndist) {

  00643	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00646	2b c1		 sub	 eax, ecx
  00648	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  0064f	03 d8		 add	 ebx, eax
$LN502@inflateBac:
  00651	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00654	8b 4a 68	 mov	 ecx, DWORD PTR [edx+104]
  00657	03 4a 64	 add	 ecx, DWORD PTR [edx+100]
  0065a	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  0065d	89 45 d4	 mov	 DWORD PTR $T4[ebp], eax
  00660	8b 45 e4	 mov	 eax, DWORD PTR _copy$1$[ebp]
  00663	03 45 d4	 add	 eax, DWORD PTR $T4[ebp]
  00666	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00669	89 5d e8	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0066c	3b c1		 cmp	 eax, ecx
  0066e	77 64		 ja	 SHORT $LN380@inflateBac
  00670	8b 7d e4	 mov	 edi, DWORD PTR _copy$1$[ebp]
  00673	8b 4d d4	 mov	 ecx, DWORD PTR $T4[ebp]
  00676	8b 5d e0	 mov	 ebx, DWORD PTR $T5[ebp]
  00679	0f 1f 80 00 00
	00 00		 npad	 7
$LL157@inflateBac:

; 438  :                         strm->msg = (char *)"invalid bit length repeat";
; 439  :                         state->mode = BAD;
; 440  :                         break;
; 441  :                     }
; 442  :                     while (copy--)
; 443  :                         state->lens[state->have++] = (unsigned short)len;

  00680	66 89 5c 4a 74	 mov	 WORD PTR [edx+ecx*2+116], bx
  00685	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00688	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0068b	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx
  0068e	83 ef 01	 sub	 edi, 1
  00691	75 ed		 jne	 SHORT $LL157@inflateBac
  00693	8b 5d e8	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00696	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN406@inflateBac:

; 395  :             }
; 396  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 397  : 
; 398  :             /* get length and distance code code lengths */
; 399  :             state->have = 0;
; 400  :             while (state->have < state->nlen + state->ndist) {

  00699	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0069c	03 42 64	 add	 eax, DWORD PTR [edx+100]
  0069f	3b c8		 cmp	 ecx, eax
  006a1	0f 82 69 fd ff
	ff		 jb	 $LL92@inflateBac
$LN498@inflateBac:

; 444  :                 }
; 445  :             }
; 446  : 
; 447  :             /* handle error breaks in while */
; 448  :             if (state->mode == BAD) break;

  006a7	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
$LN93@inflateBac:
  006aa	81 7a 04 51 3f
	00 00		 cmp	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006b1	0f 84 a7 f9 ff
	ff		 je	 $LN491@inflateBac

; 449  : 
; 450  :             /* check for end-of-block code (better have one) */
; 451  :             if (state->lens[256] == 0) {

  006b7	66 83 ba 74 02
	00 00 00	 cmp	 WORD PTR [edx+628], 0
  006bf	75 26		 jne	 SHORT $LN299@inflateBac

; 452  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006c1	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@

; 453  :                 state->mode = BAD;

  006c8	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 454  :                 break;

  006cf	e9 8a f9 ff ff	 jmp	 $LN491@inflateBac
$LN380@inflateBac:

; 444  :                 }
; 445  :             }
; 446  : 
; 447  :             /* handle error breaks in while */
; 448  :             if (state->mode == BAD) break;

  006d4	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  006d7	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
  006de	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006e5	eb c3		 jmp	 SHORT $LN93@inflateBac
$LN299@inflateBac:

; 455  :             }
; 456  : 
; 457  :             /* build code tables -- note: do not change the lenbits or distbits
; 458  :                values here (9 and 6) without reading the comments in inftrees.h
; 459  :                concerning the ENOUGH constants, which depend on those values */
; 460  :             state->next = state->codes;
; 461  :             state->lencode = (code const FAR *)(state->next);
; 462  :             state->lenbits = 9;
; 463  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  006e7	ff 75 dc	 push	 DWORD PTR tv3381[ebp]
  006ea	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]
  006ed	c7 42 58 09 00
	00 00		 mov	 DWORD PTR [edx+88], 9
  006f4	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]
  006fa	89 01		 mov	 DWORD PTR [ecx], eax
  006fc	89 42 50	 mov	 DWORD PTR [edx+80], eax
  006ff	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  00702	50		 push	 eax
  00703	51		 push	 ecx
  00704	ff 72 64	 push	 DWORD PTR [edx+100]
  00707	8b 55 cc	 mov	 edx, DWORD PTR tv3380[ebp]
  0070a	b9 01 00 00 00	 mov	 ecx, 1
  0070f	e8 00 00 00 00	 call	 _inflate_table
  00714	83 c4 10	 add	 esp, 16			; 00000010H

; 464  :                                 &(state->lenbits), state->work);
; 465  :             if (ret) {

  00717	85 c0		 test	 eax, eax
  00719	74 19		 je	 SHORT $LN300@inflateBac

; 466  :                 strm->msg = (char *)"invalid literal/lengths set";

  0071b	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 467  :                 state->mode = BAD;

  0071e	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00721	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
  00728	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 468  :                 break;

  0072f	e9 2a f9 ff ff	 jmp	 $LN491@inflateBac
$LN300@inflateBac:

; 469  :             }
; 470  :             state->distcode = (code const FAR *)(state->next);

  00734	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00737	8b 55 d0	 mov	 edx, DWORD PTR tv3440[ebp]

; 471  :             state->distbits = 6;
; 472  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  0073a	ff 75 dc	 push	 DWORD PTR tv3381[ebp]
  0073d	c7 41 5c 06 00
	00 00		 mov	 DWORD PTR [ecx+92], 6
  00744	8b 02		 mov	 eax, DWORD PTR [edx]
  00746	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00749	8d 41 5c	 lea	 eax, DWORD PTR [ecx+92]
  0074c	50		 push	 eax
  0074d	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00750	52		 push	 edx
  00751	ff 71 68	 push	 DWORD PTR [ecx+104]
  00754	83 c1 74	 add	 ecx, 116		; 00000074H
  00757	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0075a	b9 02 00 00 00	 mov	 ecx, 2
  0075f	e8 00 00 00 00	 call	 _inflate_table

; 473  :                             &(state->next), &(state->distbits), state->work);
; 474  :             if (ret) {

  00764	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00767	83 c4 10	 add	 esp, 16			; 00000010H
  0076a	85 c0		 test	 eax, eax
  0076c	74 16		 je	 SHORT $LN301@inflateBac

; 475  :                 strm->msg = (char *)"invalid distances set";

  0076e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00771	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@

; 476  :                 state->mode = BAD;

  00778	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 477  :                 break;

  0077f	e9 da f8 ff ff	 jmp	 $LN491@inflateBac
$LN301@inflateBac:

; 478  :             }
; 479  :             Tracev((stderr, "inflate:       codes ok\n"));
; 480  :             state->mode = LEN;

  00784	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
$LN302@inflateBac:

; 481  :                 /* fallthrough */
; 482  : 
; 483  :         case LEN:
; 484  :             /* use inflate_fast() if we have enough input and output */
; 485  :             if (have >= 6 && left >= 258) {

  0078b	83 fe 06	 cmp	 esi, 6
  0078e	0f 82 81 00 00
	00		 jb	 $LN303@inflateBac
  00794	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00797	81 f9 02 01 00
	00		 cmp	 ecx, 258		; 00000102H
  0079d	72 76		 jb	 SHORT $LN303@inflateBac

; 486  :                 RESTORE();

  0079f	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007a2	8b 45 ec	 mov	 eax, DWORD PTR _put$1$[ebp]
  007a5	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  007a8	8b c2		 mov	 eax, edx
  007aa	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  007ad	8b ca		 mov	 ecx, edx
  007af	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  007b2	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  007b5	89 01		 mov	 DWORD PTR [ecx], eax
  007b7	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 487  :                 if (state->whave < state->wsize)

  007ba	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  007bd	89 7a 3c	 mov	 DWORD PTR [edx+60], edi
  007c0	89 5a 40	 mov	 DWORD PTR [edx+64], ebx
  007c3	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  007c6	73 08		 jae	 SHORT $LN304@inflateBac

; 488  :                     state->whave = state->wsize - left;

  007c8	8b c1		 mov	 eax, ecx
  007ca	2b 45 f0	 sub	 eax, DWORD PTR _left$1$[ebp]
  007cd	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN304@inflateBac:

; 489  :                 inflate_fast(strm, state->wsize);

  007d0	8b d1		 mov	 edx, ecx
  007d2	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007d5	e8 00 00 00 00	 call	 _inflate_fast

; 490  :                 LOAD();

  007da	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007dd	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  007e0	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  007e3	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  007e6	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  007e9	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  007ec	89 45 f0	 mov	 DWORD PTR _left$1$[ebp], eax
  007ef	8b 01		 mov	 eax, DWORD PTR [ecx]
  007f1	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  007f4	8b 7a 3c	 mov	 edi, DWORD PTR [edx+60]
  007f7	8b 5a 40	 mov	 ebx, DWORD PTR [edx+64]

; 491  :                 break;

  007fa	e9 5f f8 ff ff	 jmp	 $LN491@inflateBac
$LN277@inflateBac:

; 370  :                 strm->msg = (char *)"too many length or distance symbols";

  007ff	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00802	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@

; 371  :                 state->mode = BAD;

  00809	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 372  :                 break;

  00810	e9 49 f8 ff ff	 jmp	 $LN491@inflateBac
$LN303@inflateBac:

; 492  :             }
; 493  : 
; 494  :             /* get a literal, length, or end-of-block code */
; 495  :             for (;;) {
; 496  :                 here = state->lencode[BITS(state->lenbits)];

  00815	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00818	b8 01 00 00 00	 mov	 eax, 1
  0081d	d3 e0		 shl	 eax, cl
  0081f	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  00822	48		 dec	 eax
  00823	23 c7		 and	 eax, edi
  00825	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00828	8b c8		 mov	 ecx, eax
  0082a	c1 e9 08	 shr	 ecx, 8
  0082d	0f b6 c9	 movzx	 ecx, cl

; 497  :                 if ((unsigned)(here.bits) <= bits) break;

  00830	3b cb		 cmp	 ecx, ebx
  00832	76 50		 jbe	 SHORT $LN382@inflateBac
$LL165@inflateBac:

; 498  :                 PULLBYTE();

  00834	85 f6		 test	 esi, esi
  00836	75 1a		 jne	 SHORT $LN171@inflateBac
  00838	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0083b	50		 push	 eax
  0083c	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0083f	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00842	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00845	8b f0		 mov	 esi, eax
  00847	83 c4 08	 add	 esp, 8
  0084a	85 f6		 test	 esi, esi
  0084c	0f 84 71 04 00
	00		 je	 $LN383@inflateBac
$LN171@inflateBac:
  00852	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00855	8b cb		 mov	 ecx, ebx
  00857	83 c3 08	 add	 ebx, 8
  0085a	4e		 dec	 esi
  0085b	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0085e	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00861	d3 e0		 shl	 eax, cl
  00863	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00866	03 f8		 add	 edi, eax
  00868	b8 01 00 00 00	 mov	 eax, 1
  0086d	d3 e0		 shl	 eax, cl
  0086f	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  00872	48		 dec	 eax
  00873	23 c7		 and	 eax, edi
  00875	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00878	8b c8		 mov	 ecx, eax
  0087a	c1 e9 08	 shr	 ecx, 8
  0087d	0f b6 c9	 movzx	 ecx, cl
  00880	3b cb		 cmp	 ecx, ebx
  00882	77 b0		 ja	 SHORT $LL165@inflateBac
$LN382@inflateBac:

; 499  :             }
; 500  :             if (here.op && (here.op & 0xf0) == 0) {

  00884	84 c0		 test	 al, al
  00886	0f 84 a8 00 00
	00		 je	 $LN184@inflateBac
  0088c	a8 f0		 test	 al, 240			; 000000f0H
  0088e	0f 85 a0 00 00
	00		 jne	 $LN184@inflateBac

; 501  :                 last = here;

  00894	8b c8		 mov	 ecx, eax
  00896	c1 e9 08	 shr	 ecx, 8

; 502  :                 for (;;) {
; 503  :                     here = state->lencode[last.val +

  00899	0f b6 c9	 movzx	 ecx, cl
  0089c	89 4d f4	 mov	 DWORD PTR tv3439[ebp], ecx
  0089f	8b c8		 mov	 ecx, eax
  008a1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  008a4	89 4d d0	 mov	 DWORD PTR tv3438[ebp], ecx
  008a7	0f b6 c8	 movzx	 ecx, al
  008aa	b8 01 00 00 00	 mov	 eax, 1
  008af	03 4d f4	 add	 ecx, DWORD PTR tv3439[ebp]
  008b2	d3 e0		 shl	 eax, cl
  008b4	8b 4d f4	 mov	 ecx, DWORD PTR tv3439[ebp]
  008b7	48		 dec	 eax
  008b8	89 45 cc	 mov	 DWORD PTR tv3466[ebp], eax
  008bb	23 c7		 and	 eax, edi
  008bd	d3 e8		 shr	 eax, cl
  008bf	03 45 d0	 add	 eax, DWORD PTR tv3438[ebp]
  008c2	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  008c5	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  008c8	8b c8		 mov	 ecx, eax
  008ca	c1 e9 08	 shr	 ecx, 8

; 504  :                             (BITS(last.bits + last.op) >> last.bits)];
; 505  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008cd	0f b6 c9	 movzx	 ecx, cl
  008d0	03 4d f4	 add	 ecx, DWORD PTR tv3439[ebp]
  008d3	3b cb		 cmp	 ecx, ebx
  008d5	76 56		 jbe	 SHORT $LN185@inflateBac
$LL174@inflateBac:

; 506  :                     PULLBYTE();

  008d7	85 f6		 test	 esi, esi
  008d9	75 17		 jne	 SHORT $LN180@inflateBac
  008db	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  008de	50		 push	 eax
  008df	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  008e2	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  008e5	8b f0		 mov	 esi, eax
  008e7	83 c4 08	 add	 esp, 8
  008ea	85 f6		 test	 esi, esi
  008ec	0f 84 b6 03 00
	00		 je	 $LN369@inflateBac
$LN180@inflateBac:
  008f2	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  008f5	8b cb		 mov	 ecx, ebx
  008f7	8b 55 cc	 mov	 edx, DWORD PTR tv3466[ebp]
  008fa	83 c3 08	 add	 ebx, 8
  008fd	4e		 dec	 esi
  008fe	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00901	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00904	d3 e0		 shl	 eax, cl
  00906	8b 4d f4	 mov	 ecx, DWORD PTR tv3439[ebp]
  00909	03 f8		 add	 edi, eax
  0090b	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  0090e	23 d7		 and	 edx, edi
  00910	d3 ea		 shr	 edx, cl
  00912	03 55 d0	 add	 edx, DWORD PTR tv3438[ebp]
  00915	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00918	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0091b	8b c8		 mov	 ecx, eax
  0091d	c1 e9 08	 shr	 ecx, 8
  00920	0f b6 c9	 movzx	 ecx, cl
  00923	03 4d f4	 add	 ecx, DWORD PTR tv3439[ebp]
  00926	3b cb		 cmp	 ecx, ebx
  00928	77 ad		 ja	 SHORT $LL174@inflateBac
  0092a	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN185@inflateBac:

; 507  :                 }
; 508  :                 DROPBITS(last.bits);

  0092d	8b 4d f4	 mov	 ecx, DWORD PTR tv3439[ebp]
  00930	d3 ef		 shr	 edi, cl
  00932	2b d9		 sub	 ebx, ecx
$LN184@inflateBac:

; 509  :             }
; 510  :             DROPBITS(here.bits);

  00934	8b c8		 mov	 ecx, eax
  00936	c1 e9 08	 shr	 ecx, 8
  00939	0f b6 c9	 movzx	 ecx, cl
  0093c	d3 ef		 shr	 edi, cl
  0093e	2b d9		 sub	 ebx, ecx

; 511  :             state->length = (unsigned)here.val;

  00940	8b c8		 mov	 ecx, eax
  00942	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00945	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 512  : 
; 513  :             /* process literal */
; 514  :             if (here.op == 0) {

  00948	84 c0		 test	 al, al
  0094a	75 46		 jne	 SHORT $LN312@inflateBac

; 515  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 516  :                         "inflate:         literal '%c'\n" :
; 517  :                         "inflate:         literal 0x%02x\n", here.val));
; 518  :                 ROOM();

  0094c	83 7d f0 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  00950	75 25		 jne	 SHORT $LN189@inflateBac
  00952	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00955	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00958	51		 push	 ecx
  00959	50		 push	 eax
  0095a	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  0095d	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  00960	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
  00963	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00966	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00969	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  0096c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0096f	85 c0		 test	 eax, eax
  00971	0f 85 45 03 00
	00		 jne	 $LN394@inflateBac
$LN189@inflateBac:

; 519  :                 *put++ = (unsigned char)(state->length);

  00977	8b 4d ec	 mov	 ecx, DWORD PTR _put$1$[ebp]
  0097a	8a 42 44	 mov	 al, BYTE PTR [edx+68]
  0097d	88 01		 mov	 BYTE PTR [ecx], al
  0097f	41		 inc	 ecx

; 520  :                 left--;

  00980	ff 4d f0	 dec	 DWORD PTR _left$1$[ebp]
  00983	89 4d ec	 mov	 DWORD PTR _put$1$[ebp], ecx

; 521  :                 state->mode = LEN;

  00986	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H

; 522  :                 break;

  0098d	e9 cc f6 ff ff	 jmp	 $LN491@inflateBac
$LN312@inflateBac:

; 523  :             }
; 524  : 
; 525  :             /* process end of block */
; 526  :             if (here.op & 32) {

  00992	a8 20		 test	 al, 32			; 00000020H
  00994	74 0c		 je	 SHORT $LN315@inflateBac

; 527  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 528  :                 state->mode = TYPE;

  00996	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 529  :                 break;

  0099d	e9 bc f6 ff ff	 jmp	 $LN491@inflateBac
$LN315@inflateBac:

; 530  :             }
; 531  : 
; 532  :             /* invalid code */
; 533  :             if (here.op & 64) {

  009a2	a8 40		 test	 al, 64			; 00000040H
  009a4	74 16		 je	 SHORT $LN316@inflateBac

; 534  :                 strm->msg = (char *)"invalid literal/length code";

  009a6	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  009a9	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@

; 535  :                 state->mode = BAD;

  009b0	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 536  :                 break;

  009b7	e9 a2 f6 ff ff	 jmp	 $LN491@inflateBac
$LN316@inflateBac:

; 537  :             }
; 538  : 
; 539  :             /* length code -- get extra bits, if any */
; 540  :             state->extra = (unsigned)(here.op) & 15;

  009bc	0f b6 c8	 movzx	 ecx, al
  009bf	83 e1 0f	 and	 ecx, 15			; 0000000fH
  009c2	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 541  :             if (state->extra != 0) {

  009c5	74 56		 je	 SHORT $LN204@inflateBac

; 542  :                 NEEDBITS(state->extra);

  009c7	3b d9		 cmp	 ebx, ecx
  009c9	73 41		 jae	 SHORT $LN192@inflateBac
  009cb	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  009ce	66 90		 npad	 2
$LL195@inflateBac:
  009d0	85 f6		 test	 esi, esi
  009d2	75 1d		 jne	 SHORT $LN200@inflateBac
  009d4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  009d7	50		 push	 eax
  009d8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  009db	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  009de	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  009e1	8b f0		 mov	 esi, eax
  009e3	83 c4 08	 add	 esp, 8
  009e6	85 f6		 test	 esi, esi
  009e8	0f 84 d5 02 00
	00		 je	 $LN383@inflateBac
  009ee	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  009f1	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  009f4	8b cb		 mov	 ecx, ebx
  009f6	d3 e0		 shl	 eax, cl
  009f8	83 c3 08	 add	 ebx, 8
  009fb	03 f8		 add	 edi, eax
  009fd	4e		 dec	 esi
  009fe	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a01	40		 inc	 eax
  00a02	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00a05	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00a08	3b d9		 cmp	 ebx, ecx
  00a0a	72 c4		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 543  :                 state->length += BITS(state->extra);

  00a0c	b8 01 00 00 00	 mov	 eax, 1
  00a11	d3 e0		 shl	 eax, cl
  00a13	48		 dec	 eax
  00a14	23 c7		 and	 eax, edi

; 544  :                 DROPBITS(state->extra);

  00a16	d3 ef		 shr	 edi, cl
  00a18	01 42 44	 add	 DWORD PTR [edx+68], eax
  00a1b	2b d9		 sub	 ebx, ecx
$LN204@inflateBac:

; 545  :             }
; 546  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 547  : 
; 548  :             /* get distance code */
; 549  :             for (;;) {
; 550  :                 here = state->distcode[BITS(state->distbits)];

  00a1d	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00a20	b8 01 00 00 00	 mov	 eax, 1
  00a25	d3 e0		 shl	 eax, cl
  00a27	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00a2a	48		 dec	 eax
  00a2b	23 c7		 and	 eax, edi
  00a2d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00a30	8b c8		 mov	 ecx, eax
  00a32	c1 e9 08	 shr	 ecx, 8
  00a35	0f b6 c9	 movzx	 ecx, cl

; 551  :                 if ((unsigned)(here.bits) <= bits) break;

  00a38	3b cb		 cmp	 ecx, ebx
  00a3a	76 54		 jbe	 SHORT $LN490@inflateBac
  00a3c	0f 1f 40 00	 npad	 4
$LL206@inflateBac:

; 552  :                 PULLBYTE();

  00a40	85 f6		 test	 esi, esi
  00a42	75 1a		 jne	 SHORT $LN212@inflateBac
  00a44	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a47	50		 push	 eax
  00a48	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a4b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a4e	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a51	8b f0		 mov	 esi, eax
  00a53	83 c4 08	 add	 esp, 8
  00a56	85 f6		 test	 esi, esi
  00a58	0f 84 65 02 00
	00		 je	 $LN383@inflateBac
$LN212@inflateBac:
  00a5e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a61	8b cb		 mov	 ecx, ebx
  00a63	83 c3 08	 add	 ebx, 8
  00a66	4e		 dec	 esi
  00a67	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a6a	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00a6d	d3 e0		 shl	 eax, cl
  00a6f	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00a72	03 f8		 add	 edi, eax
  00a74	b8 01 00 00 00	 mov	 eax, 1
  00a79	d3 e0		 shl	 eax, cl
  00a7b	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00a7e	48		 dec	 eax
  00a7f	23 c7		 and	 eax, edi
  00a81	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00a84	8b c8		 mov	 ecx, eax
  00a86	c1 e9 08	 shr	 ecx, 8
  00a89	0f b6 c9	 movzx	 ecx, cl
  00a8c	3b cb		 cmp	 ecx, ebx
  00a8e	77 b0		 ja	 SHORT $LL206@inflateBac
$LN490@inflateBac:

; 553  :             }
; 554  :             if ((here.op & 0xf0) == 0) {

  00a90	a8 f0		 test	 al, 240			; 000000f0H
  00a92	0f 85 a6 00 00
	00		 jne	 $LN225@inflateBac

; 555  :                 last = here;

  00a98	8b c8		 mov	 ecx, eax
  00a9a	c1 e9 08	 shr	 ecx, 8

; 556  :                 for (;;) {
; 557  :                     here = state->distcode[last.val +

  00a9d	0f b6 c9	 movzx	 ecx, cl
  00aa0	89 4d f4	 mov	 DWORD PTR tv3437[ebp], ecx
  00aa3	8b c8		 mov	 ecx, eax
  00aa5	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00aa8	89 4d d0	 mov	 DWORD PTR tv3436[ebp], ecx
  00aab	0f b6 c8	 movzx	 ecx, al
  00aae	b8 01 00 00 00	 mov	 eax, 1
  00ab3	03 4d f4	 add	 ecx, DWORD PTR tv3437[ebp]
  00ab6	d3 e0		 shl	 eax, cl
  00ab8	8b 4d f4	 mov	 ecx, DWORD PTR tv3437[ebp]
  00abb	48		 dec	 eax
  00abc	89 45 cc	 mov	 DWORD PTR tv3472[ebp], eax
  00abf	23 c7		 and	 eax, edi
  00ac1	d3 e8		 shr	 eax, cl
  00ac3	03 45 d0	 add	 eax, DWORD PTR tv3436[ebp]
  00ac6	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00ac9	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00acc	8b c8		 mov	 ecx, eax
  00ace	c1 e9 08	 shr	 ecx, 8

; 558  :                             (BITS(last.bits + last.op) >> last.bits)];
; 559  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00ad1	0f b6 c9	 movzx	 ecx, cl
  00ad4	03 4d f4	 add	 ecx, DWORD PTR tv3437[ebp]
  00ad7	3b cb		 cmp	 ecx, ebx
  00ad9	76 5c		 jbe	 SHORT $LN226@inflateBac
  00adb	0f 1f 44 00 00	 npad	 5
$LL215@inflateBac:

; 560  :                     PULLBYTE();

  00ae0	85 f6		 test	 esi, esi
  00ae2	75 17		 jne	 SHORT $LN221@inflateBac
  00ae4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00ae7	50		 push	 eax
  00ae8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00aeb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00aee	8b f0		 mov	 esi, eax
  00af0	83 c4 08	 add	 esp, 8
  00af3	85 f6		 test	 esi, esi
  00af5	0f 84 ad 01 00
	00		 je	 $LN369@inflateBac
$LN221@inflateBac:
  00afb	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  00afe	8b cb		 mov	 ecx, ebx
  00b00	83 c3 08	 add	 ebx, 8
  00b03	4e		 dec	 esi
  00b04	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00b07	42		 inc	 edx
  00b08	d3 e0		 shl	 eax, cl
  00b0a	8b 4d f4	 mov	 ecx, DWORD PTR tv3437[ebp]
  00b0d	03 f8		 add	 edi, eax
  00b0f	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b12	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  00b15	8b 55 cc	 mov	 edx, DWORD PTR tv3472[ebp]
  00b18	23 d7		 and	 edx, edi
  00b1a	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00b1d	d3 ea		 shr	 edx, cl
  00b1f	03 55 d0	 add	 edx, DWORD PTR tv3436[ebp]
  00b22	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00b25	8b c8		 mov	 ecx, eax
  00b27	c1 e9 08	 shr	 ecx, 8
  00b2a	0f b6 c9	 movzx	 ecx, cl
  00b2d	03 4d f4	 add	 ecx, DWORD PTR tv3437[ebp]
  00b30	3b cb		 cmp	 ecx, ebx
  00b32	77 ac		 ja	 SHORT $LL215@inflateBac
  00b34	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN226@inflateBac:

; 561  :                 }
; 562  :                 DROPBITS(last.bits);

  00b37	8b 4d f4	 mov	 ecx, DWORD PTR tv3437[ebp]
  00b3a	d3 ef		 shr	 edi, cl
  00b3c	2b d9		 sub	 ebx, ecx
$LN225@inflateBac:

; 563  :             }
; 564  :             DROPBITS(here.bits);

  00b3e	8b c8		 mov	 ecx, eax
  00b40	c1 e9 08	 shr	 ecx, 8
  00b43	0f b6 c9	 movzx	 ecx, cl
  00b46	d3 ef		 shr	 edi, cl
  00b48	2b d9		 sub	 ebx, ecx
  00b4a	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00b4d	89 5d e8	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 565  :             if (here.op & 64) {

  00b50	a8 40		 test	 al, 64			; 00000040H
  00b52	74 16		 je	 SHORT $LN327@inflateBac

; 566  :                 strm->msg = (char *)"invalid distance code";

  00b54	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00b57	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code@

; 567  :                 state->mode = BAD;

  00b5e	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 568  :                 break;

  00b65	e9 f4 f4 ff ff	 jmp	 $LN491@inflateBac
$LN327@inflateBac:

; 569  :             }
; 570  :             state->offset = (unsigned)here.val;

  00b6a	8b c8		 mov	 ecx, eax
  00b6c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00b6f	89 4d d0	 mov	 DWORD PTR $T1[ebp], ecx
  00b72	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 571  : 
; 572  :             /* get distance extra bits, if any */
; 573  :             state->extra = (unsigned)(here.op) & 15;

  00b75	0f b6 c8	 movzx	 ecx, al
  00b78	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00b7b	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 574  :             if (state->extra != 0) {

  00b7e	74 60		 je	 SHORT $LN242@inflateBac

; 575  :                 NEEDBITS(state->extra);

  00b80	3b d9		 cmp	 ebx, ecx
  00b82	73 3f		 jae	 SHORT $LN230@inflateBac
  00b84	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LL233@inflateBac:
  00b87	85 f6		 test	 esi, esi
  00b89	75 1d		 jne	 SHORT $LN238@inflateBac
  00b8b	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00b8e	50		 push	 eax
  00b8f	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b92	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b95	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00b98	8b f0		 mov	 esi, eax
  00b9a	83 c4 08	 add	 esp, 8
  00b9d	85 f6		 test	 esi, esi
  00b9f	0f 84 1e 01 00
	00		 je	 $LN383@inflateBac
  00ba5	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00ba8	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00bab	8b cb		 mov	 ecx, ebx
  00bad	d3 e0		 shl	 eax, cl
  00baf	83 c3 08	 add	 ebx, 8
  00bb2	03 f8		 add	 edi, eax
  00bb4	4e		 dec	 esi
  00bb5	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00bb8	40		 inc	 eax
  00bb9	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00bbc	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00bbf	3b d9		 cmp	 ebx, ecx
  00bc1	72 c4		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 576  :                 state->offset += BITS(state->extra);

  00bc3	b8 01 00 00 00	 mov	 eax, 1
  00bc8	d3 e0		 shl	 eax, cl
  00bca	48		 dec	 eax
  00bcb	23 c7		 and	 eax, edi

; 577  :                 DROPBITS(state->extra);

  00bcd	d3 ef		 shr	 edi, cl
  00bcf	01 42 48	 add	 DWORD PTR [edx+72], eax
  00bd2	2b d9		 sub	 ebx, ecx
  00bd4	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00bd7	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  00bda	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00bdd	89 5d e8	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN242@inflateBac:

; 578  :             }
; 579  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00be0	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00be3	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  00be6	1b c0		 sbb	 eax, eax
  00be8	23 45 f0	 and	 eax, DWORD PTR _left$1$[ebp]
  00beb	2b c8		 sub	 ecx, eax
  00bed	39 4d d0	 cmp	 DWORD PTR $T1[ebp], ecx
  00bf0	76 16		 jbe	 SHORT $LL246@inflateBac

; 580  :                                                 left : 0)) {
; 581  :                 strm->msg = (char *)"invalid distance too far back";

  00bf2	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00bf5	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@

; 582  :                 state->mode = BAD;

  00bfc	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 583  :                 break;

  00c03	e9 56 f4 ff ff	 jmp	 $LN491@inflateBac
$LL246@inflateBac:

; 584  :             }
; 585  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 586  : 
; 587  :             /* copy match from window to output */
; 588  :             do {
; 589  :                 ROOM();

  00c08	8b 45 f0	 mov	 eax, DWORD PTR _left$1$[ebp]
  00c0b	85 c0		 test	 eax, eax
  00c0d	75 29		 jne	 SHORT $LN247@inflateBac
  00c0f	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00c12	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00c15	8b 5d 18	 mov	 ebx, DWORD PTR _out_desc$[ebp]
  00c18	51		 push	 ecx
  00c19	50		 push	 eax
  00c1a	53		 push	 ebx
  00c1b	89 45 ec	 mov	 DWORD PTR _put$1$[ebp], eax
  00c1e	89 4d f0	 mov	 DWORD PTR _left$1$[ebp], ecx
  00c21	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00c24	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00c27	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c2a	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c2d	85 c0		 test	 eax, eax
  00c2f	0f 85 9c 00 00
	00		 jne	 $LN392@inflateBac
  00c35	8b 45 f0	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN247@inflateBac:

; 590  :                 copy = state->wsize - state->offset;

  00c38	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  00c3b	8b d8		 mov	 ebx, eax
  00c3d	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00c40	89 55 cc	 mov	 DWORD PTR tv3355[ebp], edx
  00c43	8b 78 2c	 mov	 edi, DWORD PTR [eax+44]

; 591  :                 if (copy < left) {
; 592  :                     from = put + copy;
; 593  :                     copy = left - copy;
; 594  :                 }
; 595  :                 else {
; 596  :                     from = put - state->offset;
; 597  :                     copy = left;
; 598  :                 }
; 599  :                 if (copy > state->length) copy = state->length;

  00c46	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00c49	2b fa		 sub	 edi, edx
  00c4b	8b 55 f0	 mov	 edx, DWORD PTR _left$1$[ebp]
  00c4e	8b ca		 mov	 ecx, edx
  00c50	2b cf		 sub	 ecx, edi
  00c52	3b fa		 cmp	 edi, edx
  00c54	0f 43 ca	 cmovae	 ecx, edx

; 600  :                 state->length -= copy;

  00c57	8b d0		 mov	 edx, eax
  00c59	3b c8		 cmp	 ecx, eax
  00c5b	0f 46 d1	 cmovbe	 edx, ecx
  00c5e	8b 4d f8	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00c61	2b c2		 sub	 eax, edx
  00c63	89 55 d0	 mov	 DWORD PTR _copy$3$[ebp], edx
  00c66	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 601  :                 left -= copy;

  00c69	8b ca		 mov	 ecx, edx
  00c6b	8b 45 ec	 mov	 eax, DWORD PTR _put$1$[ebp]
  00c6e	2b 45 cc	 sub	 eax, DWORD PTR tv3355[ebp]
  00c71	8b 55 ec	 mov	 edx, DWORD PTR _put$1$[ebp]
  00c74	29 4d f0	 sub	 DWORD PTR _left$1$[ebp], ecx
  00c77	03 d7		 add	 edx, edi
  00c79	3b fb		 cmp	 edi, ebx
  00c7b	8b 5d ec	 mov	 ebx, DWORD PTR _put$1$[ebp]
  00c7e	0f 43 d0	 cmovae	 edx, eax
  00c81	2b d3		 sub	 edx, ebx
$LL252@inflateBac:

; 602  :                 do {
; 603  :                     *put++ = *from++;

  00c83	8a 04 1a	 mov	 al, BYTE PTR [edx+ebx]
  00c86	88 03		 mov	 BYTE PTR [ebx], al
  00c88	43		 inc	 ebx

; 604  :                 } while (--copy);

  00c89	83 e9 01	 sub	 ecx, 1
  00c8c	75 f5		 jne	 SHORT $LL252@inflateBac

; 605  :             } while (state->length != 0);

  00c8e	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c91	89 5d ec	 mov	 DWORD PTR _put$1$[ebp], ebx
  00c94	39 4a 44	 cmp	 DWORD PTR [edx+68], ecx
  00c97	0f 85 6b ff ff
	ff		 jne	 $LL246@inflateBac

; 289  : 
; 290  :     /* Inflate until end of block marked as last */
; 291  :     for (;;)
; 292  :         switch (state->mode) {

  00c9d	8b 5d e8	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00ca0	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00ca3	e9 b6 f3 ff ff	 jmp	 $LN491@inflateBac
$LN369@inflateBac:

; 620  :             goto inf_leave;
; 621  :         }
; 622  : 
; 623  :     /* Write leftover output and return unused input */
; 624  :   inf_leave:
; 625  :     if (left < state->wsize) {

  00ca8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next$[ebp], 0
$LN372@inflateBac:
  00caf	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cb2	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00cb7	eb 32		 jmp	 SHORT $LN505@inflateBac
$LN371@inflateBac:

; 343  :                 copy = state->length;
; 344  :                 PULL();

  00cb9	89 5d fc	 mov	 DWORD PTR _next$[ebp], ebx
$LN394@inflateBac:

; 620  :             goto inf_leave;
; 621  :         }
; 622  : 
; 623  :     /* Write leftover output and return unused input */
; 624  :   inf_leave:
; 625  :     if (left < state->wsize) {

  00cbc	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00cc1	eb 28		 jmp	 SHORT $LN505@inflateBac
$LN383@inflateBac:
  00cc3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next$[ebp], 0
  00cca	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00ccf	eb 1a		 jmp	 SHORT $LN505@inflateBac
$LN392@inflateBac:

; 584  :             }
; 585  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 586  : 
; 587  :             /* copy match from window to output */
; 588  :             do {
; 589  :                 ROOM();

  00cd1	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00cd6	eb 16		 jmp	 SHORT $inf_leave$507
$LN337@inflateBac:

; 606  :             break;
; 607  : 
; 608  :         case DONE:
; 609  :             /* inflate stream terminated properly */
; 610  :             ret = Z_STREAM_END;

  00cd8	bf 01 00 00 00	 mov	 edi, 1

; 611  :             goto inf_leave;

  00cdd	eb 0c		 jmp	 SHORT $LN505@inflateBac
$LN338@inflateBac:

; 612  : 
; 613  :         case BAD:
; 614  :             ret = Z_DATA_ERROR;

  00cdf	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 615  :             goto inf_leave;

  00ce4	eb 05		 jmp	 SHORT $LN505@inflateBac
$LN339@inflateBac:

; 616  : 
; 617  :         default:
; 618  :             /* can't happen, but makes compilers happy */
; 619  :             ret = Z_STREAM_ERROR;

  00ce6	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN505@inflateBac:

; 620  :             goto inf_leave;
; 621  :         }
; 622  : 
; 623  :     /* Write leftover output and return unused input */
; 624  :   inf_leave:
; 625  :     if (left < state->wsize) {

  00ceb	8b 5d 18	 mov	 ebx, DWORD PTR _out_desc$[ebp]
$inf_leave$507:
  00cee	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00cf1	8b 4d f0	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00cf4	3b c8		 cmp	 ecx, eax
  00cf6	73 1c		 jae	 SHORT $LN492@inflateBac

; 626  :         if (out(out_desc, state->window, state->wsize - left) &&

  00cf8	2b c1		 sub	 eax, ecx
  00cfa	50		 push	 eax
  00cfb	ff 72 38	 push	 DWORD PTR [edx+56]
  00cfe	53		 push	 ebx
  00cff	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d02	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d05	85 c0		 test	 eax, eax
  00d07	74 0b		 je	 SHORT $LN492@inflateBac
  00d09	83 ff 01	 cmp	 edi, 1
  00d0c	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00d11	0f 44 f8	 cmove	 edi, eax
$LN492@inflateBac:

; 627  :             ret == Z_STREAM_END)
; 628  :             ret = Z_BUF_ERROR;
; 629  :     }
; 630  :     strm->next_in = next;

  00d14	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00d17	8b 4d fc	 mov	 ecx, DWORD PTR _next$[ebp]

; 631  :     strm->avail_in = have;

  00d1a	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00d1d	89 08		 mov	 DWORD PTR [eax], ecx

; 632  :     return ret;

  00d1f	8b c7		 mov	 eax, edi
  00d21	5f		 pop	 edi
  00d22	5e		 pop	 esi
  00d23	5b		 pop	 ebx

; 633  : }

  00d24	8b e5		 mov	 esp, ebp
  00d26	5d		 pop	 ebp
  00d27	c2 14 00	 ret	 20			; 00000014H
$LN254@inflateBac:

; 275  :         return Z_STREAM_ERROR;

  00d2a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 633  : }

  00d2f	8b e5		 mov	 esp, ebp
  00d31	5d		 pop	 ebp
  00d32	c2 14 00	 ret	 20			; 00000014H
  00d35	0f 1f 00	 npad	 3
$LN482@inflateBac:
  00d38	00 00 00 00	 DD	 $LN255@inflateBac
  00d3c	00 00 00 00	 DD	 $LN31@inflateBac
  00d40	00 00 00 00	 DD	 $LN56@inflateBac
  00d44	00 00 00 00	 DD	 $LN302@inflateBac
  00d48	00 00 00 00	 DD	 $LN337@inflateBac
  00d4c	00 00 00 00	 DD	 $LN338@inflateBac
  00d50	00 00 00 00	 DD	 $LN339@inflateBac
$LN481@inflateBac:
  00d54	00		 DB	 0
  00d55	06		 DB	 6
  00d56	01		 DB	 1
  00d57	06		 DB	 6
  00d58	06		 DB	 6
  00d59	02		 DB	 2
  00d5a	06		 DB	 6
  00d5b	06		 DB	 6
  00d5c	06		 DB	 6
  00d5d	03		 DB	 3
  00d5e	06		 DB	 6
  00d5f	06		 DB	 6
  00d60	06		 DB	 6
  00d61	06		 DB	 6
  00d62	06		 DB	 6
  00d63	06		 DB	 6
  00d64	06		 DB	 6
  00d65	04		 DB	 4
  00d66	05		 DB	 5
  00d67	90		 npad	 1
$LN483@inflateBac:
  00d68	00 00 00 00	 DD	 $LN259@inflateBac
  00d6c	00 00 00 00	 DD	 $LN260@inflateBac
  00d70	00 00 00 00	 DD	 $LN261@inflateBac
  00d74	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 637  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 638  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00015	85 c0		 test	 eax, eax
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 640  :     ZFREE(strm, strm->state);

  00019	51		 push	 ecx
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d0		 call	 eax
  0001f	83 c4 08	 add	 esp, 8

; 641  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 642  :     Tracev((stderr, "inflate: end\n"));
; 643  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 644  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 639  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 644  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
