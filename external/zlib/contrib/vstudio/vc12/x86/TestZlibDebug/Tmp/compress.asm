; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

	TITLE	C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\vstudio\vc12\x86\TestZlibDebug\Tmp\compress.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_compress@16
PUBLIC	_compress2@20
PUBLIC	_compressBound@4
EXTRN	_deflate@8:PROC
EXTRN	_deflateEnd@4:PROC
EXTRN	_deflateInit_@16:PROC
_DATA	SEGMENT
$SG42591 DB	'1.2.13.1-motley', 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\compress.c
_TEXT	SEGMENT
_sourceLen$ = 8						; size = 4
_compressBound@4 PROC

; 72   : uLong ZEXPORT compressBound(uLong sourceLen) {

	push	ebp
	mov	ebp, esp

; 73   :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

	mov	eax, DWORD PTR _sourceLen$[ebp]
	shr	eax, 12					; 0000000cH
	add	eax, DWORD PTR _sourceLen$[ebp]
	mov	ecx, DWORD PTR _sourceLen$[ebp]
	shr	ecx, 14					; 0000000eH
	add	eax, ecx
	mov	edx, DWORD PTR _sourceLen$[ebp]
	shr	edx, 25					; 00000019H
	lea	eax, DWORD PTR [eax+edx+13]

; 74   :            (sourceLen >> 25) + 13;
; 75   : }

	pop	ebp
	ret	4
_compressBound@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\compress.c
_TEXT	SEGMENT
_stream$ = -84						; size = 56
tv86 = -28						; size = 4
tv80 = -24						; size = 4
tv76 = -20						; size = 4
tv72 = -16						; size = 4
_max$ = -12						; size = 4
_left$ = -8						; size = 4
_err$ = -4						; size = 4
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_level$ = 24						; size = 4
_compress2@20 PROC

; 23   :                       uLong sourceLen, int level) {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H

; 24   :     z_stream stream;
; 25   :     int err;
; 26   :     const uInt max = (uInt)-1;

	mov	DWORD PTR _max$[ebp], -1

; 27   :     uLong left;
; 28   : 
; 29   :     left = *destLen;

	mov	eax, DWORD PTR _destLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _left$[ebp], ecx

; 30   :     *destLen = 0;

	mov	edx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [edx], 0

; 31   : 
; 32   :     stream.zalloc = (alloc_func)0;

	mov	DWORD PTR _stream$[ebp+32], 0

; 33   :     stream.zfree = (free_func)0;

	mov	DWORD PTR _stream$[ebp+36], 0

; 34   :     stream.opaque = (voidpf)0;

	mov	DWORD PTR _stream$[ebp+40], 0

; 35   : 
; 36   :     err = deflateInit(&stream, level);

	push	56					; 00000038H
	push	OFFSET $SG42591
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_deflateInit_@16
	mov	DWORD PTR _err$[ebp], eax

; 37   :     if (err != Z_OK) return err;

	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN5@compress2
	mov	eax, DWORD PTR _err$[ebp]
	jmp	$LN1@compress2
$LN5@compress2:

; 38   : 
; 39   :     stream.next_out = dest;

	mov	edx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _stream$[ebp+12], edx

; 40   :     stream.avail_out = 0;

	mov	DWORD PTR _stream$[ebp+16], 0

; 41   :     stream.next_in = (z_const Bytef *)source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _stream$[ebp], eax

; 42   :     stream.avail_in = 0;

	mov	DWORD PTR _stream$[ebp+4], 0
$LN4@compress2:

; 43   : 
; 44   :     do {
; 45   :         if (stream.avail_out == 0) {

	cmp	DWORD PTR _stream$[ebp+16], 0
	jne	SHORT $LN6@compress2

; 46   :             stream.avail_out = left > (uLong)max ? max : (uInt)left;

	mov	ecx, DWORD PTR _left$[ebp]
	cmp	ecx, DWORD PTR _max$[ebp]
	jbe	SHORT $LN9@compress2
	mov	edx, DWORD PTR _max$[ebp]
	mov	DWORD PTR tv72[ebp], edx
	jmp	SHORT $LN10@compress2
$LN9@compress2:
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN10@compress2:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _stream$[ebp+16], ecx

; 47   :             left -= stream.avail_out;

	mov	edx, DWORD PTR _left$[ebp]
	sub	edx, DWORD PTR _stream$[ebp+16]
	mov	DWORD PTR _left$[ebp], edx
$LN6@compress2:

; 48   :         }
; 49   :         if (stream.avail_in == 0) {

	cmp	DWORD PTR _stream$[ebp+4], 0
	jne	SHORT $LN7@compress2

; 50   :             stream.avail_in = sourceLen > (uLong)max ? max : (uInt)sourceLen;

	mov	eax, DWORD PTR _sourceLen$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jbe	SHORT $LN11@compress2
	mov	ecx, DWORD PTR _max$[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN12@compress2
$LN11@compress2:
	mov	edx, DWORD PTR _sourceLen$[ebp]
	mov	DWORD PTR tv76[ebp], edx
$LN12@compress2:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR _stream$[ebp+4], eax

; 51   :             sourceLen -= stream.avail_in;

	mov	ecx, DWORD PTR _sourceLen$[ebp]
	sub	ecx, DWORD PTR _stream$[ebp+4]
	mov	DWORD PTR _sourceLen$[ebp], ecx
$LN7@compress2:

; 52   :         }
; 53   :         err = deflate(&stream, sourceLen ? Z_NO_FLUSH : Z_FINISH);

	cmp	DWORD PTR _sourceLen$[ebp], 0
	je	SHORT $LN13@compress2
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN14@compress2
$LN13@compress2:
	mov	DWORD PTR tv80[ebp], 4
$LN14@compress2:
	mov	edx, DWORD PTR tv80[ebp]
	push	edx
	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_deflate@8
	mov	DWORD PTR _err$[ebp], eax

; 54   :     } while (err == Z_OK);

	cmp	DWORD PTR _err$[ebp], 0
	je	$LN4@compress2

; 55   : 
; 56   :     *destLen = stream.total_out;

	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	edx, DWORD PTR _stream$[ebp+20]
	mov	DWORD PTR [ecx], edx

; 57   :     deflateEnd(&stream);

	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_deflateEnd@4

; 58   :     return err == Z_STREAM_END ? Z_OK : err;

	cmp	DWORD PTR _err$[ebp], 1
	jne	SHORT $LN15@compress2
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN16@compress2
$LN15@compress2:
	mov	ecx, DWORD PTR _err$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
$LN16@compress2:
	mov	eax, DWORD PTR tv86[ebp]
$LN1@compress2:

; 59   : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_compress2@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\compress.c
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_compress@16 PROC

; 64   :                      uLong sourceLen) {

	push	ebp
	mov	ebp, esp

; 65   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

	push	-1
	mov	eax, DWORD PTR _sourceLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_compress2@20

; 66   : }

	pop	ebp
	ret	16					; 00000010H
_compress@16 ENDP
_TEXT	ENDS
END
