; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

	TITLE	C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\vstudio\vc12\x86\TestZlibDebug\Tmp\inflate.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflate@@9@9 DW 010H				; `inflate'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
CONST	ENDS
PUBLIC	_inflate@8
PUBLIC	_inflateEnd@4
PUBLIC	_inflateSetDictionary@12
PUBLIC	_inflateGetDictionary@12
PUBLIC	_inflateSync@4
PUBLIC	_inflateCopy@8
PUBLIC	_inflateReset@4
PUBLIC	_inflateReset2@8
PUBLIC	_inflatePrime@12
PUBLIC	_inflateMark@4
PUBLIC	_inflateGetHeader@8
PUBLIC	_inflateInit_@12
PUBLIC	_inflateInit2_@16
PUBLIC	_inflateSyncPoint@4
PUBLIC	_inflateUndermine@8
PUBLIC	_inflateValidate@8
PUBLIC	_inflateCodesUsed@4
PUBLIC	_inflateResetKeep@4
EXTRN	_memcpy:PROC
EXTRN	_adler32@12:PROC
EXTRN	_crc32@12:PROC
EXTRN	_zcalloc:PROC
EXTRN	_zcfree:PROC
EXTRN	_inflate_table:PROC
EXTRN	_inflate_fast:PROC
_DATA	SEGMENT
$SG44240 DB	'1.2.13.1-motley', 00H
$SG44810 DB	'incorrect header check', 00H
	ORG $+1
$SG44812 DB	'unknown compression method', 00H
	ORG $+1
$SG44816 DB	'invalid window size', 00H
$SG44820 DB	'unknown compression method', 00H
	ORG $+1
$SG44822 DB	'unknown header flags set', 00H
	ORG $+3
$SG44869 DB	'header crc mismatch', 00H
$SG44886 DB	'invalid block type', 00H
	ORG $+1
$SG44890 DB	'invalid stored block lengths', 00H
	ORG $+3
$SG44902 DB	'too many length or distance symbols', 00H
$SG44906 DB	'invalid code lengths set', 00H
	ORG $+3
$SG44916 DB	'invalid bit length repeat', 00H
	ORG $+2
$SG44922 DB	'invalid bit length repeat', 00H
	ORG $+2
$SG44925 DB	'invalid code -- missing end-of-block', 00H
	ORG $+3
$SG44927 DB	'invalid literal/lengths set', 00H
$SG44929 DB	'invalid distances set', 00H
	ORG $+2
$SG44943 DB	'invalid literal/length code', 00H
$SG44954 DB	'invalid distance code', 00H
	ORG $+2
$SG44964 DB	'invalid distance too far back', 00H
	ORG $+2
$SG44977 DB	'incorrect data check', 00H
	ORG $+3
$SG44982 DB	'incorrect length check', 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
tv70 = -12						; size = 4
_next$ = -8						; size = 4
_got$ = -4						; size = 4
_have$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_syncsearch PROC

; 1356 :                           unsigned len) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1357 :     unsigned got;
; 1358 :     unsigned next;
; 1359 : 
; 1360 :     got = *have;

	mov	eax, DWORD PTR _have$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _got$[ebp], ecx

; 1361 :     next = 0;

	mov	DWORD PTR _next$[ebp], 0
$LN2@syncsearch:

; 1362 :     while (next < len && got < 4) {

	mov	edx, DWORD PTR _next$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN3@syncsearch
	cmp	DWORD PTR _got$[ebp], 4
	jae	SHORT $LN3@syncsearch

; 1363 :         if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))

	cmp	DWORD PTR _got$[ebp], 2
	jae	SHORT $LN9@syncsearch
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN10@syncsearch
$LN9@syncsearch:
	mov	DWORD PTR tv70[ebp], 255		; 000000ffH
$LN10@syncsearch:
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _next$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, DWORD PTR tv70[ebp]
	jne	SHORT $LN4@syncsearch

; 1364 :             got++;

	mov	edx, DWORD PTR _got$[ebp]
	add	edx, 1
	mov	DWORD PTR _got$[ebp], edx
	jmp	SHORT $LN5@syncsearch
$LN4@syncsearch:

; 1365 :         else if (buf[next])

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _next$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@syncsearch

; 1366 :             got = 0;

	mov	DWORD PTR _got$[ebp], 0
	jmp	SHORT $LN5@syncsearch
$LN6@syncsearch:

; 1367 :         else
; 1368 :             got = 4 - got;

	mov	edx, 4
	sub	edx, DWORD PTR _got$[ebp]
	mov	DWORD PTR _got$[ebp], edx
$LN5@syncsearch:

; 1369 :         next++;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax

; 1370 :     }

	jmp	SHORT $LN2@syncsearch
$LN3@syncsearch:

; 1371 :     *have = got;

	mov	ecx, DWORD PTR _have$[ebp]
	mov	edx, DWORD PTR _got$[ebp]
	mov	DWORD PTR [ecx], edx

; 1372 :     return next;

	mov	eax, DWORD PTR _next$[ebp]

; 1373 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_syncsearch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_dist$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_end$ = 12						; size = 4
_copy$ = 16						; size = 4
_updatewindow PROC

; 368  : local int updatewindow(z_streamp strm, const Bytef *end, unsigned copy) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 369  :     struct inflate_state FAR *state;
; 370  :     unsigned dist;
; 371  : 
; 372  :     state = (struct inflate_state FAR *)strm->state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _state$[ebp], ecx

; 373  : 
; 374  :     /* if it hasn't been done already, allocate space for the window */
; 375  :     if (state->window == Z_NULL) {

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN2@updatewind

; 376  :         state->window = (unsigned char FAR *)

	push	1
	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+40]
	shl	edx, cl
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 377  :                         ZALLOC(strm, 1U << state->wbits,
; 378  :                                sizeof(unsigned char));
; 379  :         if (state->window == Z_NULL) return 1;

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN2@updatewind
	mov	eax, 1
	jmp	$LN1@updatewind
$LN2@updatewind:

; 380  :     }
; 381  : 
; 382  :     /* if window not in use yet, initialize */
; 383  :     if (state->wsize == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN4@updatewind

; 384  :         state->wsize = 1U << state->wbits;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+40]
	shl	edx, cl
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], edx

; 385  :         state->wnext = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+52], 0

; 386  :         state->whave = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+48], 0
$LN4@updatewind:

; 387  :     }
; 388  : 
; 389  :     /* copy state->wsize or less output bytes into the circular window */
; 390  :     if (copy >= state->wsize) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jb	SHORT $LN5@updatewind

; 391  :         zmemcpy(state->window, end - state->wsize, state->wsize);

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 392  :         state->wnext = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+52], 0

; 393  :         state->whave = state->wsize;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+48], edx

; 394  :     }

	jmp	$LN6@updatewind
$LN5@updatewind:

; 395  :     else {
; 396  :         dist = state->wsize - state->wnext;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+44]
	sub	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _dist$[ebp], edx

; 397  :         if (dist > copy) dist = copy;

	mov	eax, DWORD PTR _dist$[ebp]
	cmp	eax, DWORD PTR _copy$[ebp]
	jbe	SHORT $LN7@updatewind
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _dist$[ebp], ecx
$LN7@updatewind:

; 398  :         zmemcpy(state->window + state->wnext, end - copy, dist);

	mov	edx, DWORD PTR _dist$[ebp]
	push	edx
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+52]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 399  :         copy -= dist;

	mov	ecx, DWORD PTR _copy$[ebp]
	sub	ecx, DWORD PTR _dist$[ebp]
	mov	DWORD PTR _copy$[ebp], ecx

; 400  :         if (copy) {

	je	SHORT $LN8@updatewind

; 401  :             zmemcpy(state->window, end - copy, copy);

	mov	edx, DWORD PTR _copy$[ebp]
	push	edx
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 402  :             state->wnext = copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 403  :             state->whave = state->wsize;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+48], ecx

; 404  :         }

	jmp	SHORT $LN6@updatewind
$LN8@updatewind:

; 405  :         else {
; 406  :             state->wnext += dist;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, DWORD PTR _dist$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 407  :             if (state->wnext == state->wsize) state->wnext = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	cmp	ecx, DWORD PTR [eax+44]
	jne	SHORT $LN10@updatewind
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+52], 0
$LN10@updatewind:

; 408  :             if (state->whave < state->wsize) state->whave += dist;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+44]
	jae	SHORT $LN6@updatewind
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, DWORD PTR _dist$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+48], ecx
$LN6@updatewind:

; 409  :         }
; 410  :     }
; 411  :     return 0;

	xor	eax, eax
$LN1@updatewind:

; 412  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_updatewindow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_fixedtables PROC

; 252  : local void fixedtables(struct inflate_state FAR *state) {

	push	ebp
	mov	ebp, esp

; 253  : #ifdef BUILDFIXED
; 254  :     static int virgin = 1;
; 255  :     static code *lenfix, *distfix;
; 256  :     static code fixed[544];
; 257  : 
; 258  :     /* build fixed huffman tables if first call (may not be thread safe) */
; 259  :     if (virgin) {
; 260  :         unsigned sym, bits;
; 261  :         static code *next;
; 262  : 
; 263  :         /* literal/length table */
; 264  :         sym = 0;
; 265  :         while (sym < 144) state->lens[sym++] = 8;
; 266  :         while (sym < 256) state->lens[sym++] = 9;
; 267  :         while (sym < 280) state->lens[sym++] = 7;
; 268  :         while (sym < 288) state->lens[sym++] = 8;
; 269  :         next = fixed;
; 270  :         lenfix = next;
; 271  :         bits = 9;
; 272  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 273  : 
; 274  :         /* distance table */
; 275  :         sym = 0;
; 276  :         while (sym < 32) state->lens[sym++] = 5;
; 277  :         distfix = next;
; 278  :         bits = 5;
; 279  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 280  : 
; 281  :         /* do this just once */
; 282  :         virgin = 0;
; 283  :     }
; 284  : #else /* !BUILDFIXED */
; 285  : #   include "inffixed.h"
; 286  : #endif /* BUILDFIXED */
; 287  :     state->lencode = lenfix;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 288  :     state->lenbits = 9;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+88], 9

; 289  :     state->distcode = distfix;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 290  :     state->distbits = 5;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+92], 5

; 291  : }

	pop	ebp
	ret	0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateStateCheck PROC

; 94   : local int inflateStateCheck(z_streamp strm) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 95   :     struct inflate_state FAR *state;
; 96   :     if (strm == Z_NULL ||
; 97   :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

	cmp	DWORD PTR _strm$[ebp], 0
	je	SHORT $LN3@inflateSta
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@inflateSta
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN2@inflateSta
$LN3@inflateSta:

; 98   :         return 1;

	mov	eax, 1
	jmp	SHORT $LN1@inflateSta
$LN2@inflateSta:

; 99   :     state = (struct inflate_state FAR *)strm->state;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _state$[ebp], eax

; 100  :     if (state == Z_NULL || state->strm != strm ||
; 101  :         state->mode < HEAD || state->mode > SYNC)

	cmp	DWORD PTR _state$[ebp], 0
	je	SHORT $LN5@inflateSta
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _strm$[ebp]
	jne	SHORT $LN5@inflateSta
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 16180		; 00003f34H
	jl	SHORT $LN5@inflateSta
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+4], 16211		; 00003f53H
	jle	SHORT $LN4@inflateSta
$LN5@inflateSta:

; 102  :         return 1;

	mov	eax, 1
	jmp	SHORT $LN1@inflateSta
$LN4@inflateSta:

; 103  :     return 0;

	xor	eax, eax
$LN1@inflateSta:

; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_inflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
tv88 = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateResetKeep@4 PROC

; 106  : int ZEXPORT inflateResetKeep(z_streamp strm) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 107  :     struct inflate_state FAR *state;
; 108  : 
; 109  :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateRes
	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflateRes
$LN2@inflateRes:

; 110  :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 111  :     strm->total_in = strm->total_out = state->total = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], 0

; 112  :     strm->msg = Z_NULL;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], 0

; 113  :     if (state->wrap)        /* to support ill-conceived Java test suite */

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN3@inflateRes

; 114  :         strm->adler = state->wrap & 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN3@inflateRes:

; 115  :     state->mode = HEAD;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16180		; 00003f34H

; 116  :     state->last = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+8], 0

; 117  :     state->havedict = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 118  :     state->flags = -1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+20], -1

; 119  :     state->dmax = 32768U;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+24], 32768		; 00008000H

; 120  :     state->head = Z_NULL;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+36], 0

; 121  :     state->hold = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+60], 0

; 122  :     state->bits = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+64], 0

; 123  :     state->lencode = state->distcode = state->next = state->codes;

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 1332				; 00000534H
	mov	DWORD PTR tv88[ebp], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR [edx+112], eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [ecx+84], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax+80], ecx

; 124  :     state->sane = 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+7108], 1

; 125  :     state->back = -1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7112], -1

; 126  :     Tracev((stderr, "inflate: reset\n"));
; 127  :     return Z_OK;

	xor	eax, eax
$LN1@inflateRes:

; 128  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_inflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateCodesUsed@4 PROC

; 1521 : unsigned long ZEXPORT inflateCodesUsed(z_streamp strm) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1522 :     struct inflate_state FAR *state;
; 1523 :     if (inflateStateCheck(strm)) return (unsigned long)-1;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateCod
	or	eax, -1
	jmp	SHORT $LN1@inflateCod
$LN2@inflateCod:

; 1524 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1525 :     return (unsigned long)(state->next - state->codes);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1332				; 00000534H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	sub	edx, eax
	sar	edx, 2
	mov	eax, edx
$LN1@inflateCod:

; 1526 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_inflateCodesUsed@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_check$ = 12						; size = 4
_inflateValidate@8 PROC

; 1498 : int ZEXPORT inflateValidate(z_streamp strm, int check) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1499 :     struct inflate_state FAR *state;
; 1500 : 
; 1501 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateVal
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateVal
$LN2@inflateVal:

; 1502 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1503 :     if (check && state->wrap)

	cmp	DWORD PTR _check$[ebp], 0
	je	SHORT $LN3@inflateVal
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@inflateVal

; 1504 :         state->wrap |= 4;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 4
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+12], edx
	jmp	SHORT $LN4@inflateVal
$LN3@inflateVal:

; 1505 :     else
; 1506 :         state->wrap &= ~4;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, -5					; fffffffbH
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN4@inflateVal:

; 1507 :     return Z_OK;

	xor	eax, eax
$LN1@inflateVal:

; 1508 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_inflateValidate@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_subvert$ = 12						; size = 4
_inflateUndermine@8 PROC

; 1483 : int ZEXPORT inflateUndermine(z_streamp strm, int subvert) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1484 :     struct inflate_state FAR *state;
; 1485 : 
; 1486 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateUnd
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateUnd
$LN2@inflateUnd:

; 1487 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1488 : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 1489 :     state->sane = !subvert;
; 1490 :     return Z_OK;
; 1491 : #else
; 1492 :     (void)subvert;
; 1493 :     state->sane = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7108], 1

; 1494 :     return Z_DATA_ERROR;

	mov	eax, -3					; fffffffdH
$LN1@inflateUnd:

; 1495 : #endif
; 1496 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_inflateUndermine@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
tv72 = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateSyncPoint@4 PROC

; 1431 : int ZEXPORT inflateSyncPoint(z_streamp strm) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1432 :     struct inflate_state FAR *state;
; 1433 : 
; 1434 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateSyn
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateSyn
$LN2@inflateSyn:

; 1435 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1436 :     return state->mode == STORED && state->bits == 0;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 16193		; 00003f41H
	jne	SHORT $LN4@inflateSyn
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN4@inflateSyn
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN5@inflateSyn
$LN4@inflateSyn:
	mov	DWORD PTR tv72[ebp], 0
$LN5@inflateSyn:
	mov	eax, DWORD PTR tv72[ebp]
$LN1@inflateSyn:

; 1437 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_inflateSyncPoint@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_inflateInit2_@16 PROC

; 179  :                           const char *version, int stream_size) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 180  :     int ret;
; 181  :     struct inflate_state FAR *state;
; 182  : 
; 183  :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

	cmp	DWORD PTR _version$[ebp], 0
	je	SHORT $LN3@inflateIni
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _version$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	ecx, BYTE PTR $SG44240[edx]
	cmp	eax, ecx
	jne	SHORT $LN3@inflateIni
	cmp	DWORD PTR _stream_size$[ebp], 56	; 00000038H
	je	SHORT $LN2@inflateIni
$LN3@inflateIni:

; 184  :         stream_size != (int)(sizeof(z_stream)))
; 185  :         return Z_VERSION_ERROR;

	mov	eax, -6					; fffffffaH
	jmp	$LN1@inflateIni
$LN2@inflateIni:

; 186  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

	cmp	DWORD PTR _strm$[ebp], 0
	jne	SHORT $LN4@inflateIni
	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflateIni
$LN4@inflateIni:

; 187  :     strm->msg = Z_NULL;                 /* in case we return an error */

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], 0

; 188  :     if (strm->zalloc == (alloc_func)0) {

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN5@inflateIni

; 189  : #ifdef Z_SOLO
; 190  :         return Z_STREAM_ERROR;
; 191  : #else
; 192  :         strm->zalloc = zcalloc;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+32], OFFSET _zcalloc

; 193  :         strm->opaque = (voidpf)0;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+40], 0
$LN5@inflateIni:

; 194  : #endif
; 195  :     }
; 196  :     if (strm->zfree == (free_func)0)

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN6@inflateIni

; 197  : #ifdef Z_SOLO
; 198  :         return Z_STREAM_ERROR;
; 199  : #else
; 200  :         strm->zfree = zcfree;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+36], OFFSET _zcfree
$LN6@inflateIni:

; 201  : #endif
; 202  :     state = (struct inflate_state FAR *)

	push	7120					; 00001bd0H
	push	1
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _state$[ebp], eax

; 203  :             ZALLOC(strm, 1, sizeof(struct inflate_state));
; 204  :     if (state == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN7@inflateIni
	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN1@inflateIni
$LN7@inflateIni:

; 205  :     Tracev((stderr, "inflate: allocated\n"));
; 206  :     strm->state = (struct internal_state FAR *)state;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 207  :     state->strm = strm;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx], eax

; 208  :     state->window = Z_NULL;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+56], 0

; 209  :     state->mode = HEAD;     /* to pass state test in inflateReset2() */

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16180		; 00003f34H

; 210  :     ret = inflateReset2(strm, windowBits);

	mov	eax, DWORD PTR _windowBits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_inflateReset2@8
	mov	DWORD PTR _ret$[ebp], eax

; 211  :     if (ret != Z_OK) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN8@inflateIni

; 212  :         ZFREE(strm, state);

	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8

; 213  :         strm->state = Z_NULL;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN8@inflateIni:

; 214  :     }
; 215  :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@inflateIni:

; 216  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_inflateInit2_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_version$ = 12						; size = 4
_stream_size$ = 16					; size = 4
_inflateInit_@12 PROC

; 219  :                          int stream_size) {

	push	ebp
	mov	ebp, esp

; 220  :     return inflateInit2_(strm, DEF_WBITS, version, stream_size);

	mov	eax, DWORD PTR _stream_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _version$[ebp]
	push	ecx
	push	15					; 0000000fH
	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_inflateInit2_@16

; 221  : }

	pop	ebp
	ret	12					; 0000000cH
_inflateInit_@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_inflateGetHeader@8 PROC

; 1330 : int ZEXPORT inflateGetHeader(z_streamp strm, gz_headerp head) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1331 :     struct inflate_state FAR *state;
; 1332 : 
; 1333 :     /* check state */
; 1334 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateGet
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateGet
$LN2@inflateGet:

; 1335 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1336 :     if ((state->wrap & 2) == 0) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 2
	jne	SHORT $LN3@inflateGet
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateGet
$LN3@inflateGet:

; 1337 : 
; 1338 :     /* save header structure */
; 1339 :     state->head = head;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _head$[ebp]
	mov	DWORD PTR [edx+36], eax

; 1340 :     head->done = 0;

	mov	ecx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [ecx+48], 0

; 1341 :     return Z_OK;

	xor	eax, eax
$LN1@inflateGet:

; 1342 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_inflateGetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
tv79 = -12						; size = 4
tv78 = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateMark@4 PROC

; 1510 : long ZEXPORT inflateMark(z_streamp strm) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1511 :     struct inflate_state FAR *state;
; 1512 : 
; 1513 :     if (inflateStateCheck(strm))

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateMar

; 1514 :         return -(1L << 16);

	mov	eax, -65536				; ffff0000H
	jmp	SHORT $LN1@inflateMar
$LN2@inflateMar:

; 1515 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1516 :     return (long)(((unsigned long)((long)state->back)) << 16) +

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 16195		; 00003f43H
	jne	SHORT $LN6@inflateMar
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN7@inflateMar
$LN6@inflateMar:
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 16204		; 00003f4cH
	jne	SHORT $LN4@inflateMar
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+7116]
	sub	eax, DWORD PTR [edx+68]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@inflateMar
$LN4@inflateMar:
	mov	DWORD PTR tv78[ebp], 0
$LN5@inflateMar:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR tv79[ebp], ecx
$LN7@inflateMar:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+7112]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR tv79[ebp]
$LN1@inflateMar:

; 1517 :         (state->mode == COPY ? state->length :
; 1518 :             (state->mode == MATCH ? state->was - state->length : 0));
; 1519 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_inflateMark@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_inflatePrime@12 PROC

; 223  : int ZEXPORT inflatePrime(z_streamp strm, int bits, int value) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 224  :     struct inflate_state FAR *state;
; 225  : 
; 226  :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflatePri
	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflatePri
$LN2@inflatePri:

; 227  :     if (bits == 0)

	cmp	DWORD PTR _bits$[ebp], 0
	jne	SHORT $LN3@inflatePri

; 228  :         return Z_OK;

	xor	eax, eax
	jmp	SHORT $LN1@inflatePri
$LN3@inflatePri:

; 229  :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 230  :     if (bits < 0) {

	cmp	DWORD PTR _bits$[ebp], 0
	jge	SHORT $LN4@inflatePri

; 231  :         state->hold = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+60], 0

; 232  :         state->bits = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+64], 0

; 233  :         return Z_OK;

	xor	eax, eax
	jmp	SHORT $LN1@inflatePri
$LN4@inflatePri:

; 234  :     }
; 235  :     if (bits > 16 || state->bits + (uInt)bits > 32) return Z_STREAM_ERROR;

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jg	SHORT $LN6@inflatePri
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+64]
	add	eax, DWORD PTR _bits$[ebp]
	cmp	eax, 32					; 00000020H
	jbe	SHORT $LN5@inflatePri
$LN6@inflatePri:
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflatePri
$LN5@inflatePri:

; 236  :     value &= (1L << bits) - 1;

	mov	edx, 1
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _value$[ebp], edx

; 237  :     state->hold += (unsigned)value << state->bits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	shl	edx, cl
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+60], edx

; 238  :     state->bits += (uInt)bits;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+64]
	add	eax, DWORD PTR _bits$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 239  :     return Z_OK;

	xor	eax, eax
$LN1@inflatePri:

; 240  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_inflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_wrap$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_inflateReset2@8 PROC

; 141  : int ZEXPORT inflateReset2(z_streamp strm, int windowBits) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 142  :     int wrap;
; 143  :     struct inflate_state FAR *state;
; 144  : 
; 145  :     /* get the state */
; 146  :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateRes
	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflateRes
$LN2@inflateRes:

; 147  :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 148  : 
; 149  :     /* extract wrap request from windowBits parameter */
; 150  :     if (windowBits < 0) {

	cmp	DWORD PTR _windowBits$[ebp], 0
	jge	SHORT $LN3@inflateRes

; 151  :         if (windowBits < -15)

	cmp	DWORD PTR _windowBits$[ebp], -15	; fffffff1H
	jge	SHORT $LN5@inflateRes

; 152  :             return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflateRes
$LN5@inflateRes:

; 153  :         wrap = 0;

	mov	DWORD PTR _wrap$[ebp], 0

; 154  :         windowBits = -windowBits;

	mov	eax, DWORD PTR _windowBits$[ebp]
	neg	eax
	mov	DWORD PTR _windowBits$[ebp], eax

; 155  :     }

	jmp	SHORT $LN4@inflateRes
$LN3@inflateRes:

; 156  :     else {
; 157  :         wrap = (windowBits >> 4) + 5;

	mov	ecx, DWORD PTR _windowBits$[ebp]
	sar	ecx, 4
	add	ecx, 5
	mov	DWORD PTR _wrap$[ebp], ecx

; 158  : #ifdef GUNZIP
; 159  :         if (windowBits < 48)

	cmp	DWORD PTR _windowBits$[ebp], 48		; 00000030H
	jge	SHORT $LN4@inflateRes

; 160  :             windowBits &= 15;

	mov	edx, DWORD PTR _windowBits$[ebp]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _windowBits$[ebp], edx
$LN4@inflateRes:

; 161  : #endif
; 162  :     }
; 163  : 
; 164  :     /* set number of window bits, free window if different */
; 165  :     if (windowBits && (windowBits < 8 || windowBits > 15))

	cmp	DWORD PTR _windowBits$[ebp], 0
	je	SHORT $LN7@inflateRes
	cmp	DWORD PTR _windowBits$[ebp], 8
	jl	SHORT $LN8@inflateRes
	cmp	DWORD PTR _windowBits$[ebp], 15		; 0000000fH
	jle	SHORT $LN7@inflateRes
$LN8@inflateRes:

; 166  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateRes
$LN7@inflateRes:

; 167  :     if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN9@inflateRes
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	cmp	edx, DWORD PTR _windowBits$[ebp]
	je	SHORT $LN9@inflateRes

; 168  :         ZFREE(strm, state->window);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8

; 169  :         state->window = Z_NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+56], 0
$LN9@inflateRes:

; 170  :     }
; 171  : 
; 172  :     /* update state and reset the rest of it */
; 173  :     state->wrap = wrap;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _wrap$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 174  :     state->wbits = (unsigned)windowBits;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _windowBits$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 175  :     return inflateReset(strm);

	mov	edx, DWORD PTR _strm$[ebp]
	push	edx
	call	_inflateReset@4
$LN1@inflateRes:

; 176  : }

	mov	esp, ebp
	pop	ebp
	ret	8
_inflateReset2@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateReset@4 PROC

; 130  : int ZEXPORT inflateReset(z_streamp strm) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 131  :     struct inflate_state FAR *state;
; 132  : 
; 133  :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateRes
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateRes
$LN2@inflateRes:

; 134  :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 135  :     state->wsize = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], 0

; 136  :     state->whave = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+48], 0

; 137  :     state->wnext = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+52], 0

; 138  :     return inflateResetKeep(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateResetKeep@4
$LN1@inflateRes:

; 139  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_inflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_wsize$ = -16						; size = 4
_window$ = -12						; size = 4
_copy$ = -8						; size = 4
_state$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_inflateCopy@8 PROC

; 1439 : int ZEXPORT inflateCopy(z_streamp dest, z_streamp source) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1440 :     struct inflate_state FAR *state;
; 1441 :     struct inflate_state FAR *copy;
; 1442 :     unsigned char FAR *window;
; 1443 :     unsigned wsize;
; 1444 : 
; 1445 :     /* check input */
; 1446 :     if (inflateStateCheck(source) || dest == Z_NULL)

	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@inflateCop
	cmp	DWORD PTR _dest$[ebp], 0
	jne	SHORT $LN2@inflateCop
$LN3@inflateCop:

; 1447 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflateCop
$LN2@inflateCop:

; 1448 :     state = (struct inflate_state FAR *)source->state;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1449 : 
; 1450 :     /* allocate space */
; 1451 :     copy = (struct inflate_state FAR *)

	push	7120					; 00001bd0H
	push	1
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _copy$[ebp], eax

; 1452 :            ZALLOC(source, 1, sizeof(struct inflate_state));
; 1453 :     if (copy == Z_NULL) return Z_MEM_ERROR;

	cmp	DWORD PTR _copy$[ebp], 0
	jne	SHORT $LN4@inflateCop
	mov	eax, -4					; fffffffcH
	jmp	$LN1@inflateCop
$LN4@inflateCop:

; 1454 :     window = Z_NULL;

	mov	DWORD PTR _window$[ebp], 0

; 1455 :     if (state->window != Z_NULL) {

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN5@inflateCop

; 1456 :         window = (unsigned char FAR *)

	push	1
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+40]
	shl	eax, cl
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _window$[ebp], eax

; 1457 :                  ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));
; 1458 :         if (window == Z_NULL) {

	cmp	DWORD PTR _window$[ebp], 0
	jne	SHORT $LN5@inflateCop

; 1459 :             ZFREE(source, copy);

	mov	edx, DWORD PTR _copy$[ebp]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8

; 1460 :             return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN1@inflateCop
$LN5@inflateCop:

; 1461 :         }
; 1462 :     }
; 1463 : 
; 1464 :     /* copy state */
; 1465 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

	push	56					; 00000038H
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1466 :     zmemcpy((voidpf)copy, (voidpf)state, sizeof(struct inflate_state));

	push	7120					; 00001bd0H
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1467 :     copy->strm = dest;

	mov	edx, DWORD PTR _copy$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [edx], eax

; 1468 :     if (state->lencode >= state->codes &&

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 1332				; 00000534H
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+80], ecx
	jb	SHORT $LN7@inflateCop
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 7104				; 00001bc0H
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+80], eax
	ja	SHORT $LN7@inflateCop

; 1469 :         state->lencode <= state->codes + ENOUGH - 1) {
; 1470 :         copy->lencode = copy->codes + (state->lencode - state->codes);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 1332				; 00000534H
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	sub	ecx, edx
	sar	ecx, 2
	mov	edx, DWORD PTR _copy$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+1332]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 1471 :         copy->distcode = copy->codes + (state->distcode - state->codes);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 1332				; 00000534H
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	sub	ecx, edx
	sar	ecx, 2
	mov	edx, DWORD PTR _copy$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+1332]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [ecx+84], eax
$LN7@inflateCop:

; 1472 :     }
; 1473 :     copy->next = copy->codes + (state->next - state->codes);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 1332				; 00000534H
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	sub	ecx, edx
	sar	ecx, 2
	mov	edx, DWORD PTR _copy$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+1332]
	mov	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [ecx+112], eax

; 1474 :     if (window != Z_NULL) {

	cmp	DWORD PTR _window$[ebp], 0
	je	SHORT $LN8@inflateCop

; 1475 :         wsize = 1U << state->wbits;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+40]
	shl	eax, cl
	mov	DWORD PTR _wsize$[ebp], eax

; 1476 :         zmemcpy(window, state->window, wsize);

	mov	ecx, DWORD PTR _wsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _window$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@inflateCop:

; 1477 :     }
; 1478 :     copy->window = window;

	mov	edx, DWORD PTR _copy$[ebp]
	mov	eax, DWORD PTR _window$[ebp]
	mov	DWORD PTR [edx+56], eax

; 1479 :     dest->state = (struct internal_state FAR *)copy;

	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 1480 :     return Z_OK;

	xor	eax, eax
$LN1@inflateCop:

; 1481 : }

	mov	esp, ebp
	pop	ebp
	ret	8
_inflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_flags$ = -24						; size = 4
_out$ = -20						; size = 4
_in$ = -16						; size = 4
_buf$ = -12						; size = 4
_len$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateSync@4 PROC

; 1375 : int ZEXPORT inflateSync(z_streamp strm) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1376 :     unsigned len;               /* number of bytes to look at or looked at */
; 1377 :     int flags;                  /* temporary to save header status */
; 1378 :     unsigned long in, out;      /* temporary to save total_in and total_out */
; 1379 :     unsigned char buf[4];       /* to restore bit buffer to byte string */
; 1380 :     struct inflate_state FAR *state;
; 1381 : 
; 1382 :     /* check parameters */
; 1383 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@inflateSyn
	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflateSyn
$LN4@inflateSyn:

; 1384 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1385 :     if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@inflateSyn
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+64], 8
	jae	SHORT $LN5@inflateSyn
	mov	eax, -5					; fffffffbH
	jmp	$LN1@inflateSyn
$LN5@inflateSyn:

; 1386 : 
; 1387 :     /* if first time, start search in bit buffer */
; 1388 :     if (state->mode != SYNC) {

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+4], 16211		; 00003f53H
	je	$LN6@inflateSyn

; 1389 :         state->mode = SYNC;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16211		; 00003f53H

; 1390 :         state->hold <<= state->bits & 7;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	and	ecx, 7
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+60]
	shl	eax, cl
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 1391 :         state->bits -= state->bits & 7;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+64]
	and	eax, 7
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	sub	edx, eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+64], edx

; 1392 :         len = 0;

	mov	DWORD PTR _len$[ebp], 0
$LN2@inflateSyn:

; 1393 :         while (state->bits >= 8) {

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+64], 8
	jb	SHORT $LN3@inflateSyn

; 1394 :             buf[len++] = (unsigned char)(state->hold);

	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR [eax+60]
	mov	BYTE PTR _buf$[ebp+edx], cl
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	mov	DWORD PTR _len$[ebp], edx

; 1395 :             state->hold >>= 8;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	shr	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 1396 :             state->bits -= 8;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	sub	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 1397 :         }

	jmp	SHORT $LN2@inflateSyn
$LN3@inflateSyn:

; 1398 :         state->have = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+108], 0

; 1399 :         syncsearch(&(state->have), buf, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_syncsearch
	add	esp, 12					; 0000000cH
$LN6@inflateSyn:

; 1400 :     }
; 1401 : 
; 1402 :     /* search available input */
; 1403 :     len = syncsearch(&(state->have), strm->next_in, strm->avail_in);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_syncsearch
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _len$[ebp], eax

; 1404 :     strm->avail_in -= len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1405 :     strm->next_in += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx], ecx

; 1406 :     strm->total_in += len;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1407 : 
; 1408 :     /* return no joy or set up to restart inflate() on a new block */
; 1409 :     if (state->have != 4) return Z_DATA_ERROR;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+108], 4
	je	SHORT $LN7@inflateSyn
	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN1@inflateSyn
$LN7@inflateSyn:

; 1410 :     if (state->flags == -1)

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+20], -1
	jne	SHORT $LN8@inflateSyn

; 1411 :         state->wrap = 0;    /* if no header yet, treat as raw */

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+12], 0
	jmp	SHORT $LN9@inflateSyn
$LN8@inflateSyn:

; 1412 :     else
; 1413 :         state->wrap &= ~4;  /* no point in computing a check value now */

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN9@inflateSyn:

; 1414 :     flags = state->flags;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _flags$[ebp], ecx

; 1415 :     in = strm->total_in;  out = strm->total_out;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _in$[ebp], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _out$[ebp], edx

; 1416 :     inflateReset(strm);

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateReset@4

; 1417 :     strm->total_in = in;  strm->total_out = out;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 1418 :     state->flags = flags;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [edx+20], eax

; 1419 :     state->mode = TYPE;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16191		; 00003f3fH

; 1420 :     return Z_OK;

	xor	eax, eax
$LN1@inflateSyn:

; 1421 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_inflateSync@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_inflateGetDictionary@12 PROC

; 1279 :                                  uInt *dictLength) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1280 :     struct inflate_state FAR *state;
; 1281 : 
; 1282 :     /* check state */
; 1283 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateGet
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateGet
$LN2@inflateGet:

; 1284 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1285 : 
; 1286 :     /* copy dictionary */
; 1287 :     if (state->whave && dictionary != Z_NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@inflateGet
	cmp	DWORD PTR _dictionary$[ebp], 0
	je	SHORT $LN3@inflateGet

; 1288 :         zmemcpy(dictionary, state->window + state->wnext,

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	sub	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+52]
	push	edx
	mov	ecx, DWORD PTR _dictionary$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1289 :                 state->whave - state->wnext);
; 1290 :         zmemcpy(dictionary + state->whave - state->wnext,

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _dictionary$[ebp]
	add	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _state$[ebp]
	sub	ecx, DWORD PTR [edx+52]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@inflateGet:

; 1291 :                 state->window, state->wnext);
; 1292 :     }
; 1293 :     if (dictLength != Z_NULL)

	cmp	DWORD PTR _dictLength$[ebp], 0
	je	SHORT $LN4@inflateGet

; 1294 :         *dictLength = state->whave;

	mov	eax, DWORD PTR _dictLength$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax], edx
$LN4@inflateGet:

; 1295 :     return Z_OK;

	xor	eax, eax
$LN1@inflateGet:

; 1296 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_inflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_ret$ = -12						; size = 4
_dictid$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_inflateSetDictionary@12 PROC

; 1299 :                                  uInt dictLength) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1300 :     struct inflate_state FAR *state;
; 1301 :     unsigned long dictid;
; 1302 :     int ret;
; 1303 : 
; 1304 :     /* check state */
; 1305 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateSet
	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflateSet
$LN2@inflateSet:

; 1306 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1307 :     if (state->wrap != 0 && state->mode != DICT)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@inflateSet
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+4], 16190		; 00003f3eH
	je	SHORT $LN3@inflateSet

; 1308 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateSet
$LN3@inflateSet:

; 1309 : 
; 1310 :     /* check for correct dictionary identifier */
; 1311 :     if (state->mode == DICT) {

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+4], 16190		; 00003f3eH
	jne	SHORT $LN4@inflateSet

; 1312 :         dictid = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR _dictid$[ebp], eax

; 1313 :         dictid = adler32(dictid, dictionary, dictLength);

	mov	eax, DWORD PTR _dictLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dictionary$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dictid$[ebp]
	push	edx
	call	_adler32@12
	mov	DWORD PTR _dictid$[ebp], eax

; 1314 :         if (dictid != state->check)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _dictid$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	je	SHORT $LN4@inflateSet

; 1315 :             return Z_DATA_ERROR;

	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN1@inflateSet
$LN4@inflateSet:

; 1316 :     }
; 1317 : 
; 1318 :     /* copy dictionary to window using updatewindow(), which will amend the
; 1319 :        existing dictionary if appropriate */
; 1320 :     ret = updatewindow(strm, dictionary + dictLength, dictLength);

	mov	edx, DWORD PTR _dictLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _dictionary$[ebp]
	add	eax, DWORD PTR _dictLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_updatewindow
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 1321 :     if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN6@inflateSet

; 1322 :         state->mode = MEM;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16210		; 00003f52H

; 1323 :         return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN1@inflateSet
$LN6@inflateSet:

; 1324 :     }
; 1325 :     state->havedict = 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+16], 1

; 1326 :     Tracev((stderr, "inflate:   dictionary set\n"));
; 1327 :     return Z_OK;

	xor	eax, eax
$LN1@inflateSet:

; 1328 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_inflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_inflateEnd@4 PROC

; 1266 : int ZEXPORT inflateEnd(z_streamp strm) {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1267 :     struct inflate_state FAR *state;
; 1268 :     if (inflateStateCheck(strm))

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@inflateEnd

; 1269 :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@inflateEnd
$LN2@inflateEnd:

; 1270 :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 1271 :     if (state->window != Z_NULL) ZFREE(strm, state->window);

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN3@inflateEnd
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
$LN3@inflateEnd:

; 1272 :     ZFREE(strm, strm->state);

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8

; 1273 :     strm->state = Z_NULL;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 1274 :     Tracev((stderr, "inflate: end\n"));
; 1275 :     return Z_OK;

	xor	eax, eax
$LN1@inflateEnd:

; 1276 : }

	mov	esp, ebp
	pop	ebp
	ret	4
_inflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\inflate.c
_TEXT	SEGMENT
tv912 = -124						; size = 4
tv1429 = -120						; size = 4
tv1423 = -116						; size = 4
tv1419 = -112						; size = 4
tv1322 = -108						; size = 4
tv630 = -104						; size = 4
tv599 = -100						; size = 4
tv585 = -96						; size = 4
tv558 = -92						; size = 4
tv403 = -88						; size = 4
tv202 = -84						; size = 4
tv195 = -80						; size = 4
tv1414 = -76						; size = 4
tv1305 = -72						; size = 4
_in$ = -68						; size = 4
tv85 = -64						; size = 4
_from$ = -60						; size = 4
_ret$ = -56						; size = 4
_put$ = -52						; size = 4
_hbuf$ = -48						; size = 4
_last$ = -44						; size = 4
_left$ = -40						; size = 4
_len$ = -36						; size = 4
_out$ = -32						; size = 4
_here$ = -28						; size = 4
_copy$ = -24						; size = 4
_next$ = -20						; size = 4
_have$ = -16						; size = 4
_bits$ = -12						; size = 4
_hold$ = -8						; size = 4
_state$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_inflate@8 PROC

; 590  : int ZEXPORT inflate(z_streamp strm, int flush) {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 591  :     struct inflate_state FAR *state;
; 592  :     z_const unsigned char FAR *next;    /* next input */
; 593  :     unsigned char FAR *put;     /* next output */
; 594  :     unsigned have, left;        /* available input and output */
; 595  :     unsigned long hold;         /* bit buffer */
; 596  :     unsigned bits;              /* bits in bit buffer */
; 597  :     unsigned in, out;           /* save starting available input and output */
; 598  :     unsigned copy;              /* number of stored or match bytes to copy */
; 599  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 600  :     code here;                  /* current decoding table entry */
; 601  :     code last;                  /* parent table entry */
; 602  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 603  :     int ret;                    /* return code */
; 604  : #ifdef GUNZIP
; 605  :     unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
; 606  : #endif
; 607  :     static const unsigned short order[19] = /* permutation of code lengths */
; 608  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 609  : 
; 610  :     if (inflateStateCheck(strm) || strm->next_out == Z_NULL ||

	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflateStateCheck
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN333@inflate
	mov	ecx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN333@inflate
	mov	edx, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN332@inflate
	mov	eax, DWORD PTR _strm$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN332@inflate
$LN333@inflate:

; 611  :         (strm->next_in == Z_NULL && strm->avail_in != 0))
; 612  :         return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflate
$LN332@inflate:

; 613  : 
; 614  :     state = (struct inflate_state FAR *)strm->state;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _state$[ebp], edx

; 615  :     if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 16191		; 00003f3fH
	jne	SHORT $LN4@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16192		; 00003f40H
$LN4@inflate:

; 616  :     LOAD();

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _put$[ebp], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _left$[ebp], edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _have$[ebp], eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN4@inflate

; 617  :     in = have;

	mov	eax, DWORD PTR _have$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 618  :     out = left;

	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR _out$[ebp], ecx

; 619  :     ret = Z_OK;

	mov	DWORD PTR _ret$[ebp], 0
$LN7@inflate:

; 620  :     for (;;)
; 621  :         switch (state->mode) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	sub	ecx, 16180				; 00003f34H
	mov	DWORD PTR tv85[ebp], ecx
	cmp	DWORD PTR tv85[ebp], 31			; 0000001fH
	ja	$LN500@inflate
	mov	edx, DWORD PTR tv85[ebp]
	jmp	DWORD PTR $LN526@inflate[edx*4]
$LN335@inflate:

; 622  :         case HEAD:
; 623  :             if (state->wrap == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN13@inflate

; 624  :                 state->mode = TYPEDO;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16192		; 00003f40H

; 625  :                 break;

	jmp	$LN8@inflate
$LN13@inflate:

; 626  :             }
; 627  :             NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN10@inflate
$LN17@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN337@inflate
	jmp	$inf_leave$528
$LN337@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN17@inflate
	jmp	SHORT $LN13@inflate
$LN10@inflate:
	xor	eax, eax
	jne	SHORT $LN13@inflate

; 628  : #ifdef GUNZIP
; 629  :             if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 2
	je	$LN338@inflate
	cmp	DWORD PTR _hold$[ebp], 35615		; 00008b1fH
	jne	$LN338@inflate

; 630  :                 if (state->wbits == 0)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN339@inflate

; 631  :                     state->wbits = 15;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+40], 15			; 0000000fH
$LN339@inflate:

; 632  :                 state->check = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN20@inflate:

; 633  :                 CRC2(state->check, hold);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	dl, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp+ecx], dl
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR _hbuf$[ebp+ecx], al
	push	2
	lea	edx, DWORD PTR _hbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], eax
	xor	eax, eax
	jne	SHORT $LN20@inflate
$LN23@inflate:

; 634  :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN23@inflate

; 635  :                 state->mode = FLAGS;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16181		; 00003f35H

; 636  :                 break;

	jmp	$LN8@inflate
$LN338@inflate:

; 637  :             }
; 638  :             if (state->head != Z_NULL)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN340@inflate

; 639  :                 state->head->done = -1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx+48], -1
$LN340@inflate:

; 640  :             if (!(state->wrap & 1) ||   /* check if zlib header allowed */

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	SHORT $LN342@inflate
	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 255				; 000000ffH
	shl	eax, 8
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 8
	add	eax, edx
	xor	edx, edx
	mov	ecx, 31					; 0000001fH
	div	ecx
	test	edx, edx
	je	SHORT $LN341@inflate
$LN342@inflate:

; 641  : #else
; 642  :             if (
; 643  : #endif
; 644  :                 ((BITS(8) << 8) + (hold >> 8)) % 31) {
; 645  :                 strm->msg = (char *)"incorrect header check";

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG44810

; 646  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16209		; 00003f51H

; 647  :                 break;

	jmp	$LN8@inflate
$LN341@inflate:

; 648  :             }
; 649  :             if (BITS(4) != Z_DEFLATED) {

	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 15					; 0000000fH
	cmp	ecx, 8
	je	SHORT $LN26@inflate

; 650  :                 strm->msg = (char *)"unknown compression method";

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG44812

; 651  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16209		; 00003f51H

; 652  :                 break;

	jmp	$LN8@inflate
$LN26@inflate:

; 653  :             }
; 654  :             DROPBITS(4);

	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 4
	mov	DWORD PTR _hold$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, 4
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN26@inflate

; 655  :             len = BITS(4) + 8;

	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 15					; 0000000fH
	add	ecx, 8
	mov	DWORD PTR _len$[ebp], ecx

; 656  :             if (state->wbits == 0)

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN344@inflate

; 657  :                 state->wbits = len;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+40], ecx
$LN344@inflate:

; 658  :             if (len > 15 || len > state->wbits) {

	cmp	DWORD PTR _len$[ebp], 15		; 0000000fH
	ja	SHORT $LN346@inflate
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR [edx+40]
	jbe	SHORT $LN345@inflate
$LN346@inflate:

; 659  :                 strm->msg = (char *)"invalid window size";

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG44816

; 660  :                 state->mode = BAD;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16209		; 00003f51H

; 661  :                 break;

	jmp	$LN8@inflate
$LN345@inflate:

; 662  :             }
; 663  :             state->dmax = 1U << len;

	mov	eax, 1
	mov	ecx, DWORD PTR _len$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 664  :             state->flags = 0;               /* indicate zlib header */

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+20], 0

; 665  :             Tracev((stderr, "inflate:   zlib header ok\n"));
; 666  :             strm->adler = state->check = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv195[ebp], eax
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR tv195[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR [edx+48], eax

; 667  :             state->mode = hold & 0x200 ? DICTID : TYPE;

	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 512				; 00000200H
	je	SHORT $LN510@inflate
	mov	DWORD PTR tv202[ebp], 16189		; 00003f3dH
	jmp	SHORT $LN511@inflate
$LN510@inflate:
	mov	DWORD PTR tv202[ebp], 16191		; 00003f3fH
$LN511@inflate:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv202[ebp]
	mov	DWORD PTR [edx+4], eax
$LN29@inflate:

; 668  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN29@inflate

; 669  :             break;

	jmp	$LN8@inflate
$LN33@inflate:

; 670  : #ifdef GUNZIP
; 671  :         case FLAGS:
; 672  :             NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN30@inflate
$LN37@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN348@inflate
	jmp	$inf_leave$528
$LN348@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN37@inflate
	jmp	SHORT $LN33@inflate
$LN30@inflate:
	xor	eax, eax
	jne	SHORT $LN33@inflate

; 673  :             state->flags = (int)(hold);

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 674  :             if ((state->flags & 0xff) != Z_DEFLATED) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 255				; 000000ffH
	cmp	ecx, 8
	je	SHORT $LN349@inflate

; 675  :                 strm->msg = (char *)"unknown compression method";

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG44820

; 676  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16209		; 00003f51H

; 677  :                 break;

	jmp	$LN8@inflate
$LN349@inflate:

; 678  :             }
; 679  :             if (state->flags & 0xe000) {

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 57344				; 0000e000H
	je	SHORT $LN350@inflate

; 680  :                 strm->msg = (char *)"unknown header flags set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG44822

; 681  :                 state->mode = BAD;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16209		; 00003f51H

; 682  :                 break;

	jmp	$LN8@inflate
$LN350@inflate:

; 683  :             }
; 684  :             if (state->head != Z_NULL)

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN351@inflate

; 685  :                 state->head->text = (int)((hold >> 8) & 1);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	and	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx], eax
$LN351@inflate:

; 686  :             if ((state->flags & 0x0200) && (state->wrap & 4))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 512				; 00000200H
	je	SHORT $LN43@inflate
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 4
	je	SHORT $LN43@inflate
$LN40@inflate:

; 687  :                 CRC2(state->check, hold);

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	al, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp+edx], al
	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 8
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _hbuf$[ebp+edx], cl
	push	2
	lea	eax, DWORD PTR _hbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+28], eax
	xor	edx, edx
	jne	SHORT $LN40@inflate
$LN43@inflate:

; 688  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN43@inflate

; 689  :             state->mode = TIME;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16182		; 00003f36H
$LN47@inflate:

; 690  :                 /* fallthrough */
; 691  :         case TIME:
; 692  :             NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN44@inflate
$LN51@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN354@inflate
	jmp	$inf_leave$528
$LN354@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN51@inflate
	jmp	SHORT $LN47@inflate
$LN44@inflate:
	xor	eax, eax
	jne	SHORT $LN47@inflate

; 693  :             if (state->head != Z_NULL)

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN355@inflate

; 694  :                 state->head->time = hold;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN355@inflate:

; 695  :             if ((state->flags & 0x0200) && (state->wrap & 4))

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 512				; 00000200H
	je	SHORT $LN57@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN57@inflate
$LN54@inflate:

; 696  :                 CRC4(state->check, hold);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	dl, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp+ecx], dl
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR _hbuf$[ebp+ecx], al
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 16					; 00000010H
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _hbuf$[ebp+eax], dl
	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 24					; 00000018H
	mov	edx, 1
	imul	eax, edx, 3
	mov	BYTE PTR _hbuf$[ebp+eax], cl
	push	4
	lea	ecx, DWORD PTR _hbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+28], eax
	xor	edx, edx
	jne	SHORT $LN54@inflate
$LN57@inflate:

; 697  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN57@inflate

; 698  :             state->mode = OS;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16183		; 00003f37H
$LN61@inflate:

; 699  :                 /* fallthrough */
; 700  :         case OS:
; 701  :             NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN58@inflate
$LN65@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN358@inflate
	jmp	$inf_leave$528
$LN358@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN65@inflate
	jmp	SHORT $LN61@inflate
$LN58@inflate:
	xor	eax, eax
	jne	SHORT $LN61@inflate

; 702  :             if (state->head != Z_NULL) {

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN359@inflate

; 703  :                 state->head->xflags = (int)(hold & 0xff);

	mov	edx, DWORD PTR _hold$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+8], edx

; 704  :                 state->head->os = (int)(hold >> 8);

	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+12], edx
$LN359@inflate:

; 705  :             }
; 706  :             if ((state->flags & 0x0200) && (state->wrap & 4))

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 512				; 00000200H
	je	SHORT $LN71@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN71@inflate
$LN68@inflate:

; 707  :                 CRC2(state->check, hold);

	mov	eax, 1
	imul	ecx, eax, 0
	mov	dl, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp+ecx], dl
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR _hbuf$[ebp+ecx], al
	push	2
	lea	edx, DWORD PTR _hbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], eax
	xor	eax, eax
	jne	SHORT $LN68@inflate
$LN71@inflate:

; 708  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN71@inflate

; 709  :             state->mode = EXLEN;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16184		; 00003f38H
$LN361@inflate:

; 710  :                 /* fallthrough */
; 711  :         case EXLEN:
; 712  :             if (state->flags & 0x0400) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 1024				; 00000400H
	je	$LN362@inflate
$LN75@inflate:

; 713  :                 NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN72@inflate
$LN79@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN364@inflate
	jmp	$inf_leave$528
$LN364@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN79@inflate
	jmp	SHORT $LN75@inflate
$LN72@inflate:
	xor	eax, eax
	jne	SHORT $LN75@inflate

; 714  :                 state->length = (unsigned)(hold);

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [ecx+68], edx

; 715  :                 if (state->head != Z_NULL)

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN365@inflate

; 716  :                     state->head->extra_len = (unsigned)hold;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN365@inflate:

; 717  :                 if ((state->flags & 0x0200) && (state->wrap & 4))

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 512				; 00000200H
	je	SHORT $LN85@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN85@inflate
$LN82@inflate:

; 718  :                     CRC2(state->check, hold);

	mov	edx, 1
	imul	eax, edx, 0
	mov	cl, BYTE PTR _hold$[ebp]
	mov	BYTE PTR _hbuf$[ebp+eax], cl
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 8
	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR _hbuf$[ebp+eax], dl
	push	2
	lea	ecx, DWORD PTR _hbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+28], eax
	xor	edx, edx
	jne	SHORT $LN82@inflate
$LN85@inflate:

; 719  :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	eax, eax
	jne	SHORT $LN85@inflate

; 720  :             }

	jmp	SHORT $LN363@inflate
$LN362@inflate:

; 721  :             else if (state->head != Z_NULL)

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN363@inflate

; 722  :                 state->head->extra = Z_NULL;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [eax+16], 0
$LN363@inflate:

; 723  :             state->mode = EXTRA;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16185		; 00003f39H
$LN368@inflate:

; 724  :                 /* fallthrough */
; 725  :         case EXTRA:
; 726  :             if (state->flags & 0x0400) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 1024				; 00000400H
	je	$LN369@inflate

; 727  :                 copy = state->length;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _copy$[ebp], edx

; 728  :                 if (copy > have) copy = have;

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _have$[ebp]
	jbe	SHORT $LN370@inflate
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR _copy$[ebp], ecx
$LN370@inflate:

; 729  :                 if (copy) {

	cmp	DWORD PTR _copy$[ebp], 0
	je	$LN371@inflate

; 730  :                     if (state->head != Z_NULL &&
; 731  :                         state->head->extra != Z_NULL &&

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN372@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN372@inflate
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+20]
	sub	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _len$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jae	SHORT $LN372@inflate

; 732  :                         (len = state->head->extra_len - state->length) <
; 733  :                             state->head->extra_max) {
; 734  :                         zmemcpy(state->head->extra + len, next,

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	eax, DWORD PTR [edx+24]
	jbe	SHORT $LN512@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+24]
	sub	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv403[ebp], edx
	jmp	SHORT $LN513@inflate
$LN512@inflate:
	mov	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR tv403[ebp], eax
$LN513@inflate:
	mov	ecx, DWORD PTR tv403[ebp]
	push	ecx
	mov	edx, DWORD PTR _next$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN372@inflate:

; 735  :                                 len + copy > state->head->extra_max ?
; 736  :                                 state->head->extra_max - len : copy);
; 737  :                     }
; 738  :                     if ((state->flags & 0x0200) && (state->wrap & 4))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 512				; 00000200H
	je	SHORT $LN373@inflate
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 4
	je	SHORT $LN373@inflate

; 739  :                         state->check = crc32(state->check, next, copy);

	mov	ecx, DWORD PTR _copy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _next$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN373@inflate:

; 740  :                     have -= copy;

	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 741  :                     next += copy;

	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], ecx

; 742  :                     state->length -= copy;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+68]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], eax
$LN371@inflate:

; 743  :                 }
; 744  :                 if (state->length) goto inf_leave;

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN369@inflate
	jmp	$inf_leave$528
$LN369@inflate:

; 745  :             }
; 746  :             state->length = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+68], 0

; 747  :             state->mode = NAME;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16186		; 00003f3aH
$LN375@inflate:

; 748  :                 /* fallthrough */
; 749  :         case NAME:
; 750  :             if (state->flags & 0x0800) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 2048				; 00000800H
	je	$LN376@inflate

; 751  :                 if (have == 0) goto inf_leave;

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN378@inflate
	jmp	$inf_leave$528
$LN378@inflate:

; 752  :                 copy = 0;

	mov	DWORD PTR _copy$[ebp], 0
$LN88@inflate:

; 753  :                 do {
; 754  :                     len = (unsigned)(next[copy++]);

	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, DWORD PTR _copy$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _len$[ebp], edx
	mov	eax, DWORD PTR _copy$[ebp]
	add	eax, 1
	mov	DWORD PTR _copy$[ebp], eax

; 755  :                     if (state->head != Z_NULL &&
; 756  :                             state->head->name != Z_NULL &&

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN86@inflate
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN86@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	cmp	ecx, DWORD PTR [edx+32]
	jae	SHORT $LN86@inflate

; 757  :                             state->length < state->head->name_max)
; 758  :                         state->head->name[state->length++] = (Bytef)len;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR [eax+28]
	mov	cl, BYTE PTR _len$[ebp]
	mov	BYTE PTR [eax+edx], cl
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+68]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], eax
$LN86@inflate:

; 759  :                 } while (len && copy < have);

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN87@inflate
	mov	edx, DWORD PTR _copy$[ebp]
	cmp	edx, DWORD PTR _have$[ebp]
	jb	SHORT $LN88@inflate
$LN87@inflate:

; 760  :                 if ((state->flags & 0x0200) && (state->wrap & 4))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 512				; 00000200H
	je	SHORT $LN381@inflate
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 4
	je	SHORT $LN381@inflate

; 761  :                     state->check = crc32(state->check, next, copy);

	mov	ecx, DWORD PTR _copy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _next$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_crc32@12
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN381@inflate:

; 762  :                 have -= copy;

	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], eax

; 763  :                 next += copy;

	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], ecx

; 764  :                 if (len) goto inf_leave;

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN382@inflate
	jmp	$inf_leave$528
$LN382@inflate:

; 765  :             }

	jmp	SHORT $LN377@inflate
$LN376@inflate:

; 766  :             else if (state->head != Z_NULL)

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN377@inflate

; 767  :                 state->head->name = Z_NULL;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+28], 0
$LN377@inflate:

; 768  :             state->length = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+68], 0

; 769  :             state->mode = COMMENT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16187		; 00003f3bH
$LN384@inflate:

; 770  :                 /* fallthrough */
; 771  :         case COMMENT:
; 772  :             if (state->flags & 0x1000) {

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 4096				; 00001000H
	je	$LN385@inflate

; 773  :                 if (have == 0) goto inf_leave;

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN387@inflate
	jmp	$inf_leave$528
$LN387@inflate:

; 774  :                 copy = 0;

	mov	DWORD PTR _copy$[ebp], 0
$LN91@inflate:

; 775  :                 do {
; 776  :                     len = (unsigned)(next[copy++]);

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _len$[ebp], ecx
	mov	edx, DWORD PTR _copy$[ebp]
	add	edx, 1
	mov	DWORD PTR _copy$[ebp], edx

; 777  :                     if (state->head != Z_NULL &&
; 778  :                             state->head->comment != Z_NULL &&

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN89@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN89@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+68]
	cmp	eax, DWORD PTR [ecx+40]
	jae	SHORT $LN89@inflate

; 779  :                             state->length < state->head->comm_max)
; 780  :                         state->head->comment[state->length++] = (Bytef)len;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [edx+36]
	mov	al, BYTE PTR _len$[ebp]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN89@inflate:

; 781  :                 } while (len && copy < have);

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN90@inflate
	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR _have$[ebp]
	jb	SHORT $LN91@inflate
$LN90@inflate:

; 782  :                 if ((state->flags & 0x0200) && (state->wrap & 4))

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 512				; 00000200H
	je	SHORT $LN390@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN390@inflate

; 783  :                     state->check = crc32(state->check, next, copy);

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _next$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_crc32@12
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN390@inflate:

; 784  :                 have -= copy;

	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], edx

; 785  :                 next += copy;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], eax

; 786  :                 if (len) goto inf_leave;

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN391@inflate
	jmp	$inf_leave$528
$LN391@inflate:

; 787  :             }

	jmp	SHORT $LN386@inflate
$LN385@inflate:

; 788  :             else if (state->head != Z_NULL)

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN386@inflate

; 789  :                 state->head->comment = Z_NULL;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [eax+36], 0
$LN386@inflate:

; 790  :             state->mode = HCRC;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16188		; 00003f3cH
$LN393@inflate:

; 791  :                 /* fallthrough */
; 792  :         case HCRC:
; 793  :             if (state->flags & 0x0200) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, 512				; 00000200H
	je	$LN394@inflate
$LN95@inflate:

; 794  :                 NEEDBITS(16);

	cmp	DWORD PTR _bits$[ebp], 16		; 00000010H
	jae	SHORT $LN92@inflate
$LN99@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN395@inflate
	jmp	$inf_leave$528
$LN395@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN99@inflate
	jmp	SHORT $LN95@inflate
$LN92@inflate:
	xor	ecx, ecx
	jne	SHORT $LN95@inflate

; 795  :                 if ((state->wrap & 4) && hold != (state->check & 0xffff)) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 4
	je	SHORT $LN102@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 65535				; 0000ffffH
	cmp	DWORD PTR _hold$[ebp], edx
	je	SHORT $LN102@inflate

; 796  :                     strm->msg = (char *)"header crc mismatch";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG44869

; 797  :                     state->mode = BAD;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16209		; 00003f51H

; 798  :                     break;

	jmp	$LN8@inflate
$LN102@inflate:

; 799  :                 }
; 800  :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN102@inflate
$LN394@inflate:

; 801  :             }
; 802  :             if (state->head != Z_NULL) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN397@inflate

; 803  :                 state->head->hcrc = (int)((state->flags >> 9) & 1);

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sar	edx, 9
	and	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+44], edx

; 804  :                 state->head->done = 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [eax+48], 1
$LN397@inflate:

; 805  :             }
; 806  :             strm->adler = state->check = crc32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_crc32@12
	mov	DWORD PTR tv558[ebp], eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR tv558[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR tv558[ebp]
	mov	DWORD PTR [eax+48], ecx

; 807  :             state->mode = TYPE;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16191		; 00003f3fH

; 808  :             break;

	jmp	$LN8@inflate
$LN106@inflate:

; 809  : #endif
; 810  :         case DICTID:
; 811  :             NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN103@inflate
$LN110@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN399@inflate
	jmp	$inf_leave$528
$LN399@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN110@inflate
	jmp	SHORT $LN106@inflate
$LN103@inflate:
	xor	eax, eax
	jne	SHORT $LN106@inflate

; 812  :             strm->adler = state->check = ZSWAP32(hold);

	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 24					; 00000018H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	add	ecx, edx
	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 65280				; 0000ff00H
	shl	eax, 8
	add	ecx, eax
	mov	edx, DWORD PTR _hold$[ebp]
	and	edx, 255				; 000000ffH
	shl	edx, 24					; 00000018H
	add	ecx, edx
	mov	DWORD PTR tv585[ebp], ecx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR tv585[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR tv585[ebp]
	mov	DWORD PTR [edx+48], eax
$LN113@inflate:

; 813  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN113@inflate

; 814  :             state->mode = DICT;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16190		; 00003f3eH
$LN400@inflate:

; 815  :                 /* fallthrough */
; 816  :         case DICT:
; 817  :             if (state->havedict == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN401@inflate
$LN116@inflate:

; 818  :                 RESTORE();

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [edx+64], eax
	xor	ecx, ecx
	jne	SHORT $LN116@inflate

; 819  :                 return Z_NEED_DICT;

	mov	eax, 2
	jmp	$LN1@inflate
$LN401@inflate:

; 820  :             }
; 821  :             strm->adler = state->check = adler32(0L, Z_NULL, 0);

	push	0
	push	0
	push	0
	call	_adler32@12
	mov	DWORD PTR tv599[ebp], eax
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv599[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR tv599[ebp]
	mov	DWORD PTR [ecx+48], edx

; 822  :             state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16191		; 00003f3fH
$LN402@inflate:

; 823  :                 /* fallthrough */
; 824  :         case TYPE:
; 825  :             if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;

	cmp	DWORD PTR _flush$[ebp], 5
	je	SHORT $LN404@inflate
	cmp	DWORD PTR _flush$[ebp], 6
	jne	SHORT $LN405@inflate
$LN404@inflate:
	jmp	$inf_leave$528
$LN405@inflate:

; 826  :                 /* fallthrough */
; 827  :         case TYPEDO:
; 828  :             if (state->last) {

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN123@inflate
$LN119@inflate:

; 829  :                 BYTEBITS();

	mov	ecx, DWORD PTR _bits$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _bits$[ebp]
	and	eax, 7
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN119@inflate

; 830  :                 state->mode = CHECK;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16206		; 00003f4eH

; 831  :                 break;

	jmp	$LN8@inflate
$LN123@inflate:

; 832  :             }
; 833  :             NEEDBITS(3);

	cmp	DWORD PTR _bits$[ebp], 3
	jae	SHORT $LN120@inflate
$LN127@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN407@inflate
	jmp	$inf_leave$528
$LN407@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN127@inflate
	jmp	SHORT $LN123@inflate
$LN120@inflate:
	xor	ecx, ecx
	jne	SHORT $LN123@inflate

; 834  :             state->last = BITS(1);

	mov	edx, DWORD PTR _hold$[ebp]
	and	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN130@inflate:

; 835  :             DROPBITS(1);

	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _hold$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, 1
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN130@inflate

; 836  :             switch (BITS(2)) {

	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 3
	mov	DWORD PTR tv630[ebp], ecx
	cmp	DWORD PTR tv630[ebp], 3
	ja	SHORT $LN138@inflate
	mov	edx, DWORD PTR tv630[ebp]
	jmp	DWORD PTR $LN527@inflate[edx*4]
$LN408@inflate:

; 837  :             case 0:                             /* stored block */
; 838  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 839  :                         state->last ? " (last)" : ""));
; 840  :                 state->mode = STORED;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16193		; 00003f41H

; 841  :                 break;

	jmp	SHORT $LN138@inflate
$LN409@inflate:

; 842  :             case 1:                             /* fixed block */
; 843  :                 fixedtables(state);

	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_fixedtables
	add	esp, 4

; 844  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 845  :                         state->last ? " (last)" : ""));
; 846  :                 state->mode = LEN_;             /* decode codes */

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16199		; 00003f47H

; 847  :                 if (flush == Z_TREES) {

	cmp	DWORD PTR _flush$[ebp], 6
	jne	SHORT $LN410@inflate
$LN135@inflate:

; 848  :                     DROPBITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 2
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN135@inflate

; 849  :                     goto inf_leave;

	jmp	$inf_leave$528
$LN410@inflate:

; 850  :                 }
; 851  :                 break;

	jmp	SHORT $LN138@inflate
$LN411@inflate:

; 852  :             case 2:                             /* dynamic block */
; 853  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 854  :                         state->last ? " (last)" : ""));
; 855  :                 state->mode = TABLE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16196		; 00003f44H

; 856  :                 break;

	jmp	SHORT $LN138@inflate
$LN412@inflate:

; 857  :             case 3:
; 858  :                 strm->msg = (char *)"invalid block type";

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG44886

; 859  :                 state->mode = BAD;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16209		; 00003f51H
$LN138@inflate:

; 860  :             }
; 861  :             DROPBITS(2);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 2
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN138@inflate

; 862  :             break;

	jmp	$LN8@inflate
$LN141@inflate:

; 863  :         case STORED:
; 864  :             BYTEBITS();                         /* go to byte boundary */

	mov	ecx, DWORD PTR _bits$[ebp]
	and	ecx, 7
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN141@inflate
$LN145@inflate:

; 865  :             NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN142@inflate
$LN149@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN414@inflate
	jmp	$inf_leave$528
$LN414@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN149@inflate
	jmp	SHORT $LN145@inflate
$LN142@inflate:
	xor	ecx, ecx
	jne	SHORT $LN145@inflate

; 866  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

	mov	edx, DWORD PTR _hold$[ebp]
	and	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 16					; 00000010H
	xor	eax, 65535				; 0000ffffH
	cmp	edx, eax
	je	SHORT $LN415@inflate

; 867  :                 strm->msg = (char *)"invalid stored block lengths";

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG44890

; 868  :                 state->mode = BAD;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16209		; 00003f51H

; 869  :                 break;

	jmp	$LN8@inflate
$LN415@inflate:

; 870  :             }
; 871  :             state->length = (unsigned)hold & 0xffff;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], eax
$LN152@inflate:

; 872  :             Tracev((stderr, "inflate:       stored length %u\n",
; 873  :                     state->length));
; 874  :             INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN152@inflate

; 875  :             state->mode = COPY_;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16194		; 00003f42H

; 876  :             if (flush == Z_TREES) goto inf_leave;

	cmp	DWORD PTR _flush$[ebp], 6
	jne	SHORT $LN417@inflate
	jmp	$inf_leave$528
$LN417@inflate:

; 877  :                 /* fallthrough */
; 878  :         case COPY_:
; 879  :             state->mode = COPY;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16195		; 00003f43H
$LN418@inflate:

; 880  :                 /* fallthrough */
; 881  :         case COPY:
; 882  :             copy = state->length;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _copy$[ebp], eax

; 883  :             if (copy) {

	cmp	DWORD PTR _copy$[ebp], 0
	je	SHORT $LN419@inflate

; 884  :                 if (copy > have) copy = have;

	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR _have$[ebp]
	jbe	SHORT $LN420@inflate
	mov	edx, DWORD PTR _have$[ebp]
	mov	DWORD PTR _copy$[ebp], edx
$LN420@inflate:

; 885  :                 if (copy > left) copy = left;

	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR _left$[ebp]
	jbe	SHORT $LN421@inflate
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR _copy$[ebp], ecx
$LN421@inflate:

; 886  :                 if (copy == 0) goto inf_leave;

	cmp	DWORD PTR _copy$[ebp], 0
	jne	SHORT $LN422@inflate
	jmp	$inf_leave$528
$LN422@inflate:

; 887  :                 zmemcpy(put, next, copy);

	mov	edx, DWORD PTR _copy$[ebp]
	push	edx
	mov	eax, DWORD PTR _next$[ebp]
	push	eax
	mov	ecx, DWORD PTR _put$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 888  :                 have -= copy;

	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _have$[ebp], edx

; 889  :                 next += copy;

	mov	eax, DWORD PTR _next$[ebp]
	add	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _next$[ebp], eax

; 890  :                 left -= copy;

	mov	ecx, DWORD PTR _left$[ebp]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _left$[ebp], ecx

; 891  :                 put += copy;

	mov	edx, DWORD PTR _put$[ebp]
	add	edx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _put$[ebp], edx

; 892  :                 state->length -= copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+68], ecx

; 893  :                 break;

	jmp	$LN8@inflate
$LN419@inflate:

; 894  :             }
; 895  :             Tracev((stderr, "inflate:       stored end\n"));
; 896  :             state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16191		; 00003f3fH

; 897  :             break;

	jmp	$LN8@inflate
$LN156@inflate:

; 898  :         case TABLE:
; 899  :             NEEDBITS(14);

	cmp	DWORD PTR _bits$[ebp], 14		; 0000000eH
	jae	SHORT $LN153@inflate
$LN160@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN424@inflate
	jmp	$inf_leave$528
$LN424@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN160@inflate
	jmp	SHORT $LN156@inflate
$LN153@inflate:
	xor	ecx, ecx
	jne	SHORT $LN156@inflate

; 900  :             state->nlen = BITS(5) + 257;

	mov	edx, DWORD PTR _hold$[ebp]
	and	edx, 31					; 0000001fH
	add	edx, 257				; 00000101H
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+100], edx
$LN163@inflate:

; 901  :             DROPBITS(5);

	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _hold$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, 5
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN163@inflate

; 902  :             state->ndist = BITS(5) + 1;

	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 31					; 0000001fH
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+104], ecx
$LN166@inflate:

; 903  :             DROPBITS(5);

	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 5
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, 5
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN166@inflate

; 904  :             state->ncode = BITS(4) + 4;

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 15					; 0000000fH
	add	eax, 4
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+96], eax
$LN169@inflate:

; 905  :             DROPBITS(4);

	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 4
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 4
	mov	DWORD PTR _bits$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN169@inflate

; 906  : #ifndef PKZIP_BUG_WORKAROUND
; 907  :             if (state->nlen > 286 || state->ndist > 30) {

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+100], 286		; 0000011eH
	ja	SHORT $LN426@inflate
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+104], 30			; 0000001eH
	jbe	SHORT $LN425@inflate
$LN426@inflate:

; 908  :                 strm->msg = (char *)"too many length or distance symbols";

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG44902

; 909  :                 state->mode = BAD;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16209		; 00003f51H

; 910  :                 break;

	jmp	$LN8@inflate
$LN425@inflate:

; 911  :             }
; 912  : #endif
; 913  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 914  :             state->have = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+108], 0

; 915  :             state->mode = LENLENS;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16197		; 00003f45H
$LN170@inflate:

; 916  :                 /* fallthrough */
; 917  :         case LENLENS:
; 918  :             while (state->have < state->ncode) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [edx+108]
	cmp	ecx, DWORD PTR [eax+96]
	jae	$LN183@inflate
$LN175@inflate:

; 919  :                 NEEDBITS(3);

	cmp	DWORD PTR _bits$[ebp], 3
	jae	SHORT $LN172@inflate
$LN179@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN428@inflate
	jmp	$inf_leave$528
$LN428@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN179@inflate
	jmp	SHORT $LN175@inflate
$LN172@inflate:
	xor	eax, eax
	jne	SHORT $LN175@inflate

; 920  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+108]
	movzx	edx, WORD PTR ?order@?1??inflate@@9@9[eax*2]
	mov	eax, DWORD PTR _state$[ebp]
	mov	WORD PTR [eax+edx*2+116], cx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+108], edx
$LN182@inflate:

; 921  :                 DROPBITS(3);

	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 3
	mov	DWORD PTR _hold$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, 3
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN182@inflate

; 922  :             }

	jmp	$LN170@inflate
$LN183@inflate:

; 923  :             while (state->have < 19)

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+108], 19			; 00000013H
	jae	SHORT $LN184@inflate

; 924  :                 state->lens[order[state->have++]] = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+108]
	movzx	ecx, WORD PTR ?order@?1??inflate@@9@9[eax*2]
	xor	edx, edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	WORD PTR [eax+ecx*2+116], dx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+108], edx
	jmp	SHORT $LN183@inflate
$LN184@inflate:

; 925  :             state->next = state->codes;

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 1332				; 00000534H
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+112], ecx

; 926  :             state->lencode = (const code FAR *)(state->next);

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+80], edx

; 927  :             state->lenbits = 7;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+88], 7

; 928  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 756				; 000002f4H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 116				; 00000074H
	push	ecx
	push	0
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 929  :                                 &(state->lenbits), state->work);
; 930  :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN429@inflate

; 931  :                 strm->msg = (char *)"invalid code lengths set";

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG44906

; 932  :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16209		; 00003f51H

; 933  :                 break;

	jmp	$LN8@inflate
$LN429@inflate:

; 934  :             }
; 935  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 936  :             state->have = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+108], 0

; 937  :             state->mode = CODELENS;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16198		; 00003f46H
$LN185@inflate:

; 938  :                 /* fallthrough */
; 939  :         case CODELENS:
; 940  :             while (state->have < state->nlen + state->ndist) {

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+104]
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+108], ecx
	jae	$LN186@inflate
$LN189@inflate:

; 941  :                 for (;;) {
; 942  :                     here = state->lencode[BITS(state->lenbits)];

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+88]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _here$[ebp], edx

; 943  :                     if ((unsigned)(here.bits) <= bits) break;

	movzx	eax, BYTE PTR _here$[ebp+1]
	cmp	eax, DWORD PTR _bits$[ebp]
	ja	SHORT $LN192@inflate
	jmp	SHORT $LN188@inflate
$LN192@inflate:

; 944  :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN432@inflate
	jmp	$inf_leave$528
$LN432@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN192@inflate

; 945  :                 }

	jmp	SHORT $LN189@inflate
$LN188@inflate:

; 946  :                 if (here.val < 16) {

	movzx	ecx, WORD PTR _here$[ebp+2]
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN433@inflate
$LN195@inflate:

; 947  :                     DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN195@inflate

; 948  :                     state->lens[state->have++] = here.val;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _state$[ebp]
	mov	ax, WORD PTR _here$[ebp+2]
	mov	WORD PTR [edx+ecx*2+116], ax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+108], edx

; 949  :                 }

	jmp	$LN434@inflate
$LN433@inflate:

; 950  :                 else {
; 951  :                     if (here.val == 16) {

	movzx	ecx, WORD PTR _here$[ebp+2]
	cmp	ecx, 16					; 00000010H
	jne	$LN435@inflate
$LN199@inflate:

; 952  :                         NEEDBITS(here.bits + 2);

	movzx	edx, BYTE PTR _here$[ebp+1]
	add	edx, 2
	cmp	DWORD PTR _bits$[ebp], edx
	jae	SHORT $LN196@inflate
$LN203@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN437@inflate
	jmp	$inf_leave$528
$LN437@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN203@inflate
	jmp	SHORT $LN199@inflate
$LN196@inflate:
	xor	eax, eax
	jne	SHORT $LN199@inflate
$LN206@inflate:

; 953  :                         DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN206@inflate

; 954  :                         if (state->have == 0) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+108], 0
	jne	SHORT $LN438@inflate

; 955  :                             strm->msg = (char *)"invalid bit length repeat";

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG44916

; 956  :                             state->mode = BAD;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16209		; 00003f51H

; 957  :                             break;

	jmp	$LN186@inflate
$LN438@inflate:

; 958  :                         }
; 959  :                         len = state->lens[state->have - 1];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+114]
	mov	DWORD PTR _len$[ebp], eax

; 960  :                         copy = 3 + BITS(2);

	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 3
	add	ecx, 3
	mov	DWORD PTR _copy$[ebp], ecx
$LN209@inflate:

; 961  :                         DROPBITS(2);

	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 2
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _bits$[ebp]
	sub	eax, 2
	mov	DWORD PTR _bits$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN209@inflate

; 962  :                     }

	jmp	$LN436@inflate
$LN435@inflate:

; 963  :                     else if (here.val == 17) {

	movzx	edx, WORD PTR _here$[ebp+2]
	cmp	edx, 17					; 00000011H
	jne	$LN227@inflate
$LN213@inflate:

; 964  :                         NEEDBITS(here.bits + 3);

	movzx	eax, BYTE PTR _here$[ebp+1]
	add	eax, 3
	cmp	DWORD PTR _bits$[ebp], eax
	jae	SHORT $LN210@inflate
$LN217@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN441@inflate
	jmp	$inf_leave$528
$LN441@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN217@inflate
	jmp	SHORT $LN213@inflate
$LN210@inflate:
	xor	ecx, ecx
	jne	SHORT $LN213@inflate
$LN220@inflate:

; 965  :                         DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN220@inflate

; 966  :                         len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 967  :                         copy = 3 + BITS(3);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 7
	add	eax, 3
	mov	DWORD PTR _copy$[ebp], eax
$LN223@inflate:

; 968  :                         DROPBITS(3);

	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 3
	mov	DWORD PTR _hold$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, 3
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN223@inflate

; 969  :                     }

	jmp	$LN436@inflate
$LN227@inflate:

; 970  :                     else {
; 971  :                         NEEDBITS(here.bits + 7);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	add	ecx, 7
	cmp	DWORD PTR _bits$[ebp], ecx
	jae	SHORT $LN224@inflate
$LN231@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN442@inflate
	jmp	$inf_leave$528
$LN442@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN231@inflate
	jmp	SHORT $LN227@inflate
$LN224@inflate:
	xor	eax, eax
	jne	SHORT $LN227@inflate
$LN234@inflate:

; 972  :                         DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN234@inflate

; 973  :                         len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 974  :                         copy = 11 + BITS(7);

	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 127				; 0000007fH
	add	eax, 11					; 0000000bH
	mov	DWORD PTR _copy$[ebp], eax
$LN237@inflate:

; 975  :                         DROPBITS(7);

	mov	ecx, DWORD PTR _hold$[ebp]
	shr	ecx, 7
	mov	DWORD PTR _hold$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, 7
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN237@inflate
$LN436@inflate:

; 976  :                     }
; 977  :                     if (state->have + copy > state->nlen + state->ndist) {

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, DWORD PTR _copy$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	eax, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [eax+104]
	cmp	edx, ecx
	jbe	SHORT $LN238@inflate

; 978  :                         strm->msg = (char *)"invalid bit length repeat";

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG44922

; 979  :                         state->mode = BAD;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16209		; 00003f51H

; 980  :                         break;

	jmp	SHORT $LN186@inflate
$LN238@inflate:

; 981  :                     }
; 982  :                     while (copy--)

	mov	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR tv912[ebp], eax
	mov	ecx, DWORD PTR _copy$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _copy$[ebp], ecx
	cmp	DWORD PTR tv912[ebp], 0
	je	SHORT $LN434@inflate

; 983  :                         state->lens[state->have++] = (unsigned short)len;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dx, WORD PTR _len$[ebp]
	mov	WORD PTR [ecx+eax*2+116], dx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+108], ecx
	jmp	SHORT $LN238@inflate
$LN434@inflate:

; 984  :                 }
; 985  :             }

	jmp	$LN185@inflate
$LN186@inflate:

; 986  : 
; 987  :             /* handle error breaks in while */
; 988  :             if (state->mode == BAD) break;

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 16209		; 00003f51H
	jne	SHORT $LN444@inflate
	jmp	$LN8@inflate
$LN444@inflate:

; 989  : 
; 990  :             /* check for end-of-block code (better have one) */
; 991  :             if (state->lens[256] == 0) {

	mov	ecx, 2
	shl	ecx, 8
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx+ecx+116]
	test	eax, eax
	jne	SHORT $LN445@inflate

; 992  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [ecx+24], OFFSET $SG44925

; 993  :                 state->mode = BAD;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16209		; 00003f51H

; 994  :                 break;

	jmp	$LN8@inflate
$LN445@inflate:

; 995  :             }
; 996  : 
; 997  :             /* build code tables -- note: do not change the lenbits or distbits
; 998  :                values here (9 and 6) without reading the comments in inftrees.h
; 999  :                concerning the ENOUGH constants, which depend on those values */
; 1000 :             state->next = state->codes;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1332				; 00000534H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+112], eax

; 1001 :             state->lencode = (const code FAR *)(state->next);

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR [edx+80], ecx

; 1002 :             state->lenbits = 9;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+88], 9

; 1003 :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 756				; 000002f4H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 116				; 00000074H
	push	edx
	push	1
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 1004 :                                 &(state->lenbits), state->work);
; 1005 :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN446@inflate

; 1006 :                 strm->msg = (char *)"invalid literal/lengths set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG44927

; 1007 :                 state->mode = BAD;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16209		; 00003f51H

; 1008 :                 break;

	jmp	$LN8@inflate
$LN446@inflate:

; 1009 :             }
; 1010 :             state->distcode = (const code FAR *)(state->next);

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR [edx+84], ecx

; 1011 :             state->distbits = 6;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+92], 6

; 1012 :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 756				; 000002f4H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 92					; 0000005cH
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+116]
	push	edx
	push	2
	call	_inflate_table
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 1013 :                             &(state->next), &(state->distbits), state->work);
; 1014 :             if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN447@inflate

; 1015 :                 strm->msg = (char *)"invalid distances set";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG44929

; 1016 :                 state->mode = BAD;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16209		; 00003f51H

; 1017 :                 break;

	jmp	$LN8@inflate
$LN447@inflate:

; 1018 :             }
; 1019 :             Tracev((stderr, "inflate:       codes ok\n"));
; 1020 :             state->mode = LEN_;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16199		; 00003f47H

; 1021 :             if (flush == Z_TREES) goto inf_leave;

	cmp	DWORD PTR _flush$[ebp], 6
	jne	SHORT $LN449@inflate
	jmp	$inf_leave$528
$LN449@inflate:

; 1022 :                 /* fallthrough */
; 1023 :         case LEN_:
; 1024 :             state->mode = LEN;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16200		; 00003f48H
$LN450@inflate:

; 1025 :                 /* fallthrough */
; 1026 :         case LEN:
; 1027 :             if (have >= 6 && left >= 258) {

	cmp	DWORD PTR _have$[ebp], 6
	jb	$LN451@inflate
	cmp	DWORD PTR _left$[ebp], 258		; 00000102H
	jb	$LN451@inflate
$LN242@inflate:

; 1028 :                 RESTORE();

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _left$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [edx+64], eax
	xor	ecx, ecx
	jne	SHORT $LN242@inflate

; 1029 :                 inflate_fast(strm, out);

	mov	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _strm$[ebp]
	push	eax
	call	_inflate_fast
	add	esp, 8
$LN245@inflate:

; 1030 :                 LOAD();

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _put$[ebp], edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _left$[ebp], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _hold$[ebp], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _bits$[ebp], eax
	xor	ecx, ecx
	jne	SHORT $LN245@inflate

; 1031 :                 if (state->mode == TYPE)

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+4], 16191		; 00003f3fH
	jne	SHORT $LN452@inflate

; 1032 :                     state->back = -1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7112], -1
$LN452@inflate:

; 1033 :                 break;

	jmp	$LN8@inflate
$LN451@inflate:

; 1034 :             }
; 1035 :             state->back = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+7112], 0
$LN248@inflate:

; 1036 :             for (;;) {
; 1037 :                 here = state->lencode[BITS(state->lenbits)];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+88]
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _here$[ebp], eax

; 1038 :                 if ((unsigned)(here.bits) <= bits) break;

	movzx	ecx, BYTE PTR _here$[ebp+1]
	cmp	ecx, DWORD PTR _bits$[ebp]
	ja	SHORT $LN251@inflate
	jmp	SHORT $LN247@inflate
$LN251@inflate:

; 1039 :                 PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN454@inflate
	jmp	$inf_leave$528
$LN454@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN251@inflate

; 1040 :             }

	jmp	SHORT $LN248@inflate
$LN247@inflate:

; 1041 :             if (here.op && (here.op & 0xf0) == 0) {

	movzx	eax, BYTE PTR _here$[ebp]
	test	eax, eax
	je	$LN263@inflate
	movzx	ecx, BYTE PTR _here$[ebp]
	and	ecx, 240				; 000000f0H
	jne	$LN263@inflate

; 1042 :                 last = here;

	mov	edx, DWORD PTR _here$[ebp]
	mov	DWORD PTR _last$[ebp], edx
$LN254@inflate:

; 1043 :                 for (;;) {
; 1044 :                     here = state->lencode[last.val +

	movzx	eax, WORD PTR _last$[ebp+2]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	movzx	edx, BYTE PTR _last$[ebp]
	add	ecx, edx
	mov	edx, 1
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	shr	edx, cl
	add	eax, edx
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _here$[ebp], eax

; 1045 :                             (BITS(last.bits + last.op) >> last.bits)];
; 1046 :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

	movzx	ecx, BYTE PTR _last$[ebp+1]
	movzx	edx, BYTE PTR _here$[ebp+1]
	add	ecx, edx
	cmp	ecx, DWORD PTR _bits$[ebp]
	ja	SHORT $LN257@inflate
	jmp	SHORT $LN260@inflate
$LN257@inflate:

; 1047 :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN457@inflate
	jmp	$inf_leave$528
$LN457@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN257@inflate

; 1048 :                 }

	jmp	SHORT $LN254@inflate
$LN260@inflate:

; 1049 :                 DROPBITS(last.bits);

	movzx	ecx, BYTE PTR _last$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	ecx, BYTE PTR _last$[ebp+1]
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN260@inflate

; 1050 :                 state->back += last.bits;

	movzx	ecx, BYTE PTR _last$[ebp+1]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+7112]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7112], ecx
$LN263@inflate:

; 1051 :             }
; 1052 :             DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN263@inflate

; 1053 :             state->back += here.bits;

	movzx	eax, BYTE PTR _here$[ebp+1]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+7112]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+7112], eax

; 1054 :             state->length = (unsigned)here.val;

	movzx	eax, WORD PTR _here$[ebp+2]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 1055 :             if ((int)(here.op) == 0) {

	movzx	edx, BYTE PTR _here$[ebp]
	test	edx, edx
	jne	SHORT $LN458@inflate

; 1056 :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 1057 :                         "inflate:         literal '%c'\n" :
; 1058 :                         "inflate:         literal 0x%02x\n", here.val));
; 1059 :                 state->mode = LIT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16205		; 00003f4dH

; 1060 :                 break;

	jmp	$LN8@inflate
$LN458@inflate:

; 1061 :             }
; 1062 :             if (here.op & 32) {

	movzx	ecx, BYTE PTR _here$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN459@inflate

; 1063 :                 Tracevv((stderr, "inflate:         end of block\n"));
; 1064 :                 state->back = -1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+7112], -1

; 1065 :                 state->mode = TYPE;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16191		; 00003f3fH

; 1066 :                 break;

	jmp	$LN8@inflate
$LN459@inflate:

; 1067 :             }
; 1068 :             if (here.op & 64) {

	movzx	ecx, BYTE PTR _here$[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN460@inflate

; 1069 :                 strm->msg = (char *)"invalid literal/length code";

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG44943

; 1070 :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16209		; 00003f51H

; 1071 :                 break;

	jmp	$LN8@inflate
$LN460@inflate:

; 1072 :             }
; 1073 :             state->extra = (unsigned)(here.op) & 15;

	movzx	ecx, BYTE PTR _here$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+76], ecx

; 1074 :             state->mode = LENEXT;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16201		; 00003f49H
$LN461@inflate:

; 1075 :                 /* fallthrough */
; 1076 :         case LENEXT:
; 1077 :             if (state->extra) {

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	$LN462@inflate
$LN267@inflate:

; 1078 :                 NEEDBITS(state->extra);

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _bits$[ebp]
	cmp	eax, DWORD PTR [edx+76]
	jae	SHORT $LN264@inflate
$LN271@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN463@inflate
	jmp	$inf_leave$528
$LN463@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN271@inflate
	jmp	SHORT $LN267@inflate
$LN264@inflate:
	xor	ecx, ecx
	jne	SHORT $LN267@inflate

; 1079 :                 state->length += BITS(state->extra);

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+76]
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+68], eax
$LN274@inflate:

; 1080 :                 DROPBITS(state->extra);

	mov	eax, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN274@inflate

; 1081 :                 state->back += state->extra;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+7112]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+76]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7112], ecx
$LN462@inflate:

; 1082 :             }
; 1083 :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 1084 :             state->was = state->length;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+7116], eax

; 1085 :             state->mode = DIST;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16202		; 00003f4aH
$LN277@inflate:

; 1086 :                 /* fallthrough */
; 1087 :         case DIST:
; 1088 :             for (;;) {
; 1089 :                 here = state->distcode[BITS(state->distbits)];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+92]
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _here$[ebp], eax

; 1090 :                 if ((unsigned)(here.bits) <= bits) break;

	movzx	ecx, BYTE PTR _here$[ebp+1]
	cmp	ecx, DWORD PTR _bits$[ebp]
	ja	SHORT $LN280@inflate
	jmp	SHORT $LN276@inflate
$LN280@inflate:

; 1091 :                 PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN466@inflate
	jmp	$inf_leave$528
$LN466@inflate:
	mov	edx, DWORD PTR _have$[ebp]
	sub	edx, 1
	mov	DWORD PTR _have$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [eax]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN280@inflate

; 1092 :             }

	jmp	SHORT $LN277@inflate
$LN276@inflate:

; 1093 :             if ((here.op & 0xf0) == 0) {

	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 240				; 000000f0H
	jne	$LN292@inflate

; 1094 :                 last = here;

	mov	ecx, DWORD PTR _here$[ebp]
	mov	DWORD PTR _last$[ebp], ecx
$LN283@inflate:

; 1095 :                 for (;;) {
; 1096 :                     here = state->distcode[last.val +

	movzx	edx, WORD PTR _last$[ebp+2]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	movzx	eax, BYTE PTR _last$[ebp]
	add	ecx, eax
	mov	eax, 1
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _hold$[ebp]
	movzx	ecx, BYTE PTR _last$[ebp+1]
	shr	eax, cl
	add	edx, eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx+84]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _here$[ebp], ecx

; 1097 :                             (BITS(last.bits + last.op) >> last.bits)];
; 1098 :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

	movzx	edx, BYTE PTR _last$[ebp+1]
	movzx	eax, BYTE PTR _here$[ebp+1]
	add	edx, eax
	cmp	edx, DWORD PTR _bits$[ebp]
	ja	SHORT $LN286@inflate
	jmp	SHORT $LN289@inflate
$LN286@inflate:

; 1099 :                     PULLBYTE();

	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN469@inflate
	jmp	$inf_leave$528
$LN469@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN286@inflate

; 1100 :                 }

	jmp	SHORT $LN283@inflate
$LN289@inflate:

; 1101 :                 DROPBITS(last.bits);

	movzx	ecx, BYTE PTR _last$[ebp+1]
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, cl
	mov	DWORD PTR _hold$[ebp], edx
	movzx	eax, BYTE PTR _last$[ebp+1]
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN289@inflate

; 1102 :                 state->back += last.bits;

	movzx	eax, BYTE PTR _last$[ebp+1]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+7112]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+7112], eax
$LN292@inflate:

; 1103 :             }
; 1104 :             DROPBITS(here.bits);

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN292@inflate

; 1105 :             state->back += here.bits;

	movzx	ecx, BYTE PTR _here$[ebp+1]
	mov	edx, DWORD PTR _state$[ebp]
	add	ecx, DWORD PTR [edx+7112]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+7112], ecx

; 1106 :             if (here.op & 64) {

	movzx	ecx, BYTE PTR _here$[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN470@inflate

; 1107 :                 strm->msg = (char *)"invalid distance code";

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG44954

; 1108 :                 state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16209		; 00003f51H

; 1109 :                 break;

	jmp	$LN8@inflate
$LN470@inflate:

; 1110 :             }
; 1111 :             state->offset = (unsigned)here.val;

	movzx	ecx, WORD PTR _here$[ebp+2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 1112 :             state->extra = (unsigned)(here.op) & 15;

	movzx	eax, BYTE PTR _here$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 1113 :             state->mode = DISTEXT;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16203		; 00003f4bH
$LN471@inflate:

; 1114 :                 /* fallthrough */
; 1115 :         case DISTEXT:
; 1116 :             if (state->extra) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN472@inflate
$LN296@inflate:

; 1117 :                 NEEDBITS(state->extra);

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _bits$[ebp]
	cmp	edx, DWORD PTR [ecx+76]
	jae	SHORT $LN293@inflate
$LN300@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN473@inflate
	jmp	$inf_leave$528
$LN473@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN300@inflate
	jmp	SHORT $LN296@inflate
$LN293@inflate:
	xor	eax, eax
	jne	SHORT $LN296@inflate

; 1118 :                 state->offset += BITS(state->extra);

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+76]
	shl	edx, cl
	sub	edx, 1
	and	edx, DWORD PTR _hold$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN303@inflate:

; 1119 :                 DROPBITS(state->extra);

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _hold$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	shr	eax, cl
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _bits$[ebp]
	sub	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN303@inflate

; 1120 :                 state->back += state->extra;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+7112]
	mov	eax, DWORD PTR _state$[ebp]
	add	edx, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+7112], edx
$LN472@inflate:

; 1121 :             }
; 1122 : #ifdef INFLATE_STRICT
; 1123 :             if (state->offset > state->dmax) {
; 1124 :                 strm->msg = (char *)"invalid distance too far back";
; 1125 :                 state->mode = BAD;
; 1126 :                 break;
; 1127 :             }
; 1128 : #endif
; 1129 :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 1130 :             state->mode = MATCH;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16204		; 00003f4cH
$LN474@inflate:

; 1131 :                 /* fallthrough */
; 1132 :         case MATCH:
; 1133 :             if (left == 0) goto inf_leave;

	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN475@inflate
	jmp	$inf_leave$528
$LN475@inflate:

; 1134 :             copy = out - left;

	mov	eax, DWORD PTR _out$[ebp]
	sub	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _copy$[ebp], eax

; 1135 :             if (state->offset > copy) {         /* copy from window */

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	cmp	edx, DWORD PTR _copy$[ebp]
	jbe	$LN476@inflate

; 1136 :                 copy = state->offset - copy;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	sub	ecx, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _copy$[ebp], ecx

; 1137 :                 if (copy > state->whave) {

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR [edx+48]
	jbe	SHORT $LN478@inflate

; 1138 :                     if (state->sane) {

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+7108], 0
	je	SHORT $LN478@inflate

; 1139 :                         strm->msg = (char *)"invalid distance too far back";

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG44964

; 1140 :                         state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16209		; 00003f51H

; 1141 :                         break;

	jmp	$LN8@inflate
$LN478@inflate:

; 1142 :                     }
; 1143 : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 1144 :                     Trace((stderr, "inflate.c too far\n"));
; 1145 :                     copy -= state->whave;
; 1146 :                     if (copy > state->length) copy = state->length;
; 1147 :                     if (copy > left) copy = left;
; 1148 :                     left -= copy;
; 1149 :                     state->length -= copy;
; 1150 :                     do {
; 1151 :                         *put++ = 0;
; 1152 :                     } while (--copy);
; 1153 :                     if (state->length == 0) state->mode = LEN;
; 1154 :                     break;
; 1155 : #endif
; 1156 :                 }
; 1157 :                 if (copy > state->wnext) {

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _copy$[ebp]
	cmp	edx, DWORD PTR [ecx+52]
	jbe	SHORT $LN480@inflate

; 1158 :                     copy -= state->wnext;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _copy$[ebp]
	sub	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _copy$[ebp], ecx

; 1159 :                     from = state->window + (state->wsize - copy);

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR _from$[ebp], eax

; 1160 :                 }

	jmp	SHORT $LN481@inflate
$LN480@inflate:

; 1161 :                 else
; 1162 :                     from = state->window + (state->wnext - copy);

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	add	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR _from$[ebp], eax
$LN481@inflate:

; 1163 :                 if (copy > state->length) copy = state->length;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _copy$[ebp]
	cmp	eax, DWORD PTR [edx+68]
	jbe	SHORT $LN482@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _copy$[ebp], edx
$LN482@inflate:

; 1164 :             }

	jmp	SHORT $LN477@inflate
$LN476@inflate:

; 1165 :             else {                              /* copy from output */
; 1166 :                 from = put - state->offset;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	sub	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _from$[ebp], ecx

; 1167 :                 copy = state->length;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _copy$[ebp], eax
$LN477@inflate:

; 1168 :             }
; 1169 :             if (copy > left) copy = left;

	mov	ecx, DWORD PTR _copy$[ebp]
	cmp	ecx, DWORD PTR _left$[ebp]
	jbe	SHORT $LN483@inflate
	mov	edx, DWORD PTR _left$[ebp]
	mov	DWORD PTR _copy$[ebp], edx
$LN483@inflate:

; 1170 :             left -= copy;

	mov	eax, DWORD PTR _left$[ebp]
	sub	eax, DWORD PTR _copy$[ebp]
	mov	DWORD PTR _left$[ebp], eax

; 1171 :             state->length -= copy;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	sub	edx, DWORD PTR _copy$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+68], edx
$LN306@inflate:

; 1172 :             do {
; 1173 :                 *put++ = *from++;

	mov	ecx, DWORD PTR _put$[ebp]
	mov	edx, DWORD PTR _from$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _put$[ebp]
	add	ecx, 1
	mov	DWORD PTR _put$[ebp], ecx
	mov	edx, DWORD PTR _from$[ebp]
	add	edx, 1
	mov	DWORD PTR _from$[ebp], edx

; 1174 :             } while (--copy);

	mov	eax, DWORD PTR _copy$[ebp]
	sub	eax, 1
	mov	DWORD PTR _copy$[ebp], eax
	jne	SHORT $LN306@inflate

; 1175 :             if (state->length == 0) state->mode = LEN;

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	jne	SHORT $LN484@inflate
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16200		; 00003f48H
$LN484@inflate:

; 1176 :             break;

	jmp	$LN8@inflate
$LN485@inflate:

; 1177 :         case LIT:
; 1178 :             if (left == 0) goto inf_leave;

	cmp	DWORD PTR _left$[ebp], 0
	jne	SHORT $LN486@inflate
	jmp	$inf_leave$528
$LN486@inflate:

; 1179 :             *put++ = (unsigned char)(state->length);

	mov	eax, DWORD PTR _put$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	dl, BYTE PTR [ecx+68]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _put$[ebp]
	add	eax, 1
	mov	DWORD PTR _put$[ebp], eax

; 1180 :             left--;

	mov	ecx, DWORD PTR _left$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _left$[ebp], ecx

; 1181 :             state->mode = LEN;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16200		; 00003f48H

; 1182 :             break;

	jmp	$LN8@inflate
$LN487@inflate:

; 1183 :         case CHECK:
; 1184 :             if (state->wrap) {

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN488@inflate
$LN310@inflate:

; 1185 :                 NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN307@inflate
$LN314@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN489@inflate
	jmp	$inf_leave$528
$LN489@inflate:
	mov	ecx, DWORD PTR _have$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _have$[ebp], ecx
	mov	edx, DWORD PTR _next$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 1
	mov	DWORD PTR _next$[ebp], ecx
	mov	edx, DWORD PTR _bits$[ebp]
	add	edx, 8
	mov	DWORD PTR _bits$[ebp], edx
	xor	eax, eax
	jne	SHORT $LN314@inflate
	jmp	SHORT $LN310@inflate
$LN307@inflate:
	xor	ecx, ecx
	jne	SHORT $LN310@inflate

; 1186 :                 out -= left;

	mov	edx, DWORD PTR _out$[ebp]
	sub	edx, DWORD PTR _left$[ebp]
	mov	DWORD PTR _out$[ebp], edx

; 1187 :                 strm->total_out += out;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1188 :                 state->total += out;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 1189 :                 if ((state->wrap & 4) && out)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 4
	je	SHORT $LN490@inflate
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN490@inflate

; 1190 :                     strm->adler = state->check =

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN514@inflate
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _put$[ebp]
	sub	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_crc32@12
	mov	DWORD PTR tv1305[ebp], eax
	jmp	SHORT $LN515@inflate
$LN514@inflate:
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _put$[ebp]
	sub	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_adler32@12
	mov	DWORD PTR tv1305[ebp], eax
$LN515@inflate:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv1305[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR tv1305[ebp]
	mov	DWORD PTR [ecx+48], edx
$LN490@inflate:

; 1191 :                         UPDATE_CHECK(state->check, put - out, out);
; 1192 :                 out = left;

	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 1193 :                 if ((state->wrap & 4) && (

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN317@inflate
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN516@inflate
	mov	ecx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR tv1322[ebp], ecx
	jmp	SHORT $LN517@inflate
$LN516@inflate:
	mov	edx, DWORD PTR _hold$[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _hold$[ebp]
	shr	eax, 8
	and	eax, 65280				; 0000ff00H
	add	edx, eax
	mov	ecx, DWORD PTR _hold$[ebp]
	and	ecx, 65280				; 0000ff00H
	shl	ecx, 8
	add	edx, ecx
	mov	eax, DWORD PTR _hold$[ebp]
	and	eax, 255				; 000000ffH
	shl	eax, 24					; 00000018H
	add	edx, eax
	mov	DWORD PTR tv1322[ebp], edx
$LN517@inflate:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR tv1322[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN317@inflate

; 1194 : #ifdef GUNZIP
; 1195 :                      state->flags ? hold :
; 1196 : #endif
; 1197 :                      ZSWAP32(hold)) != state->check) {
; 1198 :                     strm->msg = (char *)"incorrect data check";

	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+24], OFFSET $SG44977

; 1199 :                     state->mode = BAD;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+4], 16209		; 00003f51H

; 1200 :                     break;

	jmp	$LN8@inflate
$LN317@inflate:

; 1201 :                 }
; 1202 :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	edx, edx
	jne	SHORT $LN317@inflate
$LN488@inflate:

; 1203 :                 Tracev((stderr, "inflate:   check matches trailer\n"));
; 1204 :             }
; 1205 : #ifdef GUNZIP
; 1206 :             state->mode = LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16207		; 00003f4fH
$LN492@inflate:

; 1207 :                 /* fallthrough */
; 1208 :         case LENGTH:
; 1209 :             if (state->wrap && state->flags) {

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	$LN493@inflate
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	$LN493@inflate
$LN321@inflate:

; 1210 :                 NEEDBITS(32);

	cmp	DWORD PTR _bits$[ebp], 32		; 00000020H
	jae	SHORT $LN318@inflate
$LN325@inflate:
	cmp	DWORD PTR _have$[ebp], 0
	jne	SHORT $LN494@inflate
	jmp	$inf_leave$528
$LN494@inflate:
	mov	eax, DWORD PTR _have$[ebp]
	sub	eax, 1
	mov	DWORD PTR _have$[ebp], eax
	mov	ecx, DWORD PTR _next$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	ecx, DWORD PTR _bits$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _hold$[ebp]
	mov	DWORD PTR _hold$[ebp], edx
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 1
	mov	DWORD PTR _next$[ebp], eax
	mov	ecx, DWORD PTR _bits$[ebp]
	add	ecx, 8
	mov	DWORD PTR _bits$[ebp], ecx
	xor	edx, edx
	jne	SHORT $LN325@inflate
	jmp	SHORT $LN321@inflate
$LN318@inflate:
	xor	eax, eax
	jne	SHORT $LN321@inflate

; 1211 :                 if ((state->wrap & 4) && hold != (state->total & 0xffffffff)) {

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN328@inflate
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _hold$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	je	SHORT $LN328@inflate

; 1212 :                     strm->msg = (char *)"incorrect length check";

	mov	edx, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [edx+24], OFFSET $SG44982

; 1213 :                     state->mode = BAD;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+4], 16209		; 00003f51H

; 1214 :                     break;

	jmp	SHORT $LN8@inflate
$LN328@inflate:

; 1215 :                 }
; 1216 :                 INITBITS();

	mov	DWORD PTR _hold$[ebp], 0
	mov	DWORD PTR _bits$[ebp], 0
	xor	ecx, ecx
	jne	SHORT $LN328@inflate
$LN493@inflate:

; 1217 :                 Tracev((stderr, "inflate:   length matches trailer\n"));
; 1218 :             }
; 1219 : #endif
; 1220 :             state->mode = DONE;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16208		; 00003f50H
$LN496@inflate:

; 1221 :                 /* fallthrough */
; 1222 :         case DONE:
; 1223 :             ret = Z_STREAM_END;

	mov	DWORD PTR _ret$[ebp], 1

; 1224 :             goto inf_leave;

	jmp	SHORT $inf_leave$528
$LN497@inflate:

; 1225 :         case BAD:
; 1226 :             ret = Z_DATA_ERROR;

	mov	DWORD PTR _ret$[ebp], -3		; fffffffdH

; 1227 :             goto inf_leave;

	jmp	SHORT $inf_leave$528
$LN498@inflate:

; 1228 :         case MEM:
; 1229 :             return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN1@inflate
$LN500@inflate:

; 1230 :         case SYNC:
; 1231 :                 /* fallthrough */
; 1232 :         default:
; 1233 :             return Z_STREAM_ERROR;

	mov	eax, -2					; fffffffeH
	jmp	$LN1@inflate
$LN8@inflate:

; 1234 :         }

	jmp	$LN7@inflate
$inf_leave$528:

; 1235 : 
; 1236 :     /*
; 1237 :        Return from inflate(), updating the total counts and the check value.
; 1238 :        If there was no progress during the inflate() call, return a buffer
; 1239 :        error.  Call updatewindow() to create and/or update the window state.
; 1240 :        Note: a memory error from inflate() is non-recoverable.
; 1241 :      */
; 1242 :   inf_leave:
; 1243 :     RESTORE();

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _put$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _left$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _have$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _hold$[ebp]
	mov	DWORD PTR [edx+60], eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _bits$[ebp]
	mov	DWORD PTR [ecx+64], edx
	xor	eax, eax
	jne	SHORT $inf_leave$528

; 1244 :     if (state->wsize || (out != strm->avail_out && state->mode < BAD &&

	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN502@inflate
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _out$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	je	SHORT $LN501@inflate
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+4], 16209		; 00003f51H
	jge	SHORT $LN501@inflate
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+4], 16206		; 00003f4eH
	jl	SHORT $LN502@inflate
	cmp	DWORD PTR _flush$[ebp], 4
	je	SHORT $LN501@inflate
$LN502@inflate:

; 1245 :             (state->mode < CHECK || flush != Z_FINISH)))
; 1246 :         if (updatewindow(strm, strm->next_out, out - strm->avail_out)) {

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	sub	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	push	ecx
	call	_updatewindow
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN501@inflate

; 1247 :             state->mode = MEM;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], 16210		; 00003f52H

; 1248 :             return Z_MEM_ERROR;

	mov	eax, -4					; fffffffcH
	jmp	$LN1@inflate
$LN501@inflate:

; 1249 :         }
; 1250 :     in -= strm->avail_in;

	mov	eax, DWORD PTR _strm$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _in$[ebp], ecx

; 1251 :     out -= strm->avail_out;

	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR _out$[ebp]
	sub	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _out$[ebp], eax

; 1252 :     strm->total_in += in;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1253 :     strm->total_out += out;

	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+20], edx

; 1254 :     state->total += out;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _out$[ebp]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+32], edx

; 1255 :     if ((state->wrap & 4) && out)

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 4
	je	SHORT $LN505@inflate
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN505@inflate

; 1256 :         strm->adler = state->check =

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN518@inflate
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strm$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_crc32@12
	mov	DWORD PTR tv1414[ebp], eax
	jmp	SHORT $LN519@inflate
$LN518@inflate:
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _out$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_adler32@12
	mov	DWORD PTR tv1414[ebp], eax
$LN519@inflate:
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR tv1414[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _strm$[ebp]
	mov	edx, DWORD PTR tv1414[ebp]
	mov	DWORD PTR [ecx+48], edx
$LN505@inflate:

; 1257 :             UPDATE_CHECK(state->check, strm->next_out - out, out);
; 1258 :     strm->data_type = (int)state->bits + (state->last ? 64 : 0) +

	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN520@inflate
	mov	DWORD PTR tv1419[ebp], 64		; 00000040H
	jmp	SHORT $LN521@inflate
$LN520@inflate:
	mov	DWORD PTR tv1419[ebp], 0
$LN521@inflate:
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+4], 16191		; 00003f3fH
	jne	SHORT $LN522@inflate
	mov	DWORD PTR tv1423[ebp], 128		; 00000080H
	jmp	SHORT $LN523@inflate
$LN522@inflate:
	mov	DWORD PTR tv1423[ebp], 0
$LN523@inflate:
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+4], 16199		; 00003f47H
	je	SHORT $LN524@inflate
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+4], 16194		; 00003f42H
	je	SHORT $LN524@inflate
	mov	DWORD PTR tv1429[ebp], 0
	jmp	SHORT $LN525@inflate
$LN524@inflate:
	mov	DWORD PTR tv1429[ebp], 256		; 00000100H
$LN525@inflate:
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, DWORD PTR tv1419[ebp]
	add	edx, DWORD PTR tv1423[ebp]
	add	edx, DWORD PTR tv1429[ebp]
	mov	eax, DWORD PTR _strm$[ebp]
	mov	DWORD PTR [eax+44], edx

; 1259 :                       (state->mode == TYPE ? 128 : 0) +
; 1260 :                       (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
; 1261 :     if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)

	cmp	DWORD PTR _in$[ebp], 0
	jne	SHORT $LN508@inflate
	cmp	DWORD PTR _out$[ebp], 0
	je	SHORT $LN507@inflate
$LN508@inflate:
	cmp	DWORD PTR _flush$[ebp], 4
	jne	SHORT $LN506@inflate
$LN507@inflate:
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN506@inflate

; 1262 :         ret = Z_BUF_ERROR;

	mov	DWORD PTR _ret$[ebp], -5		; fffffffbH
$LN506@inflate:

; 1263 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@inflate:

; 1264 : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN526@inflate:
	DD	$LN335@inflate
	DD	$LN33@inflate
	DD	$LN47@inflate
	DD	$LN61@inflate
	DD	$LN361@inflate
	DD	$LN368@inflate
	DD	$LN375@inflate
	DD	$LN384@inflate
	DD	$LN393@inflate
	DD	$LN106@inflate
	DD	$LN400@inflate
	DD	$LN402@inflate
	DD	$LN405@inflate
	DD	$LN141@inflate
	DD	$LN417@inflate
	DD	$LN418@inflate
	DD	$LN156@inflate
	DD	$LN170@inflate
	DD	$LN185@inflate
	DD	$LN449@inflate
	DD	$LN450@inflate
	DD	$LN461@inflate
	DD	$LN277@inflate
	DD	$LN471@inflate
	DD	$LN474@inflate
	DD	$LN485@inflate
	DD	$LN487@inflate
	DD	$LN492@inflate
	DD	$LN496@inflate
	DD	$LN497@inflate
	DD	$LN498@inflate
	DD	$LN500@inflate
$LN527@inflate:
	DD	$LN408@inflate
	DD	$LN409@inflate
	DD	$LN411@inflate
	DD	$LN412@inflate
_inflate@8 ENDP
_TEXT	ENDS
END
