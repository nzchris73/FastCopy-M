; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

	TITLE	c:\users\chris\documents\github\fastcopy-m\external\zlib\contrib\vstudio\vc14\x86\zlibdllrelease\tmp\deflate.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

?my_version@?1??deflateInit2_@@9@9 DB '1.2.13.1-motley', 00H ; `deflateInit2_'::`2'::my_version
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
PUBLIC	_deflateCopy@8
PUBLIC	_deflateBound@8
PUBLIC	_deflateTune@20
PUBLIC	_deflateParams@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflatePending@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateResetKeep@4
PUBLIC	_deflateGetDictionary@12
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateInit_@16
PUBLIC	_deflateEnd@4
PUBLIC	_deflate@8
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflate@8
_TEXT	SEGMENT
$T1 = -12						; size = 4
_beg$1$ = -12						; size = 4
_beg$1$ = -12						; size = 4
$T2 = -8						; size = 4
_beg$1$ = -8						; size = 4
$T3 = -4						; size = 4
$T4 = -4						; size = 4
_left$1$ = -4						; size = 4
$T5 = 8							; size = 4
_strm$ = 8						; size = 4
$T6 = 12						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 929  : int ZEXPORT deflate(z_streamp strm, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]

; 930  :     int old_flush; /* value of flush param for previous deflate call */
; 931  :     deflate_state *s;
; 932  : 
; 933  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 _deflateStateCheck
  00012	85 c0		 test	 eax, eax
  00014	0f 85 04 09 00
	00		 jne	 $LN32@deflate
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0001d	83 fb 05	 cmp	 ebx, 5
  00020	0f 87 f8 08 00
	00		 ja	 $LN32@deflate

; 935  :     }
; 936  :     s = strm->state;

  00026	56		 push	 esi
  00027	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 937  : 
; 938  :     if (strm->next_out == Z_NULL ||
; 939  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  0002a	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  0002d	0f 84 d6 08 00
	00		 je	 $LN34@deflate
  00033	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00036	74 08		 je	 SHORT $LN35@deflate
  00038	39 07		 cmp	 DWORD PTR [edi], eax
  0003a	0f 84 c9 08 00
	00		 je	 $LN34@deflate
$LN35@deflate:
  00040	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  00047	75 09		 jne	 SHORT $LN33@deflate
  00049	83 fb 04	 cmp	 ebx, 4
  0004c	0f 85 b7 08 00
	00		 jne	 $LN34@deflate
$LN33@deflate:

; 942  :     }
; 943  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00052	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00056	74 63		 je	 SHORT $LN157@deflate

; 944  : 
; 945  :     old_flush = s->last_flush;
; 946  :     s->last_flush = flush;
; 947  : 
; 948  :     /* Flush as much pending output as possible */
; 949  :     if (s->pending != 0) {

  00058	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0005c	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0005f	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00062	74 11		 je	 SHORT $LN37@deflate

; 950  :         flush_pending(strm);

  00064	e8 00 00 00 00	 call	 _flush_pending

; 951  :         if (strm->avail_out == 0) {

  00069	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0006d	0f 84 84 08 00
	00		 je	 $LN152@deflate
  00073	eb 32		 jmp	 SHORT $LN40@deflate
$LN37@deflate:

; 952  :             /* Since avail_out is 0, deflate will be called again with
; 953  :              * more output space, but possibly with both pending and
; 954  :              * avail_in equal to zero. There won't be anything to do,
; 955  :              * but this is not an error situation so make sure we
; 956  :              * return OK instead of BUF_ERROR at next call of deflate:
; 957  :              */
; 958  :             s->last_flush = -1;
; 959  :             return Z_OK;
; 960  :         }
; 961  : 
; 962  :     /* Make sure there is something to do and avoid duplicate consecutive
; 963  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 964  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 965  :      */
; 966  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  00075	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00079	75 2c		 jne	 SHORT $LN40@deflate
  0007b	33 c0		 xor	 eax, eax
  0007d	b9 09 00 00 00	 mov	 ecx, 9
  00082	83 fa 04	 cmp	 edx, 4
  00085	0f 4f c1	 cmovg	 eax, ecx
  00088	03 d2		 add	 edx, edx
  0008a	2b d0		 sub	 edx, eax
  0008c	33 c9		 xor	 ecx, ecx
  0008e	83 fb 04	 cmp	 ebx, 4
  00091	b8 09 00 00 00	 mov	 eax, 9
  00096	0f 4f c8	 cmovg	 ecx, eax
  00099	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0009c	2b c1		 sub	 eax, ecx
  0009e	3b c2		 cmp	 eax, edx
  000a0	7f 05		 jg	 SHORT $LN40@deflate
  000a2	83 fb 04	 cmp	 ebx, 4
  000a5	75 14		 jne	 SHORT $LN157@deflate
$LN40@deflate:

; 967  :                flush != Z_FINISH) {
; 968  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 969  :     }
; 970  : 
; 971  :     /* User must not provide more input after the first FINISH: */
; 972  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000a7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000aa	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  000af	75 1f		 jne	 SHORT $LN41@deflate
  000b1	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  000b5	0f 84 e6 00 00
	00		 je	 $LN140@deflate
$LN157@deflate:
  000bb	5e		 pop	 esi

; 973  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000bc	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_C@_0N@DFPGLBGC@buffer?5error@
  000c3	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000c8	5f		 pop	 edi

; 1238 : }

  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
$LN41@deflate:

; 974  :     }
; 975  : 
; 976  :     /* Write the header */
; 977  :     if (s->status == INIT_STATE && s->wrap == 0)

  000d0	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000d3	0f 85 c8 00 00
	00		 jne	 $LN140@deflate
  000d9	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  000dd	75 0c		 jne	 SHORT $LN151@deflate

; 978  :         s->status = BUSY_STATE;

  000df	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H

; 1132 :         }
; 1133 :         s->status = HCRC_STATE;

  000e6	e9 b6 00 00 00	 jmp	 $LN140@deflate
$LN151@deflate:

; 979  :     if (s->status == INIT_STATE) {
; 980  :         /* zlib header */
; 981  :         uInt header = (Z_DEFLATED + ((s->w_bits - 8) << 4)) << 8;

  000eb	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  000ee	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  000f1	81 c2 00 88 ff
	ff		 add	 edx, -30720		; ffff8800H

; 982  :         uInt level_flags;
; 983  : 
; 984  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  000f7	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  000fe	7d 30		 jge	 SHORT $LN130@deflate
  00100	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00106	83 f8 02	 cmp	 eax, 2
  00109	7c 25		 jl	 SHORT $LN130@deflate

; 986  :         else if (s->level < 6)

  0010b	83 f8 06	 cmp	 eax, 6
  0010e	7d 0a		 jge	 SHORT $LN47@deflate

; 987  :             level_flags = 1;

  00110	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00115	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  00118	eb 1d		 jmp	 SHORT $LN50@deflate
$LN47@deflate:

; 988  :         else if (s->level == 6)

  0011a	75 0a		 jne	 SHORT $LN49@deflate

; 989  :             level_flags = 2;

  0011c	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00121	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  00124	eb 11		 jmp	 SHORT $LN50@deflate
$LN49@deflate:

; 990  :         else
; 991  :             level_flags = 3;

  00126	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  0012b	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  0012e	eb 07		 jmp	 SHORT $LN50@deflate
$LN130@deflate:

; 985  :             level_flags = 0;

  00130	33 c0		 xor	 eax, eax
  00132	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
$LN50@deflate:

; 992  :         header |= (level_flags << 6);
; 993  :         if (s->strstart != 0) header |= PRESET_DICT;
; 994  :         header += 31 - (header % 31);

  00137	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  0013b	0f 44 c8	 cmove	 ecx, eax
  0013e	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  00143	0b ca		 or	 ecx, edx
  00145	f7 e1		 mul	 ecx
  00147	2b ca		 sub	 ecx, edx
  00149	d1 e9		 shr	 ecx, 1
  0014b	03 ca		 add	 ecx, edx
  0014d	c1 e9 04	 shr	 ecx, 4
  00150	41		 inc	 ecx
  00151	8b d1		 mov	 edx, ecx
  00153	c1 e2 05	 shl	 edx, 5
  00156	2b d1		 sub	 edx, ecx

; 995  : 
; 996  :         putShortMSB(s, header);

  00158	8b ce		 mov	 ecx, esi
  0015a	e8 00 00 00 00	 call	 _putShortMSB

; 997  : 
; 998  :         /* Save the adler32 of the preset dictionary: */
; 999  :         if (s->strstart != 0) {

  0015f	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  00163	74 16		 je	 SHORT $LN138@deflate

; 1000 :             putShortMSB(s, (uInt)(strm->adler >> 16));

  00165	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  00169	8b ce		 mov	 ecx, esi
  0016b	e8 00 00 00 00	 call	 _putShortMSB

; 1001 :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00170	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00174	8b ce		 mov	 ecx, esi
  00176	e8 00 00 00 00	 call	 _putShortMSB
$LN138@deflate:

; 1002 :         }
; 1003 :         strm->adler = adler32(0L, Z_NULL, 0);

  0017b	6a 00		 push	 0
  0017d	6a 00		 push	 0
  0017f	6a 00		 push	 0
  00181	e8 00 00 00 00	 call	 _adler32@12
  00186	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 1004 :         s->status = BUSY_STATE;
; 1005 : 
; 1006 :         /* Compression must start with an empty pending buffer */
; 1007 :         flush_pending(strm);

  00189	8b cf		 mov	 ecx, edi
  0018b	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00192	e8 00 00 00 00	 call	 _flush_pending

; 1008 :         if (s->pending != 0) {

  00197	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0019b	0f 85 56 07 00
	00		 jne	 $LN152@deflate
$LN140@deflate:

; 1009 :             s->last_flush = -1;
; 1010 :             return Z_OK;
; 1011 :         }
; 1012 :     }
; 1013 : #ifdef GZIP
; 1014 :     if (s->status == GZIP_STATE) {

  001a1	83 7e 04 39	 cmp	 DWORD PTR [esi+4], 57	; 00000039H
  001a5	0f 85 0d 02 00
	00		 jne	 $LN56@deflate

; 1015 :         /* gzip header */
; 1016 :         strm->adler = crc32(0L, Z_NULL, 0);

  001ab	6a 00		 push	 0
  001ad	6a 00		 push	 0
  001af	6a 00		 push	 0
  001b1	e8 00 00 00 00	 call	 _crc32@12
  001b6	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 1017 :         put_byte(s, 31);

  001b9	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001bc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001bf	c6 04 01 1f	 mov	 BYTE PTR [ecx+eax], 31	; 0000001fH
  001c3	ff 46 14	 inc	 DWORD PTR [esi+20]
  001c6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1018 :         put_byte(s, 139);

  001c9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001cc	c6 04 01 8b	 mov	 BYTE PTR [ecx+eax], 139	; 0000008bH
  001d0	ff 46 14	 inc	 DWORD PTR [esi+20]
  001d3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1019 :         put_byte(s, 8);

  001d6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001d9	c6 04 01 08	 mov	 BYTE PTR [ecx+eax], 8
  001dd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1020 :         if (s->gzhead == Z_NULL) {

  001e0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001e3	42		 inc	 edx
  001e4	89 56 14	 mov	 DWORD PTR [esi+20], edx
  001e7	85 c0		 test	 eax, eax
  001e9	0f 85 9c 00 00
	00		 jne	 $LN55@deflate

; 1021 :             put_byte(s, 0);

  001ef	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001f2	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
  001f6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1022 :             put_byte(s, 0);

  001f9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001fc	41		 inc	 ecx
  001fd	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00200	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00204	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1023 :             put_byte(s, 0);

  00207	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020a	41		 inc	 ecx
  0020b	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0020e	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00212	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1024 :             put_byte(s, 0);

  00215	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00218	41		 inc	 ecx
  00219	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0021c	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00220	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1025 :             put_byte(s, 0);

  00223	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00226	41		 inc	 ecx
  00227	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0022a	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0022e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1026 :             put_byte(s, s->level == 9 ? 2 :

  00231	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00237	42		 inc	 edx
  00238	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0023b	83 f8 09	 cmp	 eax, 9
  0023e	75 04		 jne	 SHORT $LN104@deflate
  00240	b1 02		 mov	 cl, 2
  00242	eb 14		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  00244	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  0024b	7d 09		 jge	 SHORT $LN102@deflate
  0024d	83 f8 02	 cmp	 eax, 2
  00250	7c 04		 jl	 SHORT $LN102@deflate
  00252	32 c9		 xor	 cl, cl
  00254	eb 02		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  00256	b1 04		 mov	 cl, 4
$LN103@deflate:
  00258	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0025b	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0025e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00261	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1027 :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 1028 :                       4 : 0));
; 1029 :             put_byte(s, OS_CODE);

  00264	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00267	c6 04 01 0a	 mov	 BYTE PTR [ecx+eax], 10	; 0000000aH

; 1030 :             s->status = BUSY_STATE;
; 1031 : 
; 1032 :             /* Compression must start with an empty pending buffer */
; 1033 :             flush_pending(strm);

  0026b	8b cf		 mov	 ecx, edi
  0026d	ff 46 14	 inc	 DWORD PTR [esi+20]
  00270	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  00277	e8 00 00 00 00	 call	 _flush_pending

; 1034 :             if (s->pending != 0) {

  0027c	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00280	0f 85 71 06 00
	00		 jne	 $LN152@deflate
  00286	e9 2d 01 00 00	 jmp	 $LN56@deflate
$LN55@deflate:

; 1035 :                 s->last_flush = -1;
; 1036 :                 return Z_OK;
; 1037 :             }
; 1038 :         }
; 1039 :         else {
; 1040 :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  0028b	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0028e	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00291	f7 d9		 neg	 ecx
  00293	1a c9		 sbb	 cl, cl
  00295	80 e1 10	 and	 cl, 16			; 00000010H
  00298	f7 d8		 neg	 eax
  0029a	1a c0		 sbb	 al, al
  0029c	24 02		 and	 al, 2
  0029e	02 c8		 add	 cl, al
  002a0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002a3	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  002a6	f7 d8		 neg	 eax
  002a8	1a c0		 sbb	 al, al
  002aa	24 08		 and	 al, 8
  002ac	02 c8		 add	 cl, al
  002ae	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002b1	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  002b4	f7 d8		 neg	 eax
  002b6	1a c0		 sbb	 al, al
  002b8	24 04		 and	 al, 4
  002ba	02 c8		 add	 cl, al
  002bc	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002bf	83 38 00	 cmp	 DWORD PTR [eax], 0
  002c2	0f 95 c0	 setne	 al
  002c5	02 c8		 add	 cl, al
  002c7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002ca	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  002cd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1041 :                      (s->gzhead->hcrc ? 2 : 0) +
; 1042 :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 1043 :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 1044 :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 1045 :                      );
; 1046 :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  002d0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002d3	42		 inc	 edx
  002d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002d7	89 56 14	 mov	 DWORD PTR [esi+20], edx
  002da	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  002de	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002e1	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1047 :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  002e4	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002e7	42		 inc	 edx
  002e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002eb	89 56 14	 mov	 DWORD PTR [esi+20], edx
  002ee	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  002f2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1048 :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  002f8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002fb	42		 inc	 edx
  002fc	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002ff	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00302	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  00306	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00309	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1049 :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  0030c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0030f	42		 inc	 edx
  00310	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00313	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00316	0f b6 40 07	 movzx	 eax, BYTE PTR [eax+7]
  0031a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0031d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1050 :             put_byte(s, s->level == 9 ? 2 :

  00320	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00326	42		 inc	 edx
  00327	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0032a	83 f8 09	 cmp	 eax, 9
  0032d	75 04		 jne	 SHORT $LN108@deflate
  0032f	b1 02		 mov	 cl, 2
  00331	eb 14		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  00333	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  0033a	7d 09		 jge	 SHORT $LN106@deflate
  0033c	83 f8 02	 cmp	 eax, 2
  0033f	7c 04		 jl	 SHORT $LN106@deflate
  00341	32 c9		 xor	 cl, cl
  00343	eb 02		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  00345	b1 04		 mov	 cl, 4
$LN107@deflate:
  00347	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0034a	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0034d	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1051 :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 1052 :                       4 : 0));
; 1053 :             put_byte(s, s->gzhead->os & 0xff);

  00350	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00353	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00356	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00359	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0035c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0035f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1054 :             if (s->gzhead->extra != Z_NULL) {

  00362	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00365	42		 inc	 edx
  00366	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00369	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0036d	74 23		 je	 SHORT $LN58@deflate

; 1055 :                 put_byte(s, s->gzhead->extra_len & 0xff);

  0036f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00372	0f b6 40 14	 movzx	 eax, BYTE PTR [eax+20]
  00376	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00379	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1056 :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  0037c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0037f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00382	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00385	0f b6 40 15	 movzx	 eax, BYTE PTR [eax+21]
  00389	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0038c	ff 46 14	 inc	 DWORD PTR [esi+20]
  0038f	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
$LN58@deflate:

; 1057 :             }
; 1058 :             if (s->gzhead->hcrc)

  00392	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00395	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00399	74 0f		 je	 SHORT $LN59@deflate

; 1059 :                 strm->adler = crc32(strm->adler, s->pending_buf,

  0039b	52		 push	 edx
  0039c	ff 76 08	 push	 DWORD PTR [esi+8]
  0039f	ff 77 30	 push	 DWORD PTR [edi+48]
  003a2	e8 00 00 00 00	 call	 _crc32@12
  003a7	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN59@deflate:

; 1060 :                                     s->pending);
; 1061 :             s->gzindex = 0;

  003aa	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 1062 :             s->status = EXTRA_STATE;

  003b1	c7 46 04 45 00
	00 00		 mov	 DWORD PTR [esi+4], 69	; 00000045H
$LN56@deflate:

; 1063 :         }
; 1064 :     }
; 1065 :     if (s->status == EXTRA_STATE) {

  003b8	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  003bb	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  003be	89 4d 08	 mov	 DWORD PTR $T5[ebp], ecx
  003c1	83 fa 45	 cmp	 edx, 69			; 00000045H
  003c4	0f 85 fe 00 00
	00		 jne	 $LN142@deflate

; 1066 :         if (s->gzhead->extra != Z_NULL) {

  003ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  003cc	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003d0	0f 84 e9 00 00
	00		 je	 $LN143@deflate

; 1067 :             ulg beg = s->pending;   /* start of bytes to update crc */
; 1068 :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  003d6	0f b7 40 14	 movzx	 eax, WORD PTR [eax+20]
  003da	2b 46 20	 sub	 eax, DWORD PTR [esi+32]
  003dd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1069 :             while (s->pending + left > s->pending_buf_size) {

  003e0	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  003e3	89 45 fc	 mov	 DWORD PTR _left$1$[ebp], eax
  003e6	03 c2		 add	 eax, edx
  003e8	89 55 f8	 mov	 DWORD PTR _beg$1$[ebp], edx
  003eb	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
  003ee	3b c3		 cmp	 eax, ebx
  003f0	76 78		 jbe	 SHORT $LN141@deflate
$LL2@deflate:

; 1070 :                 uInt copy = s->pending_buf_size - s->pending;
; 1071 :                 zmemcpy(s->pending_buf + s->pending,

  003f2	8b 01		 mov	 eax, DWORD PTR [ecx]
  003f4	2b da		 sub	 ebx, edx
  003f6	53		 push	 ebx
  003f7	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  003fa	03 46 20	 add	 eax, DWORD PTR [esi+32]
  003fd	50		 push	 eax
  003fe	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00401	03 c2		 add	 eax, edx
  00403	50		 push	 eax
  00404	e8 00 00 00 00	 call	 _memcpy

; 1072 :                         s->gzhead->extra + s->gzindex, copy);
; 1073 :                 s->pending = s->pending_buf_size;
; 1074 :                 HCRC_UPDATE(beg);

  00409	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0040c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0040f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00412	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00415	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00419	74 1b		 je	 SHORT $LN4@deflate
  0041b	8b 55 f8	 mov	 edx, DWORD PTR _beg$1$[ebp]
  0041e	3b ca		 cmp	 ecx, edx
  00420	76 14		 jbe	 SHORT $LN4@deflate
  00422	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00425	2b ca		 sub	 ecx, edx
  00427	51		 push	 ecx
  00428	03 c2		 add	 eax, edx
  0042a	50		 push	 eax
  0042b	ff 77 30	 push	 DWORD PTR [edi+48]
  0042e	e8 00 00 00 00	 call	 _crc32@12
  00433	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN4@deflate:

; 1075 :                 s->gzindex += copy;

  00436	01 5e 20	 add	 DWORD PTR [esi+32], ebx

; 1076 :                 flush_pending(strm);

  00439	8b cf		 mov	 ecx, edi
  0043b	e8 00 00 00 00	 call	 _flush_pending

; 1077 :                 if (s->pending != 0) {

  00440	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00443	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00446	85 c0		 test	 eax, eax
  00448	0f 85 a9 04 00
	00		 jne	 $LN152@deflate

; 1078 :                     s->last_flush = -1;
; 1079 :                     return Z_OK;
; 1080 :                 }
; 1081 :                 beg = 0;

  0044e	89 45 f8	 mov	 DWORD PTR _beg$1$[ebp], eax
  00451	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]

; 1082 :                 left -= copy;

  00454	8b 45 fc	 mov	 eax, DWORD PTR _left$1$[ebp]
  00457	33 d2		 xor	 edx, edx
  00459	2b c3		 sub	 eax, ebx
  0045b	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0045e	89 45 fc	 mov	 DWORD PTR _left$1$[ebp], eax
  00461	3b c3		 cmp	 eax, ebx
  00463	77 8d		 ja	 SHORT $LL2@deflate

; 1129 :                 put_byte(s, val);
; 1130 :             } while (val != 0);

  00465	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00468	eb 03		 jmp	 SHORT $LN3@deflate
$LN141@deflate:
  0046a	8b 45 fc	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN3@deflate:

; 1083 :             }
; 1084 :             zmemcpy(s->pending_buf + s->pending,

  0046d	50		 push	 eax
  0046e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00470	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00473	03 46 20	 add	 eax, DWORD PTR [esi+32]
  00476	50		 push	 eax
  00477	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0047a	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]
  0047d	50		 push	 eax
  0047e	e8 00 00 00 00	 call	 _memcpy

; 1085 :                     s->gzhead->extra + s->gzindex, left);
; 1086 :             s->pending += left;

  00483	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]

; 1087 :             HCRC_UPDATE(beg);

  00486	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00489	8b 01		 mov	 eax, DWORD PTR [ecx]
  0048b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0048e	03 5d fc	 add	 ebx, DWORD PTR _left$1$[ebp]
  00491	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00494	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00498	74 1e		 je	 SHORT $LN7@deflate
  0049a	8b 55 f8	 mov	 edx, DWORD PTR _beg$1$[ebp]
  0049d	3b da		 cmp	 ebx, edx
  0049f	76 17		 jbe	 SHORT $LN7@deflate
  004a1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  004a4	2b da		 sub	 ebx, edx
  004a6	53		 push	 ebx
  004a7	03 c2		 add	 eax, edx
  004a9	50		 push	 eax
  004aa	ff 77 30	 push	 DWORD PTR [edi+48]
  004ad	e8 00 00 00 00	 call	 _crc32@12
  004b2	89 47 30	 mov	 DWORD PTR [edi+48], eax
  004b5	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
$LN7@deflate:

; 1088 :             s->gzindex = 0;

  004b8	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN143@deflate:

; 1089 :         }
; 1090 :         s->status = NAME_STATE;

  004bf	c7 46 04 49 00
	00 00		 mov	 DWORD PTR [esi+4], 73	; 00000049H
  004c6	eb 09		 jmp	 SHORT $LN150@deflate
$LN142@deflate:

; 1091 :     }
; 1092 :     if (s->status == NAME_STATE) {

  004c8	83 fa 49	 cmp	 edx, 73			; 00000049H
  004cb	0f 85 df 00 00
	00		 jne	 $LN145@deflate
$LN150@deflate:

; 1093 :         if (s->gzhead->name != Z_NULL) {

  004d1	8b 01		 mov	 eax, DWORD PTR [ecx]
  004d3	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  004d7	0f 84 c4 00 00
	00		 je	 $LN144@deflate

; 1094 :             ulg beg = s->pending;   /* start of bytes to update crc */

  004dd	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  004e0	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  004e3	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  004e6	8b da		 mov	 ebx, edx
  004e8	89 55 f4	 mov	 DWORD PTR _beg$1$[ebp], edx
  004eb	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  004ee	66 90		 npad	 2
$LL12@deflate:

; 1095 :             int val;
; 1096 :             do {
; 1097 :                 if (s->pending == s->pending_buf_size) {

  004f0	89 45 fc	 mov	 DWORD PTR $T4[ebp], eax
  004f3	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  004f6	75 3c		 jne	 SHORT $LN67@deflate

; 1098 :                     HCRC_UPDATE(beg);

  004f8	8b 01		 mov	 eax, DWORD PTR [ecx]
  004fa	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004fe	74 1a		 je	 SHORT $LN13@deflate
  00500	3b da		 cmp	 ebx, edx
  00502	76 16		 jbe	 SHORT $LN13@deflate
  00504	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  00507	2b da		 sub	 ebx, edx
  00509	53		 push	 ebx
  0050a	8b 00		 mov	 eax, DWORD PTR [eax]
  0050c	03 c2		 add	 eax, edx
  0050e	50		 push	 eax
  0050f	ff 77 30	 push	 DWORD PTR [edi+48]
  00512	e8 00 00 00 00	 call	 _crc32@12
  00517	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN13@deflate:

; 1099 :                     flush_pending(strm);

  0051a	8b cf		 mov	 ecx, edi
  0051c	e8 00 00 00 00	 call	 _flush_pending

; 1100 :                     if (s->pending != 0) {

  00521	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00525	0f 85 cc 03 00
	00		 jne	 $LN152@deflate

; 1101 :                         s->last_flush = -1;
; 1102 :                         return Z_OK;
; 1103 :                     }
; 1104 :                     beg = 0;

  0052b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  00532	33 db		 xor	 ebx, ebx
$LN67@deflate:

; 1105 :                 }
; 1106 :                 val = s->gzhead->name[s->gzindex++];

  00534	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  00537	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0053a	8b 00		 mov	 eax, DWORD PTR [eax]
  0053c	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0053f	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00542	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 1107 :                 put_byte(s, val);
; 1108 :             } while (val != 0);

  00545	8b 4d 08	 mov	 ecx, DWORD PTR $T5[ebp]
  00548	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0054b	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  0054e	8b 00		 mov	 eax, DWORD PTR [eax]
  00550	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  00553	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00556	43		 inc	 ebx
  00557	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0055a	84 d2		 test	 dl, dl
  0055c	74 08		 je	 SHORT $LN121@deflate
  0055e	8b 55 f4	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00561	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  00564	eb 8a		 jmp	 SHORT $LL12@deflate
$LN121@deflate:

; 1109 :             HCRC_UPDATE(beg);

  00566	8b 01		 mov	 eax, DWORD PTR [ecx]
  00568	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0056c	74 20		 je	 SHORT $LN16@deflate
  0056e	8b 55 f4	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00571	3b da		 cmp	 ebx, edx
  00573	76 19		 jbe	 SHORT $LN16@deflate
  00575	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  00578	2b da		 sub	 ebx, edx
  0057a	53		 push	 ebx
  0057b	8b 00		 mov	 eax, DWORD PTR [eax]
  0057d	03 c2		 add	 eax, edx
  0057f	50		 push	 eax
  00580	ff 77 30	 push	 DWORD PTR [edi+48]
  00583	e8 00 00 00 00	 call	 _crc32@12
  00588	8b 4d 08	 mov	 ecx, DWORD PTR $T5[ebp]
  0058b	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN16@deflate:

; 1110 :             s->gzindex = 0;

  0058e	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00595	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]

; 1111 :         }
; 1112 :         s->status = COMMENT_STATE;

  00598	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
  0059f	eb 21		 jmp	 SHORT $LN149@deflate
$LN144@deflate:

; 1110 :             s->gzindex = 0;

  005a1	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]

; 1111 :         }
; 1112 :         s->status = COMMENT_STATE;

  005a4	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
  005ab	89 55 f8	 mov	 DWORD PTR $T2[ebp], edx
  005ae	eb 12		 jmp	 SHORT $LN149@deflate
$LN145@deflate:

; 1113 :     }
; 1114 :     if (s->status == COMMENT_STATE) {

  005b0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  005b3	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  005b6	89 55 f8	 mov	 DWORD PTR $T2[ebp], edx
  005b9	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  005bc	0f 85 cd 00 00
	00		 jne	 $LN146@deflate
$LN149@deflate:

; 1115 :         if (s->gzhead->comment != Z_NULL) {

  005c2	8b 01		 mov	 eax, DWORD PTR [ecx]
  005c4	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  005c8	0f 84 b5 00 00
	00		 je	 $LN26@deflate

; 1116 :             ulg beg = s->pending;   /* start of bytes to update crc */

  005ce	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  005d1	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  005d4	89 55 f4	 mov	 DWORD PTR _beg$1$[ebp], edx
  005d7	8b da		 mov	 ebx, edx
  005d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL21@deflate:

; 1117 :             int val;
; 1118 :             do {
; 1119 :                 if (s->pending == s->pending_buf_size) {

  005e0	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
  005e3	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  005e6	3b 18		 cmp	 ebx, DWORD PTR [eax]
  005e8	75 3c		 jne	 SHORT $LN73@deflate

; 1120 :                     HCRC_UPDATE(beg);

  005ea	8b 01		 mov	 eax, DWORD PTR [ecx]
  005ec	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  005f0	74 1a		 je	 SHORT $LN22@deflate
  005f2	3b da		 cmp	 ebx, edx
  005f4	76 16		 jbe	 SHORT $LN22@deflate
  005f6	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  005f9	2b da		 sub	 ebx, edx
  005fb	53		 push	 ebx
  005fc	8b 00		 mov	 eax, DWORD PTR [eax]
  005fe	03 c2		 add	 eax, edx
  00600	50		 push	 eax
  00601	ff 77 30	 push	 DWORD PTR [edi+48]
  00604	e8 00 00 00 00	 call	 _crc32@12
  00609	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN22@deflate:

; 1121 :                     flush_pending(strm);

  0060c	8b cf		 mov	 ecx, edi
  0060e	e8 00 00 00 00	 call	 _flush_pending

; 1122 :                     if (s->pending != 0) {

  00613	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00617	0f 85 da 02 00
	00		 jne	 $LN152@deflate

; 1123 :                         s->last_flush = -1;
; 1124 :                         return Z_OK;
; 1125 :                     }
; 1126 :                     beg = 0;

  0061d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  00624	33 db		 xor	 ebx, ebx
$LN73@deflate:

; 1127 :                 }
; 1128 :                 val = s->gzhead->comment[s->gzindex++];

  00626	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  00629	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0062c	8b 00		 mov	 eax, DWORD PTR [eax]
  0062e	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00631	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00634	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 1129 :                 put_byte(s, val);
; 1130 :             } while (val != 0);

  00637	8b 4d 08	 mov	 ecx, DWORD PTR $T5[ebp]
  0063a	89 46 20	 mov	 DWORD PTR [esi+32], eax
  0063d	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  00640	8b 00		 mov	 eax, DWORD PTR [eax]
  00642	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  00645	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00648	43		 inc	 ebx
  00649	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0064c	84 d2		 test	 dl, dl
  0064e	74 08		 je	 SHORT $LN123@deflate
  00650	8b 55 f4	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00653	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  00656	eb 88		 jmp	 SHORT $LL21@deflate
$LN123@deflate:

; 1131 :             HCRC_UPDATE(beg);

  00658	8b 01		 mov	 eax, DWORD PTR [ecx]
  0065a	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0065e	74 20		 je	 SHORT $LN25@deflate
  00660	8b 55 f4	 mov	 edx, DWORD PTR _beg$1$[ebp]
  00663	3b da		 cmp	 ebx, edx
  00665	76 19		 jbe	 SHORT $LN25@deflate
  00667	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0066a	2b da		 sub	 ebx, edx
  0066c	53		 push	 ebx
  0066d	8b 00		 mov	 eax, DWORD PTR [eax]
  0066f	03 c2		 add	 eax, edx
  00671	50		 push	 eax
  00672	ff 77 30	 push	 DWORD PTR [edi+48]
  00675	e8 00 00 00 00	 call	 _crc32@12
  0067a	8b 4d 08	 mov	 ecx, DWORD PTR $T5[ebp]
  0067d	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN25@deflate:
  00680	8b 55 f8	 mov	 edx, DWORD PTR $T2[ebp]
$LN26@deflate:

; 1132 :         }
; 1133 :         s->status = HCRC_STATE;

  00683	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00686	c7 46 04 67 00
	00 00		 mov	 DWORD PTR [esi+4], 103	; 00000067H
  0068d	eb 05		 jmp	 SHORT $LN148@deflate
$LN146@deflate:

; 1134 :     }
; 1135 :     if (s->status == HCRC_STATE) {

  0068f	83 f8 67	 cmp	 eax, 103		; 00000067H
  00692	75 70		 jne	 SHORT $LN134@deflate
$LN148@deflate:

; 1136 :         if (s->gzhead->hcrc) {

  00694	8b 01		 mov	 eax, DWORD PTR [ecx]
  00696	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0069a	74 50		 je	 SHORT $LN78@deflate

; 1137 :             if (s->pending + 2 > s->pending_buf_size) {

  0069c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0069f	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  006a2	83 c0 02	 add	 eax, 2
  006a5	3b 02		 cmp	 eax, DWORD PTR [edx]
  006a7	76 15		 jbe	 SHORT $LN133@deflate

; 1138 :                 flush_pending(strm);

  006a9	8b cf		 mov	 ecx, edi
  006ab	e8 00 00 00 00	 call	 _flush_pending

; 1139 :                 if (s->pending != 0) {

  006b0	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  006b3	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  006b6	85 c0		 test	 eax, eax
  006b8	0f 85 39 02 00
	00		 jne	 $LN152@deflate
$LN133@deflate:

; 1140 :                     s->last_flush = -1;
; 1141 :                     return Z_OK;
; 1142 :                 }
; 1143 :             }
; 1144 :             put_byte(s, (Byte)(strm->adler & 0xff));

  006be	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  006c1	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  006c5	8b 55 0c	 mov	 edx, DWORD PTR $T6[ebp]

; 1145 :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 1146 :             strm->adler = crc32(0L, Z_NULL, 0);

  006c8	6a 00		 push	 0
  006ca	6a 00		 push	 0
  006cc	6a 00		 push	 0
  006ce	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  006d1	ff 46 14	 inc	 DWORD PTR [esi+20]
  006d4	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  006d7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  006da	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  006de	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  006e1	ff 46 14	 inc	 DWORD PTR [esi+20]
  006e4	e8 00 00 00 00	 call	 _crc32@12
  006e9	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN78@deflate:

; 1147 :         }
; 1148 :         s->status = BUSY_STATE;
; 1149 : 
; 1150 :         /* Compression must start with an empty pending buffer */
; 1151 :         flush_pending(strm);

  006ec	8b cf		 mov	 ecx, edi
  006ee	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  006f5	e8 00 00 00 00	 call	 _flush_pending

; 1152 :         if (s->pending != 0) {

  006fa	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  006fe	0f 85 f3 01 00
	00		 jne	 $LN152@deflate
$LN134@deflate:

; 1153 :             s->last_flush = -1;
; 1154 :             return Z_OK;
; 1155 :         }
; 1156 :     }
; 1157 : #endif
; 1158 : 
; 1159 :     /* Start a new block or continue the current one.
; 1160 :      */
; 1161 :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  00704	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00708	75 1b		 jne	 SHORT $LN83@deflate
  0070a	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0070e	75 15		 jne	 SHORT $LN83@deflate
  00710	85 db		 test	 ebx, ebx
  00712	0f 84 e6 01 00
	00		 je	 $LN88@deflate
  00718	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  0071f	0f 84 eb 00 00
	00		 je	 $LN95@deflate
$LN83@deflate:

; 1162 :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 1163 :         block_state bstate;
; 1164 : 
; 1165 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  00725	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0072b	85 c0		 test	 eax, eax
  0072d	75 09		 jne	 SHORT $LN114@deflate
  0072f	53		 push	 ebx
  00730	56		 push	 esi
  00731	e8 00 00 00 00	 call	 _deflate_stored
  00736	eb 34		 jmp	 SHORT $LN235@deflate
$LN114@deflate:
  00738	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0073e	83 f9 02	 cmp	 ecx, 2
  00741	75 0b		 jne	 SHORT $LN112@deflate
  00743	8b d3		 mov	 edx, ebx
  00745	8b ce		 mov	 ecx, esi
  00747	e8 00 00 00 00	 call	 _deflate_huff
  0074c	eb 21		 jmp	 SHORT $LN111@deflate
$LN112@deflate:
  0074e	83 f9 03	 cmp	 ecx, 3
  00751	75 0b		 jne	 SHORT $LN110@deflate
  00753	8b d3		 mov	 edx, ebx
  00755	8b ce		 mov	 ecx, esi
  00757	e8 00 00 00 00	 call	 _deflate_rle
  0075c	eb 11		 jmp	 SHORT $LN111@deflate
$LN110@deflate:
  0075e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00761	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  00768	53		 push	 ebx
  00769	56		 push	 esi
  0076a	ff d0		 call	 eax
$LN235@deflate:

; 1166 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1167 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1168 :                  (*(configuration_table[s->level].func))(s, flush);
; 1169 : 
; 1170 :         if (bstate == finish_started || bstate == finish_done) {

  0076c	83 c4 08	 add	 esp, 8
$LN111@deflate:
  0076f	83 f8 02	 cmp	 eax, 2
  00772	74 05		 je	 SHORT $LN85@deflate
  00774	83 f8 03	 cmp	 eax, 3
  00777	75 07		 jne	 SHORT $LN84@deflate
$LN85@deflate:

; 1171 :             s->status = FINISH_STATE;

  00779	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH
$LN84@deflate:

; 1172 :         }
; 1173 :         if (bstate == need_more || bstate == finish_started) {

  00780	85 c0		 test	 eax, eax
  00782	0f 84 69 01 00
	00		 je	 $LN87@deflate
  00788	83 f8 02	 cmp	 eax, 2
  0078b	0f 84 60 01 00
	00		 je	 $LN87@deflate

; 1178 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1179 :              * of deflate should use the same flush parameter to make sure
; 1180 :              * that the flush is complete. So we don't have to output an
; 1181 :              * empty block here, this will be done at next call. This also
; 1182 :              * ensures that for a very small output buffer, we emit at most
; 1183 :              * one empty block.
; 1184 :              */
; 1185 :         }
; 1186 :         if (bstate == block_done) {

  00791	83 f8 01	 cmp	 eax, 1
  00794	75 7a		 jne	 SHORT $LN95@deflate

; 1187 :             if (flush == Z_PARTIAL_FLUSH) {

  00796	3b d8		 cmp	 ebx, eax
  00798	75 09		 jne	 SHORT $LN90@deflate

; 1188 :                 _tr_align(s);

  0079a	8b ce		 mov	 ecx, esi
  0079c	e8 00 00 00 00	 call	 __tr_align
  007a1	eb 5c		 jmp	 SHORT $LN94@deflate
$LN90@deflate:

; 1189 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  007a3	83 fb 05	 cmp	 ebx, 5
  007a6	74 57		 je	 SHORT $LN94@deflate

; 1190 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  007a8	6a 00		 push	 0
  007aa	6a 00		 push	 0
  007ac	33 d2		 xor	 edx, edx
  007ae	8b ce		 mov	 ecx, esi
  007b0	e8 00 00 00 00	 call	 __tr_stored_block
  007b5	83 c4 08	 add	 esp, 8

; 1191 :                 /* For a full flush, this empty block will be recognized
; 1192 :                  * as a special marker by inflate_sync().
; 1193 :                  */
; 1194 :                 if (flush == Z_FULL_FLUSH) {

  007b8	83 fb 03	 cmp	 ebx, 3
  007bb	75 42		 jne	 SHORT $LN94@deflate

; 1195 :                     CLEAR_HASH(s);             /* forget history */

  007bd	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  007c0	33 d2		 xor	 edx, edx
  007c2	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  007c5	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  007ca	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  007cd	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  007d4	50		 push	 eax
  007d5	52		 push	 edx
  007d6	ff 76 44	 push	 DWORD PTR [esi+68]
  007d9	e8 00 00 00 00	 call	 _memset
  007de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1196 :                     if (s->lookahead == 0) {

  007e1	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  007e5	75 18		 jne	 SHORT $LN94@deflate

; 1197 :                         s->strstart = 0;

  007e7	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1198 :                         s->block_start = 0L;

  007ee	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1199 :                         s->insert = 0;

  007f5	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN94@deflate:

; 1200 :                     }
; 1201 :                 }
; 1202 :             }
; 1203 :             flush_pending(strm);

  007ff	8b cf		 mov	 ecx, edi
  00801	e8 00 00 00 00	 call	 _flush_pending

; 1204 :             if (strm->avail_out == 0) {

  00806	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0080a	0f 84 e7 00 00
	00		 je	 $LN152@deflate
$LN95@deflate:

; 1205 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1206 :               return Z_OK;
; 1207 :             }
; 1208 :         }
; 1209 :     }
; 1210 : 
; 1211 :     if (flush != Z_FINISH) return Z_OK;

  00810	83 fb 04	 cmp	 ebx, 4
  00813	0f 85 e5 00 00
	00		 jne	 $LN88@deflate

; 1212 :     if (s->wrap <= 0) return Z_STREAM_END;

  00819	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0081c	85 c0		 test	 eax, eax
  0081e	7f 0c		 jg	 SHORT $LN97@deflate
  00820	5e		 pop	 esi
  00821	5f		 pop	 edi
  00822	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]

; 1238 : }

  00825	5b		 pop	 ebx
  00826	8b e5		 mov	 esp, ebp
  00828	5d		 pop	 ebp
  00829	c2 08 00	 ret	 8
$LN97@deflate:

; 1213 : 
; 1214 :     /* Write the trailer */
; 1215 : #ifdef GZIP
; 1216 :     if (s->wrap == 2) {

  0082c	83 f8 02	 cmp	 eax, 2
  0082f	0f 85 82 00 00
	00		 jne	 $LN98@deflate

; 1217 :         put_byte(s, (Byte)(strm->adler & 0xff));

  00835	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00838	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  0083c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0083f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00842	ff 46 14	 inc	 DWORD PTR [esi+20]
  00845	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1218 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00848	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  0084c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0084f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00852	ff 46 14	 inc	 DWORD PTR [esi+20]
  00855	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1219 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  00858	0f b6 47 32	 movzx	 eax, BYTE PTR [edi+50]
  0085c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0085f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00862	ff 46 14	 inc	 DWORD PTR [esi+20]
  00865	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1220 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  00868	0f b6 47 33	 movzx	 eax, BYTE PTR [edi+51]
  0086c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0086f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00872	ff 46 14	 inc	 DWORD PTR [esi+20]
  00875	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1221 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  00878	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  0087c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0087f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00882	ff 46 14	 inc	 DWORD PTR [esi+20]
  00885	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1222 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  00888	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0088b	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  0088f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00892	ff 46 14	 inc	 DWORD PTR [esi+20]
  00895	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1223 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  00898	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0089b	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  0089f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  008a2	ff 46 14	 inc	 DWORD PTR [esi+20]
  008a5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1224 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  008a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  008ab	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  008af	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  008b2	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1225 :     }

  008b5	eb 16		 jmp	 SHORT $LN99@deflate
$LN98@deflate:

; 1226 :     else
; 1227 : #endif
; 1228 :     {
; 1229 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  008b7	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  008bb	8b ce		 mov	 ecx, esi
  008bd	e8 00 00 00 00	 call	 _putShortMSB

; 1230 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  008c2	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  008c6	8b ce		 mov	 ecx, esi
  008c8	e8 00 00 00 00	 call	 _putShortMSB
$LN99@deflate:

; 1231 :     }
; 1232 :     flush_pending(strm);

  008cd	8b cf		 mov	 ecx, edi
  008cf	e8 00 00 00 00	 call	 _flush_pending

; 1233 :     /* If avail_out is zero, the application will call deflate again
; 1234 :      * to flush the rest.
; 1235 :      */
; 1236 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  008d4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  008d7	85 c0		 test	 eax, eax
  008d9	7e 05		 jle	 SHORT $LN100@deflate
  008db	f7 d8		 neg	 eax
  008dd	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN100@deflate:

; 1237 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  008e0	33 c0		 xor	 eax, eax
  008e2	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  008e5	5e		 pop	 esi
  008e6	5f		 pop	 edi
  008e7	0f 94 c0	 sete	 al

; 1238 : }

  008ea	5b		 pop	 ebx
  008eb	8b e5		 mov	 esp, ebp
  008ed	5d		 pop	 ebp
  008ee	c2 08 00	 ret	 8
$LN87@deflate:

; 1174 :             if (strm->avail_out == 0) {

  008f1	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  008f5	75 07		 jne	 SHORT $LN88@deflate
$LN152@deflate:

; 1175 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

  008f7	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
$LN88@deflate:
  008fe	5e		 pop	 esi
  008ff	5f		 pop	 edi

; 1176 :             }
; 1177 :             return Z_OK;

  00900	33 c0		 xor	 eax, eax

; 1238 : }

  00902	5b		 pop	 ebx
  00903	8b e5		 mov	 esp, ebp
  00905	5d		 pop	 ebp
  00906	c2 08 00	 ret	 8
$LN34@deflate:
  00909	5e		 pop	 esi

; 940  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 941  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  0090a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_C@_0N@MKKNPMJD@stream?5error@
  00911	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00916	5f		 pop	 edi

; 1238 : }

  00917	5b		 pop	 ebx
  00918	8b e5		 mov	 esp, ebp
  0091a	5d		 pop	 ebp
  0091b	c2 08 00	 ret	 8
$LN32@deflate:
  0091e	5f		 pop	 edi

; 934  :         return Z_STREAM_ERROR;

  0091f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1238 : }

  00924	5b		 pop	 ebx
  00925	8b e5		 mov	 esp, ebp
  00927	5d		 pop	 ebp
  00928	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_status$1$ = 8						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 1241 : int ZEXPORT deflateEnd(z_streamp strm) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]

; 1242 :     int status;
; 1243 : 
; 1244 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5e		 pop	 esi

; 1258 : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateEnd:

; 1245 : 
; 1246 :     status = strm->state->status;

  0001c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001f	53		 push	 ebx
  00020	57		 push	 edi
  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1247 : 
; 1248 :     /* Deallocate in reverse order of allocations: */
; 1249 :     TRY_FREE(strm, strm->state->pending_buf);

  00024	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00027	89 4d 08	 mov	 DWORD PTR _status$1$[ebp], ecx
  0002a	85 c0		 test	 eax, eax
  0002c	74 0c		 je	 SHORT $LN8@deflateEnd
  0002e	50		 push	 eax
  0002f	ff 76 28	 push	 DWORD PTR [esi+40]
  00032	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00035	ff d0		 call	 eax
  00037	83 c4 08	 add	 esp, 8
$LN8@deflateEnd:

; 1250 :     TRY_FREE(strm, strm->state->head);

  0003a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0003d	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00040	85 c0		 test	 eax, eax
  00042	74 0c		 je	 SHORT $LN4@deflateEnd
  00044	50		 push	 eax
  00045	ff 76 28	 push	 DWORD PTR [esi+40]
  00048	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0004b	ff d0		 call	 eax
  0004d	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 1251 :     TRY_FREE(strm, strm->state->prev);

  00050	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00053	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00056	85 c0		 test	 eax, eax
  00058	74 0c		 je	 SHORT $LN5@deflateEnd
  0005a	50		 push	 eax
  0005b	ff 76 28	 push	 DWORD PTR [esi+40]
  0005e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00061	ff d0		 call	 eax
  00063	83 c4 08	 add	 esp, 8
$LN5@deflateEnd:

; 1252 :     TRY_FREE(strm, strm->state->window);

  00066	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00069	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0006c	85 c0		 test	 eax, eax
  0006e	74 0c		 je	 SHORT $LN6@deflateEnd
  00070	50		 push	 eax
  00071	ff 76 28	 push	 DWORD PTR [esi+40]
  00074	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00077	ff d0		 call	 eax
  00079	83 c4 08	 add	 esp, 8
$LN6@deflateEnd:

; 1253 : 
; 1254 :     ZFREE(strm, strm->state);

  0007c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0007f	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00082	ff 76 28	 push	 DWORD PTR [esi+40]
  00085	ff d0		 call	 eax
  00087	83 c4 08	 add	 esp, 8

; 1255 :     strm->state = Z_NULL;

  0008a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 1256 : 
; 1257 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  00091	33 c0		 xor	 eax, eax
  00093	b9 fd ff ff ff	 mov	 ecx, -3			; fffffffdH
  00098	83 7d 08 71	 cmp	 DWORD PTR _status$1$[ebp], 113 ; 00000071H
  0009c	5f		 pop	 edi
  0009d	5b		 pop	 ebx
  0009e	0f 44 c1	 cmove	 eax, ecx
  000a1	5e		 pop	 esi

; 1258 : }

  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 367  :                          int stream_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 368  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00003	ff 75 14	 push	 DWORD PTR _stream_size$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _version$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 08		 push	 8
  0000d	6a 0f		 push	 15			; 0000000fH
  0000f	6a 08		 push	 8
  00011	ff 75 0c	 push	 DWORD PTR _level$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  00017	e8 00 00 00 00	 call	 _deflateInit2_@32

; 369  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 370  :     /* To do: ignore strm->next_in if we use it as window */
; 371  : }

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _slide_hash
_TEXT	SEGMENT
tv243 = -4						; size = 4
_slide_hash PROC					; COMDAT
; _s$ = ecx

; 182  : local void slide_hash(deflate_state *s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 183  :     unsigned n, m;
; 184  :     Posf *p;
; 185  :     uInt wsize = s->w_size;
; 186  : 
; 187  :     n = s->hash_size;

  00009	8b 7b 4c	 mov	 edi, DWORD PTR [ebx+76]

; 188  :     p = &s->head[n];

  0000c	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  0000f	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00012	8d 34 78	 lea	 esi, DWORD PTR [eax+edi*2]
$LL4@slide_hash:

; 189  :     do {
; 190  :         m = *--p;

  00015	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00019	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 191  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  0001c	8b c1		 mov	 eax, ecx
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv243[ebp], 0
  00025	2b c2		 sub	 eax, edx
  00027	3b ca		 cmp	 ecx, edx
  00029	0f b7 c0	 movzx	 eax, ax
  0002c	0f 42 45 fc	 cmovb	 eax, DWORD PTR tv243[ebp]
  00030	66 89 06	 mov	 WORD PTR [esi], ax

; 192  :     } while (--n);

  00033	83 ef 01	 sub	 edi, 1
  00036	75 dd		 jne	 SHORT $LL4@slide_hash

; 193  :     n = wsize;
; 194  : #ifndef FASTEST
; 195  :     p = &s->prev[n];

  00038	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  0003b	8b fa		 mov	 edi, edx
  0003d	8d 34 50	 lea	 esi, DWORD PTR [eax+edx*2]
$LL7@slide_hash:

; 196  :     do {
; 197  :         m = *--p;

  00040	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00044	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 198  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00047	8b c1		 mov	 eax, ecx
  00049	33 db		 xor	 ebx, ebx
  0004b	2b c2		 sub	 eax, edx
  0004d	3b ca		 cmp	 ecx, edx
  0004f	0f b7 c0	 movzx	 eax, ax
  00052	0f 42 c3	 cmovb	 eax, ebx
  00055	66 89 06	 mov	 WORD PTR [esi], ax

; 199  :         /* If n is not on any hash chain, prev[n] is garbage but
; 200  :          * its value will never be used.
; 201  :          */
; 202  :     } while (--n);

  00058	83 ef 01	 sub	 edi, 1
  0005b	75 e3		 jne	 SHORT $LL7@slide_hash
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 203  : #endif
; 204  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_size$ = 8						; size = 4
_read_buf PROC						; COMDAT
; _strm$ = ecx
; _buf$ = edx

; 213  : local unsigned read_buf(z_streamp strm, Bytef *buf, unsigned size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b da		 mov	 ebx, edx
  00009	57		 push	 edi

; 214  :     unsigned len = strm->avail_in;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 215  : 
; 216  :     if (len > size) len = size;

  0000d	8b f9		 mov	 edi, ecx
  0000f	3b 4d 08	 cmp	 ecx, DWORD PTR _size$[ebp]
  00012	0f 47 7d 08	 cmova	 edi, DWORD PTR _size$[ebp]

; 217  :     if (len == 0) return 0;

  00016	85 ff		 test	 edi, edi
  00018	75 07		 jne	 SHORT $LN3@read_buf

; 234  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	33 c0		 xor	 eax, eax
  0001e	5b		 pop	 ebx
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@read_buf:

; 218  : 
; 219  :     strm->avail_in  -= len;
; 220  : 
; 221  :     zmemcpy(buf, strm->next_in, len);

  00021	57		 push	 edi
  00022	ff 36		 push	 DWORD PTR [esi]
  00024	2b cf		 sub	 ecx, edi
  00026	53		 push	 ebx
  00027	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002a	e8 00 00 00 00	 call	 _memcpy

; 222  :     if (strm->state->wrap == 1) {

  0002f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 19		 jne	 SHORT $LN4@read_buf

; 223  :         strm->adler = adler32(strm->adler, buf, len);

  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	ff 76 30	 push	 DWORD PTR [esi+48]
  00042	e8 00 00 00 00	 call	 _adler32@12

; 228  :     }
; 229  : #endif
; 230  :     strm->next_in  += len;

  00047	01 3e		 add	 DWORD PTR [esi], edi

; 231  :     strm->total_in += len;

  00049	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0004c	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 232  : 
; 233  :     return len;

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi

; 234  : }

  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN4@read_buf:

; 224  :     }
; 225  : #ifdef GZIP
; 226  :     else if (strm->state->wrap == 2) {

  00056	83 f8 02	 cmp	 eax, 2
  00059	75 0d		 jne	 SHORT $LN6@read_buf

; 227  :         strm->adler = crc32(strm->adler, buf, len);

  0005b	57		 push	 edi
  0005c	53		 push	 ebx
  0005d	ff 76 30	 push	 DWORD PTR [esi+48]
  00060	e8 00 00 00 00	 call	 _crc32@12

; 228  :     }
; 229  : #endif
; 230  :     strm->next_in  += len;

  00065	89 46 30	 mov	 DWORD PTR [esi+48], eax
$LN6@read_buf:
  00068	01 3e		 add	 DWORD PTR [esi], edi

; 232  : 
; 233  :     return len;

  0006a	8b c7		 mov	 eax, edi
  0006c	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0006f	5f		 pop	 edi

; 234  : }

  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
_wsize$1$ = -4						; size = 4
_fill_window PROC					; COMDAT
; _s$ = ecx

; 246  : local void fill_window(deflate_state *s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 247  :     unsigned n;
; 248  :     unsigned more;    /* Amount of free space at the end of the window. */
; 249  :     uInt wsize = s->w_size;

  00009	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0000c	89 5d fc	 mov	 DWORD PTR _wsize$1$[ebp], ebx
  0000f	90		 npad	 1
$LL4@fill_windo:

; 250  : 
; 251  :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 252  : 
; 253  :     do {
; 254  :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
; 255  : 
; 256  :         /* Deal with !@#$% 64K limit: */
; 257  :         if (sizeof(int) <= 2) {
; 258  :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 259  :                 more = wsize;
; 260  : 
; 261  :             } else if (more == (unsigned)(-1)) {
; 262  :                 /* Very unlikely, but possible on 16 bit machine if
; 263  :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 264  :                  */
; 265  :                 more--;
; 266  :             }
; 267  :         }
; 268  : 
; 269  :         /* If the window is almost full and there is insufficient lookahead,
; 270  :          * move the upper half to the lower one to make room in the upper half.
; 271  :          */
; 272  :         if (s->strstart >= wsize + MAX_DIST(s)) {

  00010	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00013	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00016	05 fa fe ff ff	 add	 eax, -262		; fffffefaH
  0001b	2b 7e 74	 sub	 edi, DWORD PTR [esi+116]
  0001e	03 c3		 add	 eax, ebx
  00020	2b 7e 6c	 sub	 edi, DWORD PTR [esi+108]
  00023	39 46 6c	 cmp	 DWORD PTR [esi+108], eax
  00026	72 3a		 jb	 SHORT $LN11@fill_windo

; 273  : 
; 274  :             zmemcpy(s->window, s->window + wsize, (unsigned)wsize - more);

  00028	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002b	8b c3		 mov	 eax, ebx
  0002d	2b c7		 sub	 eax, edi
  0002f	50		 push	 eax
  00030	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _memcpy

; 275  :             s->match_start -= wsize;
; 276  :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  0003a	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	29 5e 70	 sub	 DWORD PTR [esi+112], ebx
  00043	2b c3		 sub	 eax, ebx

; 277  :             s->block_start -= (long) wsize;

  00045	29 5e 5c	 sub	 DWORD PTR [esi+92], ebx
  00048	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 278  :             if (s->insert > s->strstart)

  0004b	39 86 b4 16 00
	00		 cmp	 DWORD PTR [esi+5812], eax
  00051	76 06		 jbe	 SHORT $LN30@fill_windo

; 279  :                 s->insert = s->strstart;

  00053	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
$LN30@fill_windo:

; 280  :             slide_hash(s);

  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 _slide_hash

; 281  :             more += wsize;

  00060	03 fb		 add	 edi, ebx
$LN11@fill_windo:

; 282  :         }
; 283  :         if (s->strm->avail_in == 0) break;

  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00068	0f 84 bf 00 00
	00		 je	 $LN3@fill_windo

; 284  : 
; 285  :         /* If there was no sliding:
; 286  :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 287  :          *    more == window_size - lookahead - strstart
; 288  :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 289  :          * => more >= window_size - 2*WSIZE + 2
; 290  :          * In the BIG_MEM or MMAP case (not yet supported),
; 291  :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 292  :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 293  :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 294  :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 295  :          */
; 296  :         Assert(more >= 2, "more < 2");
; 297  : 
; 298  :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  0006e	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  00071	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  00074	03 56 38	 add	 edx, DWORD PTR [esi+56]
  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 _read_buf

; 299  :         s->lookahead += n;

  0007d	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00080	83 c4 04	 add	 esp, 4

; 300  : 
; 301  :         /* Initialize the hash value now that we have some input: */
; 302  :         if (s->lookahead + s->insert >= MIN_MATCH) {

  00083	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  00089	03 f8		 add	 edi, eax
  0008b	89 7e 74	 mov	 DWORD PTR [esi+116], edi
  0008e	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00091	83 f8 03	 cmp	 eax, 3
  00094	0f 82 7f 00 00
	00		 jb	 $LN2@fill_windo

; 303  :             uInt str = s->strstart - s->insert;

  0009a	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 304  :             s->ins_h = s->window[str];

  0009d	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000a0	2b d9		 sub	 ebx, ecx

; 305  :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  000a2	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000a5	0f b6 14 18	 movzx	 edx, BYTE PTR [eax+ebx]
  000a9	89 56 48	 mov	 DWORD PTR [esi+72], edx
  000ac	0f b6 44 18 01	 movzx	 eax, BYTE PTR [eax+ebx+1]
  000b1	d3 e2		 shl	 edx, cl
  000b3	33 c2		 xor	 eax, edx
  000b5	23 46 54	 and	 eax, DWORD PTR [esi+84]

; 306  : #if MIN_MATCH != 3
; 307  :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 308  : #endif
; 309  :             while (s->insert) {

  000b8	83 be b4 16 00
	00 00		 cmp	 DWORD PTR [esi+5812], 0
  000bf	89 46 48	 mov	 DWORD PTR [esi+72], eax
  000c2	74 52		 je	 SHORT $LN34@fill_windo
$LL5@fill_windo:

; 310  :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000c4	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000c7	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 311  : #ifndef FASTEST
; 312  :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  000ca	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000cd	23 d3		 and	 edx, ebx
  000cf	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  000d4	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000d7	d3 e0		 shl	 eax, cl
  000d9	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  000dc	33 f8		 xor	 edi, eax
  000de	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  000e1	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000e4	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  000e7	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  000eb	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 313  : #endif
; 314  :                 s->head[s->ins_h] = (Pos)str;

  000ef	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000f2	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000f5	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 315  :                 str++;

  000f9	43		 inc	 ebx

; 316  :                 s->insert--;

  000fa	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]

; 317  :                 if (s->lookahead + s->insert < MIN_MATCH)

  00100	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00103	49		 dec	 ecx
  00104	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
  0010a	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0010d	83 f8 03	 cmp	 eax, 3
  00110	72 04		 jb	 SHORT $LN34@fill_windo

; 306  : #if MIN_MATCH != 3
; 307  :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 308  : #endif
; 309  :             while (s->insert) {

  00112	85 c9		 test	 ecx, ecx
  00114	75 ae		 jne	 SHORT $LL5@fill_windo
$LN34@fill_windo:

; 318  :                     break;
; 319  :             }
; 320  :         }
; 321  :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 322  :          * but this is not important since only literal bytes will be emitted.
; 323  :          */
; 324  : 
; 325  :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  00116	8b 5d fc	 mov	 ebx, DWORD PTR _wsize$1$[ebp]
$LN2@fill_windo:
  00119	81 ff 06 01 00
	00		 cmp	 edi, 262		; 00000106H
  0011f	73 0c		 jae	 SHORT $LN3@fill_windo
  00121	8b 06		 mov	 eax, DWORD PTR [esi]
  00123	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00127	0f 85 e3 fe ff
	ff		 jne	 $LL4@fill_windo
$LN3@fill_windo:

; 326  : 
; 327  :     /* If the WIN_INIT bytes after the end of the current data have never been
; 328  :      * written, then zero those bytes in order to avoid memory check reports of
; 329  :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 330  :      * the longest match routines.  Update the high water mark for the next
; 331  :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 332  :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 333  :      */
; 334  :     if (s->high_water < s->window_size) {

  0012d	8b 8e c0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5824]
  00133	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00136	3b cf		 cmp	 ecx, edi
  00138	73 67		 jae	 SHORT $LN21@fill_windo

; 335  :         ulg curr = s->strstart + (ulg)(s->lookahead);

  0013a	8b 5e 74	 mov	 ebx, DWORD PTR [esi+116]
  0013d	03 5e 6c	 add	 ebx, DWORD PTR [esi+108]

; 336  :         ulg init;
; 337  : 
; 338  :         if (s->high_water < curr) {

  00140	3b cb		 cmp	 ecx, ebx
  00142	73 2d		 jae	 SHORT $LN18@fill_windo

; 339  :             /* Previous high water mark below current data -- zero WIN_INIT
; 340  :              * bytes or up to end of window, whichever is less.
; 341  :              */
; 342  :             init = s->window_size - curr;
; 343  :             if (init > WIN_INIT)

  00144	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  00149	2b fb		 sub	 edi, ebx
  0014b	3b f8		 cmp	 edi, eax
  0014d	0f 47 f8	 cmova	 edi, eax

; 344  :                 init = WIN_INIT;
; 345  :             zmemzero(s->window + curr, (unsigned)init);

  00150	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00153	57		 push	 edi
  00154	03 c3		 add	 eax, ebx
  00156	6a 00		 push	 0
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 _memset
  0015e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  :             s->high_water = curr + init;

  00161	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00164	89 86 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], eax
  0016a	5f		 pop	 edi

; 358  :         }
; 359  :     }
; 360  : 
; 361  :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 362  :            "not enough room for search");
; 363  : }

  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
$LN18@fill_windo:

; 347  :         }
; 348  :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  00171	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]
  00177	3b c8		 cmp	 ecx, eax
  00179	73 26		 jae	 SHORT $LN21@fill_windo

; 349  :             /* High water mark at or above current data, but below current data
; 350  :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 351  :              * to end of window, whichever is less.
; 352  :              */
; 353  :             init = (ulg)curr + WIN_INIT - s->high_water;

  0017b	2b d9		 sub	 ebx, ecx

; 354  :             if (init > s->window_size - s->high_water)

  0017d	2b f9		 sub	 edi, ecx
  0017f	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]

; 355  :                 init = s->window_size - s->high_water;
; 356  :             zmemzero(s->window + s->high_water, (unsigned)init);

  00185	3b c7		 cmp	 eax, edi
  00187	0f 46 f8	 cmovbe	 edi, eax
  0018a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0018d	57		 push	 edi
  0018e	03 c1		 add	 eax, ecx
  00190	6a 00		 push	 0
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 _memset
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 357  :             s->high_water += init;

  0019b	01 be c0 16 00
	00		 add	 DWORD PTR [esi+5824], edi
$LN21@fill_windo:

; 358  :         }
; 359  :     }
; 360  : 
; 361  :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 362  :            "not enough room for search");
; 363  : }

  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
tv514 = 32						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 376  :                           const char *version, int stream_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 377  :     deflate_state *s;
; 378  :     int wrap = 1;
; 379  :     static const char my_version[] = ZLIB_VERSION;
; 380  : 
; 381  :     if (version == Z_NULL || version[0] != my_version[0] ||

  00003	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00009	56		 push	 esi
  0000a	be 01 00 00 00	 mov	 esi, 1
  0000f	85 c0		 test	 eax, eax
  00011	0f 84 13 02 00
	00		 je	 $LN3@deflateIni
  00017	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  0001a	0f 85 0a 02 00
	00		 jne	 $LN3@deflateIni
  00020	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00024	0f 85 00 02 00
	00		 jne	 $LN3@deflateIni

; 384  :     }
; 385  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  0002a	53		 push	 ebx
  0002b	57		 push	 edi
  0002c	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0002f	85 ff		 test	 edi, edi
  00031	0f 84 e7 01 00
	00		 je	 $LN13@deflateIni

; 386  : 
; 387  :     strm->msg = Z_NULL;
; 388  :     if (strm->zalloc == (alloc_func)0) {

  00037	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  0003b	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00042	75 0e		 jne	 SHORT $LN5@deflateIni

; 389  : #ifdef Z_SOLO
; 390  :         return Z_STREAM_ERROR;
; 391  : #else
; 392  :         strm->zalloc = zcalloc;

  00044	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], OFFSET _zcalloc

; 393  :         strm->opaque = (voidpf)0;

  0004b	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
$LN5@deflateIni:

; 394  : #endif
; 395  :     }
; 396  :     if (strm->zfree == (free_func)0)

  00052	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00056	75 07		 jne	 SHORT $LN6@deflateIni

; 397  : #ifdef Z_SOLO
; 398  :         return Z_STREAM_ERROR;
; 399  : #else
; 400  :         strm->zfree = zcfree;

  00058	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], OFFSET _zcfree
$LN6@deflateIni:

; 401  : #endif
; 402  : 
; 403  : #ifdef FASTEST
; 404  :     if (level != 0) level = 1;
; 405  : #else
; 406  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 407  : #endif
; 408  : 
; 409  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0005f	8b 5d 14	 mov	 ebx, DWORD PTR _windowBits$[ebp]
  00062	83 fa ff	 cmp	 edx, -1
  00065	b9 06 00 00 00	 mov	 ecx, 6
  0006a	0f 45 ca	 cmovne	 ecx, edx
  0006d	89 4d 20	 mov	 DWORD PTR tv514[ebp], ecx
  00070	85 db		 test	 ebx, ebx
  00072	79 0f		 jns	 SHORT $LN8@deflateIni

; 410  :         wrap = 0;

  00074	33 f6		 xor	 esi, esi

; 411  :         if (windowBits < -15)

  00076	83 fb f1	 cmp	 ebx, -15		; fffffff1H
  00079	0f 8c 9f 01 00
	00		 jl	 $LN13@deflateIni

; 412  :             return Z_STREAM_ERROR;
; 413  :         windowBits = -windowBits;

  0007f	f7 db		 neg	 ebx

; 414  :     }

  00081	eb 0d		 jmp	 SHORT $LN11@deflateIni
$LN8@deflateIni:

; 415  : #ifdef GZIP
; 416  :     else if (windowBits > 15) {

  00083	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00086	7e 08		 jle	 SHORT $LN11@deflateIni

; 417  :         wrap = 2;       /* write gzip wrapper instead */

  00088	be 02 00 00 00	 mov	 esi, 2

; 418  :         windowBits -= 16;

  0008d	83 eb 10	 sub	 ebx, 16			; 00000010H
$LN11@deflateIni:

; 419  :     }
; 420  : #endif
; 421  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 422  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 423  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  00090	8b 45 18	 mov	 eax, DWORD PTR _memLevel$[ebp]
  00093	48		 dec	 eax
  00094	83 f8 08	 cmp	 eax, 8
  00097	0f 87 81 01 00
	00		 ja	 $LN13@deflateIni
  0009d	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  000a1	0f 85 77 01 00
	00		 jne	 $LN13@deflateIni
  000a7	8d 43 f8	 lea	 eax, DWORD PTR [ebx-8]
  000aa	83 f8 07	 cmp	 eax, 7
  000ad	0f 87 6b 01 00
	00		 ja	 $LN13@deflateIni
  000b3	83 f9 09	 cmp	 ecx, 9
  000b6	0f 87 62 01 00
	00		 ja	 $LN13@deflateIni
  000bc	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000c0	0f 87 58 01 00
	00		 ja	 $LN13@deflateIni
  000c6	83 fb 08	 cmp	 ebx, 8
  000c9	75 0c		 jne	 SHORT $LN14@deflateIni
  000cb	83 fe 01	 cmp	 esi, 1
  000ce	0f 85 4a 01 00
	00		 jne	 $LN13@deflateIni

; 425  :     }
; 426  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000d4	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
$LN14@deflateIni:

; 427  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000d7	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000da	68 c4 16 00 00	 push	 5828			; 000016c4H
  000df	6a 01		 push	 1
  000e1	ff 77 28	 push	 DWORD PTR [edi+40]
  000e4	ff d0		 call	 eax
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 428  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000e9	85 c0		 test	 eax, eax
  000eb	0f 84 21 01 00
	00		 je	 $LN45@deflateIni

; 429  :     strm->state = (struct internal_state FAR *)s;

  000f1	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 430  :     s->strm = strm;
; 431  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 432  : 
; 433  :     s->wrap = wrap;
; 434  :     s->gzhead = Z_NULL;
; 435  :     s->w_bits = (uInt)windowBits;
; 436  :     s->w_size = 1 << s->w_bits;

  000f4	8b cb		 mov	 ecx, ebx
  000f6	89 70 18	 mov	 DWORD PTR [eax+24], esi
  000f9	be 01 00 00 00	 mov	 esi, 1
  000fe	89 58 30	 mov	 DWORD PTR [eax+48], ebx
  00101	8b d8		 mov	 ebx, eax
  00103	d3 e6		 shl	 esi, cl

; 437  :     s->w_mask = s->w_size - 1;
; 438  : 
; 439  :     s->hash_bits = (uInt)memLevel + 7;

  00105	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00108	89 38		 mov	 DWORD PTR [eax], edi
  0010a	83 c1 07	 add	 ecx, 7
  0010d	c7 40 04 2a 00
	00 00		 mov	 DWORD PTR [eax+4], 42	; 0000002aH
  00114	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  0011b	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0011e	89 43 34	 mov	 DWORD PTR [ebx+52], eax

; 440  :     s->hash_size = 1 << s->hash_bits;

  00121	b8 01 00 00 00	 mov	 eax, 1
  00126	d3 e0		 shl	 eax, cl
  00128	89 43 4c	 mov	 DWORD PTR [ebx+76], eax

; 441  :     s->hash_mask = s->hash_size - 1;

  0012b	48		 dec	 eax
  0012c	89 43 54	 mov	 DWORD PTR [ebx+84], eax

; 442  :     s->hash_shift =  ((s->hash_bits + MIN_MATCH-1) / MIN_MATCH);

  0012f	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00134	89 4b 50	 mov	 DWORD PTR [ebx+80], ecx
  00137	83 c1 02	 add	 ecx, 2
  0013a	f7 e1		 mul	 ecx

; 443  : 
; 444  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  0013c	6a 02		 push	 2
  0013e	d1 ea		 shr	 edx, 1
  00140	89 73 2c	 mov	 DWORD PTR [ebx+44], esi
  00143	89 53 58	 mov	 DWORD PTR [ebx+88], edx
  00146	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00149	56		 push	 esi
  0014a	ff 77 28	 push	 DWORD PTR [edi+40]
  0014d	ff d0		 call	 eax

; 445  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  0014f	6a 02		 push	 2
  00151	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00154	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  00157	ff 77 28	 push	 DWORD PTR [edi+40]
  0015a	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0015d	ff d0		 call	 eax

; 446  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0015f	6a 02		 push	 2
  00161	ff 73 4c	 push	 DWORD PTR [ebx+76]
  00164	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  00167	ff 77 28	 push	 DWORD PTR [edi+40]
  0016a	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0016d	ff d0		 call	 eax

; 447  : 
; 448  :     s->high_water = 0;      /* nothing written to s->window yet */
; 449  : 
; 450  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  0016f	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00172	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  00175	b8 01 00 00 00	 mov	 eax, 1

; 451  : 
; 452  :     /* We overlay pending_buf and sym_buf. This works since the average size
; 453  :      * for length/distance pairs over any compressed block is assured to be 31
; 454  :      * bits or less.
; 455  :      *
; 456  :      * Analysis: The longest fixed codes are a length code of 8 bits plus 5
; 457  :      * extra bits, for lengths 131 to 257. The longest fixed distance codes are
; 458  :      * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
; 459  :      * possible fixed-codes length/distance pair is then 31 bits total.
; 460  :      *
; 461  :      * sym_buf starts one-fourth of the way into pending_buf. So there are
; 462  :      * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
; 463  :      * in sym_buf is three bytes -- two for the distance and one for the
; 464  :      * literal/length. As each symbol is consumed, the pointer to the next
; 465  :      * sym_buf value to read moves forward three bytes. From that symbol, up to
; 466  :      * 31 bits are written to pending_buf. The closest the written pending_buf
; 467  :      * bits gets to the next sym_buf symbol to read is just before the last
; 468  :      * code is written. At that time, 31*(n - 2) bits have been written, just
; 469  :      * after 24*(n - 2) bits have been consumed from sym_buf. sym_buf starts at
; 470  :      * 8*n bits into pending_buf. (Note that the symbol buffer fills when n - 1
; 471  :      * symbols are written.) The closest the writing gets to what is unread is
; 472  :      * then n + 14 bits. Here n is lit_bufsize, which is 16384 by default, and
; 473  :      * can range from 128 to 32768.
; 474  :      *
; 475  :      * Therefore, at a minimum, there are 142 bits of space between what is
; 476  :      * written and what is read in the overlain buffers, so the symbols cannot
; 477  :      * be overwritten by the compressed data. That space is actually 139 bits,
; 478  :      * due to the three-bit fixed-code block header.
; 479  :      *
; 480  :      * That covers the case where either Z_FIXED is specified, forcing fixed
; 481  :      * codes, or when the use of fixed codes is chosen, because that choice
; 482  :      * results in a smaller compressed block than dynamic codes. That latter
; 483  :      * condition then assures that the above analysis also covers all dynamic
; 484  :      * blocks. A dynamic-code block will only be chosen to be emitted if it has
; 485  :      * fewer bits than a fixed-code block would for the same set of symbols.
; 486  :      * Therefore its average symbol length is assured to be less than 31. So
; 487  :      * the compressed data for a dynamic block also cannot overwrite the
; 488  :      * symbols from which it is being constructed.
; 489  :      */
; 490  : 
; 491  :     s->pending_buf = (uchf *) ZALLOC(strm, s->lit_bufsize, 4);

  0017a	6a 04		 push	 4
  0017c	c7 83 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+5824], 0
  00186	8d 49 06	 lea	 ecx, DWORD PTR [ecx+6]
  00189	d3 e0		 shl	 eax, cl
  0018b	50		 push	 eax
  0018c	89 83 9c 16 00
	00		 mov	 DWORD PTR [ebx+5788], eax
  00192	ff 77 28	 push	 DWORD PTR [edi+40]
  00195	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00198	ff d0		 call	 eax

; 492  :     s->pending_buf_size = (ulg)s->lit_bufsize * 4;

  0019a	8b 93 9c 16 00
	00		 mov	 edx, DWORD PTR [ebx+5788]
  001a0	83 c4 30	 add	 esp, 48			; 00000030H

; 493  : 
; 494  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  001a3	83 7b 38 00	 cmp	 DWORD PTR [ebx+56], 0
  001a7	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  001aa	8d 0c 95 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*4]
  001b1	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
  001b4	74 47		 je	 SHORT $LN17@deflateIni
  001b6	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  001ba	74 41		 je	 SHORT $LN17@deflateIni
  001bc	83 7b 44 00	 cmp	 DWORD PTR [ebx+68], 0
  001c0	74 3b		 je	 SHORT $LN17@deflateIni
  001c2	85 c0		 test	 eax, eax
  001c4	74 37		 je	 SHORT $LN17@deflateIni

; 500  :     }
; 501  :     s->sym_buf = s->pending_buf + s->lit_bufsize;

  001c6	03 c2		 add	 eax, edx

; 502  :     s->sym_end = (s->lit_bufsize - 1) * 3;

  001c8	4a		 dec	 edx
  001c9	89 83 98 16 00
	00		 mov	 DWORD PTR [ebx+5784], eax

; 503  :     /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
; 504  :      * on 16 bit machines and because stored blocks are restricted to
; 505  :      * 64K-1 bytes.
; 506  :      */
; 507  : 
; 508  :     s->level = level;
; 509  :     s->strategy = strategy;
; 510  :     s->method = (Byte)method;
; 511  : 
; 512  :     return deflateReset(strm);

  001cf	57		 push	 edi
  001d0	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  001d3	89 83 a4 16 00
	00		 mov	 DWORD PTR [ebx+5796], eax
  001d9	8b 45 20	 mov	 eax, DWORD PTR tv514[ebp]
  001dc	89 83 84 00 00
	00		 mov	 DWORD PTR [ebx+132], eax
  001e2	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  001e5	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax
  001eb	8b 45 10	 mov	 eax, DWORD PTR _method$[ebp]
  001ee	88 43 24	 mov	 BYTE PTR [ebx+36], al
  001f1	e8 00 00 00 00	 call	 _deflateReset@4
  001f6	5f		 pop	 edi
  001f7	5b		 pop	 ebx
  001f8	5e		 pop	 esi

; 513  : }

  001f9	5d		 pop	 ebp
  001fa	c2 20 00	 ret	 32			; 00000020H
$LN17@deflateIni:

; 495  :         s->pending_buf == Z_NULL) {
; 496  :         s->status = FINISH_STATE;
; 497  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  001fd	a1 18 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+24
  00202	c7 43 04 9a 02
	00 00		 mov	 DWORD PTR [ebx+4], 666	; 0000029aH

; 498  :         deflateEnd (strm);

  00209	57		 push	 edi
  0020a	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0020d	e8 00 00 00 00	 call	 _deflateEnd@4
$LN45@deflateIni:

; 499  :         return Z_MEM_ERROR;

  00212	5f		 pop	 edi
  00213	5b		 pop	 ebx
  00214	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00219	5e		 pop	 esi

; 513  : }

  0021a	5d		 pop	 ebp
  0021b	c2 20 00	 ret	 32			; 00000020H
$LN13@deflateIni:
  0021e	5f		 pop	 edi
  0021f	5b		 pop	 ebx

; 424  :         return Z_STREAM_ERROR;

  00220	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00225	5e		 pop	 esi

; 513  : }

  00226	5d		 pop	 ebp
  00227	c2 20 00	 ret	 32			; 00000020H
$LN3@deflateIni:

; 382  :         stream_size != sizeof(z_stream)) {
; 383  :         return Z_VERSION_ERROR;

  0022a	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  0022f	5e		 pop	 esi

; 513  : }

  00230	5d		 pop	 ebp
  00231	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_deflateStateCheck PROC					; COMDAT
; _strm$ = ecx

; 519  :     deflate_state *s;
; 520  :     if (strm == Z_NULL ||
; 521  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	85 c9		 test	 ecx, ecx
  00002	74 47		 je	 SHORT $LN3@deflateSta
  00004	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00008	74 41		 je	 SHORT $LN3@deflateSta
  0000a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0000e	74 3b		 je	 SHORT $LN3@deflateSta

; 523  :     s = strm->state;

  00010	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 524  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00013	85 c0		 test	 eax, eax
  00015	74 34		 je	 SHORT $LN3@deflateSta
  00017	39 08		 cmp	 DWORD PTR [eax], ecx
  00019	75 30		 jne	 SHORT $LN3@deflateSta
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00021	74 25		 je	 SHORT $LN4@deflateSta
  00023	83 f8 39	 cmp	 eax, 57			; 00000039H
  00026	74 20		 je	 SHORT $LN4@deflateSta
  00028	83 f8 45	 cmp	 eax, 69			; 00000045H
  0002b	74 1b		 je	 SHORT $LN4@deflateSta
  0002d	83 f8 49	 cmp	 eax, 73			; 00000049H
  00030	74 16		 je	 SHORT $LN4@deflateSta
  00032	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00035	74 11		 je	 SHORT $LN4@deflateSta
  00037	83 f8 67	 cmp	 eax, 103		; 00000067H
  0003a	74 0c		 je	 SHORT $LN4@deflateSta
  0003c	83 f8 71	 cmp	 eax, 113		; 00000071H
  0003f	74 07		 je	 SHORT $LN4@deflateSta
  00041	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  00046	75 03		 jne	 SHORT $LN3@deflateSta
$LN4@deflateSta:

; 525  : #ifdef GZIP
; 526  :                                            s->status != GZIP_STATE &&
; 527  : #endif
; 528  :                                            s->status != EXTRA_STATE &&
; 529  :                                            s->status != NAME_STATE &&
; 530  :                                            s->status != COMMENT_STATE &&
; 531  :                                            s->status != HCRC_STATE &&
; 532  :                                            s->status != BUSY_STATE &&
; 533  :                                            s->status != FINISH_STATE))
; 534  :         return 1;
; 535  :     return 0;

  00048	33 c0		 xor	 eax, eax

; 536  : }

  0004a	c3		 ret	 0
$LN3@deflateSta:

; 522  :         return 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 536  : }

  00050	c3		 ret	 0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_avail$1$ = -8						; size = 4
_wrap$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_n$1$ = 12						; size = 4
_dictionary$ = 12					; size = 4
_next$1$ = 16						; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 540  :                                  uInt  dictLength) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  :     deflate_state *s;
; 542  :     uInt str, n;
; 543  :     int wrap;
; 544  :     unsigned avail;
; 545  :     z_const unsigned char *next;
; 546  : 
; 547  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _deflateStateCheck
  00010	85 c0		 test	 eax, eax
  00012	0f 85 77 01 00
	00		 jne	 $LN11@deflateSet
  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _dictionary$[ebp]
  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 6c 01 00
	00		 je	 $LN11@deflateSet

; 549  :     s = strm->state;

  00023	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 550  :     wrap = s->wrap;

  00026	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00029	89 45 fc	 mov	 DWORD PTR _wrap$1$[ebp], eax

; 551  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0002c	83 f8 02	 cmp	 eax, 2
  0002f	0f 84 5a 01 00
	00		 je	 $LN11@deflateSet
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 0a		 jne	 SHORT $LN14@deflateSet
  0003a	83 7e 04 2a	 cmp	 DWORD PTR [esi+4], 42	; 0000002aH
  0003e	0f 85 4b 01 00
	00		 jne	 $LN11@deflateSet
$LN14@deflateSet:
  00044	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00048	0f 85 41 01 00
	00		 jne	 $LN11@deflateSet

; 552  :         return Z_STREAM_ERROR;
; 553  : 
; 554  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 555  :     if (wrap == 1)

  0004e	57		 push	 edi
  0004f	8b 7d 10	 mov	 edi, DWORD PTR _dictLength$[ebp]
  00052	83 f8 01	 cmp	 eax, 1
  00055	75 13		 jne	 SHORT $LN15@deflateSet

; 556  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00057	57		 push	 edi
  00058	53		 push	 ebx
  00059	ff 71 30	 push	 DWORD PTR [ecx+48]
  0005c	e8 00 00 00 00	 call	 _adler32@12
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00064	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00067	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]
$LN15@deflateSet:

; 557  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  0006a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 558  : 
; 559  :     /* if dictionary would fill window, just replace the history */
; 560  :     if (dictLength >= s->w_size) {

  00071	3b 7e 2c	 cmp	 edi, DWORD PTR [esi+44]
  00074	72 48		 jb	 SHORT $LN30@deflateSet

; 561  :         if (wrap == 0) {            /* already empty otherwise */

  00076	85 c0		 test	 eax, eax
  00078	75 3c		 jne	 SHORT $LN29@deflateSet

; 562  :             CLEAR_HASH(s);

  0007a	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0007d	33 d2		 xor	 edx, edx
  0007f	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00082	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00087	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0008a	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00091	50		 push	 eax
  00092	52		 push	 edx
  00093	ff 76 44	 push	 DWORD PTR [esi+68]
  00096	e8 00 00 00 00	 call	 _memset
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 563  :             s->strstart = 0;

  0009e	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 564  :             s->block_start = 0L;

  000a5	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 565  :             s->insert = 0;

  000ac	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN29@deflateSet:

; 566  :         }
; 567  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000b6	2b 7e 2c	 sub	 edi, DWORD PTR [esi+44]
  000b9	03 df		 add	 ebx, edi

; 568  :         dictLength = s->w_size;

  000bb	8b 7e 2c	 mov	 edi, DWORD PTR [esi+44]
$LN30@deflateSet:

; 569  :     }
; 570  : 
; 571  :     /* insert dictionary into window and hash */
; 572  :     avail = strm->avail_in;

  000be	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c4	89 4d f8	 mov	 DWORD PTR _avail$1$[ebp], ecx

; 573  :     next = strm->next_in;

  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	89 4d 10	 mov	 DWORD PTR _next$1$[ebp], ecx

; 574  :     strm->avail_in = dictLength;
; 575  :     strm->next_in = (z_const Bytef *)dictionary;
; 576  :     fill_window(s);

  000cc	8b ce		 mov	 ecx, esi
  000ce	89 78 04	 mov	 DWORD PTR [eax+4], edi
  000d1	89 18		 mov	 DWORD PTR [eax], ebx
  000d3	e8 00 00 00 00	 call	 _fill_window

; 577  :     while (s->lookahead >= MIN_MATCH) {

  000d8	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  000db	83 f9 03	 cmp	 ecx, 3
  000de	72 65		 jb	 SHORT $LN6@deflateSet
$LL5@deflateSet:

; 578  :         str = s->strstart;

  000e0	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 579  :         n = s->lookahead - (MIN_MATCH-1);

  000e3	83 c1 fe	 add	 ecx, -2			; fffffffeH
  000e6	89 4d 0c	 mov	 DWORD PTR _n$1$[ebp], ecx
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@deflateSet:

; 580  :         do {
; 581  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000f0	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 582  : #ifndef FASTEST
; 583  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  000f6	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000f9	23 d3		 and	 edx, ebx
  000fb	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  00100	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00103	d3 e0		 shl	 eax, cl
  00105	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00108	33 f8		 xor	 edi, eax
  0010a	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  0010d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00110	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00113	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  00117	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 584  : #endif
; 585  :             s->head[s->ins_h] = (Pos)str;

  0011b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0011e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00121	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 586  :             str++;

  00125	43		 inc	 ebx

; 587  :         } while (--n);

  00126	83 6d 0c 01	 sub	 DWORD PTR _n$1$[ebp], 1
  0012a	75 c4		 jne	 SHORT $LL9@deflateSet

; 588  :         s->strstart = str;
; 589  :         s->lookahead = MIN_MATCH-1;
; 590  :         fill_window(s);

  0012c	8b ce		 mov	 ecx, esi
  0012e	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00131	c7 46 74 02 00
	00 00		 mov	 DWORD PTR [esi+116], 2
  00138	e8 00 00 00 00	 call	 _fill_window
  0013d	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00140	83 f9 03	 cmp	 ecx, 3
  00143	73 9b		 jae	 SHORT $LL5@deflateSet
$LN6@deflateSet:

; 591  :     }
; 592  :     s->strstart += s->lookahead;

  00145	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  00148	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 593  :     s->block_start = (long)s->strstart;
; 594  :     s->insert = s->lookahead;

  0014b	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx

; 595  :     s->lookahead = 0;
; 596  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 597  :     s->match_available = 0;
; 598  :     strm->next_in = next;

  00151	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00154	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00157	8b 45 10	 mov	 eax, DWORD PTR _next$1$[ebp]
  0015a	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00161	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00168	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  0016f	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00176	89 01		 mov	 DWORD PTR [ecx], eax

; 599  :     strm->avail_in = avail;

  00178	8b 45 f8	 mov	 eax, DWORD PTR _avail$1$[ebp]
  0017b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 600  :     s->wrap = wrap;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]

; 601  :     return Z_OK;

  00181	5f		 pop	 edi
  00182	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00185	33 c0		 xor	 eax, eax
  00187	5e		 pop	 esi

; 602  : }

  00188	5b		 pop	 ebx
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c2 0c 00	 ret	 12			; 0000000cH
$LN11@deflateSet:
  0018f	5e		 pop	 esi

; 548  :         return Z_STREAM_ERROR;

  00190	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 602  : }

  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateGetDictionary@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC				; COMDAT

; 606  :                                  uInt *dictLength) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  :     deflate_state *s;
; 608  :     uInt len;
; 609  : 
; 610  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateGet

; 611  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 621  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflateGet:

; 612  :     s = strm->state;

  00018	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001b	56		 push	 esi

; 613  :     len = s->strstart + s->lookahead;

  0001c	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  0001f	03 4a 6c	 add	 ecx, DWORD PTR [edx+108]

; 614  :     if (len > s->w_size)

  00022	8b 72 2c	 mov	 esi, DWORD PTR [edx+44]

; 615  :         len = s->w_size;
; 616  :     if (dictionary != Z_NULL && len)

  00025	3b ce		 cmp	 ecx, esi
  00027	0f 46 f1	 cmovbe	 esi, ecx
  0002a	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0002e	74 18		 je	 SHORT $LN4@deflateGet
  00030	85 f6		 test	 esi, esi
  00032	74 14		 je	 SHORT $LN4@deflateGet

; 617  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00034	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00037	2b c6		 sub	 eax, esi
  00039	56		 push	 esi
  0003a	03 c1		 add	 eax, ecx
  0003c	50		 push	 eax
  0003d	ff 75 0c	 push	 DWORD PTR _dictionary$[ebp]
  00040	e8 00 00 00 00	 call	 _memcpy
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@deflateGet:

; 618  :     if (dictLength != Z_NULL)

  00048	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  0004b	85 c0		 test	 eax, eax
  0004d	74 02		 je	 SHORT $LN5@deflateGet

; 619  :         *dictLength = len;

  0004f	89 30		 mov	 DWORD PTR [eax], esi
$LN5@deflateGet:

; 620  :     return Z_OK;

  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi

; 621  : }

  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
_deflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 624  : int ZEXPORT deflateResetKeep(z_streamp strm) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 625  :     deflate_state *s;
; 626  : 
; 627  :     if (deflateStateCheck(strm)) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateRes

; 628  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5f		 pop	 edi

; 657  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateRes:
  0001c	56		 push	 esi

; 629  :     }
; 630  : 
; 631  :     strm->total_in = strm->total_out = 0;
; 632  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 633  :     strm->data_type = Z_UNKNOWN;
; 634  : 
; 635  :     s = (deflate_state *)strm->state;

  0001d	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  00020	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00027	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0002e	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00035	c7 47 2c 02 00
	00 00		 mov	 DWORD PTR [edi+44], 2

; 636  :     s->pending = 0;
; 637  :     s->pending_out = s->pending_buf;
; 638  : 
; 639  :     if (s->wrap < 0) {

  0003c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0003f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00042	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00049	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004c	85 c9		 test	 ecx, ecx
  0004e	79 05		 jns	 SHORT $LN3@deflateRes

; 640  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00050	f7 d9		 neg	 ecx
  00052	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
$LN3@deflateRes:

; 641  :     }
; 642  :     s->status =

  00055	83 f9 02	 cmp	 ecx, 2
  00058	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH

; 643  : #ifdef GZIP
; 644  :         s->wrap == 2 ? GZIP_STATE :
; 645  : #endif
; 646  :         INIT_STATE;
; 647  :     strm->adler =

  0005d	6a 00		 push	 0
  0005f	ba 39 00 00 00	 mov	 edx, 57			; 00000039H
  00064	0f 44 c2	 cmove	 eax, edx
  00067	6a 00		 push	 0
  00069	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0006c	6a 00		 push	 0
  0006e	75 07		 jne	 SHORT $LN5@deflateRes
  00070	e8 00 00 00 00	 call	 _crc32@12
  00075	eb 05		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  00077	e8 00 00 00 00	 call	 _adler32@12
$LN6@deflateRes:
  0007c	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 648  : #ifdef GZIP
; 649  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 650  : #endif
; 651  :         adler32(0L, Z_NULL, 0);
; 652  :     s->last_flush = -2;
; 653  : 
; 654  :     _tr_init(s);

  0007f	8b ce		 mov	 ecx, esi
  00081	c7 46 28 fe ff
	ff ff		 mov	 DWORD PTR [esi+40], -2	; fffffffeH
  00088	e8 00 00 00 00	 call	 __tr_init

; 655  : 
; 656  :     return Z_OK;

  0008d	5e		 pop	 esi
  0008e	33 c0		 xor	 eax, eax
  00090	5f		 pop	 edi

; 657  : }

  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_lm_init PROC						; COMDAT
; _s$ = ecx

; 662  : local void lm_init(deflate_state *s) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 663  :     s->window_size = (ulg)2L*s->w_size;
; 664  : 
; 665  :     CLEAR_HASH(s);

  00003	33 c9		 xor	 ecx, ecx
  00005	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00008	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0000b	03 c0		 add	 eax, eax
  0000d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	66 89 4c 50 fe	 mov	 WORD PTR [eax+edx*2-2], cx
  00018	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0001b	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	ff 76 44	 push	 DWORD PTR [esi+68]
  00027	e8 00 00 00 00	 call	 _memset

; 666  : 
; 667  :     /* Set the default configuration parameters:
; 668  :      */
; 669  :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0002c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00038	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  00040	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 670  :     s->good_match       = configuration_table[s->level].good_length;

  00046	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0004e	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 671  :     s->nice_match       = configuration_table[s->level].nice_length;

  00054	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0005c	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 672  :     s->max_chain_length = configuration_table[s->level].max_chain;

  00062	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  0006a	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 673  : 
; 674  :     s->strstart = 0;

  0006d	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 675  :     s->block_start = 0L;

  00074	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 676  :     s->lookahead = 0;

  0007b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 677  :     s->insert = 0;

  00082	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 678  :     s->match_length = s->prev_length = MIN_MATCH-1;

  0008c	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00093	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 679  :     s->match_available = 0;

  0009a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 680  :     s->ins_h = 0;

  000a1	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000a8	5e		 pop	 esi

; 681  : }

  000a9	c3		 ret	 0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 684  : int ZEXPORT deflateReset(z_streamp strm) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 685  :     int ret;
; 686  : 
; 687  :     ret = deflateResetKeep(strm);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0000e	8b f0		 mov	 esi, eax

; 688  :     if (ret == Z_OK)

  00010	85 f6		 test	 esi, esi
  00012	75 0a		 jne	 SHORT $LN2@deflateRes

; 689  :         lm_init(strm->state);

  00014	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00017	e8 00 00 00 00	 call	 _lm_init

; 690  :     return ret;

  0001c	8b c6		 mov	 eax, esi
$LN2@deflateRes:

; 691  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 694  : int ZEXPORT deflateSetHeader(z_streamp strm, gz_headerp head) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 695  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	75 15		 jne	 SHORT $LN3@deflateSet
  0000f	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00012	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00016	75 0c		 jne	 SHORT $LN3@deflateSet

; 697  :     strm->state->gzhead = head;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _head$[ebp]
  0001b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 698  :     return Z_OK;

  0001e	33 c0		 xor	 eax, eax

; 699  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN3@deflateSet:

; 696  :         return Z_STREAM_ERROR;

  00024	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 699  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 702  : int ZEXPORT deflatePending(z_streamp strm, unsigned *pending, int *bits) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]

; 703  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflatePen
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 709  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflatePen:

; 704  :     if (pending != Z_NULL)

  00018	8b 55 0c	 mov	 edx, DWORD PTR _pending$[ebp]
  0001b	85 d2		 test	 edx, edx
  0001d	74 08		 je	 SHORT $LN6@deflatePen

; 705  :         *pending = strm->state->pending;

  0001f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00022	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00025	89 02		 mov	 DWORD PTR [edx], eax
$LN6@deflatePen:

; 706  :     if (bits != Z_NULL)

  00027	8b 55 10	 mov	 edx, DWORD PTR _bits$[ebp]
  0002a	85 d2		 test	 edx, edx
  0002c	74 0b		 je	 SHORT $LN4@deflatePen

; 707  :         *bits = strm->state->bi_valid;

  0002e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00031	8b 80 bc 16 00
	00		 mov	 eax, DWORD PTR [eax+5820]
  00037	89 02		 mov	 DWORD PTR [edx], eax
$LN4@deflatePen:

; 708  :     return Z_OK;

  00039	33 c0		 xor	 eax, eax

; 709  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 712  : int ZEXPORT deflatePrime(z_streamp strm, int bits, int value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 713  :     deflate_state *s;
; 714  :     int put;
; 715  : 
; 716  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _bits$[ebp]
  0000a	e8 00 00 00 00	 call	 _deflateStateCheck
  0000f	85 c0		 test	 eax, eax
  00011	74 0a		 je	 SHORT $LN5@deflatePri
  00013	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00018	5b		 pop	 ebx

; 732  : }

  00019	5d		 pop	 ebp
  0001a	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePri:
  0001d	57		 push	 edi

; 717  :     s = strm->state;
; 718  :     if (bits < 0 || bits > 16 ||

  0001e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00021	77 6f		 ja	 SHORT $LN7@deflatePri
  00023	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  00026	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00029	83 c0 02	 add	 eax, 2
  0002c	39 87 98 16 00
	00		 cmp	 DWORD PTR [edi+5784], eax
  00032	72 5e		 jb	 SHORT $LN7@deflatePri
  00034	56		 push	 esi
  00035	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@deflatePri:

; 721  :     do {
; 722  :         put = Buf_size - s->bi_valid;

  00040	8b 97 bc 16 00
	00		 mov	 edx, DWORD PTR [edi+5820]
  00046	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004b	2b c2		 sub	 eax, edx

; 723  :         if (put > bits)
; 724  :             put = bits;
; 725  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0004d	8b f3		 mov	 esi, ebx
  0004f	3b c3		 cmp	 eax, ebx
  00051	0f 4e f0	 cmovle	 esi, eax
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	8b ce		 mov	 ecx, esi
  0005b	66 d3 e0	 shl	 ax, cl
  0005e	8b ca		 mov	 ecx, edx
  00060	66 48		 dec	 ax
  00062	66 23 45 10	 and	 ax, WORD PTR _value$[ebp]
  00066	66 d3 e0	 shl	 ax, cl

; 726  :         s->bi_valid += put;
; 727  :         _tr_flush_bits(s);

  00069	8b cf		 mov	 ecx, edi
  0006b	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00072	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00075	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  0007b	e8 00 00 00 00	 call	 __tr_flush_bits

; 728  :         value >>= put;

  00080	8b ce		 mov	 ecx, esi
  00082	d3 7d 10	 sar	 DWORD PTR _value$[ebp], cl

; 729  :         bits -= put;

  00085	2b de		 sub	 ebx, esi

; 730  :     } while (bits);

  00087	75 b7		 jne	 SHORT $LL4@deflatePri
  00089	5e		 pop	 esi
  0008a	5f		 pop	 edi

; 731  :     return Z_OK;

  0008b	33 c0		 xor	 eax, eax
  0008d	5b		 pop	 ebx

; 732  : }

  0008e	5d		 pop	 ebp
  0008f	c2 0c 00	 ret	 12			; 0000000cH
$LN7@deflatePri:
  00092	5f		 pop	 edi

; 719  :         s->sym_buf < s->pending_out + ((Buf_size + 7) >> 3))
; 720  :         return Z_BUF_ERROR;

  00093	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00098	5b		 pop	 ebx

; 732  : }

  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
tv415 = 12						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 735  : int ZEXPORT deflateParams(z_streamp strm, int level, int strategy) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]

; 736  :     deflate_state *s;
; 737  :     compress_func func;
; 738  : 
; 739  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	e8 00 00 00 00	 call	 _deflateStateCheck
  00011	85 c0		 test	 eax, eax
  00013	0f 85 28 01 00
	00		 jne	 $LN8@deflatePar

; 740  :     s = strm->state;

  00019	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 741  : 
; 742  : #ifdef FASTEST
; 743  :     if (level != 0) level = 1;
; 744  : #else
; 745  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 746  : #endif
; 747  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  0001c	83 fa ff	 cmp	 edx, -1
  0001f	bf 06 00 00 00	 mov	 edi, 6
  00024	0f 45 fa	 cmovne	 edi, edx
  00027	83 ff 09	 cmp	 edi, 9
  0002a	0f 87 11 01 00
	00		 ja	 $LN8@deflatePar
  00030	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00033	83 f8 04	 cmp	 eax, 4
  00036	0f 87 05 01 00
	00		 ja	 $LN8@deflatePar

; 748  :         return Z_STREAM_ERROR;
; 749  :     }
; 750  :     func = configuration_table[s->level].func;
; 751  : 
; 752  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  0003c	8d 9e 84 00 00
	00		 lea	 ebx, DWORD PTR [esi+132]
  00042	3b 86 88 00 00
	00		 cmp	 eax, DWORD PTR [esi+136]
  00048	75 1b		 jne	 SHORT $LN19@deflatePar
  0004a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004c	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0004f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00052	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  00059	3b 04 8d 08 00
	00 00		 cmp	 eax, DWORD PTR _configuration_table[ecx*4+8]
  00060	74 3f		 je	 SHORT $LN12@deflatePar
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
$LN19@deflatePar:
  00065	83 7e 28 fe	 cmp	 DWORD PTR [esi+40], -2	; fffffffeH
  00069	8b c3		 mov	 eax, ebx
  0006b	89 45 0c	 mov	 DWORD PTR tv415[ebp], eax
  0006e	74 31		 je	 SHORT $LN12@deflatePar

; 753  :         s->last_flush != -2) {
; 754  :         /* Flush the last buffer: */
; 755  :         int err = deflate(strm, Z_BLOCK);

  00070	6a 05		 push	 5
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 _deflate@8

; 756  :         if (err == Z_STREAM_ERROR)

  00078	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  0007b	0f 84 c0 00 00
	00		 je	 $LN8@deflatePar

; 757  :             return err;
; 758  :         if (strm->avail_in || (s->strstart - s->block_start) + s->lookahead)

  00081	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00084	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00088	75 0b		 jne	 SHORT $LN13@deflatePar
  0008a	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  0008d	2b 46 5c	 sub	 eax, DWORD PTR [esi+92]
  00090	03 46 6c	 add	 eax, DWORD PTR [esi+108]
  00093	74 0c		 je	 SHORT $LN12@deflatePar
$LN13@deflatePar:
  00095	5f		 pop	 edi

; 777  : }

  00096	5e		 pop	 esi
  00097	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0009c	5b		 pop	 ebx
  0009d	5d		 pop	 ebp
  0009e	c2 0c 00	 ret	 12			; 0000000cH
$LN12@deflatePar:

; 759  :             return Z_BUF_ERROR;
; 760  :     }
; 761  :     if (s->level != level) {

  000a1	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a3	3b c7		 cmp	 eax, edi
  000a5	0f 84 84 00 00
	00		 je	 $LN14@deflatePar

; 762  :         if (s->level == 0 && s->matches != 0) {

  000ab	85 c0		 test	 eax, eax
  000ad	75 46		 jne	 SHORT $LN15@deflatePar
  000af	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  000b5	85 c0		 test	 eax, eax
  000b7	74 3c		 je	 SHORT $LN15@deflatePar

; 763  :             if (s->matches == 1)

  000b9	83 f8 01	 cmp	 eax, 1
  000bc	75 09		 jne	 SHORT $LN4@deflatePar

; 764  :                 slide_hash(s);

  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 _slide_hash
  000c5	eb 24		 jmp	 SHORT $LN3@deflatePar
$LN4@deflatePar:

; 765  :             else
; 766  :                 CLEAR_HASH(s);

  000c7	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000ca	33 d2		 xor	 edx, edx
  000cc	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000cf	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  000d4	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000d7	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  000de	50		 push	 eax
  000df	52		 push	 edx
  000e0	ff 76 44	 push	 DWORD PTR [esi+68]
  000e3	e8 00 00 00 00	 call	 _memset
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@deflatePar:

; 767  :             s->matches = 0;

  000eb	c7 86 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5808], 0
$LN15@deflatePar:

; 768  :         }
; 769  :         s->level = level;
; 770  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  000f5	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000f8	89 3b		 mov	 DWORD PTR [ebx], edi
  000fa	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  00102	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 771  :         s->good_match       = configuration_table[level].good_length;

  00108	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  00110	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 772  :         s->nice_match       = configuration_table[level].nice_length;

  00116	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0011e	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 773  :         s->max_chain_length = configuration_table[level].max_chain;

  00124	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  0012c	89 46 7c	 mov	 DWORD PTR [esi+124], eax
$LN14@deflatePar:

; 774  :     }
; 775  :     s->strategy = strategy;

  0012f	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00132	5f		 pop	 edi
  00133	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 776  :     return Z_OK;

  00139	33 c0		 xor	 eax, eax

; 777  : }

  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	5d		 pop	 ebp
  0013e	c2 0c 00	 ret	 12			; 0000000cH
$LN8@deflatePar:
  00141	5f		 pop	 edi
  00142	5e		 pop	 esi
  00143	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00148	5b		 pop	 ebx
  00149	5d		 pop	 ebp
  0014a	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 781  :                         int nice_length, int max_chain) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  :     deflate_state *s;
; 783  : 
; 784  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateTun
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 791  : }

  00014	5d		 pop	 ebp
  00015	c2 14 00	 ret	 20			; 00000014H
$LN2@deflateTun:

; 785  :     s = strm->state;

  00018	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 786  :     s->good_match = (uInt)good_length;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _good_length$[ebp]
  0001e	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 787  :     s->max_lazy_match = (uInt)max_lazy;

  00024	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00027	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 788  :     s->nice_match = nice_length;

  0002d	8b 45 14	 mov	 eax, DWORD PTR _nice_length$[ebp]
  00030	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 789  :     s->max_chain_length = (uInt)max_chain;

  00036	8b 45 18	 mov	 eax, DWORD PTR _max_chain$[ebp]
  00039	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 790  :     return Z_OK;

  0003c	33 c0		 xor	 eax, eax

; 791  : }

  0003e	5d		 pop	 ebp
  0003f	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
_fixedlen$1$ = -4					; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 817  : uLong ZEXPORT deflateBound(z_streamp strm, uLong sourceLen) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 818  :     deflate_state *s;
; 819  :     uLong fixedlen, storelen, wraplen;
; 820  : 
; 821  :     /* upper bound for fixed blocks with 9-bit literals and length 255
; 822  :        (memLevel == 2, which is the lowest that may not use stored blocks) --
; 823  :        ~13% overhead plus a small constant */
; 824  :     fixedlen = sourceLen + (sourceLen >> 3) + (sourceLen >> 8) +

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _sourceLen$[ebp]
  00009	8b df		 mov	 ebx, edi
  0000b	c1 eb 08	 shr	 ebx, 8
  0000e	8b d7		 mov	 edx, edi
  00010	c1 ea 09	 shr	 edx, 9
  00013	8b c7		 mov	 eax, edi
  00015	c1 e8 03	 shr	 eax, 3
  00018	03 df		 add	 ebx, edi
  0001a	03 da		 add	 ebx, edx
  0001c	83 c0 04	 add	 eax, 4
  0001f	03 d8		 add	 ebx, eax

; 825  :                (sourceLen >> 9) + 4;
; 826  : 
; 827  :     /* upper bound for stored blocks with length 127 (memLevel == 1) --
; 828  :        ~4% overhead plus a small constant */
; 829  :     storelen = sourceLen + (sourceLen >> 5) + (sourceLen >> 7) +

  00021	8b cf		 mov	 ecx, edi
  00023	c1 e9 07	 shr	 ecx, 7
  00026	8b d7		 mov	 edx, edi
  00028	8b c7		 mov	 eax, edi
  0002a	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  0002d	03 cf		 add	 ecx, edi
  0002f	c1 e8 05	 shr	 eax, 5
  00032	03 d1		 add	 edx, ecx
  00034	89 5d fc	 mov	 DWORD PTR _fixedlen$1$[ebp], ebx

; 830  :                (sourceLen >> 11) + 7;
; 831  : 
; 832  :     /* if can't get parameters, return larger bound plus a zlib wrapper */
; 833  :     if (deflateStateCheck(strm))

  00037	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0003a	83 c0 07	 add	 eax, 7
  0003d	03 d0		 add	 edx, eax
  0003f	e8 00 00 00 00	 call	 _deflateStateCheck
  00044	85 c0		 test	 eax, eax
  00046	74 10		 je	 SHORT $LN10@deflateBou

; 834  :         return (fixedlen > storelen ? fixedlen : storelen) + 6;

  00048	3b da		 cmp	 ebx, edx
  0004a	5f		 pop	 edi
  0004b	0f 47 d3	 cmova	 edx, ebx

; 879  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 880  : }

  0004e	5b		 pop	 ebx
  0004f	8d 42 06	 lea	 eax, DWORD PTR [edx+6]
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN10@deflateBou:
  00058	56		 push	 esi

; 835  : 
; 836  :     /* compute wrapper length */
; 837  :     s = strm->state;

  00059	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 838  :     switch (s->wrap) {

  0005c	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005f	83 e8 00	 sub	 eax, 0
  00062	74 6a		 je	 SHORT $LN11@deflateBou
  00064	83 e8 01	 sub	 eax, 1
  00067	74 54		 je	 SHORT $LN12@deflateBou
  00069	83 e8 01	 sub	 eax, 1
  0006c	74 07		 je	 SHORT $LN13@deflateBou

; 866  : #endif
; 867  :     default:                                /* for compiler happiness */
; 868  :         wraplen = 6;

  0006e	bb 06 00 00 00	 mov	 ebx, 6
  00073	eb 60		 jmp	 SHORT $LN2@deflateBou
$LN13@deflateBou:

; 845  : #ifdef GZIP
; 846  :     case 2:                                 /* gzip wrapper */
; 847  :         wraplen = 18;
; 848  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  00075	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00078	bb 12 00 00 00	 mov	 ebx, 18			; 00000012H
  0007d	85 ff		 test	 edi, edi
  0007f	74 51		 je	 SHORT $LN33@deflateBou

; 849  :             Bytef *str;
; 850  :             if (s->gzhead->extra != Z_NULL)

  00081	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00085	74 06		 je	 SHORT $LN15@deflateBou

; 851  :                 wraplen += 2 + s->gzhead->extra_len;

  00087	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  0008a	83 c3 14	 add	 ebx, 20			; 00000014H
$LN15@deflateBou:

; 852  :             str = s->gzhead->name;

  0008d	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]

; 853  :             if (str != Z_NULL)

  00090	85 c9		 test	 ecx, ecx
  00092	74 0a		 je	 SHORT $LN5@deflateBou
$LL6@deflateBou:

; 854  :                 do {
; 855  :                     wraplen++;
; 856  :                 } while (*str++);

  00094	8a 01		 mov	 al, BYTE PTR [ecx]
  00096	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00099	43		 inc	 ebx
  0009a	84 c0		 test	 al, al
  0009c	75 f6		 jne	 SHORT $LL6@deflateBou
$LN5@deflateBou:

; 857  :             str = s->gzhead->comment;

  0009e	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]

; 858  :             if (str != Z_NULL)

  000a1	85 c9		 test	 ecx, ecx
  000a3	74 0a		 je	 SHORT $LN8@deflateBou
$LL9@deflateBou:

; 859  :                 do {
; 860  :                     wraplen++;
; 861  :                 } while (*str++);

  000a5	8a 01		 mov	 al, BYTE PTR [ecx]
  000a7	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000aa	43		 inc	 ebx
  000ab	84 c0		 test	 al, al
  000ad	75 f6		 jne	 SHORT $LL9@deflateBou
$LN8@deflateBou:

; 862  :             if (s->gzhead->hcrc)

  000af	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  000b3	8b 7d 0c	 mov	 edi, DWORD PTR _sourceLen$[ebp]
  000b6	74 1d		 je	 SHORT $LN2@deflateBou

; 863  :                 wraplen += 2;

  000b8	83 c3 02	 add	 ebx, 2

; 864  :         }
; 865  :         break;

  000bb	eb 18		 jmp	 SHORT $LN2@deflateBou
$LN12@deflateBou:

; 841  :         break;
; 842  :     case 1:                                 /* zlib wrapper */
; 843  :         wraplen = 6 + (s->strstart ? 4 : 0);

  000bd	33 db		 xor	 ebx, ebx
  000bf	39 5e 6c	 cmp	 DWORD PTR [esi+108], ebx
  000c2	0f 95 c3	 setne	 bl
  000c5	8d 1c 9d 06 00
	00 00		 lea	 ebx, DWORD PTR [ebx*4+6]

; 844  :         break;

  000cc	eb 07		 jmp	 SHORT $LN2@deflateBou
$LN11@deflateBou:

; 839  :     case 0:                                 /* raw deflate */
; 840  :         wraplen = 0;

  000ce	33 db		 xor	 ebx, ebx

; 845  : #ifdef GZIP
; 846  :     case 2:                                 /* gzip wrapper */
; 847  :         wraplen = 18;
; 848  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  000d0	eb 03		 jmp	 SHORT $LN2@deflateBou
$LN33@deflateBou:
  000d2	8b 7d 0c	 mov	 edi, DWORD PTR _sourceLen$[ebp]
$LN2@deflateBou:

; 869  :     }
; 870  : 
; 871  :     /* if not default parameters, return one of the conservative bounds */
; 872  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000d5	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000d8	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000db	75 28		 jne	 SHORT $LN32@deflateBou
  000dd	39 46 50	 cmp	 DWORD PTR [esi+80], eax
  000e0	75 23		 jne	 SHORT $LN32@deflateBou

; 874  :                wraplen;
; 875  : 
; 876  :     /* default settings: return tight bound for that case -- ~0.03% overhead
; 877  :        plus a small constant */
; 878  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  000e2	8b cf		 mov	 ecx, edi
  000e4	8b d7		 mov	 edx, edi
  000e6	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  000e9	8b c7		 mov	 eax, edi
  000eb	03 cb		 add	 ecx, ebx
  000ed	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000f0	c1 ea 19	 shr	 edx, 25			; 00000019H
  000f3	83 c0 07	 add	 eax, 7
  000f6	03 ca		 add	 ecx, edx
  000f8	03 c1		 add	 eax, ecx
  000fa	5e		 pop	 esi
  000fb	03 c7		 add	 eax, edi
  000fd	5f		 pop	 edi

; 879  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 880  : }

  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 08 00	 ret	 8
$LN32@deflateBou:

; 873  :         return (s->w_bits <= s->hash_bits && s->level ? fixedlen : storelen) +

  00105	3b 46 50	 cmp	 eax, DWORD PTR [esi+80]
  00108	77 0c		 ja	 SHORT $LN23@deflateBou
  0010a	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  00111	74 03		 je	 SHORT $LN23@deflateBou
  00113	8b 55 fc	 mov	 edx, DWORD PTR _fixedlen$1$[ebp]
$LN23@deflateBou:
  00116	5e		 pop	 esi
  00117	5f		 pop	 edi
  00118	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]

; 879  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 880  : }

  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_putShortMSB PROC					; COMDAT
; _s$ = ecx
; _b$ = edx

; 887  : local void putShortMSB(deflate_state *s, uInt b) {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 888  :     put_byte(s, (Byte)(b >> 8));

  00004	8b ca		 mov	 ecx, edx
  00006	c1 e9 08	 shr	 ecx, 8
  00009	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000c	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000f	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  00012	ff 47 14	 inc	 DWORD PTR [edi+20]
  00015	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 889  :     put_byte(s, (Byte)(b & 0xff));

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0001e	ff 47 14	 inc	 DWORD PTR [edi+20]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 890  : }

  00023	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_flush_pending PROC					; COMDAT
; _strm$ = ecx

; 898  : local void flush_pending(z_streamp strm) {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 899  :     unsigned len;
; 900  :     deflate_state *s = strm->state;

  00005	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 901  : 
; 902  :     _tr_flush_bits(s);

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 __tr_flush_bits

; 903  :     len = s->pending;
; 904  :     if (len > strm->avail_out) len = strm->avail_out;

  0000f	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]

; 905  :     if (len == 0) return;

  00012	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00015	0f 46 7e 14	 cmovbe	 edi, DWORD PTR [esi+20]
  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN4@flush_pend

; 906  : 
; 907  :     zmemcpy(strm->next_out, s->pending_out, len);

  0001d	57		 push	 edi
  0001e	ff 76 10	 push	 DWORD PTR [esi+16]
  00021	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00024	e8 00 00 00 00	 call	 _memcpy

; 908  :     strm->next_out  += len;

  00029	01 7b 0c	 add	 DWORD PTR [ebx+12], edi
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 909  :     s->pending_out  += len;

  0002f	01 7e 10	 add	 DWORD PTR [esi+16], edi

; 910  :     strm->total_out += len;

  00032	01 7b 14	 add	 DWORD PTR [ebx+20], edi

; 911  :     strm->avail_out -= len;

  00035	29 7b 10	 sub	 DWORD PTR [ebx+16], edi

; 912  :     s->pending      -= len;

  00038	29 7e 14	 sub	 DWORD PTR [esi+20], edi

; 913  :     if (s->pending == 0) {

  0003b	75 06		 jne	 SHORT $LN4@flush_pend

; 914  :         s->pending_out = s->pending_buf;

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN4@flush_pend:

; 915  :     }
; 916  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	c3		 ret	 0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1265 : int ZEXPORT deflateCopy(z_streamp dest, z_streamp source) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1266 : #ifdef MAXSEG_64K
; 1267 :     (void)dest;
; 1268 :     (void)source;
; 1269 :     return Z_STREAM_ERROR;
; 1270 : #else
; 1271 :     deflate_state *ds;
; 1272 :     deflate_state *ss;
; 1273 : 
; 1274 : 
; 1275 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00006	57		 push	 edi
  00007	e8 00 00 00 00	 call	 _deflateStateCheck
  0000c	85 c0		 test	 eax, eax
  0000e	0f 85 66 01 00
	00		 jne	 $LN3@deflateCop
  00014	8b 7d 08	 mov	 edi, DWORD PTR _dest$[ebp]
  00017	85 ff		 test	 edi, edi
  00019	0f 84 5b 01 00
	00		 je	 $LN3@deflateCop

; 1277 :     }
; 1278 : 
; 1279 :     ss = source->state;
; 1280 : 
; 1281 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0001f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00022	53		 push	 ebx
  00023	8b 59 1c	 mov	 ebx, DWORD PTR [ecx+28]
  00026	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  00029	56		 push	 esi
  0002a	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]

; 1282 : 
; 1283 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  0002e	68 c4 16 00 00	 push	 5828			; 000016c4H
  00033	6a 01		 push	 1
  00035	0f 11 47 10	 movups	 XMMWORD PTR [edi+16], xmm0
  00039	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  0003d	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0
  00041	f3 0f 7e 41 30	 movq	 xmm0, QWORD PTR [ecx+48]
  00046	66 0f d6 47 30	 movq	 QWORD PTR [edi+48], xmm0
  0004b	ff 77 28	 push	 DWORD PTR [edi+40]
  0004e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00051	ff d0		 call	 eax
  00053	8b f0		 mov	 esi, eax
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1284 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00058	85 f6		 test	 esi, esi
  0005a	0f 84 0e 01 00
	00		 je	 $LN17@deflateCop

; 1285 :     dest->state = (struct internal_state FAR *) ds;
; 1286 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00060	68 c4 16 00 00	 push	 5828			; 000016c4H
  00065	53		 push	 ebx
  00066	56		 push	 esi
  00067	89 77 1c	 mov	 DWORD PTR [edi+28], esi
  0006a	e8 00 00 00 00	 call	 _memcpy

; 1287 :     ds->strm = dest;
; 1288 : 
; 1289 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  0006f	6a 02		 push	 2
  00071	ff 76 2c	 push	 DWORD PTR [esi+44]
  00074	89 3e		 mov	 DWORD PTR [esi], edi
  00076	ff 77 28	 push	 DWORD PTR [edi+40]
  00079	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0007c	ff d0		 call	 eax

; 1290 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  0007e	6a 02		 push	 2
  00080	ff 76 2c	 push	 DWORD PTR [esi+44]
  00083	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00086	ff 77 28	 push	 DWORD PTR [edi+40]
  00089	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0008c	ff d0		 call	 eax

; 1291 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  0008e	6a 02		 push	 2
  00090	ff 76 4c	 push	 DWORD PTR [esi+76]
  00093	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00096	ff 77 28	 push	 DWORD PTR [edi+40]
  00099	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0009c	ff d0		 call	 eax

; 1292 :     ds->pending_buf = (uchf *) ZALLOC(dest, ds->lit_bufsize, 4);

  0009e	6a 04		 push	 4
  000a0	ff b6 9c 16 00
	00		 push	 DWORD PTR [esi+5788]
  000a6	89 46 44	 mov	 DWORD PTR [esi+68], eax
  000a9	ff 77 28	 push	 DWORD PTR [edi+40]
  000ac	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000af	ff d0		 call	 eax

; 1293 : 
; 1294 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000b1	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000b4	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000ba	85 c9		 test	 ecx, ecx
  000bc	0f 84 a6 00 00
	00		 je	 $LN6@deflateCop
  000c2	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  000c6	0f 84 9c 00 00
	00		 je	 $LN6@deflateCop
  000cc	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  000d0	0f 84 92 00 00
	00		 je	 $LN6@deflateCop
  000d6	85 c0		 test	 eax, eax
  000d8	0f 84 8a 00 00
	00		 je	 $LN6@deflateCop

; 1298 :     }
; 1299 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1300 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  000de	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000e1	03 c0		 add	 eax, eax
  000e3	50		 push	 eax
  000e4	ff 73 38	 push	 DWORD PTR [ebx+56]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy

; 1301 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  000ed	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	ff 73 40	 push	 DWORD PTR [ebx+64]
  000f6	ff 76 40	 push	 DWORD PTR [esi+64]
  000f9	e8 00 00 00 00	 call	 _memcpy

; 1302 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  000fe	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00101	03 c0		 add	 eax, eax
  00103	50		 push	 eax
  00104	ff 73 44	 push	 DWORD PTR [ebx+68]
  00107	ff 76 44	 push	 DWORD PTR [esi+68]
  0010a	e8 00 00 00 00	 call	 _memcpy

; 1303 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  0010f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00112	ff 73 08	 push	 DWORD PTR [ebx+8]
  00115	ff 76 08	 push	 DWORD PTR [esi+8]
  00118	e8 00 00 00 00	 call	 _memcpy

; 1304 : 
; 1305 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  0011d	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00120	83 c4 30	 add	 esp, 48			; 00000030H
  00123	2b 43 08	 sub	 eax, DWORD PTR [ebx+8]
  00126	03 46 08	 add	 eax, DWORD PTR [esi+8]
  00129	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 1306 :     ds->sym_buf = ds->pending_buf + ds->lit_bufsize;

  0012c	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00132	03 46 08	 add	 eax, DWORD PTR [esi+8]
  00135	89 86 98 16 00
	00		 mov	 DWORD PTR [esi+5784], eax

; 1307 : 
; 1308 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  0013b	8d 86 94 00 00
	00		 lea	 eax, DWORD PTR [esi+148]
  00141	89 86 18 0b 00
	00		 mov	 DWORD PTR [esi+2840], eax

; 1309 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  00147	8d 86 88 09 00
	00		 lea	 eax, DWORD PTR [esi+2440]
  0014d	89 86 24 0b 00
	00		 mov	 DWORD PTR [esi+2852], eax

; 1310 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  00153	8d 86 7c 0a 00
	00		 lea	 eax, DWORD PTR [esi+2684]
  00159	89 86 30 0b 00
	00		 mov	 DWORD PTR [esi+2864], eax

; 1311 : 
; 1312 :     return Z_OK;

  0015f	33 c0		 xor	 eax, eax
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	5f		 pop	 edi

; 1313 : #endif /* MAXSEG_64K */
; 1314 : }

  00164	5d		 pop	 ebp
  00165	c2 08 00	 ret	 8
$LN6@deflateCop:

; 1295 :         ds->pending_buf == Z_NULL) {
; 1296 :         deflateEnd (dest);

  00168	57		 push	 edi
  00169	e8 00 00 00 00	 call	 _deflateEnd@4
$LN17@deflateCop:

; 1297 :         return Z_MEM_ERROR;

  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00175	5f		 pop	 edi

; 1313 : #endif /* MAXSEG_64K */
; 1314 : }

  00176	5d		 pop	 ebp
  00177	c2 08 00	 ret	 8
$LN3@deflateCop:

; 1276 :         return Z_STREAM_ERROR;

  0017a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0017f	5f		 pop	 edi

; 1313 : #endif /* MAXSEG_64K */
; 1314 : }

  00180	5d		 pop	 ebp
  00181	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _longest_match
_TEXT	SEGMENT
tv487 = -44						; size = 4
_prev$1$ = -40						; size = 4
_wmask$1$ = -36						; size = 4
tv496 = -32						; size = 4
_best_len$1$ = -28					; size = 4
_limit$1$ = -24						; size = 4
_s$1$ = -20						; size = 4
_scan$3$ = -16						; size = 4
_nice_match$2$ = -12					; size = 4
_chain_length$1$ = -8					; size = 4
_scan_end$1$ = -2					; size = 1
_scan_end1$1$ = -1					; size = 1
_longest_match PROC					; COMDAT
; _s$ = ecx
; _cur_match$ = edx

; 1326 : local uInt longest_match(deflate_state *s, IPos cur_match) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b da		 mov	 ebx, edx
  0000d	89 7d ec	 mov	 DWORD PTR _s$1$[ebp], edi

; 1327 :     unsigned chain_length = s->max_chain_length;/* max hash chain length */
; 1328 :     register Bytef *scan = s->window + s->strstart; /* current string */

  00010	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00013	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]

; 1329 :     register Bytef *match;                      /* matched string */
; 1330 :     register int len;                           /* length of current match */
; 1331 :     int best_len = (int)s->prev_length;         /* best match length so far */

  00016	8b 57 78	 mov	 edx, DWORD PTR [edi+120]
  00019	03 c1		 add	 eax, ecx
  0001b	8b 77 7c	 mov	 esi, DWORD PTR [edi+124]
  0001e	89 4d e0	 mov	 DWORD PTR tv496[ebp], ecx

; 1332 :     int nice_match = s->nice_match;             /* stop if match long enough */
; 1333 :     IPos limit = s->strstart > (IPos)MAX_DIST(s) ?

  00021	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00024	89 45 f0	 mov	 DWORD PTR _scan$3$[ebp], eax
  00027	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  0002d	89 45 f4	 mov	 DWORD PTR _nice_match$2$[ebp], eax
  00030	8d 81 fa fe ff
	ff		 lea	 eax, DWORD PTR [ecx-262]
  00036	89 55 e4	 mov	 DWORD PTR _best_len$1$[ebp], edx
  00039	39 47 6c	 cmp	 DWORD PTR [edi+108], eax
  0003c	76 0f		 jbe	 SHORT $LN18@longest_ma
  0003e	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00041	2b c1		 sub	 eax, ecx
  00043	05 06 01 00 00	 add	 eax, 262		; 00000106H
  00048	89 45 e8	 mov	 DWORD PTR _limit$1$[ebp], eax
  0004b	eb 07		 jmp	 SHORT $LN19@longest_ma
$LN18@longest_ma:
  0004d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _limit$1$[ebp], 0
$LN19@longest_ma:

; 1334 :         s->strstart - (IPos)MAX_DIST(s) : NIL;
; 1335 :     /* Stop when cur_match becomes <= limit. To simplify the code,
; 1336 :      * we prevent matches with the string of window index 0.
; 1337 :      */
; 1338 :     Posf *prev = s->prev;
; 1339 :     uInt wmask = s->w_mask;
; 1340 : 
; 1341 : #ifdef UNALIGNED_OK
; 1342 :     /* Compare two bytes at a time. Note: this is not always beneficial.
; 1343 :      * Try with and without -DUNALIGNED_OK to check.
; 1344 :      */
; 1345 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
; 1346 :     register ush scan_start = *(ushf*)scan;
; 1347 :     register ush scan_end   = *(ushf*)(scan + best_len - 1);
; 1348 : #else
; 1349 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;

  00054	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
  00057	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0005a	89 45 d8	 mov	 DWORD PTR _prev$1$[ebp], eax
  0005d	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00060	89 45 dc	 mov	 DWORD PTR _wmask$1$[ebp], eax
  00063	8d b9 02 01 00
	00		 lea	 edi, DWORD PTR [ecx+258]

; 1350 :     register Byte scan_end1  = scan[best_len - 1];

  00069	8a 44 0a ff	 mov	 al, BYTE PTR [edx+ecx-1]
  0006d	88 45 ff	 mov	 BYTE PTR _scan_end1$1$[ebp], al

; 1351 :     register Byte scan_end   = scan[best_len];

  00070	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  00073	88 45 fe	 mov	 BYTE PTR _scan_end$1$[ebp], al

; 1352 : #endif
; 1353 : 
; 1354 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1355 :      * It is easy to get rid of this optimization if necessary.
; 1356 :      */
; 1357 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1358 : 
; 1359 :     /* Do not waste too much time if we already have a good match: */
; 1360 :     if (s->prev_length >= s->good_match) {
; 1361 :         chain_length >>= 2;
; 1362 :     }
; 1363 :     /* Do not look for matches beyond the end of the input. This is necessary
; 1364 :      * to make deflate deterministic.
; 1365 :      */
; 1366 :     if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;

  00076	8b c6		 mov	 eax, esi
  00078	c1 e8 02	 shr	 eax, 2
  0007b	89 45 f8	 mov	 DWORD PTR _chain_length$1$[ebp], eax
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _s$1$[ebp]
  00081	3b 90 8c 00 00
	00		 cmp	 edx, DWORD PTR [eax+140]
  00087	8b 55 f8	 mov	 edx, DWORD PTR _chain_length$1$[ebp]
  0008a	8b 40 74	 mov	 eax, DWORD PTR [eax+116]
  0008d	0f 42 d6	 cmovb	 edx, esi
  00090	8b 75 e4	 mov	 esi, DWORD PTR _best_len$1$[ebp]
  00093	89 55 f8	 mov	 DWORD PTR _chain_length$1$[ebp], edx
  00096	8b 55 f4	 mov	 edx, DWORD PTR _nice_match$2$[ebp]
  00099	3b d0		 cmp	 edx, eax
  0009b	89 45 d4	 mov	 DWORD PTR tv487[ebp], eax
  0009e	0f 47 d0	 cmova	 edx, eax
  000a1	89 55 f4	 mov	 DWORD PTR _nice_match$2$[ebp], edx
$LL4@longest_ma:

; 1367 : 
; 1368 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1369 :            "need lookahead");
; 1370 : 
; 1371 :     do {
; 1372 :         Assert(cur_match < s->strstart, "no future");
; 1373 :         match = s->window + cur_match;

  000a4	8b 55 e0	 mov	 edx, DWORD PTR tv496[ebp]

; 1374 : 
; 1375 :         /* Skip to next match if the match length cannot increase
; 1376 :          * or if the match length is less than 2.  Note that the checks below
; 1377 :          * for insufficient lookahead only occur occasionally for performance
; 1378 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1379 :          * conditional jumps will be made that depend on those values.
; 1380 :          * However the length of the match is limited to the lookahead, so
; 1381 :          * the output of deflate is not affected by the uninitialized values.
; 1382 :          */
; 1383 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1384 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1385 :          * UNALIGNED_OK if your compiler uses a different size.
; 1386 :          */
; 1387 :         if (*(ushf*)(match + best_len - 1) != scan_end ||
; 1388 :             *(ushf*)match != scan_start) continue;
; 1389 : 
; 1390 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1391 :          * always equal when the other bytes match, given that the hash keys
; 1392 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1393 :          * strstart + 3, + 5, up to strstart + 257. We check for insufficient
; 1394 :          * lookahead only every 4th comparison; the 128th check will be made
; 1395 :          * at strstart + 257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1396 :          * necessary to put more guard bytes at the end of the window, or
; 1397 :          * to check more often for insufficient lookahead.
; 1398 :          */
; 1399 :         Assert(scan[2] == match[2], "scan[2]?");
; 1400 :         scan++, match++;
; 1401 :         do {
; 1402 :         } while (*(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1403 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1404 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1405 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1406 :                  scan < strend);
; 1407 :         /* The funny "do {}" generates better code on most compilers */
; 1408 : 
; 1409 :         /* Here, scan <= window + strstart + 257 */
; 1410 :         Assert(scan <= s->window + (unsigned)(s->window_size - 1),
; 1411 :                "wild scan");
; 1412 :         if (*scan == *match) scan++;
; 1413 : 
; 1414 :         len = (MAX_MATCH - 1) - (int)(strend - scan);
; 1415 :         scan = strend - (MAX_MATCH-1);
; 1416 : 
; 1417 : #else /* UNALIGNED_OK */
; 1418 : 
; 1419 :         if (match[best_len]     != scan_end  ||
; 1420 :             match[best_len - 1] != scan_end1 ||
; 1421 :             *match              != *scan     ||

  000a7	8a 45 fe	 mov	 al, BYTE PTR _scan_end$1$[ebp]
  000aa	03 d3		 add	 edx, ebx
  000ac	38 04 32	 cmp	 BYTE PTR [edx+esi], al
  000af	0f 85 a6 00 00
	00		 jne	 $LN2@longest_ma
  000b5	8a 45 ff	 mov	 al, BYTE PTR _scan_end1$1$[ebp]
  000b8	38 44 32 ff	 cmp	 BYTE PTR [edx+esi-1], al
  000bc	0f 85 99 00 00
	00		 jne	 $LN2@longest_ma
  000c2	8a 02		 mov	 al, BYTE PTR [edx]
  000c4	3a 01		 cmp	 al, BYTE PTR [ecx]
  000c6	0f 85 8f 00 00
	00		 jne	 $LN2@longest_ma
  000cc	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  000cf	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  000d2	0f 85 83 00 00
	00		 jne	 $LN2@longest_ma

; 1422 :             *++match            != scan[1])      continue;
; 1423 : 
; 1424 :         /* The check at best_len - 1 can be removed because it will be made
; 1425 :          * again later. (This heuristic is not always a win.)
; 1426 :          * It is not necessary to compare scan[2] and match[2] since they
; 1427 :          * are always equal when the other bytes match, given that
; 1428 :          * the hash keys are equal and that HASH_BITS >= 8.
; 1429 :          */
; 1430 :         scan += 2, match++;

  000d8	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  000db	83 c2 02	 add	 edx, 2
  000de	66 90		 npad	 2
$LL7@longest_ma:

; 1431 :         Assert(*scan == *match, "match[2]?");
; 1432 : 
; 1433 :         /* We check for insufficient lookahead only every 8th comparison;
; 1434 :          * the 256th check will be made at strstart + 258.
; 1435 :          */
; 1436 :         do {
; 1437 :         } while (*++scan == *++match && *++scan == *++match &&
; 1438 :                  *++scan == *++match && *++scan == *++match &&
; 1439 :                  *++scan == *++match && *++scan == *++match &&
; 1440 :                  *++scan == *++match && *++scan == *++match &&

  000e0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000e3	40		 inc	 eax
  000e4	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  000e7	75 45		 jne	 SHORT $LN12@longest_ma
  000e9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000ec	40		 inc	 eax
  000ed	3a 4a 02	 cmp	 cl, BYTE PTR [edx+2]
  000f0	75 3c		 jne	 SHORT $LN12@longest_ma
  000f2	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f5	40		 inc	 eax
  000f6	3a 4a 03	 cmp	 cl, BYTE PTR [edx+3]
  000f9	75 33		 jne	 SHORT $LN12@longest_ma
  000fb	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000fe	40		 inc	 eax
  000ff	3a 4a 04	 cmp	 cl, BYTE PTR [edx+4]
  00102	75 2a		 jne	 SHORT $LN12@longest_ma
  00104	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00107	40		 inc	 eax
  00108	3a 4a 05	 cmp	 cl, BYTE PTR [edx+5]
  0010b	75 21		 jne	 SHORT $LN12@longest_ma
  0010d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00110	40		 inc	 eax
  00111	3a 4a 06	 cmp	 cl, BYTE PTR [edx+6]
  00114	75 18		 jne	 SHORT $LN12@longest_ma
  00116	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00119	40		 inc	 eax
  0011a	3a 4a 07	 cmp	 cl, BYTE PTR [edx+7]
  0011d	75 0f		 jne	 SHORT $LN12@longest_ma
  0011f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00122	40		 inc	 eax
  00123	83 c2 08	 add	 edx, 8
  00126	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00128	75 04		 jne	 SHORT $LN12@longest_ma
  0012a	3b c7		 cmp	 eax, edi
  0012c	72 b2		 jb	 SHORT $LL7@longest_ma
$LN12@longest_ma:

; 1441 :                  scan < strend);
; 1442 : 
; 1443 :         Assert(scan <= s->window + (unsigned)(s->window_size - 1),
; 1444 :                "wild scan");
; 1445 : 
; 1446 :         len = MAX_MATCH - (int)(strend - scan);

  0012e	2b c7		 sub	 eax, edi
  00130	05 02 01 00 00	 add	 eax, 258		; 00000102H

; 1447 :         scan = strend - MAX_MATCH;
; 1448 : 
; 1449 : #endif /* UNALIGNED_OK */
; 1450 : 
; 1451 :         if (len > best_len) {

  00135	3b c6		 cmp	 eax, esi
  00137	7e 1f		 jle	 SHORT $LN29@longest_ma

; 1452 :             s->match_start = cur_match;
; 1453 :             best_len = len;

  00139	8b f0		 mov	 esi, eax
  0013b	8b 4d ec	 mov	 ecx, DWORD PTR _s$1$[ebp]
  0013e	89 59 70	 mov	 DWORD PTR [ecx+112], ebx

; 1454 :             if (len >= nice_match) break;

  00141	3b 45 f4	 cmp	 eax, DWORD PTR _nice_match$2$[ebp]
  00144	7d 30		 jge	 SHORT $LN3@longest_ma

; 1455 : #ifdef UNALIGNED_OK
; 1456 :             scan_end = *(ushf*)(scan + best_len - 1);
; 1457 : #else
; 1458 :             scan_end1  = scan[best_len - 1];

  00146	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
  00149	8a 54 08 ff	 mov	 dl, BYTE PTR [eax+ecx-1]

; 1459 :             scan_end   = scan[best_len];

  0014d	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  00150	88 55 ff	 mov	 BYTE PTR _scan_end1$1$[ebp], dl
  00153	88 45 fe	 mov	 BYTE PTR _scan_end$1$[ebp], al
  00156	eb 03		 jmp	 SHORT $LN2@longest_ma
$LN29@longest_ma:

; 1447 :         scan = strend - MAX_MATCH;
; 1448 : 
; 1449 : #endif /* UNALIGNED_OK */
; 1450 : 
; 1451 :         if (len > best_len) {

  00158	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
$LN2@longest_ma:

; 1460 : #endif
; 1461 :         }
; 1462 :     } while ((cur_match = prev[cur_match & wmask]) > limit
; 1463 :              && --chain_length != 0);

  0015b	8b 45 dc	 mov	 eax, DWORD PTR _wmask$1$[ebp]
  0015e	8b 55 d8	 mov	 edx, DWORD PTR _prev$1$[ebp]
  00161	23 c3		 and	 eax, ebx
  00163	0f b7 1c 42	 movzx	 ebx, WORD PTR [edx+eax*2]
  00167	3b 5d e8	 cmp	 ebx, DWORD PTR _limit$1$[ebp]
  0016a	76 0a		 jbe	 SHORT $LN3@longest_ma
  0016c	83 6d f8 01	 sub	 DWORD PTR _chain_length$1$[ebp], 1
  00170	0f 85 2e ff ff
	ff		 jne	 $LL4@longest_ma
$LN3@longest_ma:

; 1464 : 
; 1465 :     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;

  00176	8b 45 d4	 mov	 eax, DWORD PTR tv487[ebp]
  00179	3b f0		 cmp	 esi, eax
  0017b	5f		 pop	 edi
  0017c	0f 46 c6	 cmovbe	 eax, esi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx

; 1466 :     return s->lookahead;
; 1467 : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
_longest_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv1340 = -12						; size = 4
_have$2$ = -12						; size = 4
_len$2$ = -8						; size = 4
_used$2$ = -4						; size = 4
tv1352 = 8						; size = 4
tv1253 = 8						; size = 4
_left$2$ = 8						; size = 4
_len$4$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1597 : local block_state deflate_stored(deflate_state *s, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1598 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1599 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1600 :      * large input and output buffers, the stored block size will be larger.
; 1601 :      */
; 1602 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);
; 1603 : 
; 1604 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1605 :      * possible. If flushing, copy the remaining available input to next_out as
; 1606 :      * stored blocks, if there is enough space.
; 1607 :      */
; 1608 :     unsigned len, left, have, last = 0;
; 1609 :     unsigned used = s->strm->avail_in;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000e	57		 push	 edi
  0000f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00012	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00015	83 c0 fb	 add	 eax, -5			; fffffffbH
  00018	3b c1		 cmp	 eax, ecx
  0001a	0f 46 c8	 cmovbe	 ecx, eax
  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	89 4d f4	 mov	 DWORD PTR tv1340[ebp], ecx
  00022	33 ff		 xor	 edi, edi
  00024	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00027	89 45 fc	 mov	 DWORD PTR _used$2$[ebp], eax
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@deflate_st:

; 1610 :     do {
; 1611 :         /* Set len to the maximum size block that we can copy directly with the
; 1612 :          * available input data and output space. Set left to how much of that
; 1613 :          * would be copied from what's left in the window.
; 1614 :          */
; 1615 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1616 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00030	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1617 :         if (s->strm->avail_out < have)          /* need room for header */

  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00038	83 c0 2a	 add	 eax, 42			; 0000002aH
  0003b	c1 f8 03	 sar	 eax, 3
  0003e	c7 45 f8 ff ff
	00 00		 mov	 DWORD PTR _len$2$[ebp], 65535 ; 0000ffffH
  00045	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  00048	3b d8		 cmp	 ebx, eax
  0004a	0f 82 09 01 00
	00		 jb	 $LN3@deflate_st

; 1618 :             break;
; 1619 :             /* maximum stored block length that will fit in avail_out: */
; 1620 :         have = s->strm->avail_out - have;
; 1621 :         left = s->strstart - s->block_start;    /* bytes left in window */

  00050	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00053	2b d8		 sub	 ebx, eax
  00055	2b 4e 5c	 sub	 ecx, DWORD PTR [esi+92]

; 1622 :         if (len > (ulg)left + s->strm->avail_in)

  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	89 4d 08	 mov	 DWORD PTR _left$2$[ebp], ecx
  0005d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00060	03 c1		 add	 eax, ecx
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _len$2$[ebp]
  00065	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0006a	0f 42 c8	 cmovb	 ecx, eax

; 1623 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1624 :         if (len > have)
; 1625 :             len = have;                         /* limit len to the output */
; 1626 : 
; 1627 :         /* If the stored block would be less than min_block in length, or if
; 1628 :          * unable to copy all of the available input when flushing, then try
; 1629 :          * copying to the window and the pending buffer instead. Also don't
; 1630 :          * write an empty block when flushing -- deflate() does that.
; 1631 :          */
; 1632 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  0006d	3b cb		 cmp	 ecx, ebx
  0006f	0f 46 d9	 cmovbe	 ebx, ecx
  00072	3b 5d f4	 cmp	 ebx, DWORD PTR tv1340[ebp]
  00075	73 1d		 jae	 SHORT $LN51@deflate_st
  00077	85 db		 test	 ebx, ebx
  00079	75 09		 jne	 SHORT $LN10@deflate_st
  0007b	83 fa 04	 cmp	 edx, 4
  0007e	0f 85 d5 00 00
	00		 jne	 $LN3@deflate_st
$LN10@deflate_st:
  00084	85 d2		 test	 edx, edx
  00086	0f 84 cd 00 00
	00		 je	 $LN3@deflate_st
  0008c	3b d8		 cmp	 ebx, eax
  0008e	0f 85 c5 00 00
	00		 jne	 $LN3@deflate_st
$LN51@deflate_st:

; 1633 :                                 flush == Z_NO_FLUSH ||
; 1634 :                                 len != left + s->strm->avail_in))
; 1635 :             break;
; 1636 : 
; 1637 :         /* Make a dummy stored block in pending to get the header bytes,
; 1638 :          * including any pending bits. This also updates the debugging counts.
; 1639 :          */
; 1640 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  00094	83 fa 04	 cmp	 edx, 4
  00097	75 09		 jne	 SHORT $LN52@deflate_st
  00099	3b d8		 cmp	 ebx, eax
  0009b	75 05		 jne	 SHORT $LN52@deflate_st
  0009d	8d 7a fd	 lea	 edi, DWORD PTR [edx-3]
  000a0	eb 02		 jmp	 SHORT $LN36@deflate_st
$LN52@deflate_st:
  000a2	33 ff		 xor	 edi, edi
$LN36@deflate_st:

; 1641 :         _tr_stored_block(s, (char *)0, 0L, last);

  000a4	57		 push	 edi
  000a5	6a 00		 push	 0
  000a7	33 d2		 xor	 edx, edx
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 __tr_stored_block

; 1642 : 
; 1643 :         /* Replace the lengths in the dummy stored block with len. */
; 1644 :         s->pending_buf[s->pending - 4] = len;

  000b0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1645 :         s->pending_buf[s->pending - 3] = len >> 8;

  000b3	8b d3		 mov	 edx, ebx
  000b5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b8	83 c4 08	 add	 esp, 8
  000bb	c1 ea 08	 shr	 edx, 8
  000be	88 5c 01 fc	 mov	 BYTE PTR [ecx+eax-4], bl
  000c2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000c5	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000c8	88 54 01 fd	 mov	 BYTE PTR [ecx+eax-3], dl

; 1646 :         s->pending_buf[s->pending - 2] = ~len;

  000cc	8a d3		 mov	 dl, bl
  000ce	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d1	f6 d2		 not	 dl
  000d3	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000d6	88 54 01 fe	 mov	 BYTE PTR [ecx+eax-2], dl

; 1647 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  000da	8b d3		 mov	 edx, ebx
  000dc	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000df	f7 d2		 not	 edx
  000e1	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000e4	c1 ea 08	 shr	 edx, 8
  000e7	88 54 01 ff	 mov	 BYTE PTR [ecx+eax-1], dl

; 1648 : 
; 1649 :         /* Write the stored block header bytes. */
; 1650 :         flush_pending(s->strm);

  000eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ed	e8 00 00 00 00	 call	 _flush_pending

; 1651 : 
; 1652 : #ifdef ZLIB_DEBUG
; 1653 :         /* Update debugging counts for the data about to be copied. */
; 1654 :         s->compressed_len += len << 3;
; 1655 :         s->bits_sent += len << 3;
; 1656 : #endif
; 1657 : 
; 1658 :         /* Copy uncompressed bytes from the window to next_out. */
; 1659 :         if (left) {

  000f2	8b 45 08	 mov	 eax, DWORD PTR _left$2$[ebp]
  000f5	85 c0		 test	 eax, eax
  000f7	74 34		 je	 SHORT $LN50@deflate_st

; 1660 :             if (left > len)

  000f9	3b c3		 cmp	 eax, ebx
  000fb	0f 47 c3	 cmova	 eax, ebx

; 1661 :                 left = len;
; 1662 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  000fe	50		 push	 eax
  000ff	89 45 08	 mov	 DWORD PTR _left$2$[ebp], eax
  00102	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00105	03 46 5c	 add	 eax, DWORD PTR [esi+92]
  00108	50		 push	 eax
  00109	8b 06		 mov	 eax, DWORD PTR [esi]
  0010b	ff 70 0c	 push	 DWORD PTR [eax+12]
  0010e	e8 00 00 00 00	 call	 _memcpy

; 1663 :             s->strm->next_out += left;

  00113	8b 06		 mov	 eax, DWORD PTR [esi]
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _left$2$[ebp]
  0011b	01 48 0c	 add	 DWORD PTR [eax+12], ecx

; 1664 :             s->strm->avail_out -= left;

  0011e	8b 06		 mov	 eax, DWORD PTR [esi]
  00120	29 48 10	 sub	 DWORD PTR [eax+16], ecx

; 1665 :             s->strm->total_out += left;

  00123	8b 06		 mov	 eax, DWORD PTR [esi]
  00125	01 48 14	 add	 DWORD PTR [eax+20], ecx

; 1666 :             s->block_start += left;

  00128	01 4e 5c	 add	 DWORD PTR [esi+92], ecx

; 1667 :             len -= left;

  0012b	2b d9		 sub	 ebx, ecx
$LN50@deflate_st:

; 1668 :         }
; 1669 : 
; 1670 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1671 :          * the check value.
; 1672 :          */
; 1673 :         if (len) {

  0012d	85 db		 test	 ebx, ebx
  0012f	74 1d		 je	 SHORT $LN2@deflate_st

; 1674 :             read_buf(s->strm, s->strm->next_out, len);

  00131	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00133	53		 push	 ebx
  00134	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00137	e8 00 00 00 00	 call	 _read_buf

; 1675 :             s->strm->next_out += len;

  0013c	8b 06		 mov	 eax, DWORD PTR [esi]
  0013e	83 c4 04	 add	 esp, 4
  00141	01 58 0c	 add	 DWORD PTR [eax+12], ebx

; 1676 :             s->strm->avail_out -= len;

  00144	8b 06		 mov	 eax, DWORD PTR [esi]
  00146	29 58 10	 sub	 DWORD PTR [eax+16], ebx

; 1677 :             s->strm->total_out += len;

  00149	8b 06		 mov	 eax, DWORD PTR [esi]
  0014b	01 58 14	 add	 DWORD PTR [eax+20], ebx
$LN2@deflate_st:

; 1678 :         }
; 1679 :     } while (last == 0);

  0014e	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00151	85 ff		 test	 edi, edi
  00153	0f 84 d7 fe ff
	ff		 je	 $LL4@deflate_st
$LN3@deflate_st:

; 1680 : 
; 1681 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1682 :      * data, or append all of the copied data to the existing window if less
; 1683 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1684 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1685 :      * a non-zero compression level.
; 1686 :      */
; 1687 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00159	8b 06		 mov	 eax, DWORD PTR [esi]
  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _used$2$[ebp]
  0015e	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  00161	89 4d fc	 mov	 DWORD PTR _used$2$[ebp], ecx

; 1688 :     if (used) {

  00164	0f 84 b1 00 00
	00		 je	 $LN57@deflate_st

; 1689 :         /* If any input was used, then no unused input remains in the window,
; 1690 :          * therefore s->block_start == s->strstart.
; 1691 :          */
; 1692 :         if (used >= s->w_size) {    /* supplant the previous history */

  0016a	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0016d	3b cb		 cmp	 ecx, ebx
  0016f	72 29		 jb	 SHORT $LN15@deflate_st

; 1693 :             s->matches = 2;         /* clear hash */

  00171	c7 86 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+5808], 2

; 1694 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  0017b	8b 00		 mov	 eax, DWORD PTR [eax]
  0017d	53		 push	 ebx
  0017e	2b c3		 sub	 eax, ebx
  00180	50		 push	 eax
  00181	ff 76 38	 push	 DWORD PTR [esi+56]
  00184	e8 00 00 00 00	 call	 _memcpy

; 1695 :             s->strstart = s->w_size;

  00189	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018f	89 56 6c	 mov	 DWORD PTR [esi+108], edx

; 1696 :             s->insert = s->strstart;

  00192	89 96 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], edx

; 1697 :         }

  00198	eb 7c		 jmp	 SHORT $LN95@deflate_st
$LN15@deflate_st:

; 1698 :         else {
; 1699 :             if (s->window_size - s->strstart <= used) {

  0019a	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0019d	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  001a0	2b c2		 sub	 eax, edx
  001a2	3b c1		 cmp	 eax, ecx
  001a4	77 39		 ja	 SHORT $LN19@deflate_st

; 1700 :                 /* Slide the window down. */
; 1701 :                 s->strstart -= s->w_size;
; 1702 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  001a6	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001a9	2b d3		 sub	 edx, ebx
  001ab	52		 push	 edx
  001ac	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  001af	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  001b2	50		 push	 eax
  001b3	51		 push	 ecx
  001b4	e8 00 00 00 00	 call	 _memcpy

; 1703 :                 if (s->matches < 2)

  001b9	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  001bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c2	83 f8 02	 cmp	 eax, 2
  001c5	73 07		 jae	 SHORT $LN18@deflate_st

; 1704 :                     s->matches++;   /* add a pending slide_hash() */

  001c7	40		 inc	 eax
  001c8	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN18@deflate_st:

; 1705 :                 if (s->insert > s->strstart)

  001ce	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  001d1	39 96 b4 16 00
	00		 cmp	 DWORD PTR [esi+5812], edx
  001d7	76 06		 jbe	 SHORT $LN19@deflate_st

; 1706 :                     s->insert = s->strstart;

  001d9	89 96 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], edx
$LN19@deflate_st:

; 1707 :             }
; 1708 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  001df	8b 06		 mov	 eax, DWORD PTR [esi]
  001e1	8b 5d fc	 mov	 ebx, DWORD PTR _used$2$[ebp]
  001e4	53		 push	 ebx
  001e5	8b 00		 mov	 eax, DWORD PTR [eax]
  001e7	2b c3		 sub	 eax, ebx
  001e9	50		 push	 eax
  001ea	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001ed	03 c2		 add	 eax, edx
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 _memcpy

; 1709 :             s->strstart += used;
; 1710 :             s->insert += MIN(used, s->w_size - s->insert);

  001f5	8b 86 b4 16 00
	00		 mov	 eax, DWORD PTR [esi+5812]
  001fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fe	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00201	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
  00204	2b c8		 sub	 ecx, eax
  00206	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00209	3b d9		 cmp	 ebx, ecx
  0020b	0f 46 cb	 cmovbe	 ecx, ebx
  0020e	03 c8		 add	 ecx, eax
  00210	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
$LN95@deflate_st:

; 1711 :         }
; 1712 :         s->block_start = s->strstart;

  00216	8d 46 5c	 lea	 eax, DWORD PTR [esi+92]
  00219	89 10		 mov	 DWORD PTR [eax], edx
$LN57@deflate_st:

; 1713 :     }
; 1714 :     if (s->high_water < s->strstart)

  0021b	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0021e	39 96 c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], edx
  00224	73 06		 jae	 SHORT $LN20@deflate_st

; 1715 :         s->high_water = s->strstart;

  00226	89 96 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], edx
$LN20@deflate_st:

; 1716 : 
; 1717 :     /* If the last block was written to next_out, then done. */
; 1718 :     if (last)

  0022c	85 ff		 test	 edi, edi
  0022e	74 0c		 je	 SHORT $LN21@deflate_st

; 1772 : }

  00230	5f		 pop	 edi
  00231	5e		 pop	 esi
  00232	b8 03 00 00 00	 mov	 eax, 3
  00237	5b		 pop	 ebx
  00238	8b e5		 mov	 esp, ebp
  0023a	5d		 pop	 ebp
  0023b	c3		 ret	 0
$LN21@deflate_st:

; 1719 :         return finish_done;
; 1720 : 
; 1721 :     /* If flushing and all input has been consumed, then done. */
; 1722 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1723 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  0023c	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  0023f	85 c0		 test	 eax, eax
  00241	74 1e		 je	 SHORT $LN22@deflate_st
  00243	83 f8 04	 cmp	 eax, 4
  00246	74 19		 je	 SHORT $LN22@deflate_st
  00248	8b 06		 mov	 eax, DWORD PTR [esi]
  0024a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0024e	75 11		 jne	 SHORT $LN22@deflate_st
  00250	3b 56 5c	 cmp	 edx, DWORD PTR [esi+92]
  00253	75 0c		 jne	 SHORT $LN22@deflate_st

; 1772 : }

  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	b8 01 00 00 00	 mov	 eax, 1
  0025c	5b		 pop	 ebx
  0025d	8b e5		 mov	 esp, ebp
  0025f	5d		 pop	 ebp
  00260	c3		 ret	 0
$LN22@deflate_st:

; 1724 :         return block_done;
; 1725 : 
; 1726 :     /* Fill the window with any remaining input. */
; 1727 :     have = s->window_size - s->strstart;
; 1728 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00261	8b 06		 mov	 eax, DWORD PTR [esi]
  00263	8b da		 mov	 ebx, edx
  00265	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00268	2b ca		 sub	 ecx, edx
  0026a	89 4d f4	 mov	 DWORD PTR _have$2$[ebp], ecx
  0026d	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00270	76 54		 jbe	 SHORT $LN25@deflate_st
  00272	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00275	89 45 08	 mov	 DWORD PTR tv1253[ebp], eax
  00278	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0027b	39 45 08	 cmp	 DWORD PTR tv1253[ebp], eax
  0027e	7c 46		 jl	 SHORT $LN25@deflate_st

; 1729 :         /* Slide the window down. */
; 1730 :         s->block_start -= s->w_size;

  00280	8b 4d 08	 mov	 ecx, DWORD PTR tv1253[ebp]

; 1731 :         s->strstart -= s->w_size;

  00283	2b d0		 sub	 edx, eax
  00285	2b c8		 sub	 ecx, eax
  00287	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  0028a	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx

; 1732 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  0028d	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00290	03 c1		 add	 eax, ecx
  00292	52		 push	 edx
  00293	50		 push	 eax
  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 _memcpy

; 1733 :         if (s->matches < 2)

  0029a	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  002a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a3	83 f8 02	 cmp	 eax, 2
  002a6	73 07		 jae	 SHORT $LN24@deflate_st

; 1734 :             s->matches++;           /* add a pending slide_hash() */

  002a8	40		 inc	 eax
  002a9	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN24@deflate_st:

; 1735 :         have += s->w_size;          /* more space now */

  002af	8b 4d f4	 mov	 ecx, DWORD PTR _have$2$[ebp]
  002b2	03 4e 2c	 add	 ecx, DWORD PTR [esi+44]

; 1736 :         if (s->insert > s->strstart)

  002b5	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  002b8	39 9e b4 16 00
	00		 cmp	 DWORD PTR [esi+5812], ebx
  002be	76 06		 jbe	 SHORT $LN25@deflate_st

; 1737 :             s->insert = s->strstart;

  002c0	89 9e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ebx
$LN25@deflate_st:

; 1738 :     }
; 1739 :     if (have > s->strm->avail_in)

  002c6	8b 06		 mov	 eax, DWORD PTR [esi]
  002c8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1740 :         have = s->strm->avail_in;
; 1741 :     if (have) {

  002cb	3b c8		 cmp	 ecx, eax
  002cd	0f 46 c1	 cmovbe	 eax, ecx
  002d0	89 45 08	 mov	 DWORD PTR tv1352[ebp], eax
  002d3	85 c0		 test	 eax, eax
  002d5	74 34		 je	 SHORT $LN58@deflate_st

; 1742 :         read_buf(s->strm, s->window + s->strstart, have);

  002d7	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002da	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002dc	03 d3		 add	 edx, ebx
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 _read_buf

; 1743 :         s->strstart += have;
; 1744 :         s->insert += MIN(have, s->w_size - s->insert);

  002e4	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  002ea	83 c4 04	 add	 esp, 4
  002ed	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  002f0	8b 55 08	 mov	 edx, DWORD PTR tv1352[ebp]
  002f3	03 da		 add	 ebx, edx
  002f5	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  002f8	2b c1		 sub	 eax, ecx
  002fa	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  002fd	3b d0		 cmp	 edx, eax
  002ff	0f 47 d0	 cmova	 edx, eax
  00302	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00305	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
$LN58@deflate_st:

; 1745 :     }
; 1746 :     if (s->high_water < s->strstart)

  0030b	39 9e c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], ebx
  00311	73 06		 jae	 SHORT $LN28@deflate_st

; 1747 :         s->high_water = s->strstart;

  00313	89 9e c0 16 00
	00		 mov	 DWORD PTR [esi+5824], ebx
$LN28@deflate_st:

; 1748 : 
; 1749 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1750 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1751 :      * have enough input for a worthy block, or if flushing and there is enough
; 1752 :      * room for the remaining input as a stored block in the pending buffer.
; 1753 :      */
; 1754 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00319	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1755 :         /* maximum stored block length that will fit in pending: */
; 1756 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  0031f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00322	83 c0 2a	 add	 eax, 42			; 0000002aH

; 1757 :     min_block = MIN(have, s->w_size);
; 1758 :     left = s->strstart - s->block_start;
; 1759 :     if (left >= min_block ||

  00325	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00328	c1 f8 03	 sar	 eax, 3
  0032b	2b c8		 sub	 ecx, eax
  0032d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00332	3b c8		 cmp	 ecx, eax
  00334	0f 47 c8	 cmova	 ecx, eax
  00337	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0033a	2b 5e 5c	 sub	 ebx, DWORD PTR [esi+92]
  0033d	3b c8		 cmp	 ecx, eax
  0033f	0f 46 c1	 cmovbe	 eax, ecx
  00342	3b d8		 cmp	 ebx, eax
  00344	73 19		 jae	 SHORT $LN59@deflate_st
  00346	85 db		 test	 ebx, ebx
  00348	75 05		 jne	 SHORT $LN31@deflate_st
  0034a	83 fa 04	 cmp	 edx, 4
  0034d	75 54		 jne	 SHORT $LN29@deflate_st
$LN31@deflate_st:
  0034f	85 d2		 test	 edx, edx
  00351	74 50		 je	 SHORT $LN29@deflate_st
  00353	8b 06		 mov	 eax, DWORD PTR [esi]
  00355	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00359	75 48		 jne	 SHORT $LN29@deflate_st
  0035b	3b d9		 cmp	 ebx, ecx
  0035d	77 44		 ja	 SHORT $LN29@deflate_st
$LN59@deflate_st:

; 1760 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1761 :          s->strm->avail_in == 0 && left <= have)) {
; 1762 :         len = MIN(left, have);

  0035f	3b d9		 cmp	 ebx, ecx
  00361	8b c3		 mov	 eax, ebx
  00363	0f 47 c1	 cmova	 eax, ecx
  00366	89 45 08	 mov	 DWORD PTR _len$4$[ebp], eax

; 1763 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  00369	83 fa 04	 cmp	 edx, 4
  0036c	75 14		 jne	 SHORT $LN45@deflate_st
  0036e	8b 06		 mov	 eax, DWORD PTR [esi]
  00370	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00374	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00377	75 09		 jne	 SHORT $LN45@deflate_st
  00379	3b c3		 cmp	 eax, ebx
  0037b	75 05		 jne	 SHORT $LN45@deflate_st
  0037d	8d 7a fd	 lea	 edi, DWORD PTR [edx-3]
  00380	eb 02		 jmp	 SHORT $LN46@deflate_st
$LN45@deflate_st:
  00382	33 ff		 xor	 edi, edi
$LN46@deflate_st:

; 1764 :                len == left ? 1 : 0;
; 1765 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  00384	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00387	8b ce		 mov	 ecx, esi
  00389	03 56 5c	 add	 edx, DWORD PTR [esi+92]
  0038c	57		 push	 edi
  0038d	50		 push	 eax
  0038e	e8 00 00 00 00	 call	 __tr_stored_block

; 1766 :         s->block_start += len;

  00393	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00396	83 c4 08	 add	 esp, 8

; 1767 :         flush_pending(s->strm);

  00399	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0039b	01 46 5c	 add	 DWORD PTR [esi+92], eax
  0039e	e8 00 00 00 00	 call	 _flush_pending
$LN29@deflate_st:

; 1768 :     }
; 1769 : 
; 1770 :     /* We've done all we can with the available input and output. */
; 1771 :     return last ? finish_started : need_more;

  003a3	f7 df		 neg	 edi
  003a5	1b ff		 sbb	 edi, edi
  003a7	83 e7 02	 and	 edi, 2
  003aa	8b c7		 mov	 eax, edi
  003ac	5f		 pop	 edi

; 1772 : }

  003ad	5e		 pop	 esi
  003ae	5b		 pop	 ebx
  003af	8b e5		 mov	 esp, ebp
  003b1	5d		 pop	 ebp
  003b2	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
tv1328 = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1781 : local block_state deflate_fast(deflate_state *s, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL2@deflate_fa:

; 1782 :     IPos hash_head;       /* head of the hash chain */
; 1783 :     int bflush;           /* set if current block must be flushed */
; 1784 : 
; 1785 :     for (;;) {
; 1786 :         /* Make sure that we always have enough lookahead, except
; 1787 :          * at the end of the input file. We need MAX_MATCH bytes
; 1788 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1789 :          * string following the next match.
; 1790 :          */
; 1791 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00018	73 21		 jae	 SHORT $LN10@deflate_fa

; 1792 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 1793 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00029	73 08		 jae	 SHORT $LN9@deflate_fa
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 74 02 00
	00		 je	 $LN39@deflate_fa
$LN9@deflate_fa:

; 1794 :                 return need_more;
; 1795 :             }
; 1796 :             if (s->lookahead == 0) break; /* flush the current block */

  00033	85 c0		 test	 eax, eax
  00035	0f 84 73 02 00
	00		 je	 $LN38@deflate_fa
$LN10@deflate_fa:

; 1797 :         }
; 1798 : 
; 1799 :         /* Insert the string window[strstart .. strstart + 2] in the
; 1800 :          * dictionary, and set hash_head to the head of the hash chain:
; 1801 :          */
; 1802 :         hash_head = NIL;
; 1803 :         if (s->lookahead >= MIN_MATCH) {

  0003b	83 f8 03	 cmp	 eax, 3
  0003e	72 66		 jb	 SHORT $LN12@deflate_fa

; 1804 :             INSERT_STRING(s, s->strstart, hash_head);

  00040	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00043	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00046	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00049	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0004c	d3 e2		 shl	 edx, cl
  0004e	0f b6 44 07 02	 movzx	 eax, BYTE PTR [edi+eax+2]
  00053	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00056	33 d0		 xor	 edx, eax
  00058	23 56 54	 and	 edx, DWORD PTR [esi+84]
  0005b	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0005e	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00061	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00064	66 8b 04 50	 mov	 ax, WORD PTR [eax+edx*2]
  00068	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  0006c	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0006f	8b ca		 mov	 ecx, edx
  00071	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00074	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00077	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  0007b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0007e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00081	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1805 :         }
; 1806 : 
; 1807 :         /* Find the longest match, discarding those <= prev_length.
; 1808 :          * At this point we have always match_length < MIN_MATCH
; 1809 :          */
; 1810 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  00085	85 ff		 test	 edi, edi
  00087	74 1d		 je	 SHORT $LN12@deflate_fa
  00089	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0008c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0008f	2b cf		 sub	 ecx, edi
  00091	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  00096	3b c8		 cmp	 ecx, eax
  00098	77 0c		 ja	 SHORT $LN12@deflate_fa

; 1811 :             /* To simplify the code, we prevent matches with the string
; 1812 :              * of window index 0 (in particular we have to avoid a match
; 1813 :              * of the string with itself at the start of the input file).
; 1814 :              */
; 1815 :             s->match_length = longest_match (s, hash_head);

  0009a	8b d7		 mov	 edx, edi
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 _longest_match
  000a3	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN12@deflate_fa:

; 1816 :             /* longest_match() sets match_start */
; 1817 :         }
; 1818 :         if (s->match_length >= MIN_MATCH) {

  000a6	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  000a9	83 f8 03	 cmp	 eax, 3
  000ac	0f 82 41 01 00
	00		 jb	 $LN13@deflate_fa

; 1819 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1820 : 
; 1821 :             _tr_tally_dist(s, s->strstart - s->match_start,

  000b2	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  000b8	2c 03		 sub	 al, 3
  000ba	89 45 08	 mov	 DWORD PTR tv1328[ebp], eax
  000bd	66 8b 46 6c	 mov	 ax, WORD PTR [esi+108]
  000c1	66 2b 46 70	 sub	 ax, WORD PTR [esi+112]
  000c5	0f b7 d8	 movzx	 ebx, ax
  000c8	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  000ce	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  000d1	8b cb		 mov	 ecx, ebx
  000d3	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  000d9	81 c3 ff ff 00
	00		 add	 ebx, 65535		; 0000ffffH
  000df	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  000e5	42		 inc	 edx
  000e6	89 96 a0 16 00
	00		 mov	 DWORD PTR [esi+5792], edx
  000ec	c1 e9 08	 shr	 ecx, 8
  000ef	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000f2	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000f8	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  000fe	41		 inc	 ecx
  000ff	8b 55 08	 mov	 edx, DWORD PTR tv1328[ebp]
  00102	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  00108	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0010b	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00110	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00116	0f b6 c2	 movzx	 eax, dl
  00119	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00120	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00128	0f b7 c3	 movzx	 eax, bx
  0012b	66 3b d9	 cmp	 bx, cx
  0012e	73 08		 jae	 SHORT $LN24@deflate_fa
  00130	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00136	eb 09		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  00138	c1 e8 07	 shr	 eax, 7
  0013b	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN25@deflate_fa:
  00141	0f b6 c0	 movzx	 eax, al
  00144	33 db		 xor	 ebx, ebx
  00146	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0014e	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00154	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]

; 1822 :                            s->match_length - MIN_MATCH, bflush);
; 1823 : 
; 1824 :             s->lookahead -= s->match_length;

  0015a	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  0015d	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00160	0f 94 c3	 sete	 bl
  00163	2b c1		 sub	 eax, ecx
  00165	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 1825 : 
; 1826 :             /* Insert new strings in the hash table only if the match length
; 1827 :              * is not too large. This saves time but degrades compression.
; 1828 :              */
; 1829 : #ifndef FASTEST
; 1830 :             if (s->match_length <= s->max_insert_length &&

  00168	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  0016e	77 58		 ja	 SHORT $LN45@deflate_fa
  00170	83 f8 03	 cmp	 eax, 3
  00173	72 53		 jb	 SHORT $LN45@deflate_fa

; 1831 :                 s->lookahead >= MIN_MATCH) {
; 1832 :                 s->match_length--; /* string at strstart already in table */

  00175	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00178	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0017b	0f 1f 44 00 00	 npad	 5
$LL7@deflate_fa:

; 1833 :                 do {
; 1834 :                     s->strstart++;

  00180	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00183	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1835 :                     INSERT_STRING(s, s->strstart, hash_head);

  00186	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00189	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0018c	0f b6 54 07 02	 movzx	 edx, BYTE PTR [edi+eax+2]
  00191	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00194	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00197	d3 e0		 shl	 eax, cl
  00199	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0019c	33 d0		 xor	 edx, eax
  0019e	23 56 54	 and	 edx, DWORD PTR [esi+84]
  001a1	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001a4	89 56 48	 mov	 DWORD PTR [esi+72], edx
  001a7	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  001ab	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  001af	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  001b2	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001b5	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  001b9	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1836 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1837 :                      * always MIN_MATCH bytes ahead.
; 1838 :                      */
; 1839 :                 } while (--s->match_length != 0);

  001bd	83 46 60 ff	 add	 DWORD PTR [esi+96], -1
  001c1	75 bd		 jne	 SHORT $LL7@deflate_fa

; 1840 :                 s->strstart++;
; 1841 :             } else

  001c3	e9 96 00 00 00	 jmp	 $LN65@deflate_fa
$LN45@deflate_fa:

; 1842 : #endif
; 1843 :             {
; 1844 :                 s->strstart += s->match_length;

  001c8	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  001cb	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1845 :                 s->match_length = 0;
; 1846 :                 s->ins_h = s->window[s->strstart];

  001ce	8b 46 38	 mov	 eax, DWORD PTR [esi+56]

; 1847 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart + 1]);

  001d1	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001d4	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  001db	0f b6 14 07	 movzx	 edx, BYTE PTR [edi+eax]
  001df	89 56 48	 mov	 DWORD PTR [esi+72], edx
  001e2	0f b6 44 07 01	 movzx	 eax, BYTE PTR [edi+eax+1]
  001e7	d3 e2		 shl	 edx, cl
  001e9	33 d0		 xor	 edx, eax
  001eb	23 56 54	 and	 edx, DWORD PTR [esi+84]
  001ee	89 56 48	 mov	 DWORD PTR [esi+72], edx

; 1848 : #if MIN_MATCH != 3
; 1849 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1850 : #endif
; 1851 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1852 :                  * matter since it will be recomputed at next deflate call.
; 1853 :                  */
; 1854 :             }
; 1855 :         } else {

  001f1	eb 71		 jmp	 SHORT $LN14@deflate_fa
$LN13@deflate_fa:

; 1856 :             /* No match, output a literal byte */
; 1857 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1858 :             _tr_tally_lit(s, s->window[s->strstart], bflush);

  001f3	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001f6	33 db		 xor	 ebx, ebx
  001f8	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  001fb	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  001fe	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00204	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0020a	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0020e	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00214	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0021a	41		 inc	 ecx
  0021b	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  00221	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00225	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0022b	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00231	41		 inc	 ecx
  00232	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  00238	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0023b	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00241	0f b6 c2	 movzx	 eax, dl
  00244	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  0024c	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00252	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]
  00258	0f 94 c3	 sete	 bl

; 1859 :             s->lookahead--;

  0025b	ff 4e 74	 dec	 DWORD PTR [esi+116]
$LN65@deflate_fa:

; 1860 :             s->strstart++;
; 1861 :         }
; 1862 :         if (bflush) FLUSH_BLOCK(s, 0);

  0025e	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00261	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
$LN14@deflate_fa:
  00264	85 db		 test	 ebx, ebx
  00266	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00269	0f 84 a1 fd ff
	ff		 je	 $LL2@deflate_fa
  0026f	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00272	85 c0		 test	 eax, eax
  00274	78 07		 js	 SHORT $LN26@deflate_fa
  00276	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00279	03 d0		 add	 edx, eax
  0027b	eb 02		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  0027d	33 d2		 xor	 edx, edx
$LN27@deflate_fa:
  0027f	2b f8		 sub	 edi, eax
  00281	8b ce		 mov	 ecx, esi
  00283	6a 00		 push	 0
  00285	57		 push	 edi
  00286	e8 00 00 00 00	 call	 __tr_flush_block
  0028b	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0028e	83 c4 08	 add	 esp, 8
  00291	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00293	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00296	e8 00 00 00 00	 call	 _flush_pending
  0029b	8b 06		 mov	 eax, DWORD PTR [esi]
  0029d	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  002a1	0f 85 69 fd ff
	ff		 jne	 $LL2@deflate_fa
$LN39@deflate_fa:
  002a7	5f		 pop	 edi

; 1871 :     return block_done;
; 1872 : }

  002a8	5e		 pop	 esi
  002a9	33 c0		 xor	 eax, eax
  002ab	5b		 pop	 ebx
  002ac	5d		 pop	 ebp
  002ad	c3		 ret	 0
$LN38@deflate_fa:

; 1863 :     }
; 1864 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  002ae	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  002b1	b8 02 00 00 00	 mov	 eax, 2
  002b6	3b c8		 cmp	 ecx, eax
  002b8	0f 42 c1	 cmovb	 eax, ecx
  002bb	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1865 :     if (flush == Z_FINISH) {

  002c1	83 fb 04	 cmp	 ebx, 4
  002c4	75 3e		 jne	 SHORT $LN19@deflate_fa

; 1866 :         FLUSH_BLOCK(s, 1);

  002c6	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  002c9	85 c0		 test	 eax, eax
  002cb	78 07		 js	 SHORT $LN30@deflate_fa
  002cd	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002d0	03 d0		 add	 edx, eax
  002d2	eb 02		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  002d4	33 d2		 xor	 edx, edx
$LN31@deflate_fa:
  002d6	2b c8		 sub	 ecx, eax
  002d8	6a 01		 push	 1
  002da	51		 push	 ecx
  002db	8b ce		 mov	 ecx, esi
  002dd	e8 00 00 00 00	 call	 __tr_flush_block
  002e2	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002e5	83 c4 08	 add	 esp, 8
  002e8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ea	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002ed	e8 00 00 00 00	 call	 _flush_pending
  002f2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002f4	33 c0		 xor	 eax, eax
  002f6	5f		 pop	 edi

; 1871 :     return block_done;
; 1872 : }

  002f7	5e		 pop	 esi
  002f8	5b		 pop	 ebx
  002f9	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  002fc	0f 95 c0	 setne	 al
  002ff	83 c0 02	 add	 eax, 2
  00302	5d		 pop	 ebp
  00303	c3		 ret	 0
$LN19@deflate_fa:

; 1867 :         return finish_done;
; 1868 :     }
; 1869 :     if (s->sym_next)

  00304	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0030b	74 38		 je	 SHORT $LN22@deflate_fa

; 1870 :         FLUSH_BLOCK(s, 0);

  0030d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00310	85 c0		 test	 eax, eax
  00312	78 07		 js	 SHORT $LN32@deflate_fa
  00314	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00317	03 d0		 add	 edx, eax
  00319	eb 02		 jmp	 SHORT $LN33@deflate_fa
$LN32@deflate_fa:
  0031b	33 d2		 xor	 edx, edx
$LN33@deflate_fa:
  0031d	2b c8		 sub	 ecx, eax
  0031f	6a 00		 push	 0
  00321	51		 push	 ecx
  00322	8b ce		 mov	 ecx, esi
  00324	e8 00 00 00 00	 call	 __tr_flush_block
  00329	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0032c	83 c4 08	 add	 esp, 8
  0032f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00331	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00334	e8 00 00 00 00	 call	 _flush_pending
  00339	8b 06		 mov	 eax, DWORD PTR [esi]
  0033b	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0033f	0f 84 62 ff ff
	ff		 je	 $LN39@deflate_fa
$LN22@deflate_fa:
  00345	5f		 pop	 edi

; 1871 :     return block_done;
; 1872 : }

  00346	5e		 pop	 esi
  00347	b8 01 00 00 00	 mov	 eax, 1
  0034c	5b		 pop	 ebx
  0034d	5d		 pop	 ebp
  0034e	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv1355 = -8						; size = 4
_max_insert$1$ = -4					; size = 4
tv1354 = 8						; size = 4
tv1320 = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1880 : local block_state deflate_slow(deflate_state *s, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL60@deflate_sl:

; 1881 :     IPos hash_head;          /* head of hash chain */
; 1882 :     int bflush;              /* set if current block must be flushed */
; 1883 : 
; 1884 :     /* Process the input block. */
; 1885 :     for (;;) {
; 1886 :         /* Make sure that we always have enough lookahead, except
; 1887 :          * at the end of the input file. We need MAX_MATCH bytes
; 1888 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1889 :          * string following the next match.
; 1890 :          */
; 1891 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  00016	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0001b	73 21		 jae	 SHORT $LN10@deflate_sl

; 1892 :             fill_window(s);

  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 _fill_window

; 1893 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00024	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00027	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0002c	73 08		 jae	 SHORT $LN9@deflate_sl
  0002e	85 db		 test	 ebx, ebx
  00030	0f 84 47 02 00
	00		 je	 $LN48@deflate_sl
$LN9@deflate_sl:

; 1894 :                 return need_more;
; 1895 :             }
; 1896 :             if (s->lookahead == 0) break; /* flush the current block */

  00036	85 c0		 test	 eax, eax
  00038	0f 84 0e 03 00
	00		 je	 $LN46@deflate_sl
$LN10@deflate_sl:

; 1897 :         }
; 1898 : 
; 1899 :         /* Insert the string window[strstart .. strstart + 2] in the
; 1900 :          * dictionary, and set hash_head to the head of the hash chain:
; 1901 :          */
; 1902 :         hash_head = NIL;

  0003e	33 ff		 xor	 edi, edi

; 1903 :         if (s->lookahead >= MIN_MATCH) {

  00040	83 f8 03	 cmp	 eax, 3
  00043	72 45		 jb	 SHORT $LN11@deflate_sl

; 1904 :             INSERT_STRING(s, s->strstart, hash_head);

  00045	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  00048	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0004b	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0004e	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00051	d3 e2		 shl	 edx, cl
  00053	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00058	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  0005b	33 d0		 xor	 edx, eax
  0005d	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00060	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00063	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00066	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00069	66 8b 04 50	 mov	 ax, WORD PTR [eax+edx*2]
  0006d	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  00071	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00074	8b ca		 mov	 ecx, edx
  00076	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00079	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0007c	0f b7 3c 48	 movzx	 edi, WORD PTR [eax+ecx*2]
  00080	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00083	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00086	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN11@deflate_sl:

; 1905 :         }
; 1906 : 
; 1907 :         /* Find the longest match, discarding those <= prev_length.
; 1908 :          */
; 1909 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  0008a	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]

; 1910 :         s->match_length = MIN_MATCH-1;

  0008d	ba 02 00 00 00	 mov	 edx, 2
  00092	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00095	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
  00098	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0009b	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1911 : 
; 1912 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  000a2	85 ff		 test	 edi, edi
  000a4	74 53		 je	 SHORT $LN13@deflate_sl
  000a6	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  000ac	73 4b		 jae	 SHORT $LN13@deflate_sl
  000ae	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  000b1	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000b4	2b cf		 sub	 ecx, edi
  000b6	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000bb	3b c8		 cmp	 ecx, eax
  000bd	77 3a		 ja	 SHORT $LN13@deflate_sl

; 1913 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1914 :             /* To simplify the code, we prevent matches with the string
; 1915 :              * of window index 0 (in particular we have to avoid a match
; 1916 :              * of the string with itself at the start of the input file).
; 1917 :              */
; 1918 :             s->match_length = longest_match (s, hash_head);

  000bf	8b d7		 mov	 edx, edi
  000c1	8b ce		 mov	 ecx, esi
  000c3	e8 00 00 00 00	 call	 _longest_match
  000c8	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 1919 :             /* longest_match() sets match_start */
; 1920 : 
; 1921 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  000cb	8b d0		 mov	 edx, eax
  000cd	83 f8 05	 cmp	 eax, 5
  000d0	77 27		 ja	 SHORT $LN13@deflate_sl
  000d2	83 be 88 00 00
	00 01		 cmp	 DWORD PTR [esi+136], 1
  000d9	74 12		 je	 SHORT $LN14@deflate_sl
  000db	83 f8 03	 cmp	 eax, 3
  000de	75 19		 jne	 SHORT $LN13@deflate_sl
  000e0	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000e3	2b 46 70	 sub	 eax, DWORD PTR [esi+112]
  000e6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000eb	76 0c		 jbe	 SHORT $LN13@deflate_sl
$LN14@deflate_sl:

; 1922 : #if TOO_FAR <= 32767
; 1923 :                 || (s->match_length == MIN_MATCH &&
; 1924 :                     s->strstart - s->match_start > TOO_FAR)
; 1925 : #endif
; 1926 :                 )) {
; 1927 : 
; 1928 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1929 :                  * but we will ignore the current match anyway.
; 1930 :                  */
; 1931 :                 s->match_length = MIN_MATCH-1;

  000ed	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  000f4	ba 02 00 00 00	 mov	 edx, 2
$LN13@deflate_sl:

; 1932 :             }
; 1933 :         }
; 1934 :         /* If there was a match at the previous step and the current
; 1935 :          * match is not better, output the previous match:
; 1936 :          */
; 1937 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  000f9	8b 5e 78	 mov	 ebx, DWORD PTR [esi+120]
  000fc	83 fb 03	 cmp	 ebx, 3
  000ff	0f 82 81 01 00
	00		 jb	 $LN51@deflate_sl
  00105	3b d3		 cmp	 edx, ebx
  00107	0f 87 79 01 00
	00		 ja	 $LN51@deflate_sl

; 1938 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  0010d	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]

; 1939 :             /* Do not insert strings in hash table beyond this. */
; 1940 : 
; 1941 :             check_match(s, s->strstart - 1, s->prev_match, s->prev_length);
; 1942 : 
; 1943 :             _tr_tally_dist(s, s->strstart - 1 - s->prev_match,

  00110	80 eb 03	 sub	 bl, 3
  00113	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00116	83 c7 fd	 add	 edi, -3			; fffffffdH
  00119	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0011f	03 f9		 add	 edi, ecx
  00121	66 2b 4e 64	 sub	 cx, WORD PTR [esi+100]
  00125	66 49		 dec	 cx
  00127	89 5d 08	 mov	 DWORD PTR tv1320[ebp], ebx
  0012a	0f b7 d9	 movzx	 ebx, cx
  0012d	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00133	89 7d fc	 mov	 DWORD PTR _max_insert$1$[ebp], edi
  00136	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  00139	8b cb		 mov	 ecx, ebx
  0013b	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00141	81 c3 ff ff 00
	00		 add	 ebx, 65535		; 0000ffffH
  00147	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  0014d	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00153	c1 e9 08	 shr	 ecx, 8
  00156	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00159	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0015f	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00165	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0016b	8b 55 08	 mov	 edx, DWORD PTR tv1320[ebp]
  0016e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00171	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00176	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0017c	0f b6 c2	 movzx	 eax, dl
  0017f	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00186	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  0018e	0f b7 c3	 movzx	 eax, bx
  00191	66 3b d9	 cmp	 bx, cx
  00194	73 08		 jae	 SHORT $LN30@deflate_sl
  00196	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  0019c	eb 09		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  0019e	c1 e8 07	 shr	 eax, 7
  001a1	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN31@deflate_sl:
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  001b2	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]

; 1944 :                            s->prev_length - MIN_MATCH, bflush);
; 1945 : 
; 1946 :             /* Insert in hash table all strings up to the end of the match.
; 1947 :              * strstart - 1 and strstart are already inserted. If there is not
; 1948 :              * enough lookahead, the last two strings are not inserted in
; 1949 :              * the hash table.
; 1950 :              */
; 1951 :             s->lookahead -= s->prev_length - 1;

  001b8	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  001bb	89 45 f8	 mov	 DWORD PTR tv1355[ebp], eax
  001be	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  001c4	89 45 08	 mov	 DWORD PTR tv1354[ebp], eax
  001c7	b8 01 00 00 00	 mov	 eax, 1
  001cc	2b c1		 sub	 eax, ecx
  001ce	01 46 74	 add	 DWORD PTR [esi+116], eax

; 1952 :             s->prev_length -= 2;

  001d1	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  001d4	89 46 78	 mov	 DWORD PTR [esi+120], eax
$LL7@deflate_sl:

; 1953 :             do {
; 1954 :                 if (++s->strstart <= max_insert) {

  001d7	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  001da	43		 inc	 ebx
  001db	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  001de	3b df		 cmp	 ebx, edi
  001e0	77 3f		 ja	 SHORT $LN5@deflate_sl

; 1955 :                     INSERT_STRING(s, s->strstart, hash_head);

  001e2	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001e5	8b 7e 48	 mov	 edi, DWORD PTR [esi+72]
  001e8	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001eb	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  001ee	0f b6 44 03 02	 movzx	 eax, BYTE PTR [ebx+eax+2]
  001f3	d3 e7		 shl	 edi, cl
  001f5	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  001f8	33 f8		 xor	 edi, eax
  001fa	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  001fd	23 d3		 and	 edx, ebx
  001ff	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00202	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00205	0f b7 04 78	 movzx	 eax, WORD PTR [eax+edi*2]
  00209	8b 7d fc	 mov	 edi, DWORD PTR _max_insert$1$[ebp]
  0020c	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00210	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00213	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00216	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  0021a	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0021e	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
$LN5@deflate_sl:

; 1956 :                 }
; 1957 :             } while (--s->prev_length != 0);

  00221	83 46 78 ff	 add	 DWORD PTR [esi+120], -1
  00225	75 b0		 jne	 SHORT $LL7@deflate_sl

; 1958 :             s->match_available = 0;
; 1959 :             s->match_length = MIN_MATCH-1;
; 1960 :             s->strstart++;
; 1961 : 
; 1962 :             if (bflush) FLUSH_BLOCK(s, 0);

  00227	8b 45 08	 mov	 eax, DWORD PTR tv1354[ebp]
  0022a	43		 inc	 ebx
  0022b	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00232	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00239	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0023c	39 45 f8	 cmp	 DWORD PTR tv1355[ebp], eax
  0023f	0f 85 cb fd ff
	ff		 jne	 $LL60@deflate_sl
  00245	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00248	85 c0		 test	 eax, eax
  0024a	78 07		 js	 SHORT $LN32@deflate_sl
  0024c	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0024f	03 d0		 add	 edx, eax
  00251	eb 02		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  00253	33 d2		 xor	 edx, edx
$LN33@deflate_sl:
  00255	2b d8		 sub	 ebx, eax
  00257	8b ce		 mov	 ecx, esi
  00259	6a 00		 push	 0
  0025b	53		 push	 ebx
  0025c	e8 00 00 00 00	 call	 __tr_flush_block
  00261	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00264	83 c4 08	 add	 esp, 8
  00267	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00269	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0026c	e8 00 00 00 00	 call	 _flush_pending
  00271	8b 06		 mov	 eax, DWORD PTR [esi]
  00273	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00277	0f 85 93 fd ff
	ff		 jne	 $LL60@deflate_sl
$LN48@deflate_sl:
  0027d	5f		 pop	 edi

; 1999 :     return block_done;
; 2000 : }

  0027e	5e		 pop	 esi
  0027f	33 c0		 xor	 eax, eax
  00281	5b		 pop	 ebx
  00282	8b e5		 mov	 esp, ebp
  00284	5d		 pop	 ebp
  00285	c3		 ret	 0
$LN51@deflate_sl:

; 1963 : 
; 1964 :         } else if (s->match_available) {

  00286	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0028a	0f 84 aa 00 00
	00		 je	 $LN20@deflate_sl

; 1965 :             /* If there was no match at the previous position, output a
; 1966 :              * single literal. If there was a match but the current match
; 1967 :              * is longer, truncate the previous match to a single literal.
; 1968 :              */
; 1969 :             Tracevv((stderr,"%c", s->window[s->strstart - 1]));
; 1970 :             _tr_tally_lit(s, s->window[s->strstart - 1], bflush);

  00290	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00293	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00296	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  0029a	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  002a0	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  002a6	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  002aa	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  002b0	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  002b6	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  002bc	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  002c0	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  002c6	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  002cc	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  002d2	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002d5	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  002db	0f b6 c2	 movzx	 eax, dl
  002de	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  002e6	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  002ec	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]

; 1971 :             if (bflush) {

  002f2	75 2f		 jne	 SHORT $LN22@deflate_sl

; 1972 :                 FLUSH_BLOCK_ONLY(s, 0);

  002f4	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  002f7	85 c9		 test	 ecx, ecx
  002f9	78 07		 js	 SHORT $LN34@deflate_sl
  002fb	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002fe	03 d1		 add	 edx, ecx
  00300	eb 02		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  00302	33 d2		 xor	 edx, edx
$LN35@deflate_sl:
  00304	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00307	2b c1		 sub	 eax, ecx
  00309	8b ce		 mov	 ecx, esi
  0030b	6a 00		 push	 0
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 __tr_flush_block
  00313	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00316	83 c4 08	 add	 esp, 8
  00319	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0031b	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0031e	e8 00 00 00 00	 call	 _flush_pending
$LN22@deflate_sl:

; 1973 :             }
; 1974 :             s->strstart++;
; 1975 :             s->lookahead--;
; 1976 :             if (s->strm->avail_out == 0) return need_more;

  00323	8b 06		 mov	 eax, DWORD PTR [esi]
  00325	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00328	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0032b	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0032f	0f 84 48 ff ff
	ff		 je	 $LN48@deflate_sl

; 1977 :         } else {

  00335	e9 d6 fc ff ff	 jmp	 $LL60@deflate_sl
$LN20@deflate_sl:

; 1978 :             /* There is no previous match to compare with, wait for
; 1979 :              * the next step to decide.
; 1980 :              */
; 1981 :             s->match_available = 1;
; 1982 :             s->strstart++;

  0033a	ff 46 6c	 inc	 DWORD PTR [esi+108]

; 1983 :             s->lookahead--;

  0033d	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00340	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1

; 1984 :         }
; 1985 :     }

  00347	e9 c4 fc ff ff	 jmp	 $LL60@deflate_sl
$LN46@deflate_sl:

; 1986 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 1987 :     if (s->match_available) {

  0034c	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00350	74 5d		 je	 SHORT $LN55@deflate_sl

; 1988 :         Tracevv((stderr,"%c", s->window[s->strstart - 1]));
; 1989 :         _tr_tally_lit(s, s->window[s->strstart - 1], bflush);

  00352	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00355	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00358	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  0035c	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00362	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00368	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0036c	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00372	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00378	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0037e	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00382	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00388	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0038e	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00394	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00397	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0039d	0f b6 c2	 movzx	 eax, dl
  003a0	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 1990 :         s->match_available = 0;

  003a8	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
$LN55@deflate_sl:

; 1991 :     }
; 1992 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  003af	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  003b2	b8 02 00 00 00	 mov	 eax, 2
  003b7	3b c8		 cmp	 ecx, eax
  003b9	0f 42 c1	 cmovb	 eax, ecx
  003bc	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1993 :     if (flush == Z_FINISH) {

  003c2	83 fb 04	 cmp	 ebx, 4
  003c5	75 40		 jne	 SHORT $LN25@deflate_sl

; 1994 :         FLUSH_BLOCK(s, 1);

  003c7	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  003ca	85 c0		 test	 eax, eax
  003cc	78 07		 js	 SHORT $LN38@deflate_sl
  003ce	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  003d1	03 d0		 add	 edx, eax
  003d3	eb 02		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  003d5	33 d2		 xor	 edx, edx
$LN39@deflate_sl:
  003d7	2b c8		 sub	 ecx, eax
  003d9	6a 01		 push	 1
  003db	51		 push	 ecx
  003dc	8b ce		 mov	 ecx, esi
  003de	e8 00 00 00 00	 call	 __tr_flush_block
  003e3	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  003e6	83 c4 08	 add	 esp, 8
  003e9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003eb	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  003ee	e8 00 00 00 00	 call	 _flush_pending
  003f3	8b 06		 mov	 eax, DWORD PTR [esi]
  003f5	33 c9		 xor	 ecx, ecx
  003f7	5f		 pop	 edi

; 1999 :     return block_done;
; 2000 : }

  003f8	5e		 pop	 esi
  003f9	5b		 pop	 ebx
  003fa	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  003fd	0f 95 c1	 setne	 cl
  00400	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00403	8b e5		 mov	 esp, ebp
  00405	5d		 pop	 ebp
  00406	c3		 ret	 0
$LN25@deflate_sl:

; 1995 :         return finish_done;
; 1996 :     }
; 1997 :     if (s->sym_next)

  00407	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0040e	74 38		 je	 SHORT $LN28@deflate_sl

; 1998 :         FLUSH_BLOCK(s, 0);

  00410	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00413	85 c0		 test	 eax, eax
  00415	78 07		 js	 SHORT $LN40@deflate_sl
  00417	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0041a	03 d0		 add	 edx, eax
  0041c	eb 02		 jmp	 SHORT $LN41@deflate_sl
$LN40@deflate_sl:
  0041e	33 d2		 xor	 edx, edx
$LN41@deflate_sl:
  00420	2b c8		 sub	 ecx, eax
  00422	6a 00		 push	 0
  00424	51		 push	 ecx
  00425	8b ce		 mov	 ecx, esi
  00427	e8 00 00 00 00	 call	 __tr_flush_block
  0042c	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0042f	83 c4 08	 add	 esp, 8
  00432	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  00435	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00437	e8 00 00 00 00	 call	 _flush_pending
  0043c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0043e	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00442	0f 84 35 fe ff
	ff		 je	 $LN48@deflate_sl
$LN28@deflate_sl:
  00448	5f		 pop	 edi

; 1999 :     return block_done;
; 2000 : }

  00449	5e		 pop	 esi
  0044a	b8 01 00 00 00	 mov	 eax, 1
  0044f	5b		 pop	 ebx
  00450	8b e5		 mov	 esp, ebp
  00452	5d		 pop	 ebp
  00453	c3		 ret	 0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
tv1014 = -16						; size = 4
tv1017 = -12						; size = 4
_flush$1$ = -8						; size = 4
tv1021 = -4						; size = 4
$T1 = -4						; size = 4
_deflate_rle PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2008 : local block_state deflate_rle(deflate_state *s, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 55 f8	 mov	 DWORD PTR _flush$1$[ebp], edx
  0000d	57		 push	 edi
  0000e	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  00011	8d be a0 16 00
	00		 lea	 edi, DWORD PTR [esi+5792]
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@deflate_rl:

; 2009 :     int bflush;             /* set if current block must be flushed */
; 2010 :     uInt prev;              /* byte at distance one to match */
; 2011 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2012 : 
; 2013 :     for (;;) {
; 2014 :         /* Make sure that we always have enough lookahead, except
; 2015 :          * at the end of the input file. We need MAX_MATCH bytes
; 2016 :          * for the longest run, plus one for the unrolled loop.
; 2017 :          */
; 2018 :         if (s->lookahead <= MAX_MATCH) {

  00020	8b 5e 74	 mov	 ebx, DWORD PTR [esi+116]
  00023	81 fb 02 01 00
	00		 cmp	 ebx, 258		; 00000102H
  00029	77 2e		 ja	 SHORT $LN10@deflate_rl

; 2019 :             fill_window(s);

  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 _fill_window

; 2020 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00032	8b 5e 74	 mov	 ebx, DWORD PTR [esi+116]
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _flush$1$[ebp]
  00038	81 fb 02 01 00
	00		 cmp	 ebx, 258		; 00000102H
  0003e	77 0e		 ja	 SHORT $LN9@deflate_rl
  00040	8d be a0 16 00
	00		 lea	 edi, DWORD PTR [esi+5792]
  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 45 02 00
	00		 je	 $LN37@deflate_rl
$LN9@deflate_rl:

; 2021 :                 return need_more;
; 2022 :             }
; 2023 :             if (s->lookahead == 0) break; /* flush the current block */

  0004e	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  00051	85 db		 test	 ebx, ebx
  00053	0f 84 a0 01 00
	00		 je	 $LN36@deflate_rl
$LN10@deflate_rl:

; 2024 :         }
; 2025 : 
; 2026 :         /* See how many times the previous byte repeats */
; 2027 :         s->match_length = 0;

  00059	33 d2		 xor	 edx, edx
  0005b	89 45 fc	 mov	 DWORD PTR tv1021[ebp], eax
  0005e	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 2028 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00065	83 fb 03	 cmp	 ebx, 3
  00068	72 74		 jb	 SHORT $LN14@deflate_rl
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	85 c9		 test	 ecx, ecx
  0006e	74 6e		 je	 SHORT $LN14@deflate_rl

; 2029 :             scan = s->window + s->strstart - 1;

  00070	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]
  00073	03 f9		 add	 edi, ecx

; 2030 :             prev = *scan;
; 2031 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  00075	8b c7		 mov	 eax, edi
  00077	8a 4f ff	 mov	 cl, BYTE PTR [edi-1]
  0007a	3a 08		 cmp	 cl, BYTE PTR [eax]
  0007c	75 60		 jne	 SHORT $LN14@deflate_rl
  0007e	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  00081	75 5b		 jne	 SHORT $LN14@deflate_rl
  00083	83 c0 02	 add	 eax, 2
  00086	3a 08		 cmp	 cl, BYTE PTR [eax]
  00088	75 54		 jne	 SHORT $LN14@deflate_rl

; 2032 :                 strend = s->window + s->strstart + MAX_MATCH;

  0008a	8d 97 02 01 00
	00		 lea	 edx, DWORD PTR [edi+258]
$LL7@deflate_rl:

; 2033 :                 do {
; 2034 :                 } while (prev == *++scan && prev == *++scan &&
; 2035 :                          prev == *++scan && prev == *++scan &&
; 2036 :                          prev == *++scan && prev == *++scan &&
; 2037 :                          prev == *++scan && prev == *++scan &&

  00090	40		 inc	 eax
  00091	3a 08		 cmp	 cl, BYTE PTR [eax]
  00093	75 27		 jne	 SHORT $LN13@deflate_rl
  00095	40		 inc	 eax
  00096	3a 08		 cmp	 cl, BYTE PTR [eax]
  00098	75 22		 jne	 SHORT $LN13@deflate_rl
  0009a	40		 inc	 eax
  0009b	3a 08		 cmp	 cl, BYTE PTR [eax]
  0009d	75 1d		 jne	 SHORT $LN13@deflate_rl
  0009f	40		 inc	 eax
  000a0	3a 08		 cmp	 cl, BYTE PTR [eax]
  000a2	75 18		 jne	 SHORT $LN13@deflate_rl
  000a4	40		 inc	 eax
  000a5	3a 08		 cmp	 cl, BYTE PTR [eax]
  000a7	75 13		 jne	 SHORT $LN13@deflate_rl
  000a9	40		 inc	 eax
  000aa	3a 08		 cmp	 cl, BYTE PTR [eax]
  000ac	75 0e		 jne	 SHORT $LN13@deflate_rl
  000ae	40		 inc	 eax
  000af	3a 08		 cmp	 cl, BYTE PTR [eax]
  000b1	75 09		 jne	 SHORT $LN13@deflate_rl
  000b3	40		 inc	 eax
  000b4	3a 08		 cmp	 cl, BYTE PTR [eax]
  000b6	75 04		 jne	 SHORT $LN13@deflate_rl
  000b8	3b c2		 cmp	 eax, edx
  000ba	72 d4		 jb	 SHORT $LL7@deflate_rl
$LN13@deflate_rl:

; 2038 :                          scan < strend);
; 2039 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  000bc	2b c2		 sub	 eax, edx
  000be	8d 90 02 01 00
	00		 lea	 edx, DWORD PTR [eax+258]
  000c4	89 56 60	 mov	 DWORD PTR [esi+96], edx

; 2040 :                 if (s->match_length > s->lookahead)

  000c7	3b d3		 cmp	 edx, ebx
  000c9	76 13		 jbe	 SHORT $LN14@deflate_rl

; 2041 :                     s->match_length = s->lookahead;

  000cb	8d be a0 16 00
	00		 lea	 edi, DWORD PTR [esi+5792]
  000d1	89 5e 60	 mov	 DWORD PTR [esi+96], ebx
  000d4	8d 96 98 16 00
	00		 lea	 edx, DWORD PTR [esi+5784]
  000da	8b c7		 mov	 eax, edi

; 2062 :         }
; 2063 :         if (bflush) FLUSH_BLOCK(s, 0);

  000dc	eb 1b		 jmp	 SHORT $LN44@deflate_rl
$LN14@deflate_rl:

; 2042 :             }
; 2043 :             Assert(scan <= s->window + (uInt)(s->window_size - 1),
; 2044 :                    "wild scan");
; 2045 :         }
; 2046 : 
; 2047 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2048 :         if (s->match_length >= MIN_MATCH) {

  000de	8b da		 mov	 ebx, edx
  000e0	8d be a0 16 00
	00		 lea	 edi, DWORD PTR [esi+5792]
  000e6	8d 96 98 16 00
	00		 lea	 edx, DWORD PTR [esi+5784]
  000ec	8b c7		 mov	 eax, edi
  000ee	89 55 f4	 mov	 DWORD PTR tv1017[ebp], edx
  000f1	89 55 f0	 mov	 DWORD PTR tv1014[ebp], edx
  000f4	83 fb 03	 cmp	 ebx, 3
  000f7	72 60		 jb	 SHORT $LN15@deflate_rl
$LN44@deflate_rl:

; 2049 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2050 : 
; 2051 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  000f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fb	80 eb 03	 sub	 bl, 3
  000fe	8b 02		 mov	 eax, DWORD PTR [edx]
  00100	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1
  00104	8b c7		 mov	 eax, edi
  00106	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00108	41		 inc	 ecx
  00109	89 08		 mov	 DWORD PTR [eax], ecx
  0010b	8b 02		 mov	 eax, DWORD PTR [edx]
  0010d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00111	8b c7		 mov	 eax, edi
  00113	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00115	41		 inc	 ecx
  00116	89 08		 mov	 DWORD PTR [eax], ecx
  00118	8b 02		 mov	 eax, DWORD PTR [edx]
  0011a	33 d2		 xor	 edx, edx
  0011c	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0011f	ff 07		 inc	 DWORD PTR [edi]
  00121	0f b6 c3	 movzx	 eax, bl

; 2052 : 
; 2053 :             s->lookahead -= s->match_length;
; 2054 :             s->strstart += s->match_length;

  00124	8b 5d fc	 mov	 ebx, DWORD PTR tv1021[ebp]
  00127	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  0012e	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00136	66 ff 86 88 09
	00 00		 inc	 WORD PTR [esi+2440]
  0013d	8b 07		 mov	 eax, DWORD PTR [edi]
  0013f	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]
  00145	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00148	0f 94 c2	 sete	 dl

; 2055 :             s->match_length = 0;

  0014b	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00152	29 46 74	 sub	 DWORD PTR [esi+116], eax
  00155	01 03		 add	 DWORD PTR [ebx], eax

; 2056 :         } else {

  00157	eb 55		 jmp	 SHORT $LN72@deflate_rl
$LN15@deflate_rl:

; 2057 :             /* No match, output a literal byte */
; 2058 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2059 :             _tr_tally_lit(s, s->window[s->strstart], bflush);

  00159	8b 5d fc	 mov	 ebx, DWORD PTR tv1021[ebp]
  0015c	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0015f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00161	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00164	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00166	8b 45 f4	 mov	 eax, DWORD PTR tv1017[ebp]
  00169	8b 00		 mov	 eax, DWORD PTR [eax]
  0016b	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0016f	8b c7		 mov	 eax, edi
  00171	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00173	41		 inc	 ecx
  00174	89 08		 mov	 DWORD PTR [eax], ecx
  00176	8b 45 f0	 mov	 eax, DWORD PTR tv1014[ebp]
  00179	8b 00		 mov	 eax, DWORD PTR [eax]
  0017b	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0017f	8b c7		 mov	 eax, edi
  00181	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00183	41		 inc	 ecx
  00184	89 08		 mov	 DWORD PTR [eax], ecx
  00186	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0018c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0018f	ff 07		 inc	 DWORD PTR [edi]
  00191	0f b6 c2	 movzx	 eax, dl
  00194	33 d2		 xor	 edx, edx
  00196	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  0019e	8b 07		 mov	 eax, DWORD PTR [edi]
  001a0	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]
  001a6	0f 94 c2	 sete	 dl

; 2060 :             s->lookahead--;

  001a9	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 2061 :             s->strstart++;

  001ac	ff 03		 inc	 DWORD PTR [ebx]
$LN72@deflate_rl:

; 2062 :         }
; 2063 :         if (bflush) FLUSH_BLOCK(s, 0);

  001ae	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001b0	89 5d fc	 mov	 DWORD PTR $T1[ebp], ebx
  001b3	85 d2		 test	 edx, edx
  001b5	74 3a		 je	 SHORT $LN43@deflate_rl
  001b7	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  001ba	85 c0		 test	 eax, eax
  001bc	78 07		 js	 SHORT $LN26@deflate_rl
  001be	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001c1	03 d0		 add	 edx, eax
  001c3	eb 02		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  001c5	33 d2		 xor	 edx, edx
$LN27@deflate_rl:
  001c7	2b c8		 sub	 ecx, eax
  001c9	6a 00		 push	 0
  001cb	51		 push	 ecx
  001cc	8b ce		 mov	 ecx, esi
  001ce	e8 00 00 00 00	 call	 __tr_flush_block
  001d3	8b 03		 mov	 eax, DWORD PTR [ebx]
  001d5	83 c4 08	 add	 esp, 8
  001d8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001da	89 5d fc	 mov	 DWORD PTR $T1[ebp], ebx
  001dd	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001e0	e8 00 00 00 00	 call	 _flush_pending
  001e5	8b 06		 mov	 eax, DWORD PTR [esi]
  001e7	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001eb	0f 84 a2 00 00
	00		 je	 $LN37@deflate_rl
$LN43@deflate_rl:

; 2064 :     }

  001f1	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  001f4	e9 27 fe ff ff	 jmp	 $LL2@deflate_rl
$LN36@deflate_rl:

; 2065 :     s->insert = 0;

  001f9	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2066 :     if (flush == Z_FINISH) {

  00203	83 f9 04	 cmp	 ecx, 4
  00206	75 43		 jne	 SHORT $LN19@deflate_rl

; 2067 :         FLUSH_BLOCK(s, 1);

  00208	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0020b	85 c9		 test	 ecx, ecx
  0020d	78 07		 js	 SHORT $LN28@deflate_rl
  0020f	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00212	03 d1		 add	 edx, ecx
  00214	eb 02		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  00216	33 d2		 xor	 edx, edx
$LN29@deflate_rl:
  00218	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0021b	2b c1		 sub	 eax, ecx
  0021d	8b ce		 mov	 ecx, esi
  0021f	6a 01		 push	 1
  00221	50		 push	 eax
  00222	e8 00 00 00 00	 call	 __tr_flush_block
  00227	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0022a	83 c4 08	 add	 esp, 8
  0022d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0022f	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00232	e8 00 00 00 00	 call	 _flush_pending
  00237	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00239	33 c0		 xor	 eax, eax
  0023b	5f		 pop	 edi

; 2072 :     return block_done;
; 2073 : }

  0023c	5e		 pop	 esi
  0023d	5b		 pop	 ebx
  0023e	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00241	0f 95 c0	 setne	 al
  00244	83 c0 02	 add	 eax, 2
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c3		 ret	 0
$LN19@deflate_rl:

; 2068 :         return finish_done;
; 2069 :     }
; 2070 :     if (s->sym_next)

  0024b	83 3f 00	 cmp	 DWORD PTR [edi], 0
  0024e	74 37		 je	 SHORT $LN22@deflate_rl

; 2071 :         FLUSH_BLOCK(s, 0);

  00250	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00253	85 c9		 test	 ecx, ecx
  00255	78 07		 js	 SHORT $LN30@deflate_rl
  00257	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0025a	03 d1		 add	 edx, ecx
  0025c	eb 02		 jmp	 SHORT $LN31@deflate_rl
$LN30@deflate_rl:
  0025e	33 d2		 xor	 edx, edx
$LN31@deflate_rl:
  00260	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00263	2b c1		 sub	 eax, ecx
  00265	8b ce		 mov	 ecx, esi
  00267	6a 00		 push	 0
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 __tr_flush_block
  0026f	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00272	83 c4 08	 add	 esp, 8
  00275	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00277	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0027a	e8 00 00 00 00	 call	 _flush_pending
  0027f	8b 06		 mov	 eax, DWORD PTR [esi]
  00281	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00285	74 0c		 je	 SHORT $LN37@deflate_rl
$LN22@deflate_rl:
  00287	5f		 pop	 edi

; 2072 :     return block_done;
; 2073 : }

  00288	5e		 pop	 esi
  00289	b8 01 00 00 00	 mov	 eax, 1
  0028e	5b		 pop	 ebx
  0028f	8b e5		 mov	 esp, ebp
  00291	5d		 pop	 ebp
  00292	c3		 ret	 0
$LN37@deflate_rl:
  00293	5f		 pop	 edi
  00294	5e		 pop	 esi
  00295	33 c0		 xor	 eax, eax
  00297	5b		 pop	 ebx
  00298	8b e5		 mov	 esp, ebp
  0029a	5d		 pop	 ebp
  0029b	c3		 ret	 0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
_deflate_huff PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2079 : local block_state deflate_huff(deflate_state *s, int flush) {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b fa		 mov	 edi, edx
  00004	8b f1		 mov	 esi, ecx
$LL2@deflate_hu:

; 2080 :     int bflush;             /* set if current block must be flushed */
; 2081 : 
; 2082 :     for (;;) {
; 2083 :         /* Make sure that we have a literal to write. */
; 2084 :         if (s->lookahead == 0) {

  00006	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0000a	75 11		 jne	 SHORT $LN6@deflate_hu

; 2085 :             fill_window(s);

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 _fill_window

; 2086 :             if (s->lookahead == 0) {

  00013	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00017	0f 84 b5 00 00
	00		 je	 $LN23@deflate_hu
$LN6@deflate_hu:

; 2088 :                     return need_more;
; 2089 :                 break;      /* flush the current block */
; 2090 :             }
; 2091 :         }
; 2092 : 
; 2093 :         /* Output a literal byte */
; 2094 :         s->match_length = 0;
; 2095 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2096 :         _tr_tally_lit(s, s->window[s->strstart], bflush);

  0001d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00020	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00023	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002a	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0002d	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00033	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00039	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0003d	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00043	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00049	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0004f	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00053	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00059	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0005f	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00065	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00068	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0006e	0f b6 c2	 movzx	 eax, dl
  00071	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2097 :         s->lookahead--;
; 2098 :         s->strstart++;

  00079	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0007c	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0007f	41		 inc	 ecx
  00080	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00086	89 4e 6c	 mov	 DWORD PTR [esi+108], ecx
  00089	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]

; 2099 :         if (bflush) FLUSH_BLOCK(s, 0);

  0008f	0f 85 71 ff ff
	ff		 jne	 $LL2@deflate_hu
  00095	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00098	85 c0		 test	 eax, eax
  0009a	78 07		 js	 SHORT $LN15@deflate_hu
  0009c	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0009f	03 d0		 add	 edx, eax
  000a1	eb 02		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  000a3	33 d2		 xor	 edx, edx
$LN16@deflate_hu:
  000a5	2b c8		 sub	 ecx, eax
  000a7	6a 00		 push	 0
  000a9	51		 push	 ecx
  000aa	8b ce		 mov	 ecx, esi
  000ac	e8 00 00 00 00	 call	 __tr_flush_block
  000b1	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000b4	83 c4 08	 add	 esp, 8
  000b7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b9	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000bc	e8 00 00 00 00	 call	 _flush_pending
  000c1	8b 06		 mov	 eax, DWORD PTR [esi]
  000c3	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000c7	0f 85 39 ff ff
	ff		 jne	 $LL2@deflate_hu
$LN24@deflate_hu:
  000cd	5f		 pop	 edi
  000ce	33 c0		 xor	 eax, eax

; 2109 : }

  000d0	5e		 pop	 esi
  000d1	c3		 ret	 0
$LN23@deflate_hu:

; 2087 :                 if (flush == Z_NO_FLUSH)

  000d2	85 ff		 test	 edi, edi
  000d4	74 f7		 je	 SHORT $LN24@deflate_hu

; 2100 :     }
; 2101 :     s->insert = 0;

  000d6	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2102 :     if (flush == Z_FINISH) {

  000e0	83 ff 04	 cmp	 edi, 4
  000e3	75 3f		 jne	 SHORT $LN10@deflate_hu

; 2103 :         FLUSH_BLOCK(s, 1);

  000e5	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000e8	85 c9		 test	 ecx, ecx
  000ea	78 07		 js	 SHORT $LN17@deflate_hu
  000ec	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000ef	03 d1		 add	 edx, ecx
  000f1	eb 02		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  000f3	33 d2		 xor	 edx, edx
$LN18@deflate_hu:
  000f5	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000f8	2b c1		 sub	 eax, ecx
  000fa	8b ce		 mov	 ecx, esi
  000fc	6a 01		 push	 1
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 __tr_flush_block
  00104	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00107	83 c4 08	 add	 esp, 8
  0010a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0010c	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0010f	e8 00 00 00 00	 call	 _flush_pending
  00114	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00116	33 c0		 xor	 eax, eax
  00118	5f		 pop	 edi

; 2109 : }

  00119	5e		 pop	 esi
  0011a	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  0011d	0f 95 c0	 setne	 al
  00120	83 c0 02	 add	 eax, 2
  00123	c3		 ret	 0
$LN10@deflate_hu:

; 2104 :         return finish_done;
; 2105 :     }
; 2106 :     if (s->sym_next)

  00124	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0012b	74 3b		 je	 SHORT $LN13@deflate_hu

; 2107 :         FLUSH_BLOCK(s, 0);

  0012d	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00130	85 c9		 test	 ecx, ecx
  00132	78 07		 js	 SHORT $LN19@deflate_hu
  00134	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00137	03 d1		 add	 edx, ecx
  00139	eb 02		 jmp	 SHORT $LN20@deflate_hu
$LN19@deflate_hu:
  0013b	33 d2		 xor	 edx, edx
$LN20@deflate_hu:
  0013d	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00140	2b c1		 sub	 eax, ecx
  00142	8b ce		 mov	 ecx, esi
  00144	6a 00		 push	 0
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 __tr_flush_block
  0014c	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0014f	83 c4 08	 add	 esp, 8
  00152	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00154	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00157	e8 00 00 00 00	 call	 _flush_pending
  0015c	8b 06		 mov	 eax, DWORD PTR [esi]
  0015e	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00162	0f 84 65 ff ff
	ff		 je	 $LN24@deflate_hu
$LN13@deflate_hu:
  00168	5f		 pop	 edi

; 2108 :     return block_done;

  00169	b8 01 00 00 00	 mov	 eax, 1

; 2109 : }

  0016e	5e		 pop	 esi
  0016f	c3		 ret	 0
_deflate_huff ENDP
_TEXT	ENDS
END
