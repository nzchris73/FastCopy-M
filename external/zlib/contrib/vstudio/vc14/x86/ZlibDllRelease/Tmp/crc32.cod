; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31935.0 

	TITLE	c:\users\chris\documents\github\zlib\contrib\vstudio\vc14\x86\zlibdllrelease\tmp\crc32.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

_crc_table DD	00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_crc_big_table DD 00H
	DD	096300777H
	DD	02c610eeeH
	DD	0ba510999H
	DD	019c46d07H
	DD	08ff46a70H
	DD	035a563e9H
	DD	0a395649eH
	DD	03288db0eH
	DD	0a4b8dc79H
	DD	01ee9d5e0H
	DD	088d9d297H
	DD	02b4cb609H
	DD	0bd7cb17eH
	DD	072db8e7H
	DD	0911dbf90H
	DD	06410b71dH
	DD	0f220b06aH
	DD	04871b9f3H
	DD	0de41be84H
	DD	07dd4da1aH
	DD	0ebe4dd6dH
	DD	051b5d4f4H
	DD	0c785d383H
	DD	056986c13H
	DD	0c0a86b64H
	DD	07af962fdH
	DD	0ecc9658aH
	DD	04f5c0114H
	DD	0d96c0663H
	DD	0633d0ffaH
	DD	0f50d088dH
	DD	0c8206e3bH
	DD	05e10694cH
	DD	0e44160d5H
	DD	0727167a2H
	DD	0d1e4033cH
	DD	047d4044bH
	DD	0fd850dd2H
	DD	06bb50aa5H
	DD	0faa8b535H
	DD	06c98b242H
	DD	0d6c9bbdbH
	DD	040f9bcacH
	DD	0e36cd832H
	DD	0755cdf45H
	DD	0cf0dd6dcH
	DD	0593dd1abH
	DD	0ac30d926H
	DD	03a00de51H
	DD	08051d7c8H
	DD	01661d0bfH
	DD	0b5f4b421H
	DD	023c4b356H
	DD	09995bacfH
	DD	0fa5bdb8H
	DD	09eb80228H
	DD	0888055fH
	DD	0b2d90cc6H
	DD	024e90bb1H
	DD	0877c6f2fH
	DD	0114c6858H
	DD	0ab1d61c1H
	DD	03d2d66b6H
	DD	09041dc76H
	DD	0671db01H
	DD	0bc20d298H
	DD	02a10d5efH
	DD	08985b171H
	DD	01fb5b606H
	DD	0a5e4bf9fH
	DD	033d4b8e8H
	DD	0a2c90778H
	DD	034f9000fH
	DD	08ea80996H
	DD	018980ee1H
	DD	0bb0d6a7fH
	DD	02d3d6d08H
	DD	0976c6491H
	DD	015c63e6H
	DD	0f4516b6bH
	DD	062616c1cH
	DD	0d8306585H
	DD	04e0062f2H
	DD	0ed95066cH
	DD	07ba5011bH
	DD	0c1f40882H
	DD	057c40ff5H
	DD	0c6d9b065H
	DD	050e9b712H
	DD	0eab8be8bH
	DD	07c88b9fcH
	DD	0df1ddd62H
	DD	0492dda15H
	DD	0f37cd38cH
	DD	0654cd4fbH
	DD	05861b24dH
	DD	0ce51b53aH
	DD	07400bca3H
	DD	0e230bbd4H
	DD	041a5df4aH
	DD	0d795d83dH
	DD	06dc4d1a4H
	DD	0fbf4d6d3H
	DD	06ae96943H
	DD	0fcd96e34H
	DD	0468867adH
	DD	0d0b860daH
	DD	0732d0444H
	DD	0e51d0333H
	DD	05f4c0aaaH
	DD	0c97c0dddH
	DD	03c710550H
	DD	0aa410227H
	DD	010100bbeH
	DD	086200cc9H
	DD	025b56857H
	DD	0b3856f20H
	DD	09d466b9H
	DD	09fe461ceH
	DD	0ef9de5eH
	DD	098c9d929H
	DD	02298d0b0H
	DD	0b4a8d7c7H
	DD	0173db359H
	DD	0810db42eH
	DD	03b5cbdb7H
	DD	0ad6cbac0H
	DD	02083b8edH
	DD	0b6b3bf9aH
	DD	0ce2b603H
	DD	09ad2b174H
	DD	03947d5eaH
	DD	0af77d29dH
	DD	01526db04H
	DD	08316dc73H
	DD	0120b63e3H
	DD	0843b6494H
	DD	03e6a6d0dH
	DD	0a85a6a7aH
	DD	0bcf0ee4H
	DD	09dff0993H
	DD	027ae000aH
	DD	0b19e077dH
	DD	044930ff0H
	DD	0d2a30887H
	DD	068f2011eH
	DD	0fec20669H
	DD	05d5762f7H
	DD	0cb676580H
	DD	071366c19H
	DD	0e7066b6eH
	DD	0761bd4feH
	DD	0e02bd389H
	DD	05a7ada10H
	DD	0cc4add67H
	DD	06fdfb9f9H
	DD	0f9efbe8eH
	DD	043beb717H
	DD	0d58eb060H
	DD	0e8a3d6d6H
	DD	07e93d1a1H
	DD	0c4c2d838H
	DD	052f2df4fH
	DD	0f167bbd1H
	DD	06757bca6H
	DD	0dd06b53fH
	DD	04b36b248H
	DD	0da2b0dd8H
	DD	04c1b0aafH
	DD	0f64a0336H
	DD	0607a0441H
	DD	0c3ef60dfH
	DD	055df67a8H
	DD	0ef8e6e31H
	DD	079be6946H
	DD	08cb361cbH
	DD	01a8366bcH
	DD	0a0d26f25H
	DD	036e26852H
	DD	095770cccH
	DD	03470bbbH
	DD	0b9160222H
	DD	02f260555H
	DD	0be3bbac5H
	DD	0280bbdb2H
	DD	0925ab42bH
	DD	046ab35cH
	DD	0a7ffd7c2H
	DD	031cfd0b5H
	DD	08b9ed92cH
	DD	01daede5bH
	DD	0b0c2649bH
	DD	026f263ecH
	DD	09ca36a75H
	DD	0a936d02H
	DD	0a906099cH
	DD	03f360eebH
	DD	085670772H
	DD	013570005H
	DD	0824abf95H
	DD	0147ab8e2H
	DD	0ae2bb17bH
	DD	0381bb60cH
	DD	09b8ed292H
	DD	0dbed5e5H
	DD	0b7efdc7cH
	DD	021dfdb0bH
	DD	0d4d2d386H
	DD	042e2d4f1H
	DD	0f8b3dd68H
	DD	06e83da1fH
	DD	0cd16be81H
	DD	05b26b9f6H
	DD	0e177b06fH
	DD	07747b718H
	DD	0e65a0888H
	DD	0706a0fffH
	DD	0ca3b0666H
	DD	05c0b0111H
	DD	0ff9e658fH
	DD	069ae62f8H
	DD	0d3ff6b61H
	DD	045cf6c16H
	DD	078e20aa0H
	DD	0eed20dd7H
	DD	05483044eH
	DD	0c2b30339H
	DD	0612667a7H
	DD	0f71660d0H
	DD	04d476949H
	DD	0db776e3eH
	DD	04a6ad1aeH
	DD	0dc5ad6d9H
	DD	0660bdf40H
	DD	0f03bd837H
	DD	053aebca9H
	DD	0c59ebbdeH
	DD	07fcfb247H
	DD	0e9ffb530H
	DD	01cf2bdbdH
	DD	08ac2bacaH
	DD	03093b353H
	DD	0a6a3b424H
	DD	0536d0baH
	DD	09306d7cdH
	DD	02957de54H
	DD	0bf67d923H
	DD	02e7a66b3H
	DD	0b84a61c4H
	DD	021b685dH
	DD	0942b6f2aH
	DD	037be0bb4H
	DD	0a18e0cc3H
	DD	01bdf055aH
	DD	08def022dH
_crc_braid_table DD 00H
	DD	065673b46H
	DD	0cace768cH
	DD	0afa94dcaH
	DD	04eedeb59H
	DD	02b8ad01fH
	DD	084239dd5H
	DD	0e144a693H
	DD	09ddbd6b2H
	DD	0f8bcedf4H
	DD	05715a03eH
	DD	032729b78H
	DD	0d3363debH
	DD	0b65106adH
	DD	019f84b67H
	DD	07c9f7021H
	DD	0e0c6ab25H
	DD	085a19063H
	DD	02a08dda9H
	DD	04f6fe6efH
	DD	0ae2b407cH
	DD	0cb4c7b3aH
	DD	064e536f0H
	DD	01820db6H
	DD	07d1d7d97H
	DD	0187a46d1H
	DD	0b7d30b1bH
	DD	0d2b4305dH
	DD	033f096ceH
	DD	05697ad88H
	DD	0f93ee042H
	DD	09c59db04H
	DD	01afc500bH
	DD	07f9b6b4dH
	DD	0d0322687H
	DD	0b5551dc1H
	DD	05411bb52H
	DD	031768014H
	DD	09edfcddeH
	DD	0fbb8f698H
	DD	0872786b9H
	DD	0e240bdffH
	DD	04de9f035H
	DD	0288ecb73H
	DD	0c9ca6de0H
	DD	0acad56a6H
	DD	03041b6cH
	DD	06663202aH
	DD	0fa3afb2eH
	DD	09f5dc068H
	DD	030f48da2H
	DD	05593b6e4H
	DD	0b4d71077H
	DD	0d1b02b31H
	DD	07e1966fbH
	DD	01b7e5dbdH
	DD	067e12d9cH
	DD	028616daH
	DD	0ad2f5b10H
	DD	0c8486056H
	DD	0290cc6c5H
	DD	04c6bfd83H
	DD	0e3c2b049H
	DD	086a58b0fH
	DD	035f8a016H
	DD	0509f9b50H
	DD	0ff36d69aH
	DD	09a51eddcH
	DD	07b154b4fH
	DD	01e727009H
	DD	0b1db3dc3H
	DD	0d4bc0685H
	DD	0a82376a4H
	DD	0cd444de2H
	DD	062ed0028H
	DD	078a3b6eH
	DD	0e6ce9dfdH
	DD	083a9a6bbH
	DD	02c00eb71H
	DD	04967d037H
	DD	0d53e0b33H
	DD	0b0593075H
	DD	01ff07dbfH
	DD	07a9746f9H
	DD	09bd3e06aH
	DD	0feb4db2cH
	DD	0511d96e6H
	DD	0347aada0H
	DD	048e5dd81H
	DD	02d82e6c7H
	DD	0822bab0dH
	DD	0e74c904bH
	DD	060836d8H
	DD	0636f0d9eH
	DD	0ccc64054H
	DD	0a9a17b12H
	DD	02f04f01dH
	DD	04a63cb5bH
	DD	0e5ca8691H
	DD	080adbdd7H
	DD	061e91b44H
	DD	048e2002H
	DD	0ab276dc8H
	DD	0ce40568eH
	DD	0b2df26afH
	DD	0d7b81de9H
	DD	078115023H
	DD	01d766b65H
	DD	0fc32cdf6H
	DD	09955f6b0H
	DD	036fcbb7aH
	DD	0539b803cH
	DD	0cfc25b38H
	DD	0aaa5607eH
	DD	050c2db4H
	DD	0606b16f2H
	DD	0812fb061H
	DD	0e4488b27H
	DD	04be1c6edH
	DD	02e86fdabH
	DD	052198d8aH
	DD	0377eb6ccH
	DD	098d7fb06H
	DD	0fdb0c040H
	DD	01cf466d3H
	DD	079935d95H
	DD	0d63a105fH
	DD	0b35d2b19H
	DD	06bf1402cH
	DD	0e967b6aH
	DD	0a13f36a0H
	DD	0c4580de6H
	DD	0251cab75H
	DD	0407b9033H
	DD	0efd2ddf9H
	DD	08ab5e6bfH
	DD	0f62a969eH
	DD	0934dadd8H
	DD	03ce4e012H
	DD	05983db54H
	DD	0b8c77dc7H
	DD	0dda04681H
	DD	072090b4bH
	DD	0176e300dH
	DD	08b37eb09H
	DD	0ee50d04fH
	DD	041f99d85H
	DD	0249ea6c3H
	DD	0c5da0050H
	DD	0a0bd3b16H
	DD	0f1476dcH
	DD	06a734d9aH
	DD	016ec3dbbH
	DD	0738b06fdH
	DD	0dc224b37H
	DD	0b9457071H
	DD	05801d6e2H
	DD	03d66eda4H
	DD	092cfa06eH
	DD	0f7a89b28H
	DD	0710d1027H
	DD	0146a2b61H
	DD	0bbc366abH
	DD	0dea45dedH
	DD	03fe0fb7eH
	DD	05a87c038H
	DD	0f52e8df2H
	DD	09049b6b4H
	DD	0ecd6c695H
	DD	089b1fdd3H
	DD	02618b019H
	DD	0437f8b5fH
	DD	0a23b2dccH
	DD	0c75c168aH
	DD	068f55b40H
	DD	0d926006H
	DD	091cbbb02H
	DD	0f4ac8044H
	DD	05b05cd8eH
	DD	03e62f6c8H
	DD	0df26505bH
	DD	0ba416b1dH
	DD	015e826d7H
	DD	0708f1d91H
	DD	0c106db0H
	DD	0697756f6H
	DD	0c6de1b3cH
	DD	0a3b9207aH
	DD	042fd86e9H
	DD	0279abdafH
	DD	08833f065H
	DD	0ed54cb23H
	DD	05e09e03aH
	DD	03b6edb7cH
	DD	094c796b6H
	DD	0f1a0adf0H
	DD	010e40b63H
	DD	075833025H
	DD	0da2a7defH
	DD	0bf4d46a9H
	DD	0c3d23688H
	DD	0a6b50dceH
	DD	091c4004H
	DD	06c7b7b42H
	DD	08d3fddd1H
	DD	0e858e697H
	DD	047f1ab5dH
	DD	02296901bH
	DD	0becf4b1fH
	DD	0dba87059H
	DD	074013d93H
	DD	0116606d5H
	DD	0f022a046H
	DD	095459b00H
	DD	03aecd6caH
	DD	05f8bed8cH
	DD	023149dadH
	DD	04673a6ebH
	DD	0e9daeb21H
	DD	08cbdd067H
	DD	06df976f4H
	DD	089e4db2H
	DD	0a7370078H
	DD	0c2503b3eH
	DD	044f5b031H
	DD	021928b77H
	DD	08e3bc6bdH
	DD	0eb5cfdfbH
	DD	0a185b68H
	DD	06f7f602eH
	DD	0c0d62de4H
	DD	0a5b116a2H
	DD	0d92e6683H
	DD	0bc495dc5H
	DD	013e0100fH
	DD	076872b49H
	DD	097c38ddaH
	DD	0f2a4b69cH
	DD	05d0dfb56H
	DD	0386ac010H
	DD	0a4331b14H
	DD	0c1542052H
	DD	06efd6d98H
	DD	0b9a56deH
	DD	0eadef04dH
	DD	08fb9cb0bH
	DD	0201086c1H
	DD	04577bd87H
	DD	039e8cda6H
	DD	05c8ff6e0H
	DD	0f326bb2aH
	DD	09641806cH
	DD	0770526ffH
	DD	012621db9H
	DD	0bdcb5073H
	DD	0d8ac6b35H
	DD	00H
	DD	0d7e28058H
	DD	074b406f1H
	DD	0a35686a9H
	DD	0e9680de2H
	DD	03e8a8dbaH
	DD	09ddc0b13H
	DD	04a3e8b4bH
	DD	09a11d85H
	DD	0de439dddH
	DD	07d151b74H
	DD	0aaf79b2cH
	DD	0e0c91067H
	DD	0372b903fH
	DD	0947d1696H
	DD	0439f96ceH
	DD	013423b0aH
	DD	0c4a0bb52H
	DD	067f63dfbH
	DD	0b014bda3H
	DD	0fa2a36e8H
	DD	02dc8b6b0H
	DD	08e9e3019H
	DD	0597cb041H
	DD	01ae3268fH
	DD	0cd01a6d7H
	DD	06e57207eH
	DD	0b9b5a026H
	DD	0f38b2b6dH
	DD	02469ab35H
	DD	0873f2d9cH
	DD	050ddadc4H
	DD	026847614H
	DD	0f166f64cH
	DD	0523070e5H
	DD	085d2f0bdH
	DD	0cfec7bf6H
	DD	0180efbaeH
	DD	0bb587d07H
	DD	06cbafd5fH
	DD	02f256b91H
	DD	0f8c7ebc9H
	DD	05b916d60H
	DD	08c73ed38H
	DD	0c64d6673H
	DD	011afe62bH
	DD	0b2f96082H
	DD	0651be0daH
	DD	035c64d1eH
	DD	0e224cd46H
	DD	041724befH
	DD	09690cbb7H
	DD	0dcae40fcH
	DD	0b4cc0a4H
	DD	0a81a460dH
	DD	07ff8c655H
	DD	03c67509bH
	DD	0eb85d0c3H
	DD	048d3566aH
	DD	09f31d632H
	DD	0d50f5d79H
	DD	02eddd21H
	DD	0a1bb5b88H
	DD	07659dbd0H
	DD	04d08ec28H
	DD	09aea6c70H
	DD	039bcead9H
	DD	0ee5e6a81H
	DD	0a460e1caH
	DD	073826192H
	DD	0d0d4e73bH
	DD	07366763H
	DD	044a9f1adH
	DD	0934b71f5H
	DD	0301df75cH
	DD	0e7ff7704H
	DD	0adc1fc4fH
	DD	07a237c17H
	DD	0d975fabeH
	DD	0e977ae6H
	DD	05e4ad722H
	DD	089a8577aH
	DD	02afed1d3H
	DD	0fd1c518bH
	DD	0b722dac0H
	DD	060c05a98H
	DD	0c396dc31H
	DD	014745c69H
	DD	057ebcaa7H
	DD	080094affH
	DD	0235fcc56H
	DD	0f4bd4c0eH
	DD	0be83c745H
	DD	06961471dH
	DD	0ca37c1b4H
	DD	01dd541ecH
	DD	06b8c9a3cH
	DD	0bc6e1a64H
	DD	01f389ccdH
	DD	0c8da1c95H
	DD	082e497deH
	DD	055061786H
	DD	0f650912fH
	DD	021b21177H
	DD	0622d87b9H
	DD	0b5cf07e1H
	DD	016998148H
	DD	0c17b0110H
	DD	08b458a5bH
	DD	05ca70a03H
	DD	0fff18caaH
	DD	028130cf2H
	DD	078cea136H
	DD	0af2c216eH
	DD	0c7aa7c7H
	DD	0db98279fH
	DD	091a6acd4H
	DD	046442c8cH
	DD	0e512aa25H
	DD	032f02a7dH
	DD	0716fbcb3H
	DD	0a68d3cebH
	DD	05dbba42H
	DD	0d2393a1aH
	DD	09807b151H
	DD	04fe53109H
	DD	0ecb3b7a0H
	DD	03b5137f8H
	DD	09a11d850H
	DD	04df35808H
	DD	0eea5dea1H
	DD	039475ef9H
	DD	07379d5b2H
	DD	0a49b55eaH
	DD	07cdd343H
	DD	0d02f531bH
	DD	093b0c5d5H
	DD	04452458dH
	DD	0e704c324H
	DD	030e6437cH
	DD	07ad8c837H
	DD	0ad3a486fH
	DD	0e6ccec6H
	DD	0d98e4e9eH
	DD	08953e35aH
	DD	05eb16302H
	DD	0fde7e5abH
	DD	02a0565f3H
	DD	0603beeb8H
	DD	0b7d96ee0H
	DD	0148fe849H
	DD	0c36d6811H
	DD	080f2fedfH
	DD	057107e87H
	DD	0f446f82eH
	DD	023a47876H
	DD	0699af33dH
	DD	0be787365H
	DD	01d2ef5ccH
	DD	0cacc7594H
	DD	0bc95ae44H
	DD	06b772e1cH
	DD	0c821a8b5H
	DD	01fc328edH
	DD	055fda3a6H
	DD	0821f23feH
	DD	02149a557H
	DD	0f6ab250fH
	DD	0b534b3c1H
	DD	062d63399H
	DD	0c180b530H
	DD	016623568H
	DD	05c5cbe23H
	DD	08bbe3e7bH
	DD	028e8b8d2H
	DD	0ff0a388aH
	DD	0afd7954eH
	DD	078351516H
	DD	0db6393bfH
	DD	0c8113e7H
	DD	046bf98acH
	DD	0915d18f4H
	DD	0320b9e5dH
	DD	0e5e91e05H
	DD	0a67688cbH
	DD	071940893H
	DD	0d2c28e3aH
	DD	05200e62H
	DD	04f1e8529H
	DD	098fc0571H
	DD	03baa83d8H
	DD	0ec480380H
	DD	0d7193478H
	DD	0fbb420H
	DD	0a3ad3289H
	DD	0744fb2d1H
	DD	03e71399aH
	DD	0e993b9c2H
	DD	04ac53f6bH
	DD	09d27bf33H
	DD	0deb829fdH
	DD	095aa9a5H
	DD	0aa0c2f0cH
	DD	07deeaf54H
	DD	037d0241fH
	DD	0e032a447H
	DD	0436422eeH
	DD	09486a2b6H
	DD	0c45b0f72H
	DD	013b98f2aH
	DD	0b0ef0983H
	DD	0670d89dbH
	DD	02d330290H
	DD	0fad182c8H
	DD	059870461H
	DD	08e658439H
	DD	0cdfa12f7H
	DD	01a1892afH
	DD	0b94e1406H
	DD	06eac945eH
	DD	024921f15H
	DD	0f3709f4dH
	DD	0502619e4H
	DD	087c499bcH
	DD	0f19d426cH
	DD	0267fc234H
	DD	08529449dH
	DD	052cbc4c5H
	DD	018f54f8eH
	DD	0cf17cfd6H
	DD	06c41497fH
	DD	0bba3c927H
	DD	0f83c5fe9H
	DD	02fdedfb1H
	DD	08c885918H
	DD	05b6ad940H
	DD	01154520bH
	DD	0c6b6d253H
	DD	065e054faH
	DD	0b202d4a2H
	DD	0e2df7966H
	DD	0353df93eH
	DD	0966b7f97H
	DD	04189ffcfH
	DD	0bb77484H
	DD	0dc55f4dcH
	DD	07f037275H
	DD	0a8e1f22dH
	DD	0eb7e64e3H
	DD	03c9ce4bbH
	DD	09fca6212H
	DD	04828e24aH
	DD	02166901H
	DD	0d5f4e959H
	DD	076a26ff0H
	DD	0a140efa8H
	DD	00H
	DD	0ef52b6e1H
	DD	05d46b83H
	DD	0ea86dd62H
	DD	0ba8d706H
	DD	0e4fa61e7H
	DD	0e7cbc85H
	DD	0e12e0a64H
	DD	01751ae0cH
	DD	0f80318edH
	DD	01285c58fH
	DD	0fdd7736eH
	DD	01cf9790aH
	DD	0f3abcfebH
	DD	0192d1289H
	DD	0f67fa468H
	DD	02ea35c18H
	DD	0c1f1eaf9H
	DD	02b77379bH
	DD	0c425817aH
	DD	0250b8b1eH
	DD	0ca593dffH
	DD	020dfe09dH
	DD	0cf8d567cH
	DD	039f2f214H
	DD	0d6a044f5H
	DD	03c269997H
	DD	0d3742f76H
	DD	0325a2512H
	DD	0dd0893f3H
	DD	0378e4e91H
	DD	0d8dcf870H
	DD	05d46b830H
	DD	0b2140ed1H
	DD	05892d3b3H
	DD	0b7c06552H
	DD	056ee6f36H
	DD	0b9bcd9d7H
	DD	0533a04b5H
	DD	0bc68b254H
	DD	04a17163cH
	DD	0a545a0ddH
	DD	04fc37dbfH
	DD	0a091cb5eH
	DD	041bfc13aH
	DD	0aeed77dbH
	DD	0446baab9H
	DD	0ab391c58H
	DD	073e5e428H
	DD	09cb752c9H
	DD	076318fabH
	DD	09963394aH
	DD	0784d332eH
	DD	0971f85cfH
	DD	07d9958adH
	DD	092cbee4cH
	DD	064b44a24H
	DD	08be6fcc5H
	DD	0616021a7H
	DD	08e329746H
	DD	06f1c9d22H
	DD	0804e2bc3H
	DD	06ac8f6a1H
	DD	0859a4040H
	DD	0ba8d7060H
	DD	055dfc681H
	DD	0bf591be3H
	DD	0500bad02H
	DD	0b125a766H
	DD	05e771187H
	DD	0b4f1cce5H
	DD	05ba37a04H
	DD	0addcde6cH
	DD	0428e688dH
	DD	0a808b5efH
	DD	0475a030eH
	DD	0a674096aH
	DD	04926bf8bH
	DD	0a3a062e9H
	DD	04cf2d408H
	DD	0942e2c78H
	DD	07b7c9a99H
	DD	091fa47fbH
	DD	07ea8f11aH
	DD	09f86fb7eH
	DD	070d44d9fH
	DD	09a5290fdH
	DD	07500261cH
	DD	0837f8274H
	DD	06c2d3495H
	DD	086abe9f7H
	DD	069f95f16H
	DD	088d75572H
	DD	06785e393H
	DD	08d033ef1H
	DD	062518810H
	DD	0e7cbc850H
	DD	08997eb1H
	DD	0e21fa3d3H
	DD	0d4d1532H
	DD	0ec631f56H
	DD	0331a9b7H
	DD	0e9b774d5H
	DD	06e5c234H
	DD	0f09a665cH
	DD	01fc8d0bdH
	DD	0f54e0ddfH
	DD	01a1cbb3eH
	DD	0fb32b15aH
	DD	0146007bbH
	DD	0fee6dad9H
	DD	011b46c38H
	DD	0c9689448H
	DD	0263a22a9H
	DD	0ccbcffcbH
	DD	023ee492aH
	DD	0c2c0434eH
	DD	02d92f5afH
	DD	0c71428cdH
	DD	028469e2cH
	DD	0de393a44H
	DD	0316b8ca5H
	DD	0dbed51c7H
	DD	034bfe726H
	DD	0d591ed42H
	DD	03ac35ba3H
	DD	0d04586c1H
	DD	03f173020H
	DD	0ae6be681H
	DD	041395060H
	DD	0abbf8d02H
	DD	044ed3be3H
	DD	0a5c33187H
	DD	04a918766H
	DD	0a0175a04H
	DD	04f45ece5H
	DD	0b93a488dH
	DD	05668fe6cH
	DD	0bcee230eH
	DD	053bc95efH
	DD	0b2929f8bH
	DD	05dc0296aH
	DD	0b746f408H
	DD	0581442e9H
	DD	080c8ba99H
	DD	06f9a0c78H
	DD	0851cd11aH
	DD	06a4e67fbH
	DD	08b606d9fH
	DD	06432db7eH
	DD	08eb4061cH
	DD	061e6b0fdH
	DD	097991495H
	DD	078cba274H
	DD	0924d7f16H
	DD	07d1fc9f7H
	DD	09c31c393H
	DD	073637572H
	DD	099e5a810H
	DD	076b71ef1H
	DD	0f32d5eb1H
	DD	01c7fe850H
	DD	0f6f93532H
	DD	019ab83d3H
	DD	0f88589b7H
	DD	017d73f56H
	DD	0fd51e234H
	DD	0120354d5H
	DD	0e47cf0bdH
	DD	0b2e465cH
	DD	0e1a89b3eH
	DD	0efa2ddfH
	DD	0efd427bbH
	DD	086915aH
	DD	0ea004c38H
	DD	0552fad9H
	DD	0dd8e02a9H
	DD	032dcb448H
	DD	0d85a692aH
	DD	03708dfcbH
	DD	0d626d5afH
	DD	03974634eH
	DD	0d3f2be2cH
	DD	03ca008cdH
	DD	0cadfaca5H
	DD	0258d1a44H
	DD	0cf0bc726H
	DD	0205971c7H
	DD	0c1777ba3H
	DD	02e25cd42H
	DD	0c4a31020H
	DD	02bf1a6c1H
	DD	014e696e1H
	DD	0fbb42000H
	DD	01132fd62H
	DD	0fe604b83H
	DD	01f4e41e7H
	DD	0f01cf706H
	DD	01a9a2a64H
	DD	0f5c89c85H
	DD	03b738edH
	DD	0ece58e0cH
	DD	0663536eH
	DD	0e931e58fH
	DD	081fefebH
	DD	0e74d590aH
	DD	0dcb8468H
	DD	0e2993289H
	DD	03a45caf9H
	DD	0d5177c18H
	DD	03f91a17aH
	DD	0d0c3179bH
	DD	031ed1dffH
	DD	0debfab1eH
	DD	03439767cH
	DD	0db6bc09dH
	DD	02d1464f5H
	DD	0c246d214H
	DD	028c00f76H
	DD	0c792b997H
	DD	026bcb3f3H
	DD	0c9ee0512H
	DD	02368d870H
	DD	0cc3a6e91H
	DD	049a02ed1H
	DD	0a6f29830H
	DD	04c744552H
	DD	0a326f3b3H
	DD	04208f9d7H
	DD	0ad5a4f36H
	DD	047dc9254H
	DD	0a88e24b5H
	DD	05ef180ddH
	DD	0b1a3363cH
	DD	05b25eb5eH
	DD	0b4775dbfH
	DD	0555957dbH
	DD	0ba0be13aH
	DD	0508d3c58H
	DD	0bfdf8ab9H
	DD	0670372c9H
	DD	08851c428H
	DD	062d7194aH
	DD	08d85afabH
	DD	06caba5cfH
	DD	083f9132eH
	DD	0697fce4cH
	DD	0862d78adH
	DD	07052dcc5H
	DD	09f006a24H
	DD	07586b746H
	DD	09ad401a7H
	DD	07bfa0bc3H
	DD	094a8bd22H
	DD	07e2e6040H
	DD	0917cd6a1H
	DD	00H
	DD	087a6cb43H
	DD	0d43c90c7H
	DD	0539a5b84H
	DD	0730827cfH
	DD	0f4aeec8cH
	DD	0a734b708H
	DD	020927c4bH
	DD	0e6104f9eH
	DD	061b684ddH
	DD	0322cdf59H
	DD	0b58a141aH
	DD	095186851H
	DD	012bea312H
	DD	04124f896H
	DD	0c68233d5H
	DD	01751997dH
	DD	090f7523eH
	DD	0c36d09baH
	DD	044cbc2f9H
	DD	06459beb2H
	DD	0e3ff75f1H
	DD	0b0652e75H
	DD	037c3e536H
	DD	0f141d6e3H
	DD	076e71da0H
	DD	0257d4624H
	DD	0a2db8d67H
	DD	08249f12cH
	DD	05ef3a6fH
	DD	0567561ebH
	DD	0d1d3aaa8H
	DD	02ea332faH
	DD	0a905f9b9H
	DD	0fa9fa23dH
	DD	07d39697eH
	DD	05dab1535H
	DD	0da0dde76H
	DD	0899785f2H
	DD	0e314eb1H
	DD	0c8b37d64H
	DD	04f15b627H
	DD	01c8feda3H
	DD	09b2926e0H
	DD	0bbbb5aabH
	DD	03c1d91e8H
	DD	06f87ca6cH
	DD	0e821012fH
	DD	039f2ab87H
	DD	0be5460c4H
	DD	0edce3b40H
	DD	06a68f003H
	DD	04afa8c48H
	DD	0cd5c470bH
	DD	09ec61c8fH
	DD	01960d7ccH
	DD	0dfe2e419H
	DD	058442f5aH
	DD	0bde74deH
	DD	08c78bf9dH
	DD	0aceac3d6H
	DD	02b4c0895H
	DD	078d65311H
	DD	0ff709852H
	DD	05d4665f4H
	DD	0dae0aeb7H
	DD	0897af533H
	DD	0edc3e70H
	DD	02e4e423bH
	DD	0a9e88978H
	DD	0fa72d2fcH
	DD	07dd419bfH
	DD	0bb562a6aH
	DD	03cf0e129H
	DD	06f6abaadH
	DD	0e8cc71eeH
	DD	0c85e0da5H
	DD	04ff8c6e6H
	DD	01c629d62H
	DD	09bc45621H
	DD	04a17fc89H
	DD	0cdb137caH
	DD	09e2b6c4eH
	DD	0198da70dH
	DD	0391fdb46H
	DD	0beb91005H
	DD	0ed234b81H
	DD	06a8580c2H
	DD	0ac07b317H
	DD	02ba17854H
	DD	0783b23d0H
	DD	0ff9de893H
	DD	0df0f94d8H
	DD	058a95f9bH
	DD	0b33041fH
	DD	08c95cf5cH
	DD	073e5570eH
	DD	0f4439c4dH
	DD	0a7d9c7c9H
	DD	0207f0c8aH
	DD	0ed70c1H
	DD	0874bbb82H
	DD	0d4d1e006H
	DD	053772b45H
	DD	095f51890H
	DD	01253d3d3H
	DD	041c98857H
	DD	0c66f4314H
	DD	0e6fd3f5fH
	DD	0615bf41cH
	DD	032c1af98H
	DD	0b56764dbH
	DD	064b4ce73H
	DD	0e3120530H
	DD	0b0885eb4H
	DD	0372e95f7H
	DD	017bce9bcH
	DD	0901a22ffH
	DD	0c380797bH
	DD	04426b238H
	DD	082a481edH
	DD	05024aaeH
	DD	05698112aH
	DD	0d13eda69H
	DD	0f1aca622H
	DD	0760a6d61H
	DD	0259036e5H
	DD	0a236fda6H
	DD	0ba8ccbe8H
	DD	03d2a00abH
	DD	06eb05b2fH
	DD	0e916906cH
	DD	0c984ec27H
	DD	04e222764H
	DD	01db87ce0H
	DD	09a1eb7a3H
	DD	05c9c8476H
	DD	0db3a4f35H
	DD	088a014b1H
	DD	0f06dff2H
	DD	02f94a3b9H
	DD	0a83268faH
	DD	0fba8337eH
	DD	07c0ef83dH
	DD	0addd5295H
	DD	02a7b99d6H
	DD	079e1c252H
	DD	0fe470911H
	DD	0ded5755aH
	DD	05973be19H
	DD	0ae9e59dH
	DD	08d4f2edeH
	DD	04bcd1d0bH
	DD	0cc6bd648H
	DD	09ff18dccH
	DD	01857468fH
	DD	038c53ac4H
	DD	0bf63f187H
	DD	0ecf9aa03H
	DD	06b5f6140H
	DD	0942ff912H
	DD	013893251H
	DD	0401369d5H
	DD	0c7b5a296H
	DD	0e727deddH
	DD	06081159eH
	DD	0331b4e1aH
	DD	0b4bd8559H
	DD	0723fb68cH
	DD	0f5997dcfH
	DD	0a603264bH
	DD	021a5ed08H
	DD	01379143H
	DD	086915a00H
	DD	0d50b0184H
	DD	052adcac7H
	DD	0837e606fH
	DD	04d8ab2cH
	DD	05742f0a8H
	DD	0d0e43bebH
	DD	0f07647a0H
	DD	077d08ce3H
	DD	0244ad767H
	DD	0a3ec1c24H
	DD	0656e2ff1H
	DD	0e2c8e4b2H
	DD	0b152bf36H
	DD	036f47475H
	DD	01666083eH
	DD	091c0c37dH
	DD	0c25a98f9H
	DD	045fc53baH
	DD	0e7caae1cH
	DD	0606c655fH
	DD	033f63edbH
	DD	0b450f598H
	DD	094c289d3H
	DD	013644290H
	DD	040fe1914H
	DD	0c758d257H
	DD	01dae182H
	DD	0867c2ac1H
	DD	0d5e67145H
	DD	05240ba06H
	DD	072d2c64dH
	DD	0f5740d0eH
	DD	0a6ee568aH
	DD	021489dc9H
	DD	0f09b3761H
	DD	0773dfc22H
	DD	024a7a7a6H
	DD	0a3016ce5H
	DD	0839310aeH
	DD	0435dbedH
	DD	057af8069H
	DD	0d0094b2aH
	DD	0168b78ffH
	DD	0912db3bcH
	DD	0c2b7e838H
	DD	04511237bH
	DD	065835f30H
	DD	0e2259473H
	DD	0b1bfcff7H
	DD	0361904b4H
	DD	0c9699ce6H
	DD	04ecf57a5H
	DD	01d550c21H
	DD	09af3c762H
	DD	0ba61bb29H
	DD	03dc7706aH
	DD	06e5d2beeH
	DD	0e9fbe0adH
	DD	02f79d378H
	DD	0a8df183bH
	DD	0fb4543bfH
	DD	07ce388fcH
	DD	05c71f4b7H
	DD	0dbd73ff4H
	DD	0884d6470H
	DD	0febaf33H
	DD	0de38059bH
	DD	0599eced8H
	DD	0a04955cH
	DD	08da25e1fH
	DD	0ad302254H
	DD	02a96e917H
	DD	0790cb293H
	DD	0feaa79d0H
	DD	038284a05H
	DD	0bf8e8146H
	DD	0ec14dac2H
	DD	06bb21181H
	DD	04b206dcaH
	DD	0cc86a689H
	DD	09f1cfd0dH
	DD	018ba364eH
_crc_braid_big_table DD 00H
	DD	043cba687H
	DD	0c7903cd4H
	DD	0845b9a53H
	DD	0cf270873H
	DD	08cecaef4H
	DD	08b734a7H
	DD	04b7c9220H
	DD	09e4f10e6H
	DD	0dd84b661H
	DD	059df2c32H
	DD	01a148ab5H
	DD	051681895H
	DD	012a3be12H
	DD	096f82441H
	DD	0d53382c6H
	DD	07d995117H
	DD	03e52f790H
	DD	0ba096dc3H
	DD	0f9c2cb44H
	DD	0b2be5964H
	DD	0f175ffe3H
	DD	0752e65b0H
	DD	036e5c337H
	DD	0e3d641f1H
	DD	0a01de776H
	DD	024467d25H
	DD	0678ddba2H
	DD	02cf14982H
	DD	06f3aef05H
	DD	0eb617556H
	DD	0a8aad3d1H
	DD	0fa32a32eH
	DD	0b9f905a9H
	DD	03da29ffaH
	DD	07e69397dH
	DD	03515ab5dH
	DD	076de0ddaH
	DD	0f2859789H
	DD	0b14e310eH
	DD	0647db3c8H
	DD	027b6154fH
	DD	0a3ed8f1cH
	DD	0e026299bH
	DD	0ab5abbbbH
	DD	0e8911d3cH
	DD	06cca876fH
	DD	02f0121e8H
	DD	087abf239H
	DD	0c46054beH
	DD	0403bceedH
	DD	03f0686aH
	DD	0488cfa4aH
	DD	0b475ccdH
	DD	08f1cc69eH
	DD	0ccd76019H
	DD	019e4e2dfH
	DD	05a2f4458H
	DD	0de74de0bH
	DD	09dbf788cH
	DD	0d6c3eaacH
	DD	095084c2bH
	DD	01153d678H
	DD	0529870ffH
	DD	0f465465dH
	DD	0b7aee0daH
	DD	033f57a89H
	DD	0703edc0eH
	DD	03b424e2eH
	DD	07889e8a9H
	DD	0fcd272faH
	DD	0bf19d47dH
	DD	06a2a56bbH
	DD	029e1f03cH
	DD	0adba6a6fH
	DD	0ee71cce8H
	DD	0a50d5ec8H
	DD	0e6c6f84fH
	DD	0629d621cH
	DD	02156c49bH
	DD	089fc174aH
	DD	0ca37b1cdH
	DD	04e6c2b9eH
	DD	0da78d19H
	DD	046db1f39H
	DD	0510b9beH
	DD	0814b23edH
	DD	0c280856aH
	DD	017b307acH
	DD	05478a12bH
	DD	0d0233b78H
	DD	093e89dffH
	DD	0d8940fdfH
	DD	09b5fa958H
	DD	01f04330bH
	DD	05ccf958cH
	DD	0e57e573H
	DD	04d9c43f4H
	DD	0c9c7d9a7H
	DD	08a0c7f20H
	DD	0c170ed00H
	DD	082bb4b87H
	DD	06e0d1d4H
	DD	0452b7753H
	DD	09018f595H
	DD	0d3d35312H
	DD	05788c941H
	DD	014436fc6H
	DD	05f3ffde6H
	DD	01cf45b61H
	DD	098afc132H
	DD	0db6467b5H
	DD	073ceb464H
	DD	0300512e3H
	DD	0b45e88b0H
	DD	0f7952e37H
	DD	0bce9bc17H
	DD	0ff221a90H
	DD	07b7980c3H
	DD	038b22644H
	DD	0ed81a482H
	DD	0ae4a0205H
	DD	02a119856H
	DD	069da3ed1H
	DD	022a6acf1H
	DD	0616d0a76H
	DD	0e5369025H
	DD	0a6fd36a2H
	DD	0e8cb8cbaH
	DD	0ab002a3dH
	DD	02f5bb06eH
	DD	06c9016e9H
	DD	027ec84c9H
	DD	06427224eH
	DD	0e07cb81dH
	DD	0a3b71e9aH
	DD	076849c5cH
	DD	0354f3adbH
	DD	0b114a088H
	DD	0f2df060fH
	DD	0b9a3942fH
	DD	0fa6832a8H
	DD	07e33a8fbH
	DD	03df80e7cH
	DD	09552ddadH
	DD	0d6997b2aH
	DD	052c2e179H
	DD	0110947feH
	DD	05a75d5deH
	DD	019be7359H
	DD	09de5e90aH
	DD	0de2e4f8dH
	DD	0b1dcd4bH
	DD	048d66bccH
	DD	0cc8df19fH
	DD	08f465718H
	DD	0c43ac538H
	DD	087f163bfH
	DD	03aaf9ecH
	DD	040615f6bH
	DD	012f92f94H
	DD	051328913H
	DD	0d5691340H
	DD	096a2b5c7H
	DD	0ddde27e7H
	DD	09e158160H
	DD	01a4e1b33H
	DD	05985bdb4H
	DD	08cb63f72H
	DD	0cf7d99f5H
	DD	04b2603a6H
	DD	08eda521H
	DD	043913701H
	DD	05a9186H
	DD	084010bd5H
	DD	0c7caad52H
	DD	06f607e83H
	DD	02cabd804H
	DD	0a8f04257H
	DD	0eb3be4d0H
	DD	0a04776f0H
	DD	0e38cd077H
	DD	067d74a24H
	DD	0241ceca3H
	DD	0f12f6e65H
	DD	0b2e4c8e2H
	DD	036bf52b1H
	DD	07574f436H
	DD	03e086616H
	DD	07dc3c091H
	DD	0f9985ac2H
	DD	0ba53fc45H
	DD	01caecae7H
	DD	05f656c60H
	DD	0db3ef633H
	DD	098f550b4H
	DD	0d389c294H
	DD	090426413H
	DD	01419fe40H
	DD	057d258c7H
	DD	082e1da01H
	DD	0c12a7c86H
	DD	04571e6d5H
	DD	06ba4052H
	DD	04dc6d272H
	DD	0e0d74f5H
	DD	08a56eea6H
	DD	0c99d4821H
	DD	061379bf0H
	DD	022fc3d77H
	DD	0a6a7a724H
	DD	0e56c01a3H
	DD	0ae109383H
	DD	0eddb3504H
	DD	06980af57H
	DD	02a4b09d0H
	DD	0ff788b16H
	DD	0bcb32d91H
	DD	038e8b7c2H
	DD	07b231145H
	DD	0305f8365H
	DD	0739425e2H
	DD	0f7cfbfb1H
	DD	0b4041936H
	DD	0e69c69c9H
	DD	0a557cf4eH
	DD	0210c551dH
	DD	062c7f39aH
	DD	029bb61baH
	DD	06a70c73dH
	DD	0ee2b5d6eH
	DD	0ade0fbe9H
	DD	078d3792fH
	DD	03b18dfa8H
	DD	0bf4345fbH
	DD	0fc88e37cH
	DD	0b7f4715cH
	DD	0f43fd7dbH
	DD	070644d88H
	DD	033afeb0fH
	DD	09b0538deH
	DD	0d8ce9e59H
	DD	05c95040aH
	DD	01f5ea28dH
	DD	0542230adH
	DD	017e9962aH
	DD	093b20c79H
	DD	0d079aafeH
	DD	054a2838H
	DD	046818ebfH
	DD	0c2da14ecH
	DD	08111b26bH
	DD	0ca6d204bH
	DD	089a686ccH
	DD	0dfd1c9fH
	DD	04e36ba18H
	DD	00H
	DD	0e1b652efH
	DD	0836bd405H
	DD	062dd86eaH
	DD	06d7a80bH
	DD	0e761fae4H
	DD	085bc7c0eH
	DD	0640a2ee1H
	DD	0cae5117H
	DD	0ed1803f8H
	DD	08fc58512H
	DD	06e73d7fdH
	DD	0a79f91cH
	DD	0ebcfabf3H
	DD	089122d19H
	DD	068a47ff6H
	DD	0185ca32eH
	DD	0f9eaf1c1H
	DD	09b37772bH
	DD	07a8125c4H
	DD	01e8b0b25H
	DD	0ff3d59caH
	DD	09de0df20H
	DD	07c568dcfH
	DD	014f2f239H
	DD	0f544a0d6H
	DD	09799263cH
	DD	0762f74d3H
	DD	012255a32H
	DD	0f39308ddH
	DD	0914e8e37H
	DD	070f8dcd8H
	DD	030b8465dH
	DD	0d10e14b2H
	DD	0b3d39258H
	DD	05265c0b7H
	DD	0366fee56H
	DD	0d7d9bcb9H
	DD	0b5043a53H
	DD	054b268bcH
	DD	03c16174aH
	DD	0dda045a5H
	DD	0bf7dc34fH
	DD	05ecb91a0H
	DD	03ac1bf41H
	DD	0db77edaeH
	DD	0b9aa6b44H
	DD	0581c39abH
	DD	028e4e573H
	DD	0c952b79cH
	DD	0ab8f3176H
	DD	04a396399H
	DD	02e334d78H
	DD	0cf851f97H
	DD	0ad58997dH
	DD	04ceecb92H
	DD	0244ab464H
	DD	0c5fce68bH
	DD	0a7216061H
	DD	04697328eH
	DD	0229d1c6fH
	DD	0c32b4e80H
	DD	0a1f6c86aH
	DD	040409a85H
	DD	060708dbaH
	DD	081c6df55H
	DD	0e31b59bfH
	DD	02ad0b50H
	DD	066a725b1H
	DD	08711775eH
	DD	0e5ccf1b4H
	DD	047aa35bH
	DD	06cdedcadH
	DD	08d688e42H
	DD	0efb508a8H
	DD	0e035a47H
	DD	06a0974a6H
	DD	08bbf2649H
	DD	0e962a0a3H
	DD	08d4f24cH
	DD	0782c2e94H
	DD	0999a7c7bH
	DD	0fb47fa91H
	DD	01af1a87eH
	DD	07efb869fH
	DD	09f4dd470H
	DD	0fd90529aH
	DD	01c260075H
	DD	074827f83H
	DD	095342d6cH
	DD	0f7e9ab86H
	DD	0165ff969H
	DD	07255d788H
	DD	093e38567H
	DD	0f13e038dH
	DD	010885162H
	DD	050c8cbe7H
	DD	0b17e9908H
	DD	0d3a31fe2H
	DD	032154d0dH
	DD	0561f63ecH
	DD	0b7a93103H
	DD	0d574b7e9H
	DD	034c2e506H
	DD	05c669af0H
	DD	0bdd0c81fH
	DD	0df0d4ef5H
	DD	03ebb1c1aH
	DD	05ab132fbH
	DD	0bb076014H
	DD	0d9dae6feH
	DD	0386cb411H
	DD	0489468c9H
	DD	0a9223a26H
	DD	0cbffbcccH
	DD	02a49ee23H
	DD	04e43c0c2H
	DD	0aff5922dH
	DD	0cd2814c7H
	DD	02c9e4628H
	DD	0443a39deH
	DD	0a58c6b31H
	DD	0c751eddbH
	DD	026e7bf34H
	DD	042ed91d5H
	DD	0a35bc33aH
	DD	0c18645d0H
	DD	02030173fH
	DD	081e66baeH
	DD	060503941H
	DD	028dbfabH
	DD	0e33bed44H
	DD	08731c3a5H
	DD	06687914aH
	DD	045a17a0H
	DD	0e5ec454fH
	DD	08d483ab9H
	DD	06cfe6856H
	DD	0e23eebcH
	DD	0ef95bc53H
	DD	08b9f92b2H
	DD	06a29c05dH
	DD	08f446b7H
	DD	0e9421458H
	DD	099bac880H
	DD	0780c9a6fH
	DD	01ad11c85H
	DD	0fb674e6aH
	DD	09f6d608bH
	DD	07edb3264H
	DD	01c06b48eH
	DD	0fdb0e661H
	DD	095149997H
	DD	074a2cb78H
	DD	0167f4d92H
	DD	0f7c91f7dH
	DD	093c3319cH
	DD	072756373H
	DD	010a8e599H
	DD	0f11eb776H
	DD	0b15e2df3H
	DD	050e87f1cH
	DD	03235f9f6H
	DD	0d383ab19H
	DD	0b78985f8H
	DD	0563fd717H
	DD	034e251fdH
	DD	0d5540312H
	DD	0bdf07ce4H
	DD	05c462e0bH
	DD	03e9ba8e1H
	DD	0df2dfa0eH
	DD	0bb27d4efH
	DD	05a918600H
	DD	0384c00eaH
	DD	0d9fa5205H
	DD	0a9028eddH
	DD	048b4dc32H
	DD	02a695ad8H
	DD	0cbdf0837H
	DD	0afd526d6H
	DD	04e637439H
	DD	02cbef2d3H
	DD	0cd08a03cH
	DD	0a5acdfcaH
	DD	0441a8d25H
	DD	026c70bcfH
	DD	0c7715920H
	DD	0a37b77c1H
	DD	042cd252eH
	DD	02010a3c4H
	DD	0c1a6f12bH
	DD	0e196e614H
	DD	020b4fbH
	DD	062fd3211H
	DD	0834b60feH
	DD	0e7414e1fH
	DD	06f71cf0H
	DD	0642a9a1aH
	DD	0859cc8f5H
	DD	0ed38b703H
	DD	0c8ee5ecH
	DD	06e536306H
	DD	08fe531e9H
	DD	0ebef1f08H
	DD	0a594de7H
	DD	06884cb0dH
	DD	0893299e2H
	DD	0f9ca453aH
	DD	0187c17d5H
	DD	07aa1913fH
	DD	09b17c3d0H
	DD	0ff1ded31H
	DD	01eabbfdeH
	DD	07c763934H
	DD	09dc06bdbH
	DD	0f564142dH
	DD	014d246c2H
	DD	0760fc028H
	DD	097b992c7H
	DD	0f3b3bc26H
	DD	01205eec9H
	DD	070d86823H
	DD	0916e3accH
	DD	0d12ea049H
	DD	03098f2a6H
	DD	05245744cH
	DD	0b3f326a3H
	DD	0d7f90842H
	DD	0364f5aadH
	DD	05492dc47H
	DD	0b5248ea8H
	DD	0dd80f15eH
	DD	03c36a3b1H
	DD	05eeb255bH
	DD	0bf5d77b4H
	DD	0db575955H
	DD	03ae10bbaH
	DD	0583c8d50H
	DD	0b98adfbfH
	DD	0c9720367H
	DD	028c45188H
	DD	04a19d762H
	DD	0abaf858dH
	DD	0cfa5ab6cH
	DD	02e13f983H
	DD	04cce7f69H
	DD	0ad782d86H
	DD	0c5dc5270H
	DD	0246a009fH
	DD	046b78675H
	DD	0a701d49aH
	DD	0c30bfa7bH
	DD	022bda894H
	DD	040602e7eH
	DD	0a1d67c91H
	DD	00H
	DD	05880e2d7H
	DD	0f106b474H
	DD	0a98656a3H
	DD	0e20d68e9H
	DD	0ba8d8a3eH
	DD	0130bdc9dH
	DD	04b8b3e4aH
	DD	0851da109H
	DD	0dd9d43deH
	DD	0741b157dH
	DD	02c9bf7aaH
	DD	06710c9e0H
	DD	03f902b37H
	DD	096167d94H
	DD	0ce969f43H
	DD	0a3b4213H
	DD	052bba0c4H
	DD	0fb3df667H
	DD	0a3bd14b0H
	DD	0e8362afaH
	DD	0b0b6c82dH
	DD	019309e8eH
	DD	041b07c59H
	DD	08f26e31aH
	DD	0d7a601cdH
	DD	07e20576eH
	DD	026a0b5b9H
	DD	06d2b8bf3H
	DD	035ab6924H
	DD	09c2d3f87H
	DD	0c4addd50H
	DD	014768426H
	DD	04cf666f1H
	DD	0e5703052H
	DD	0bdf0d285H
	DD	0f67beccfH
	DD	0aefb0e18H
	DD	077d58bbH
	DD	05ffdba6cH
	DD	0916b252fH
	DD	0c9ebc7f8H
	DD	0606d915bH
	DD	038ed738cH
	DD	073664dc6H
	DD	02be6af11H
	DD	08260f9b2H
	DD	0dae01b65H
	DD	01e4dc635H
	DD	046cd24e2H
	DD	0ef4b7241H
	DD	0b7cb9096H
	DD	0fc40aedcH
	DD	0a4c04c0bH
	DD	0d461aa8H
	DD	055c6f87fH
	DD	09b50673cH
	DD	0c3d085ebH
	DD	06a56d348H
	DD	032d6319fH
	DD	0795d0fd5H
	DD	021dded02H
	DD	0885bbba1H
	DD	0d0db5976H
	DD	028ec084dH
	DD	0706cea9aH
	DD	0d9eabc39H
	DD	0816a5eeeH
	DD	0cae160a4H
	DD	092618273H
	DD	03be7d4d0H
	DD	063673607H
	DD	0adf1a944H
	DD	0f5714b93H
	DD	05cf71d30H
	DD	0477ffe7H
	DD	04ffcc1adH
	DD	0177c237aH
	DD	0befa75d9H
	DD	0e67a970eH
	DD	022d74a5eH
	DD	07a57a889H
	DD	0d3d1fe2aH
	DD	08b511cfdH
	DD	0c0da22b7H
	DD	0985ac060H
	DD	031dc96c3H
	DD	0695c7414H
	DD	0a7caeb57H
	DD	0ff4a0980H
	DD	056cc5f23H
	DD	0e4cbdf4H
	DD	045c783beH
	DD	01d476169H
	DD	0b4c137caH
	DD	0ec41d51dH
	DD	03c9a8c6bH
	DD	0641a6ebcH
	DD	0cd9c381fH
	DD	0951cdac8H
	DD	0de97e482H
	DD	086170655H
	DD	02f9150f6H
	DD	07711b221H
	DD	0b9872d62H
	DD	0e107cfb5H
	DD	048819916H
	DD	010017bc1H
	DD	05b8a458bH
	DD	030aa75cH
	DD	0aa8cf1ffH
	DD	0f20c1328H
	DD	036a1ce78H
	DD	06e212cafH
	DD	0c7a77a0cH
	DD	09f2798dbH
	DD	0d4aca691H
	DD	08c2c4446H
	DD	025aa12e5H
	DD	07d2af032H
	DD	0b3bc6f71H
	DD	0eb3c8da6H
	DD	042badb05H
	DD	01a3a39d2H
	DD	051b10798H
	DD	0931e54fH
	DD	0a0b7b3ecH
	DD	0f837513bH
	DD	050d8119aH
	DD	0858f34dH
	DD	0a1dea5eeH
	DD	0f95e4739H
	DD	0b2d57973H
	DD	0ea559ba4H
	DD	043d3cd07H
	DD	01b532fd0H
	DD	0d5c5b093H
	DD	08d455244H
	DD	024c304e7H
	DD	07c43e630H
	DD	037c8d87aH
	DD	06f483aadH
	DD	0c6ce6c0eH
	DD	09e4e8ed9H
	DD	05ae35389H
	DD	0263b15eH
	DD	0abe5e7fdH
	DD	0f365052aH
	DD	0b8ee3b60H
	DD	0e06ed9b7H
	DD	049e88f14H
	DD	011686dc3H
	DD	0dffef280H
	DD	0877e1057H
	DD	02ef846f4H
	DD	07678a423H
	DD	03df39a69H
	DD	0657378beH
	DD	0ccf52e1dH
	DD	09475cccaH
	DD	044ae95bcH
	DD	01c2e776bH
	DD	0b5a821c8H
	DD	0ed28c31fH
	DD	0a6a3fd55H
	DD	0fe231f82H
	DD	057a54921H
	DD	0f25abf6H
	DD	0c1b334b5H
	DD	09933d662H
	DD	030b580c1H
	DD	068356216H
	DD	023be5c5cH
	DD	07b3ebe8bH
	DD	0d2b8e828H
	DD	08a380affH
	DD	04e95d7afH
	DD	016153578H
	DD	0bf9363dbH
	DD	0e713810cH
	DD	0ac98bf46H
	DD	0f4185d91H
	DD	05d9e0b32H
	DD	051ee9e5H
	DD	0cb8876a6H
	DD	093089471H
	DD	03a8ec2d2H
	DD	0620e2005H
	DD	029851e4fH
	DD	07105fc98H
	DD	0d883aa3bH
	DD	0800348ecH
	DD	0783419d7H
	DD	020b4fb00H
	DD	08932ada3H
	DD	0d1b24f74H
	DD	09a39713eH
	DD	0c2b993e9H
	DD	06b3fc54aH
	DD	033bf279dH
	DD	0fd29b8deH
	DD	0a5a95a09H
	DD	0c2f0caaH
	DD	054afee7dH
	DD	01f24d037H
	DD	047a432e0H
	DD	0ee226443H
	DD	0b6a28694H
	DD	0720f5bc4H
	DD	02a8fb913H
	DD	08309efb0H
	DD	0db890d67H
	DD	09002332dH
	DD	0c882d1faH
	DD	061048759H
	DD	03984658eH
	DD	0f712facdH
	DD	0af92181aH
	DD	06144eb9H
	DD	05e94ac6eH
	DD	0151f9224H
	DD	04d9f70f3H
	DD	0e4192650H
	DD	0bc99c487H
	DD	06c429df1H
	DD	034c27f26H
	DD	09d442985H
	DD	0c5c4cb52H
	DD	08e4ff518H
	DD	0d6cf17cfH
	DD	07f49416cH
	DD	027c9a3bbH
	DD	0e95f3cf8H
	DD	0b1dfde2fH
	DD	01859888cH
	DD	040d96a5bH
	DD	0b525411H
	DD	053d2b6c6H
	DD	0fa54e065H
	DD	0a2d402b2H
	DD	06679dfe2H
	DD	03ef93d35H
	DD	0977f6b96H
	DD	0cfff8941H
	DD	08474b70bH
	DD	0dcf455dcH
	DD	07572037fH
	DD	02df2e1a8H
	DD	0e3647eebH
	DD	0bbe49c3cH
	DD	01262ca9fH
	DD	04ae22848H
	DD	01691602H
	DD	059e9f4d5H
	DD	0f06fa276H
	DD	0a8ef40a1H
	DD	00H
	DD	0463b6765H
	DD	08c76cecaH
	DD	0ca4da9afH
	DD	059ebed4eH
	DD	01fd08a2bH
	DD	0d59d2384H
	DD	093a644e1H
	DD	0b2d6db9dH
	DD	0f4edbcf8H
	DD	03ea01557H
	DD	0789b7232H
	DD	0eb3d36d3H
	DD	0ad0651b6H
	DD	0674bf819H
	DD	021709f7cH
	DD	025abc6e0H
	DD	06390a185H
	DD	0a9dd082aH
	DD	0efe66f4fH
	DD	07c402baeH
	DD	03a7b4ccbH
	DD	0f036e564H
	DD	0b60d8201H
	DD	0977d1d7dH
	DD	0d1467a18H
	DD	01b0bd3b7H
	DD	05d30b4d2H
	DD	0ce96f033H
	DD	088ad9756H
	DD	042e03ef9H
	DD	04db599cH
	DD	0b50fc1aH
	DD	04d6b9b7fH
	DD	0872632d0H
	DD	0c11d55b5H
	DD	052bb1154H
	DD	014807631H
	DD	0decddf9eH
	DD	098f6b8fbH
	DD	0b9862787H
	DD	0ffbd40e2H
	DD	035f0e94dH
	DD	073cb8e28H
	DD	0e06dcac9H
	DD	0a656adacH
	DD	06c1b0403H
	DD	02a206366H
	DD	02efb3afaH
	DD	068c05d9fH
	DD	0a28df430H
	DD	0e4b69355H
	DD	07710d7b4H
	DD	0312bb0d1H
	DD	0fb66197eH
	DD	0bd5d7e1bH
	DD	09c2de167H
	DD	0da168602H
	DD	0105b2fadH
	DD	0566048c8H
	DD	0c5c60c29H
	DD	083fd6b4cH
	DD	049b0c2e3H
	DD	0f8ba586H
	DD	016a0f835H
	DD	0509b9f50H
	DD	09ad636ffH
	DD	0dced519aH
	DD	04f4b157bH
	DD	0970721eH
	DD	0c33ddbb1H
	DD	08506bcd4H
	DD	0a47623a8H
	DD	0e24d44cdH
	DD	02800ed62H
	DD	06e3b8a07H
	DD	0fd9dcee6H
	DD	0bba6a983H
	DD	071eb002cH
	DD	037d06749H
	DD	0330b3ed5H
	DD	0753059b0H
	DD	0bf7df01fH
	DD	0f946977aH
	DD	06ae0d39bH
	DD	02cdbb4feH
	DD	0e6961d51H
	DD	0a0ad7a34H
	DD	081dde548H
	DD	0c7e6822dH
	DD	0dab2b82H
	DD	04b904ce7H
	DD	0d8360806H
	DD	09e0d6f63H
	DD	05440c6ccH
	DD	0127ba1a9H
	DD	01df0042fH
	DD	05bcb634aH
	DD	09186cae5H
	DD	0d7bdad80H
	DD	0441be961H
	DD	02208e04H
	DD	0c86d27abH
	DD	08e5640ceH
	DD	0af26dfb2H
	DD	0e91db8d7H
	DD	023501178H
	DD	0656b761dH
	DD	0f6cd32fcH
	DD	0b0f65599H
	DD	07abbfc36H
	DD	03c809b53H
	DD	0385bc2cfH
	DD	07e60a5aaH
	DD	0b42d0c05H
	DD	0f2166b60H
	DD	061b02f81H
	DD	0278b48e4H
	DD	0edc6e14bH
	DD	0abfd862eH
	DD	08a8d1952H
	DD	0ccb67e37H
	DD	06fbd798H
	DD	040c0b0fdH
	DD	0d366f41cH
	DD	0955d9379H
	DD	05f103ad6H
	DD	0192b5db3H
	DD	02c40f16bH
	DD	06a7b960eH
	DD	0a0363fa1H
	DD	0e60d58c4H
	DD	075ab1c25H
	DD	033907b40H
	DD	0f9ddd2efH
	DD	0bfe6b58aH
	DD	09e962af6H
	DD	0d8ad4d93H
	DD	012e0e43cH
	DD	054db8359H
	DD	0c77dc7b8H
	DD	08146a0ddH
	DD	04b0b0972H
	DD	0d306e17H
	DD	09eb378bH
	DD	04fd050eeH
	DD	0859df941H
	DD	0c3a69e24H
	DD	05000dac5H
	DD	0163bbda0H
	DD	0dc76140fH
	DD	09a4d736aH
	DD	0bb3dec16H
	DD	0fd068b73H
	DD	0374b22dcH
	DD	0717045b9H
	DD	0e2d60158H
	DD	0a4ed663dH
	DD	06ea0cf92H
	DD	0289ba8f7H
	DD	027100d71H
	DD	0612b6a14H
	DD	0ab66c3bbH
	DD	0ed5da4deH
	DD	07efbe03fH
	DD	038c0875aH
	DD	0f28d2ef5H
	DD	0b4b64990H
	DD	095c6d6ecH
	DD	0d3fdb189H
	DD	019b01826H
	DD	05f8b7f43H
	DD	0cc2d3ba2H
	DD	08a165cc7H
	DD	0405bf568H
	DD	0660920dH
	DD	02bbcb91H
	DD	04480acf4H
	DD	08ecd055bH
	DD	0c8f6623eH
	DD	05b5026dfH
	DD	01d6b41baH
	DD	0d726e815H
	DD	0911d8f70H
	DD	0b06d100cH
	DD	0f6567769H
	DD	03c1bdec6H
	DD	07a20b9a3H
	DD	0e986fd42H
	DD	0afbd9a27H
	DD	065f03388H
	DD	023cb54edH
	DD	03ae0095eH
	DD	07cdb6e3bH
	DD	0b696c794H
	DD	0f0ada0f1H
	DD	0630be410H
	DD	025308375H
	DD	0ef7d2adaH
	DD	0a9464dbfH
	DD	08836d2c3H
	DD	0ce0db5a6H
	DD	04401c09H
	DD	0427b7b6cH
	DD	0d1dd3f8dH
	DD	097e658e8H
	DD	05dabf147H
	DD	01b909622H
	DD	01f4bcfbeH
	DD	05970a8dbH
	DD	0933d0174H
	DD	0d5066611H
	DD	046a022f0H
	DD	09b4595H
	DD	0cad6ec3aH
	DD	08ced8b5fH
	DD	0ad9d1423H
	DD	0eba67346H
	DD	021ebdae9H
	DD	067d0bd8cH
	DD	0f476f96dH
	DD	0b24d9e08H
	DD	0780037a7H
	DD	03e3b50c2H
	DD	031b0f544H
	DD	0778b9221H
	DD	0bdc63b8eH
	DD	0fbfd5cebH
	DD	0685b180aH
	DD	02e607f6fH
	DD	0e42dd6c0H
	DD	0a216b1a5H
	DD	083662ed9H
	DD	0c55d49bcH
	DD	0f10e013H
	DD	0492b8776H
	DD	0da8dc397H
	DD	09cb6a4f2H
	DD	056fb0d5dH
	DD	010c06a38H
	DD	0141b33a4H
	DD	0522054c1H
	DD	0986dfd6eH
	DD	0de569a0bH
	DD	04df0deeaH
	DD	0bcbb98fH
	DD	0c1861020H
	DD	087bd7745H
	DD	0a6cde839H
	DD	0e0f68f5cH
	DD	02abb26f3H
	DD	06c804196H
	DD	0ff260577H
	DD	0b91d6212H
	DD	07350cbbdH
	DD	0356bacd8H
_x2n_table DD	040000000H
	DD	020000000H
	DD	08000000H
	DD	0800000H
	DD	08000H
	DD	0edb88320H
	DD	0b1e6b092H
	DD	0a06a2517H
	DD	0ed627daeH
	DD	088d14467H
	DD	0d7bbfe6aH
	DD	0ec447f11H
	DD	08e7ea170H
	DD	06427800eH
	DD	04d47bae0H
	DD	09fe548fH
	DD	083852d0fH
	DD	030362f1aH
	DD	07b5a9cc3H
	DD	031fec169H
	DD	09fec022aH
	DD	06c8dedc4H
	DD	015d6874dH
	DD	05fde7a4eH
	DD	0bad90e37H
	DD	02e4e5eefH
	DD	04eaba214H
	DD	0a8a472c0H
	DD	0429a969eH
	DD	0148d302aH
	DD	0c40ba6d0H
	DD	0c4e22c3cH
PUBLIC	_crc32_combine_op@12
PUBLIC	_crc32_combine_gen@4
PUBLIC	_crc32_combine_gen64@8
PUBLIC	_crc32_combine@12
PUBLIC	_crc32_combine64@16
PUBLIC	_crc32@12
PUBLIC	_crc32_z@12
PUBLIC	_get_crc_table@0
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _byte_swap
_TEXT	SEGMENT
_byte_swap PROC						; COMDAT
; _word$ = ecx

; 129  : #  if W == 8
; 130  :     return
; 131  :         (word & 0xff00000000000000) >> 56 |
; 132  :         (word & 0xff000000000000) >> 40 |
; 133  :         (word & 0xff0000000000) >> 24 |
; 134  :         (word & 0xff00000000) >> 8 |
; 135  :         (word & 0xff000000) << 8 |
; 136  :         (word & 0xff0000) << 24 |
; 137  :         (word & 0xff00) << 40 |
; 138  :         (word & 0xff) << 56;
; 139  : #  else   /* W == 4 */
; 140  :     return

  00000	0f c9		 bswap	 ecx
  00002	8b c1		 mov	 eax, ecx

; 141  :         (word & 0xff000000) >> 24 |
; 142  :         (word & 0xff0000) >> 8 |
; 143  :         (word & 0xff00) << 8 |
; 144  :         (word & 0xff) << 24;
; 145  : #  endif
; 146  : }

  00004	c3		 ret	 0
_byte_swap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _multmodp
_TEXT	SEGMENT
_multmodp PROC						; COMDAT
; _a$ = ecx
; _b$ = edx

; 554  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx

; 555  :     z_crc_t m, p;
; 556  : 
; 557  :     m = (z_crc_t)1 << 31;

  00005	be 00 00 00 80	 mov	 esi, -2147483648	; 80000000H

; 558  :     p = 0;

  0000a	33 ff		 xor	 edi, edi
  0000c	0f 1f 40 00	 npad	 4
$LL2@multmodp:

; 559  :     for (;;) {
; 560  :         if (a & m) {

  00010	85 f3		 test	 esi, ebx
  00012	74 09		 je	 SHORT $LN6@multmodp

; 561  :             p ^= b;
; 562  :             if ((a & (m - 1)) == 0)

  00014	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00017	33 fa		 xor	 edi, edx
  00019	85 c3		 test	 eax, ebx
  0001b	74 17		 je	 SHORT $LN18@multmodp
$LN6@multmodp:

; 563  :                 break;
; 564  :         }
; 565  :         m >>= 1;
; 566  :         b = b & 1 ? (b >> 1) ^ POLY : b >> 1;

  0001d	8b ca		 mov	 ecx, edx
  0001f	d1 ee		 shr	 esi, 1
  00021	d1 e9		 shr	 ecx, 1
  00023	8b c2		 mov	 eax, edx

; 567  :     }

  00025	8b d1		 mov	 edx, ecx
  00027	81 f2 20 83 b8
	ed		 xor	 edx, -306674912		; edb88320H
  0002d	a8 01		 test	 al, 1
  0002f	0f 44 d1	 cmove	 edx, ecx
  00032	eb dc		 jmp	 SHORT $LL2@multmodp
$LN18@multmodp:

; 568  :     return p;

  00034	8b c7		 mov	 eax, edi
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 569  : }

  00039	c3		 ret	 0
_multmodp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _x2nmodp
_TEXT	SEGMENT
_n$ = 8							; size = 8
_x2nmodp PROC						; COMDAT
; _k$dead$ = ecx

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 579  :     z_crc_t p;
; 580  : 
; 581  :     p = (z_crc_t)1 << 31;           /* x^0 == 1 */
; 582  :     while (n) {

  00006	8b 75 0c	 mov	 esi, DWORD PTR _n$[ebp+4]
  00009	bb 03 00 00 00	 mov	 ebx, 3
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR _n$[ebp]
  00012	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00017	8b c7		 mov	 eax, edi
  00019	0b c6		 or	 eax, esi
  0001b	74 2d		 je	 SHORT $LN10@x2nmodp
  0001d	0f 1f 00	 npad	 3
$LL2@x2nmodp:

; 583  :         if (n & 1)

  00020	8b c7		 mov	 eax, edi
  00022	83 e0 01	 and	 eax, 1
  00025	83 c8 00	 or	 eax, 0
  00028	74 13		 je	 SHORT $LN4@x2nmodp

; 584  :             p = multmodp(x2n_table[k & 31], p);

  0002a	8b cb		 mov	 ecx, ebx
  0002c	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0002f	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _x2n_table[ecx*4]
  00036	e8 00 00 00 00	 call	 _multmodp
  0003b	8b d0		 mov	 edx, eax
$LN4@x2nmodp:

; 585  :         n >>= 1;

  0003d	0f ac f7 01	 shrd	 edi, esi, 1

; 586  :         k++;

  00041	43		 inc	 ebx
  00042	d1 fe		 sar	 esi, 1
  00044	8b c7		 mov	 eax, edi
  00046	0b c6		 or	 eax, esi
  00048	75 d6		 jne	 SHORT $LL2@x2nmodp
$LN10@x2nmodp:
  0004a	5f		 pop	 edi

; 587  :     }
; 588  :     return p;
; 589  : }

  0004b	5e		 pop	 esi
  0004c	8b c2		 mov	 eax, edx
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_x2nmodp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _get_crc_table@0
_TEXT	SEGMENT
_get_crc_table@0 PROC					; COMDAT

; 597  : #ifdef DYNAMIC_CRC_TABLE
; 598  :     once(&made, make_crc_table);
; 599  : #endif /* DYNAMIC_CRC_TABLE */
; 600  :     return (const z_crc_t FAR *)crc_table;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET _crc_table

; 601  : }

  00005	c3		 ret	 0
_get_crc_table@0 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc_word
_TEXT	SEGMENT
_crc_word PROC						; COMDAT
; _data$ = ecx

; 728  : {

  00000	8b d1		 mov	 edx, ecx

; 729  :     int k;
; 730  :     for (k = 0; k < W; k++)
; 731  :         data = (data >> 8) ^ crc_table[data & 0xff];

  00002	0f b6 c2	 movzx	 eax, dl
  00005	c1 ea 08	 shr	 edx, 8
  00008	33 14 85 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[eax*4]
  0000f	0f b6 c2	 movzx	 eax, dl
  00012	c1 ea 08	 shr	 edx, 8
  00015	33 14 85 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[eax*4]
  0001c	0f b6 ca	 movzx	 ecx, dl
  0001f	c1 ea 08	 shr	 edx, 8
  00022	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]
  00029	0f b6 ca	 movzx	 ecx, dl
  0002c	c1 ea 08	 shr	 edx, 8
  0002f	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_table[ecx*4]

; 732  :     return (z_crc_t)data;

  00036	8b c2		 mov	 eax, edx

; 733  : }

  00038	c3		 ret	 0
_crc_word ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc_word_big
_TEXT	SEGMENT
_crc_word_big PROC					; COMDAT
; _data$ = ecx

; 737  : {

  00000	8b d1		 mov	 edx, ecx

; 738  :     int k;
; 739  :     for (k = 0; k < W; k++)
; 740  :         data = (data << 8) ^

  00002	8b c2		 mov	 eax, edx
  00004	c1 e2 08	 shl	 edx, 8
  00007	c1 e8 18	 shr	 eax, 24			; 00000018H
  0000a	33 14 85 00 00
	00 00		 xor	 edx, DWORD PTR _crc_big_table[eax*4]
  00011	8b c2		 mov	 eax, edx
  00013	c1 e2 08	 shl	 edx, 8
  00016	c1 e8 18	 shr	 eax, 24			; 00000018H
  00019	33 14 85 00 00
	00 00		 xor	 edx, DWORD PTR _crc_big_table[eax*4]
  00020	8b ca		 mov	 ecx, edx
  00022	c1 e2 08	 shl	 edx, 8
  00025	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00028	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_big_table[ecx*4]
  0002f	8b ca		 mov	 ecx, edx
  00031	c1 e2 08	 shl	 edx, 8
  00034	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00037	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _crc_big_table[ecx*4]

; 741  :             crc_big_table[(data >> ((W - 1) << 3)) & 0xff];
; 742  :     return data;

  0003e	8b c2		 mov	 eax, edx

; 743  : }

  00040	c3		 ret	 0
_crc_word_big ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc32_z@12
_TEXT	SEGMENT
_word2$1$ = -28						; size = 4
_word1$1$ = -24						; size = 4
_word4$1$ = -20						; size = 4
_blks$1$ = -20						; size = 4
_word3$1$ = -16						; size = 4
_crc2$1$ = -12						; size = 4
_crc4$1$ = -8						; size = 4
_crc3$1$ = -4						; size = 4
_crc1$1$ = 8						; size = 4
_crc$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_crc32_z@12 PROC					; COMDAT

; 752  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 753  :     /* Return initial CRC, if requested. */
; 754  :     if (buf == Z_NULL) return 0;

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _buf$[ebp]
  0000a	85 db		 test	 ebx, ebx
  0000c	75 09		 jne	 SHORT $LN18@crc32_z
  0000e	33 c0		 xor	 eax, eax
  00010	5b		 pop	 ebx

; 1067 : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 0c 00	 ret	 12			; 0000000cH
$LN18@crc32_z:

; 755  : 
; 756  : #ifdef DYNAMIC_CRC_TABLE
; 757  :     once(&made, make_crc_table);
; 758  : #endif /* DYNAMIC_CRC_TABLE */
; 759  : 
; 760  :     /* Pre-condition the CRC */
; 761  :     crc = (~crc) & 0xffffffff;

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _crc$[ebp]
  0001a	57		 push	 edi

; 762  : 
; 763  : #ifdef W
; 764  : 
; 765  :     /* If provided enough bytes, do a braided CRC calculation. */
; 766  :     if (len >= N * W + W - 1) {

  0001b	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  0001e	f7 d1		 not	 ecx
  00020	83 ff 17	 cmp	 edi, 23			; 00000017H
  00023	0f 82 05 02 00
	00		 jb	 $LN28@crc32_z
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@crc32_z:

; 767  :         z_size_t blks;
; 768  :         z_word_t const *words;
; 769  :         unsigned endian;
; 770  :         int k;
; 771  : 
; 772  :         /* Compute the CRC up to a z_word_t boundary. */
; 773  :         while (len && ((z_size_t)buf & (W - 1)) != 0) {

  00030	f6 c3 03	 test	 bl, 3
  00033	74 18		 je	 SHORT $LN3@crc32_z

; 774  :             len--;
; 775  :             crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];

  00035	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00038	43		 inc	 ebx
  00039	33 c1		 xor	 eax, ecx
  0003b	c1 e9 08	 shr	 ecx, 8
  0003e	0f b6 c0	 movzx	 eax, al
  00041	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  00048	83 ef 01	 sub	 edi, 1
  0004b	75 e3		 jne	 SHORT $LL2@crc32_z
$LN3@crc32_z:

; 776  :         }
; 777  : 
; 778  :         /* Compute the CRC on as many N z_word_t blocks as are available. */
; 779  :         blks = len / (N * W);

  0004d	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  00052	89 5d 0c	 mov	 DWORD PTR _buf$[ebp], ebx
  00055	f7 e7		 mul	 edi
  00057	56		 push	 esi
  00058	c1 ea 04	 shr	 edx, 4

; 780  :         len -= blks * N * W;
; 781  :         words = (z_word_t const *)buf;
; 782  : 
; 783  :         /* Do endian check at execution time instead of compile time, since ARM
; 784  :            processors can change the endianess at execution time. If the
; 785  :            compiler knows what the endianess will be, it can optimize out the
; 786  :            check and the unused branch. */
; 787  :         endian = 1;
; 788  :         if (*(unsigned char *)&endian) {
; 789  :             /* Little endian. */
; 790  : 
; 791  :             z_crc_t crc0;
; 792  :             z_word_t word0;
; 793  : #if N > 1
; 794  :             z_crc_t crc1;
; 795  :             z_word_t word1;
; 796  : #if N > 2
; 797  :             z_crc_t crc2;
; 798  :             z_word_t word2;
; 799  : #if N > 3
; 800  :             z_crc_t crc3;
; 801  :             z_word_t word3;
; 802  : #if N > 4
; 803  :             z_crc_t crc4;
; 804  :             z_word_t word4;
; 805  : #if N > 5
; 806  :             z_crc_t crc5;
; 807  :             z_word_t word5;
; 808  : #endif
; 809  : #endif
; 810  : #endif
; 811  : #endif
; 812  : #endif
; 813  : 
; 814  :             /* Initialize the CRC for each braid. */
; 815  :             crc0 = crc;
; 816  : #if N > 1
; 817  :             crc1 = 0;
; 818  : #if N > 2
; 819  :             crc2 = 0;

  0005b	33 f6		 xor	 esi, esi
  0005d	6b c2 ec	 imul	 eax, edx, -20
  00060	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _crc1$1$[ebp], 0
  00067	89 75 f4	 mov	 DWORD PTR _crc2$1$[ebp], esi

; 820  : #if N > 3
; 821  :             crc3 = 0;

  0006a	89 75 fc	 mov	 DWORD PTR _crc3$1$[ebp], esi

; 822  : #if N > 4
; 823  :             crc4 = 0;

  0006d	89 75 f8	 mov	 DWORD PTR _crc4$1$[ebp], esi
  00070	03 f8		 add	 edi, eax
  00072	83 ea 01	 sub	 edx, 1
  00075	89 7d 10	 mov	 DWORD PTR _len$[ebp], edi
  00078	89 55 ec	 mov	 DWORD PTR _blks$1$[ebp], edx

; 824  : #if N > 5
; 825  :             crc5 = 0;
; 826  : #endif
; 827  : #endif
; 828  : #endif
; 829  : #endif
; 830  : #endif
; 831  : 
; 832  :             /*
; 833  :               Process the first blks-1 blocks, computing the CRCs on each braid
; 834  :               independently.
; 835  :              */
; 836  :             while (--blks) {

  0007b	0f 84 6d 01 00
	00		 je	 $LN5@crc32_z
  00081	8b fa		 mov	 edi, edx
$LL4@crc32_z:

; 837  :                 /* Load the word for each braid into registers. */
; 838  :                 word0 = crc0 ^ words[0];
; 839  : #if N > 1
; 840  :                 word1 = crc1 ^ words[1];

  00083	8b 75 0c	 mov	 esi, DWORD PTR _buf$[ebp]
  00086	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00088	33 d9		 xor	 ebx, ecx
  0008a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008d	33 45 08	 xor	 eax, DWORD PTR _crc1$1$[ebp]

; 841  : #if N > 2
; 842  :                 word2 = crc2 ^ words[2];

  00090	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00093	33 55 f4	 xor	 edx, DWORD PTR _crc2$1$[ebp]
  00096	89 45 e8	 mov	 DWORD PTR _word1$1$[ebp], eax

; 843  : #if N > 3
; 844  :                 word3 = crc3 ^ words[3];

  00099	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0009c	33 4d fc	 xor	 ecx, DWORD PTR _crc3$1$[ebp]

; 845  : #if N > 4
; 846  :                 word4 = crc4 ^ words[4];
; 847  : #if N > 5
; 848  :                 word5 = crc5 ^ words[5];
; 849  : #endif
; 850  : #endif
; 851  : #endif
; 852  : #endif
; 853  : #endif
; 854  :                 words += N;
; 855  : 
; 856  :                 /* Compute and update the CRC for each word. The loop should
; 857  :                    get unrolled. */
; 858  :                 crc0 = crc_braid_table[0][word0 & 0xff];
; 859  : #if N > 1
; 860  :                 crc1 = crc_braid_table[0][word1 & 0xff];

  0009f	0f b6 c0	 movzx	 eax, al
  000a2	89 4d f0	 mov	 DWORD PTR _word3$1$[ebp], ecx
  000a5	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000a8	83 c6 14	 add	 esi, 20			; 00000014H
  000ab	33 4d f8	 xor	 ecx, DWORD PTR _crc4$1$[ebp]
  000ae	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _crc_braid_table[eax*4]
  000b5	89 45 08	 mov	 DWORD PTR _crc1$1$[ebp], eax

; 861  : #if N > 2
; 862  :                 crc2 = crc_braid_table[0][word2 & 0xff];

  000b8	0f b6 c2	 movzx	 eax, dl
  000bb	89 4d ec	 mov	 DWORD PTR _word4$1$[ebp], ecx
  000be	89 55 e4	 mov	 DWORD PTR _word2$1$[ebp], edx
  000c1	0f b6 cb	 movzx	 ecx, bl
  000c4	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _crc_braid_table[eax*4]
  000cb	89 45 f4	 mov	 DWORD PTR _crc2$1$[ebp], eax

; 863  : #if N > 3
; 864  :                 crc3 = crc_braid_table[0][word3 & 0xff];

  000ce	8b 45 f0	 mov	 eax, DWORD PTR _word3$1$[ebp]
  000d1	0f b6 c0	 movzx	 eax, al
  000d4	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR _crc_braid_table[ecx*4]
  000db	89 75 0c	 mov	 DWORD PTR _buf$[ebp], esi

; 865  : #if N > 4
; 866  :                 crc4 = crc_braid_table[0][word4 & 0xff];
; 867  : #if N > 5
; 868  :                 crc5 = crc_braid_table[0][word5 & 0xff];
; 869  : #endif
; 870  : #endif
; 871  : #endif
; 872  : #endif
; 873  : #endif
; 874  :                 for (k = 1; k < W; k++) {
; 875  :                     crc0 ^= crc_braid_table[k][(word0 >> (k << 3)) & 0xff];
; 876  : #if N > 1
; 877  :                     crc1 ^= crc_braid_table[k][(word1 >> (k << 3)) & 0xff];

  000de	8b 75 e8	 mov	 esi, DWORD PTR _word1$1$[ebp]
  000e1	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _crc_braid_table[eax*4]
  000e8	89 45 fc	 mov	 DWORD PTR _crc3$1$[ebp], eax
  000eb	8b 45 ec	 mov	 eax, DWORD PTR _word4$1$[ebp]
  000ee	0f b6 c0	 movzx	 eax, al
  000f1	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR _crc_braid_table[eax*4]
  000f8	89 45 f8	 mov	 DWORD PTR _crc4$1$[ebp], eax
  000fb	8b c3		 mov	 eax, ebx
  000fd	c1 e8 10	 shr	 eax, 16			; 00000010H
  00100	0f b6 d0	 movzx	 edx, al
  00103	8b c3		 mov	 eax, ebx
  00105	c1 e8 08	 shr	 eax, 8
  00108	0f b6 c0	 movzx	 eax, al
  0010b	c1 eb 18	 shr	 ebx, 24			; 00000018H
  0010e	8b 14 95 00 08
	00 00		 mov	 edx, DWORD PTR _crc_braid_table[edx*4+2048]
  00115	33 14 85 00 04
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[eax*4+1024]
  0011c	8b c6		 mov	 eax, esi
  0011e	33 14 9d 00 0c
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[ebx*4+3072]
  00125	c1 e8 10	 shr	 eax, 16			; 00000010H
  00128	33 ca		 xor	 ecx, edx
  0012a	0f b6 d0	 movzx	 edx, al
  0012d	8b c6		 mov	 eax, esi
  0012f	c1 e8 08	 shr	 eax, 8
  00132	0f b6 c0	 movzx	 eax, al

; 878  : #if N > 2
; 879  :                     crc2 ^= crc_braid_table[k][(word2 >> (k << 3)) & 0xff];
; 880  : #if N > 3
; 881  :                     crc3 ^= crc_braid_table[k][(word3 >> (k << 3)) & 0xff];

  00135	8b 5d f0	 mov	 ebx, DWORD PTR _word3$1$[ebp]
  00138	8b 14 95 00 08
	00 00		 mov	 edx, DWORD PTR _crc_braid_table[edx*4+2048]
  0013f	c1 ee 18	 shr	 esi, 24			; 00000018H
  00142	33 14 85 00 04
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[eax*4+1024]
  00149	33 14 b5 00 0c
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[esi*4+3072]
  00150	31 55 08	 xor	 DWORD PTR _crc1$1$[ebp], edx
  00153	8b 75 e4	 mov	 esi, DWORD PTR _word2$1$[ebp]
  00156	8b c6		 mov	 eax, esi
  00158	c1 e8 10	 shr	 eax, 16			; 00000010H
  0015b	0f b6 d0	 movzx	 edx, al
  0015e	8b c6		 mov	 eax, esi
  00160	c1 e8 08	 shr	 eax, 8
  00163	0f b6 c0	 movzx	 eax, al
  00166	c1 ee 18	 shr	 esi, 24			; 00000018H
  00169	8b 14 95 00 08
	00 00		 mov	 edx, DWORD PTR _crc_braid_table[edx*4+2048]
  00170	33 14 85 00 04
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[eax*4+1024]
  00177	8b c3		 mov	 eax, ebx
  00179	33 14 b5 00 0c
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[esi*4+3072]
  00180	8b 75 f4	 mov	 esi, DWORD PTR _crc2$1$[ebp]
  00183	c1 e8 10	 shr	 eax, 16			; 00000010H
  00186	33 f2		 xor	 esi, edx
  00188	0f b6 d0	 movzx	 edx, al
  0018b	8b c3		 mov	 eax, ebx
  0018d	c1 e8 08	 shr	 eax, 8
  00190	0f b6 c0	 movzx	 eax, al
  00193	c1 eb 18	 shr	 ebx, 24			; 00000018H
  00196	8b 14 95 00 08
	00 00		 mov	 edx, DWORD PTR _crc_braid_table[edx*4+2048]
  0019d	89 75 f4	 mov	 DWORD PTR _crc2$1$[ebp], esi
  001a0	33 14 85 00 04
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[eax*4+1024]
  001a7	33 14 9d 00 0c
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[ebx*4+3072]

; 882  : #if N > 4
; 883  :                     crc4 ^= crc_braid_table[k][(word4 >> (k << 3)) & 0xff];

  001ae	8b 5d ec	 mov	 ebx, DWORD PTR _word4$1$[ebp]
  001b1	8b c3		 mov	 eax, ebx
  001b3	31 55 fc	 xor	 DWORD PTR _crc3$1$[ebp], edx
  001b6	c1 e8 10	 shr	 eax, 16			; 00000010H
  001b9	0f b6 d0	 movzx	 edx, al
  001bc	8b c3		 mov	 eax, ebx
  001be	c1 e8 08	 shr	 eax, 8
  001c1	0f b6 c0	 movzx	 eax, al
  001c4	c1 eb 18	 shr	 ebx, 24			; 00000018H
  001c7	8b 14 95 00 08
	00 00		 mov	 edx, DWORD PTR _crc_braid_table[edx*4+2048]
  001ce	33 14 85 00 04
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[eax*4+1024]
  001d5	33 14 9d 00 0c
	00 00		 xor	 edx, DWORD PTR _crc_braid_table[ebx*4+3072]
  001dc	31 55 f8	 xor	 DWORD PTR _crc4$1$[ebp], edx
  001df	8b 5d 0c	 mov	 ebx, DWORD PTR _buf$[ebp]
  001e2	83 ef 01	 sub	 edi, 1
  001e5	0f 85 98 fe ff
	ff		 jne	 $LL4@crc32_z
  001eb	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
$LN5@crc32_z:

; 884  : #if N > 5
; 885  :                     crc5 ^= crc_braid_table[k][(word5 >> (k << 3)) & 0xff];
; 886  : #endif
; 887  : #endif
; 888  : #endif
; 889  : #endif
; 890  : #endif
; 891  :                 }
; 892  :             }
; 893  : 
; 894  :             /*
; 895  :               Process the last block, combining the CRCs of the N braids at the
; 896  :               same time.
; 897  :              */
; 898  :             crc = crc_word(crc0 ^ words[0]);

  001ee	33 0b		 xor	 ecx, DWORD PTR [ebx]
  001f0	e8 00 00 00 00	 call	 _crc_word

; 899  : #if N > 1
; 900  :             crc = crc_word(crc1 ^ words[1] ^ crc);

  001f5	33 43 04	 xor	 eax, DWORD PTR [ebx+4]
  001f8	33 45 08	 xor	 eax, DWORD PTR _crc1$1$[ebp]
  001fb	8b c8		 mov	 ecx, eax
  001fd	e8 00 00 00 00	 call	 _crc_word

; 901  : #if N > 2
; 902  :             crc = crc_word(crc2 ^ words[2] ^ crc);

  00202	33 43 08	 xor	 eax, DWORD PTR [ebx+8]
  00205	33 c6		 xor	 eax, esi
  00207	8b c8		 mov	 ecx, eax
  00209	e8 00 00 00 00	 call	 _crc_word

; 903  : #if N > 3
; 904  :             crc = crc_word(crc3 ^ words[3] ^ crc);

  0020e	33 43 0c	 xor	 eax, DWORD PTR [ebx+12]
  00211	33 45 fc	 xor	 eax, DWORD PTR _crc3$1$[ebp]
  00214	8b c8		 mov	 ecx, eax
  00216	e8 00 00 00 00	 call	 _crc_word

; 905  : #if N > 4
; 906  :             crc = crc_word(crc4 ^ words[4] ^ crc);

  0021b	33 43 10	 xor	 eax, DWORD PTR [ebx+16]
  0021e	33 45 f8	 xor	 eax, DWORD PTR _crc4$1$[ebp]
  00221	8b c8		 mov	 ecx, eax
  00223	e8 00 00 00 00	 call	 _crc_word
  00228	8b c8		 mov	 ecx, eax

; 907  : #if N > 5
; 908  :             crc = crc_word(crc5 ^ words[5] ^ crc);
; 909  : #endif
; 910  : #endif
; 911  : #endif
; 912  : #endif
; 913  : #endif
; 914  :             words += N;
; 915  :         }
; 916  :         else {
; 917  :             /* Big endian. */
; 918  : 
; 919  :             z_word_t crc0, word0, comb;
; 920  : #if N > 1
; 921  :             z_word_t crc1, word1;
; 922  : #if N > 2
; 923  :             z_word_t crc2, word2;
; 924  : #if N > 3
; 925  :             z_word_t crc3, word3;
; 926  : #if N > 4
; 927  :             z_word_t crc4, word4;
; 928  : #if N > 5
; 929  :             z_word_t crc5, word5;
; 930  : #endif
; 931  : #endif
; 932  : #endif
; 933  : #endif
; 934  : #endif
; 935  : 
; 936  :             /* Initialize the CRC for each braid. */
; 937  :             crc0 = byte_swap(crc);
; 938  : #if N > 1
; 939  :             crc1 = 0;
; 940  : #if N > 2
; 941  :             crc2 = 0;
; 942  : #if N > 3
; 943  :             crc3 = 0;
; 944  : #if N > 4
; 945  :             crc4 = 0;
; 946  : #if N > 5
; 947  :             crc5 = 0;
; 948  : #endif
; 949  : #endif
; 950  : #endif
; 951  : #endif
; 952  : #endif
; 953  : 
; 954  :             /*
; 955  :               Process the first blks-1 blocks, computing the CRCs on each braid
; 956  :               independently.
; 957  :              */
; 958  :             while (--blks) {
; 959  :                 /* Load the word for each braid into registers. */
; 960  :                 word0 = crc0 ^ words[0];
; 961  : #if N > 1
; 962  :                 word1 = crc1 ^ words[1];
; 963  : #if N > 2
; 964  :                 word2 = crc2 ^ words[2];
; 965  : #if N > 3
; 966  :                 word3 = crc3 ^ words[3];
; 967  : #if N > 4
; 968  :                 word4 = crc4 ^ words[4];
; 969  : #if N > 5
; 970  :                 word5 = crc5 ^ words[5];
; 971  : #endif
; 972  : #endif
; 973  : #endif
; 974  : #endif
; 975  : #endif
; 976  :                 words += N;
; 977  : 
; 978  :                 /* Compute and update the CRC for each word. The loop should
; 979  :                    get unrolled. */
; 980  :                 crc0 = crc_braid_big_table[0][word0 & 0xff];
; 981  : #if N > 1
; 982  :                 crc1 = crc_braid_big_table[0][word1 & 0xff];
; 983  : #if N > 2
; 984  :                 crc2 = crc_braid_big_table[0][word2 & 0xff];
; 985  : #if N > 3
; 986  :                 crc3 = crc_braid_big_table[0][word3 & 0xff];
; 987  : #if N > 4
; 988  :                 crc4 = crc_braid_big_table[0][word4 & 0xff];
; 989  : #if N > 5
; 990  :                 crc5 = crc_braid_big_table[0][word5 & 0xff];
; 991  : #endif
; 992  : #endif
; 993  : #endif
; 994  : #endif
; 995  : #endif
; 996  :                 for (k = 1; k < W; k++) {
; 997  :                     crc0 ^= crc_braid_big_table[k][(word0 >> (k << 3)) & 0xff];
; 998  : #if N > 1
; 999  :                     crc1 ^= crc_braid_big_table[k][(word1 >> (k << 3)) & 0xff];
; 1000 : #if N > 2
; 1001 :                     crc2 ^= crc_braid_big_table[k][(word2 >> (k << 3)) & 0xff];
; 1002 : #if N > 3
; 1003 :                     crc3 ^= crc_braid_big_table[k][(word3 >> (k << 3)) & 0xff];
; 1004 : #if N > 4
; 1005 :                     crc4 ^= crc_braid_big_table[k][(word4 >> (k << 3)) & 0xff];
; 1006 : #if N > 5
; 1007 :                     crc5 ^= crc_braid_big_table[k][(word5 >> (k << 3)) & 0xff];
; 1008 : #endif
; 1009 : #endif
; 1010 : #endif
; 1011 : #endif
; 1012 : #endif
; 1013 :                 }
; 1014 :             }
; 1015 : 
; 1016 :             /*
; 1017 :               Process the last block, combining the CRCs of the N braids at the
; 1018 :               same time.
; 1019 :              */
; 1020 :             comb = crc_word_big(crc0 ^ words[0]);
; 1021 : #if N > 1
; 1022 :             comb = crc_word_big(crc1 ^ words[1] ^ comb);
; 1023 : #if N > 2
; 1024 :             comb = crc_word_big(crc2 ^ words[2] ^ comb);
; 1025 : #if N > 3
; 1026 :             comb = crc_word_big(crc3 ^ words[3] ^ comb);
; 1027 : #if N > 4
; 1028 :             comb = crc_word_big(crc4 ^ words[4] ^ comb);
; 1029 : #if N > 5
; 1030 :             comb = crc_word_big(crc5 ^ words[5] ^ comb);
; 1031 : #endif
; 1032 : #endif
; 1033 : #endif
; 1034 : #endif
; 1035 : #endif
; 1036 :             words += N;
; 1037 :             crc = byte_swap(comb);
; 1038 :         }
; 1039 : 
; 1040 :         /*
; 1041 :           Update the pointer to the remaining bytes to process.
; 1042 :          */
; 1043 :         buf = (unsigned char const *)words;

  0022a	83 c3 14	 add	 ebx, 20			; 00000014H
  0022d	5e		 pop	 esi
$LN28@crc32_z:

; 1044 :     }
; 1045 : 
; 1046 : #endif /* W */
; 1047 : 
; 1048 :     /* Complete the computation of the CRC on any remaining bytes. */
; 1049 :     while (len >= 8) {

  0022e	83 ff 08	 cmp	 edi, 8
  00231	0f 82 af 00 00
	00		 jb	 $LN29@crc32_z
  00237	8b d7		 mov	 edx, edi
  00239	c1 ea 03	 shr	 edx, 3
  0023c	0f 1f 40 00	 npad	 4
$LL14@crc32_z:

; 1050 :         len -= 8;
; 1051 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];

  00240	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00243	83 ef 08	 sub	 edi, 8
  00246	33 c1		 xor	 eax, ecx
  00248	c1 e9 08	 shr	 ecx, 8
  0024b	0f b6 c0	 movzx	 eax, al
  0024e	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  00255	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  00259	33 c1		 xor	 eax, ecx
  0025b	c1 e9 08	 shr	 ecx, 8
  0025e	0f b6 c0	 movzx	 eax, al
  00261	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  00268	0f b6 43 02	 movzx	 eax, BYTE PTR [ebx+2]
  0026c	33 c1		 xor	 eax, ecx
  0026e	c1 e9 08	 shr	 ecx, 8
  00271	0f b6 c0	 movzx	 eax, al
  00274	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  0027b	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]
  0027f	33 c1		 xor	 eax, ecx
  00281	c1 e9 08	 shr	 ecx, 8
  00284	0f b6 c0	 movzx	 eax, al
  00287	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  0028e	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00292	33 c1		 xor	 eax, ecx
  00294	c1 e9 08	 shr	 ecx, 8
  00297	0f b6 c0	 movzx	 eax, al
  0029a	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  002a1	0f b6 43 05	 movzx	 eax, BYTE PTR [ebx+5]
  002a5	33 c1		 xor	 eax, ecx
  002a7	c1 e9 08	 shr	 ecx, 8
  002aa	0f b6 c0	 movzx	 eax, al
  002ad	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  002b4	0f b6 43 06	 movzx	 eax, BYTE PTR [ebx+6]
  002b8	33 c1		 xor	 eax, ecx
  002ba	c1 e9 08	 shr	 ecx, 8
  002bd	0f b6 c0	 movzx	 eax, al
  002c0	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  002c7	0f b6 43 07	 movzx	 eax, BYTE PTR [ebx+7]
  002cb	83 c3 08	 add	 ebx, 8
  002ce	33 c1		 xor	 eax, ecx
  002d0	c1 e9 08	 shr	 ecx, 8
  002d3	0f b6 c0	 movzx	 eax, al
  002d6	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  002dd	83 ea 01	 sub	 edx, 1
  002e0	0f 85 5a ff ff
	ff		 jne	 $LL14@crc32_z
$LN29@crc32_z:

; 1052 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
; 1053 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
; 1054 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
; 1055 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
; 1056 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
; 1057 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
; 1058 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
; 1059 :     }
; 1060 :     while (len) {

  002e6	85 ff		 test	 edi, edi
  002e8	74 20		 je	 SHORT $LN17@crc32_z
  002ea	66 0f 1f 44 00
	00		 npad	 6
$LL16@crc32_z:

; 1061 :         len--;
; 1062 :         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];

  002f0	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  002f3	8d 5b 01	 lea	 ebx, DWORD PTR [ebx+1]
  002f6	33 c1		 xor	 eax, ecx
  002f8	c1 e9 08	 shr	 ecx, 8
  002fb	0f b6 c0	 movzx	 eax, al
  002fe	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _crc_table[eax*4]
  00305	83 ef 01	 sub	 edi, 1
  00308	75 e6		 jne	 SHORT $LL16@crc32_z
$LN17@crc32_z:

; 1063 :     }
; 1064 : 
; 1065 :     /* Return the CRC, post-conditioned. */
; 1066 :     return crc ^ 0xffffffff;

  0030a	f7 d1		 not	 ecx
  0030c	5f		 pop	 edi
  0030d	8b c1		 mov	 eax, ecx
  0030f	5b		 pop	 ebx

; 1067 : }

  00310	8b e5		 mov	 esp, ebp
  00312	5d		 pop	 ebp
  00313	c2 0c 00	 ret	 12			; 0000000cH
_crc32_z@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc32@12
_TEXT	SEGMENT
_crc$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_crc32@12 PROC						; COMDAT

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1078 : }

  00003	5d		 pop	 ebp

; 1077 :     return crc32_z(crc, buf, len);

  00004	e9 00 00 00 00	 jmp	 _crc32_z@12
_crc32@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc32_combine64@16
_TEXT	SEGMENT
_len2$ = 8						; size = 8
_crc32_combine64@16 PROC				; COMDAT
; _crc1$ = ecx
; _crc2$ = edx

; 1085 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1086 : #ifdef DYNAMIC_CRC_TABLE
; 1087 :     once(&made, make_crc_table);
; 1088 : #endif /* DYNAMIC_CRC_TABLE */
; 1089 :     return multmodp(x2nmodp(len2, 3), crc1) ^ (crc2 & 0xffffffff);

  00005	ff 75 0c	 push	 DWORD PTR _len2$[ebp+4]
  00008	8b fa		 mov	 edi, edx
  0000a	8b f1		 mov	 esi, ecx
  0000c	ff 75 08	 push	 DWORD PTR _len2$[ebp]
  0000f	e8 00 00 00 00	 call	 _x2nmodp
  00014	83 c4 08	 add	 esp, 8
  00017	8b d6		 mov	 edx, esi
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 _multmodp
  00020	33 c7		 xor	 eax, edi
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 1090 : }

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
_crc32_combine64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc32_combine@12
_TEXT	SEGMENT
_crc1$ = 8						; size = 4
_crc2$ = 12						; size = 4
_len2$ = 16						; size = 4
_crc32_combine@12 PROC					; COMDAT

; 1097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1098 :     return crc32_combine64(crc1, crc2, (z_off64_t)len2);

  00003	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _crc1$[ebp]
  00009	99		 cdq
  0000a	52		 push	 edx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _crc2$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _crc32_combine64@16

; 1099 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_crc32_combine@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc32_combine_gen64@8
_TEXT	SEGMENT
_len2$ = 8						; size = 8
_crc32_combine_gen64@8 PROC				; COMDAT

; 1104 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1105 : #ifdef DYNAMIC_CRC_TABLE
; 1106 :     once(&made, make_crc_table);
; 1107 : #endif /* DYNAMIC_CRC_TABLE */
; 1108 :     return x2nmodp(len2, 3);

  00003	ff 75 0c	 push	 DWORD PTR _len2$[ebp+4]
  00006	ff 75 08	 push	 DWORD PTR _len2$[ebp]
  00009	e8 00 00 00 00	 call	 _x2nmodp
  0000e	83 c4 08	 add	 esp, 8

; 1109 : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
_crc32_combine_gen64@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc32_combine_gen@4
_TEXT	SEGMENT
_len2$ = 8						; size = 4
_crc32_combine_gen@4 PROC				; COMDAT

; 1114 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1115 :     return crc32_combine_gen64((z_off64_t)len2);

  00003	8b 45 08	 mov	 eax, DWORD PTR _len2$[ebp]
  00006	99		 cdq
  00007	52		 push	 edx
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _crc32_combine_gen64@8

; 1116 : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
_crc32_combine_gen@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\crc32.c
;	COMDAT _crc32_combine_op@12
_TEXT	SEGMENT
_crc1$ = 8						; size = 4
_crc2$ = 12						; size = 4
_op$ = 16						; size = 4
_crc32_combine_op@12 PROC				; COMDAT

; 1123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1124 :     return multmodp(op, crc1) ^ (crc2 & 0xffffffff);

  00003	8b 55 08	 mov	 edx, DWORD PTR _crc1$[ebp]
  00006	8b 4d 10	 mov	 ecx, DWORD PTR _op$[ebp]
  00009	e8 00 00 00 00	 call	 _multmodp
  0000e	33 45 0c	 xor	 eax, DWORD PTR _crc2$[ebp]

; 1125 : }

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
_crc32_combine_op@12 ENDP
_TEXT	ENDS
END
