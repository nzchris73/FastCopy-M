; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	c:\users\chris\documents\github\zlib\contrib\vstudio\vc14\x86\zlibdllrelease\tmp\trees.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	__length_code
PUBLIC	__dist_code
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
PUBLIC	__tr_align
PUBLIC	__tr_init
PUBLIC	__tr_flush_block
PUBLIC	__tr_flush_bits
PUBLIC	__tr_stored_block
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_buf$1$ = -4						; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_stored_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 868  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8b f2		 mov	 esi, edx
  0000b	89 75 fc	 mov	 DWORD PTR _buf$1$[ebp], esi

; 869  :     send_bits(s, (STORED_BLOCK<<1) + last, 3);  /* send block type */

  0000e	8b 8f bc 16 00
	00		 mov	 ecx, DWORD PTR [edi+5820]
  00014	0f b7 9f b8 16
	00 00		 movzx	 ebx, WORD PTR [edi+5816]
  0001b	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  0001e	7e 4f		 jle	 SHORT $LN2@tr_stored_
  00020	0f b7 75 0c	 movzx	 esi, WORD PTR _last$[ebp]
  00024	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00027	66 8b d6	 mov	 dx, si
  0002a	66 d3 e2	 shl	 dx, cl
  0002d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00030	66 0b d3	 or	 dx, bx
  00033	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  0003a	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003d	ff 47 14	 inc	 DWORD PTR [edi+20]
  00040	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00043	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00046	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  0004c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0004f	b1 10		 mov	 cl, 16			; 00000010H
  00051	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  00058	ff 47 14	 inc	 DWORD PTR [edi+20]
  0005b	2a c8		 sub	 cl, al
  0005d	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  00064	66 d3 ee	 shr	 si, cl
  00067	0f b7 c6	 movzx	 eax, si
  0006a	8b 75 fc	 mov	 esi, DWORD PTR _buf$1$[ebp]
  0006d	eb 16		 jmp	 SHORT $LN3@tr_stored_
$LN2@tr_stored_:
  0006f	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  00072	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  00078	66 8b 45 0c	 mov	 ax, WORD PTR _last$[ebp]
  0007c	66 d3 e0	 shl	 ax, cl
  0007f	66 0b c3	 or	 ax, bx
  00082	0f b7 c0	 movzx	 eax, ax
$LN3@tr_stored_:

; 870  :     bi_windup(s);        /* align on byte boundary */

  00085	8b cf		 mov	 ecx, edi
  00087	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  0008e	e8 00 00 00 00	 call	 _bi_windup

; 871  :     put_short(s, (ush)stored_len);

  00093	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00096	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00099	8b 5d 08	 mov	 ebx, DWORD PTR _stored_len$[ebp]
  0009c	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0009f	ff 47 14	 inc	 DWORD PTR [edi+20]
  000a2	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000a5	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000a8	0f b7 db	 movzx	 ebx, bx
  000ab	8b cb		 mov	 ecx, ebx

; 872  :     put_short(s, (ush)~stored_len);

  000ad	f7 d3		 not	 ebx
  000af	c1 e9 08	 shr	 ecx, 8
  000b2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000b5	ff 47 14	 inc	 DWORD PTR [edi+20]
  000b8	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000bb	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000be	8a 4d 08	 mov	 cl, BYTE PTR _stored_len$[ebp]
  000c1	f6 d1		 not	 cl
  000c3	c1 eb 08	 shr	 ebx, 8
  000c6	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000c9	ff 47 14	 inc	 DWORD PTR [edi+20]
  000cc	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000cf	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000d2	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  000d5	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 873  :     if (stored_len)

  000d8	8b 5d 08	 mov	 ebx, DWORD PTR _stored_len$[ebp]
  000db	41		 inc	 ecx
  000dc	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000df	85 db		 test	 ebx, ebx
  000e1	74 10		 je	 SHORT $LN6@tr_stored_

; 874  :         zmemcpy(s->pending_buf + s->pending, (Bytef *)buf, stored_len);

  000e3	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000e6	53		 push	 ebx
  000e7	03 c1		 add	 eax, ecx
  000e9	56		 push	 esi
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 _memcpy
  000f0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@tr_stored_:

; 875  :     s->pending += stored_len;
; 876  : #ifdef ZLIB_DEBUG
; 877  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 878  :     s->compressed_len += (stored_len + 4) << 3;
; 879  :     s->bits_sent += 2*16;
; 880  :     s->bits_sent += stored_len << 3;
; 881  : #endif
; 882  : }

  000f3	01 5f 14	 add	 DWORD PTR [edi+20], ebx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
__tr_stored_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT __tr_flush_bits
_TEXT	SEGMENT
__tr_flush_bits PROC					; COMDAT
; _s$ = ecx

; 890  :     bi_flush(s);

  00000	e9 00 00 00 00	 jmp	 _bi_flush
__tr_flush_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
tv658 = -8						; size = 4
_max_blindex$1$ = -8					; size = 4
tv661 = -4						; size = 4
_buf$1$ = -4						; size = 4
tv651 = 8						; size = 4
_stored_len$ = 8					; size = 4
_last$ = 12						; size = 4
__tr_flush_block PROC					; COMDAT
; _s$ = ecx
; _buf$ = edx

; 917  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 918  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 919  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */
; 920  : 
; 921  :     /* Build the Huffman trees unless a stored block is forced */
; 922  :     if (s->level > 0) {

  00008	8b 75 08	 mov	 esi, DWORD PTR _stored_len$[ebp]
  0000b	8b da		 mov	 ebx, edx
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
  00010	89 5d fc	 mov	 DWORD PTR _buf$1$[ebp], ebx
  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _max_blindex$1$[ebp], 0
  0001a	83 bf 84 00 00
	00 00		 cmp	 DWORD PTR [edi+132], 0
  00021	0f 8e 80 00 00
	00		 jle	 $LN2@tr_flush_b

; 923  : 
; 924  :         /* Check if the file is binary or text */
; 925  :         if (s->strm->data_type == Z_UNKNOWN)

  00027	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00029	83 7b 2c 02	 cmp	 DWORD PTR [ebx+44], 2
  0002d	75 08		 jne	 SHORT $LN4@tr_flush_b

; 926  :             s->strm->data_type = detect_data_type(s);

  0002f	e8 00 00 00 00	 call	 _detect_data_type
  00034	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN4@tr_flush_b:

; 927  : 
; 928  :         /* Construct the literal and distance trees */
; 929  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00037	8d 97 18 0b 00
	00		 lea	 edx, DWORD PTR [edi+2840]
  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 _build_tree

; 930  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 931  :                 s->static_len));
; 932  : 
; 933  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  00044	8d 97 24 0b 00
	00		 lea	 edx, DWORD PTR [edi+2852]
  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 _build_tree

; 934  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 935  :                 s->static_len));
; 936  :         /* At this point, opt_len and static_len are the total bit lengths of
; 937  :          * the compressed block data, excluding the tree representations.
; 938  :          */
; 939  : 
; 940  :         /* Build the bit length tree for the above two trees, and get the index
; 941  :          * in bl_order of the last bit length code to send.
; 942  :          */
; 943  :         max_blindex = build_bl_tree(s);

  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 _build_bl_tree

; 944  : 
; 945  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 946  :         opt_lenb = (s->opt_len + 3 + 7) >> 3;

  00058	8b 8f a8 16 00
	00		 mov	 ecx, DWORD PTR [edi+5800]

; 947  :         static_lenb = (s->static_len + 3 + 7) >> 3;

  0005e	8b 97 ac 16 00
	00		 mov	 edx, DWORD PTR [edi+5804]
  00064	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00067	83 c2 0a	 add	 edx, 10			; 0000000aH
  0006a	c1 e9 03	 shr	 ecx, 3
  0006d	c1 ea 03	 shr	 edx, 3
  00070	89 45 f8	 mov	 DWORD PTR _max_blindex$1$[ebp], eax

; 948  : 
; 949  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 950  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 951  :                 s->sym_next / 3));
; 952  : 
; 953  : #ifndef FORCE_STATIC
; 954  :         if (static_lenb <= opt_lenb || s->strategy == Z_FIXED)

  00073	3b d1		 cmp	 edx, ecx
  00075	76 09		 jbe	 SHORT $LN6@tr_flush_b
  00077	83 bf 88 00 00
	00 04		 cmp	 DWORD PTR [edi+136], 4
  0007e	75 02		 jne	 SHORT $LN17@tr_flush_b
$LN6@tr_flush_b:

; 955  : #endif
; 956  :             opt_lenb = static_lenb;

  00080	8b ca		 mov	 ecx, edx
$LN17@tr_flush_b:

; 961  :     }
; 962  : 
; 963  : #ifdef FORCE_STORED
; 964  :     if (buf != (char*)0) { /* force stored block */
; 965  : #else
; 966  :     if (stored_len + 4 <= opt_lenb && buf != (char*)0) {

  00082	8b 5d fc	 mov	 ebx, DWORD PTR _buf$1$[ebp]
$LN3@tr_flush_b:
  00085	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00088	3b c1		 cmp	 eax, ecx
  0008a	77 22		 ja	 SHORT $LN7@tr_flush_b
  0008c	85 db		 test	 ebx, ebx
  0008e	74 1e		 je	 SHORT $LN7@tr_flush_b

; 967  :                        /* 4: two words for the lengths */
; 968  : #endif
; 969  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 970  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 971  :          * the last block flush, because compression would have been
; 972  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 973  :          * transform a block into a stored block.
; 974  :          */
; 975  :         _tr_stored_block(s, buf, stored_len, last);

  00090	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  00093	8b cf		 mov	 ecx, edi
  00095	8b 55 fc	 mov	 edx, DWORD PTR _buf$1$[ebp]
  00098	53		 push	 ebx
  00099	56		 push	 esi
  0009a	e8 00 00 00 00	 call	 __tr_stored_block
  0009f	83 c4 08	 add	 esp, 8
  000a2	e9 59 01 00 00	 jmp	 $LN10@tr_flush_b
$LN2@tr_flush_b:

; 957  : 
; 958  :     } else {
; 959  :         Assert(buf != (char*)0, "lost buf");
; 960  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  000a7	8d 56 05	 lea	 edx, DWORD PTR [esi+5]
  000aa	8b ca		 mov	 ecx, edx
  000ac	eb d7		 jmp	 SHORT $LN3@tr_flush_b
$LN7@tr_flush_b:

; 976  : 
; 977  :     } else if (static_lenb == opt_lenb) {

  000ae	0f b7 b7 b8 16
	00 00		 movzx	 esi, WORD PTR [edi+5816]
  000b5	3b d1		 cmp	 edx, ecx
  000b7	8b 87 bc 16 00
	00		 mov	 eax, DWORD PTR [edi+5820]
  000bd	8b d6		 mov	 edx, esi
  000bf	8b 5d 0c	 mov	 ebx, DWORD PTR _last$[ebp]
  000c2	89 45 08	 mov	 DWORD PTR tv651[ebp], eax
  000c5	0f 85 8e 00 00
	00		 jne	 $LN9@tr_flush_b

; 978  :         send_bits(s, (STATIC_TREES<<1) + last, 3);

  000cb	89 55 f8	 mov	 DWORD PTR tv658[ebp], edx
  000ce	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000d1	7e 4e		 jle	 SHORT $LN11@tr_flush_b
  000d3	8b c8		 mov	 ecx, eax
  000d5	8d 73 02	 lea	 esi, DWORD PTR [ebx+2]
  000d8	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000db	66 8b d6	 mov	 dx, si
  000de	66 d3 e2	 shl	 dx, cl
  000e1	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000e4	66 0b 55 f8	 or	 dx, WORD PTR tv658[ebp]
  000e8	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  000ef	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000f2	ff 47 14	 inc	 DWORD PTR [edi+20]
  000f5	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  000f8	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000fb	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  00101	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00104	b1 10		 mov	 cl, 16			; 00000010H
  00106	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  0010d	ff 47 14	 inc	 DWORD PTR [edi+20]
  00110	2a c8		 sub	 cl, al
  00112	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  00119	66 d3 ee	 shr	 si, cl
  0011c	0f b7 c6	 movzx	 eax, si
  0011f	eb 18		 jmp	 SHORT $LN12@tr_flush_b
$LN11@tr_flush_b:
  00121	8b 4d 08	 mov	 ecx, DWORD PTR tv651[ebp]
  00124	83 c0 03	 add	 eax, 3
  00127	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  0012d	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00130	66 d3 e0	 shl	 ax, cl
  00133	66 0b c2	 or	 ax, dx
  00136	0f b7 c0	 movzx	 eax, ax
$LN12@tr_flush_b:

; 979  :         compress_block(s, (const ct_data *)static_ltree,

  00139	68 00 00 00 00	 push	 OFFSET _static_dtree
  0013e	ba 00 00 00 00	 mov	 edx, OFFSET _static_ltree
  00143	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  0014a	8b cf		 mov	 ecx, edi
  0014c	e8 00 00 00 00	 call	 _compress_block
  00151	83 c4 04	 add	 esp, 4

; 980  :                        (const ct_data *)static_dtree);
; 981  : #ifdef ZLIB_DEBUG
; 982  :         s->compressed_len += 3 + s->static_len;
; 983  : #endif
; 984  :     } else {

  00154	e9 a7 00 00 00	 jmp	 $LN10@tr_flush_b
$LN9@tr_flush_b:

; 985  :         send_bits(s, (DYN_TREES<<1) + last, 3);

  00159	89 55 fc	 mov	 DWORD PTR tv661[ebp], edx
  0015c	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  0015f	7e 4e		 jle	 SHORT $LN13@tr_flush_b
  00161	8b c8		 mov	 ecx, eax
  00163	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00166	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00169	66 8b d6	 mov	 dx, si
  0016c	66 d3 e2	 shl	 dx, cl
  0016f	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00172	66 0b 55 fc	 or	 dx, WORD PTR tv661[ebp]
  00176	66 89 97 b8 16
	00 00		 mov	 WORD PTR [edi+5816], dx
  0017d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00180	ff 47 14	 inc	 DWORD PTR [edi+20]
  00183	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00186	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00189	8a 87 b9 16 00
	00		 mov	 al, BYTE PTR [edi+5817]
  0018f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00192	b1 10		 mov	 cl, 16			; 00000010H
  00194	0f b7 87 bc 16
	00 00		 movzx	 eax, WORD PTR [edi+5820]
  0019b	ff 47 14	 inc	 DWORD PTR [edi+20]
  0019e	2a c8		 sub	 cl, al
  001a0	83 87 bc 16 00
	00 f3		 add	 DWORD PTR [edi+5820], -13 ; fffffff3H
  001a7	66 d3 ee	 shr	 si, cl
  001aa	0f b7 c6	 movzx	 eax, si
  001ad	eb 18		 jmp	 SHORT $LN14@tr_flush_b
$LN13@tr_flush_b:
  001af	8b 4d 08	 mov	 ecx, DWORD PTR tv651[ebp]
  001b2	83 c0 03	 add	 eax, 3
  001b5	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  001bb	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  001be	66 d3 e0	 shl	 ax, cl
  001c1	66 0b c2	 or	 ax, dx
  001c4	0f b7 c0	 movzx	 eax, ax
$LN14@tr_flush_b:

; 986  :         send_all_trees(s, s->l_desc.max_code + 1, s->d_desc.max_code + 1,

  001c7	66 89 87 b8 16
	00 00		 mov	 WORD PTR [edi+5816], ax
  001ce	8b cf		 mov	 ecx, edi
  001d0	8b 45 f8	 mov	 eax, DWORD PTR _max_blindex$1$[ebp]
  001d3	8b 97 1c 0b 00
	00		 mov	 edx, DWORD PTR [edi+2844]
  001d9	40		 inc	 eax
  001da	50		 push	 eax
  001db	8b 87 28 0b 00
	00		 mov	 eax, DWORD PTR [edi+2856]
  001e1	42		 inc	 edx
  001e2	40		 inc	 eax
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 _send_all_trees

; 987  :                        max_blindex + 1);
; 988  :         compress_block(s, (const ct_data *)s->dyn_ltree,

  001e9	8d 87 88 09 00
	00		 lea	 eax, DWORD PTR [edi+2440]
  001ef	8b cf		 mov	 ecx, edi
  001f1	50		 push	 eax
  001f2	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
  001f8	e8 00 00 00 00	 call	 _compress_block
  001fd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@tr_flush_b:

; 989  :                        (const ct_data *)s->dyn_dtree);
; 990  : #ifdef ZLIB_DEBUG
; 991  :         s->compressed_len += 3 + s->opt_len;
; 992  : #endif
; 993  :     }
; 994  :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 995  :     /* The above check is made mod 2^32, for files larger than 512 MB
; 996  :      * and uLong implemented on 32 bits.
; 997  :      */
; 998  :     init_block(s);

  00200	8b cf		 mov	 ecx, edi
  00202	e8 00 00 00 00	 call	 _init_block

; 999  : 
; 1000 :     if (last) {

  00207	85 db		 test	 ebx, ebx
  00209	74 05		 je	 SHORT $LN15@tr_flush_b

; 1001 :         bi_windup(s);

  0020b	e8 00 00 00 00	 call	 _bi_windup
$LN15@tr_flush_b:
  00210	5f		 pop	 edi

; 1002 : #ifdef ZLIB_DEBUG
; 1003 :         s->compressed_len += 7;  /* align on byte boundary */
; 1004 : #endif
; 1005 :     }
; 1006 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len >> 3,
; 1007 :            s->compressed_len - 7*last));
; 1008 : }

  00211	5e		 pop	 esi
  00212	5b		 pop	 ebx
  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c3		 ret	 0
__tr_flush_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT __tr_init
_TEXT	SEGMENT
__tr_init PROC						; COMDAT
; _s$ = ecx

; 382  :     tr_static_init();
; 383  : 
; 384  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]

; 385  :     s->l_desc.stat_desc = &static_l_desc;

  00006	c7 81 20 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2848], OFFSET _static_l_desc
  00010	89 81 18 0b 00
	00		 mov	 DWORD PTR [ecx+2840], eax

; 386  : 
; 387  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00016	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  0001c	89 81 24 0b 00
	00		 mov	 DWORD PTR [ecx+2852], eax

; 388  :     s->d_desc.stat_desc = &static_d_desc;
; 389  : 
; 390  :     s->bl_desc.dyn_tree = s->bl_tree;

  00022	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00028	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 391  :     s->bl_desc.stat_desc = &static_bl_desc;
; 392  : 
; 393  :     s->bi_buf = 0;

  0002e	33 c0		 xor	 eax, eax
  00030	c7 81 2c 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2860], OFFSET _static_d_desc
  0003a	c7 81 38 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2872], OFFSET _static_bl_desc
  00044	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 394  :     s->bi_valid = 0;

  0004b	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax

; 395  : #ifdef ZLIB_DEBUG
; 396  :     s->compressed_len = 0L;
; 397  :     s->bits_sent = 0L;
; 398  : #endif
; 399  : 
; 400  :     /* Initialize the first block of the first file: */
; 401  :     init_block(s);

  00051	e9 00 00 00 00	 jmp	 _init_block
__tr_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT __tr_align
_TEXT	SEGMENT
__tr_align PROC						; COMDAT
; _s$ = ecx

; 899  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 900  :     send_bits(s, STATIC_TREES<<1, 3);

  00004	bb 02 00 00 00	 mov	 ebx, 2
  00009	8b c3		 mov	 eax, ebx
  0000b	57		 push	 edi
  0000c	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00012	66 d3 e0	 shl	 ax, cl
  00015	0f b7 d0	 movzx	 edx, ax
  00018	0f b7 86 b8 16
	00 00		 movzx	 eax, WORD PTR [esi+5816]
  0001f	0b d0		 or	 edx, eax
  00021	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  00024	7e 45		 jle	 SHORT $LN2@tr_align
  00026	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00029	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002c	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  00033	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00036	ff 46 14	 inc	 DWORD PTR [esi+20]
  00039	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0003c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0003f	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  00045	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00048	b1 10		 mov	 cl, 16			; 00000010H
  0004a	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  00051	83 86 bc 16 00
	00 f3		 add	 DWORD PTR [esi+5820], -13 ; fffffff3H
  00058	2a c8		 sub	 cl, al
  0005a	ff 46 14	 inc	 DWORD PTR [esi+20]
  0005d	8b be bc 16 00
	00		 mov	 edi, DWORD PTR [esi+5820]
  00063	66 d3 eb	 shr	 bx, cl
  00066	0f b7 d3	 movzx	 edx, bx
  00069	eb 0c		 jmp	 SHORT $LN3@tr_align
$LN2@tr_align:
  0006b	8d 79 03	 lea	 edi, DWORD PTR [ecx+3]
  0006e	0f b7 d2	 movzx	 edx, dx
  00071	89 be bc 16 00
	00		 mov	 DWORD PTR [esi+5820], edi
$LN3@tr_align:

; 901  :     send_code(s, END_BLOCK, static_ltree);

  00077	0f b7 ca	 movzx	 ecx, dx
  0007a	83 ff 09	 cmp	 edi, 9
  0007d	7e 3f		 jle	 SHORT $LN4@tr_align
  0007f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00082	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00085	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx

; 902  : #ifdef ZLIB_DEBUG
; 903  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 904  : #endif
; 905  :     bi_flush(s);

  0008c	5f		 pop	 edi
  0008d	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00090	ff 46 14	 inc	 DWORD PTR [esi+20]
  00093	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00096	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00099	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  0009f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000a2	8b ce		 mov	 ecx, esi
  000a4	ff 46 14	 inc	 DWORD PTR [esi+20]
  000a7	83 86 bc 16 00
	00 f7		 add	 DWORD PTR [esi+5820], -9 ; fffffff7H
  000ae	33 c0		 xor	 eax, eax
  000b0	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	e9 00 00 00 00	 jmp	 _bi_flush
$LN4@tr_align:

; 901  :     send_code(s, END_BLOCK, static_ltree);

  000be	8d 47 07	 lea	 eax, DWORD PTR [edi+7]
  000c1	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  000c7	8b c1		 mov	 eax, ecx

; 902  : #ifdef ZLIB_DEBUG
; 903  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 904  : #endif
; 905  :     bi_flush(s);

  000c9	5f		 pop	 edi
  000ca	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  000d1	8b ce		 mov	 ecx, esi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	e9 00 00 00 00	 jmp	 _bi_flush
__tr_align ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 234  : #if defined(GEN_TREES_H) || !defined(STDC)
; 235  :     static int static_init_done = 0;
; 236  :     int n;        /* iterates over tree elements */
; 237  :     int bits;     /* bit counter */
; 238  :     int length;   /* length value */
; 239  :     int code;     /* code value */
; 240  :     int dist;     /* distance index */
; 241  :     ush bl_count[MAX_BITS+1];
; 242  :     /* number of codes at each bit length for an optimal tree */
; 243  : 
; 244  :     if (static_init_done) return;
; 245  : 
; 246  :     /* For some embedded targets, global variables are not initialized: */
; 247  : #ifdef NO_INIT_GLOBAL_POINTERS
; 248  :     static_l_desc.static_tree = static_ltree;
; 249  :     static_l_desc.extra_bits = extra_lbits;
; 250  :     static_d_desc.static_tree = static_dtree;
; 251  :     static_d_desc.extra_bits = extra_dbits;
; 252  :     static_bl_desc.extra_bits = extra_blbits;
; 253  : #endif
; 254  : 
; 255  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 256  :     length = 0;
; 257  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 258  :         base_length[code] = length;
; 259  :         for (n = 0; n < (1 << extra_lbits[code]); n++) {
; 260  :             _length_code[length++] = (uch)code;
; 261  :         }
; 262  :     }
; 263  :     Assert (length == 256, "tr_static_init: length != 256");
; 264  :     /* Note that the length 255 (match length 258) can be represented
; 265  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 266  :      * overwrite length_code[255] to use the best encoding:
; 267  :      */
; 268  :     _length_code[length - 1] = (uch)code;
; 269  : 
; 270  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 271  :     dist = 0;
; 272  :     for (code = 0 ; code < 16; code++) {
; 273  :         base_dist[code] = dist;
; 274  :         for (n = 0; n < (1 << extra_dbits[code]); n++) {
; 275  :             _dist_code[dist++] = (uch)code;
; 276  :         }
; 277  :     }
; 278  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 279  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 280  :     for ( ; code < D_CODES; code++) {
; 281  :         base_dist[code] = dist << 7;
; 282  :         for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
; 283  :             _dist_code[256 + dist++] = (uch)code;
; 284  :         }
; 285  :     }
; 286  :     Assert (dist == 256, "tr_static_init: 256 + dist != 512");
; 287  : 
; 288  :     /* Construct the codes of the static literal tree */
; 289  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 290  :     n = 0;
; 291  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 292  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 293  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 294  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 295  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 296  :      * tree construction to get a canonical Huffman tree (longest code
; 297  :      * all ones)
; 298  :      */
; 299  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 300  : 
; 301  :     /* The static distance tree is trivial: */
; 302  :     for (n = 0; n < D_CODES; n++) {
; 303  :         static_dtree[n].Len = 5;
; 304  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 305  :     }
; 306  :     static_init_done = 1;
; 307  : 
; 308  : #  ifdef GEN_TREES_H
; 309  :     gen_trees_header();
; 310  : #  endif
; 311  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 312  : }

  00000	c2 00 00	 ret	 0
_tr_static_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _init_block
_TEXT	SEGMENT
_init_block PROC					; COMDAT
; _s$ = ecx

; 410  :     int n; /* iterates over tree elements */
; 411  : 
; 412  :     /* Initialize the trees. */
; 413  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00000	8d 81 94 00 00
	00		 lea	 eax, DWORD PTR [ecx+148]
  00006	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0000b	56		 push	 esi
  0000c	0f 1f 40 00	 npad	 4
$LL4@init_block:
  00010	33 f6		 xor	 esi, esi
  00012	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00015	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00019	83 ea 01	 sub	 edx, 1
  0001c	75 f2		 jne	 SHORT $LL4@init_block

; 414  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  0001e	8d 81 88 09 00
	00		 lea	 eax, DWORD PTR [ecx+2440]
  00024	ba 1e 00 00 00	 mov	 edx, 30			; 0000001eH
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@init_block:
  00030	33 f6		 xor	 esi, esi
  00032	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00035	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00039	83 ea 01	 sub	 edx, 1
  0003c	75 f2		 jne	 SHORT $LL7@init_block

; 415  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0003e	8d 81 7c 0a 00
	00		 lea	 eax, DWORD PTR [ecx+2684]
  00044	ba 13 00 00 00	 mov	 edx, 19			; 00000013H
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@init_block:
  00050	33 f6		 xor	 esi, esi
  00052	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  00055	66 89 70 fc	 mov	 WORD PTR [eax-4], si
  00059	83 ea 01	 sub	 edx, 1
  0005c	75 f2		 jne	 SHORT $LL10@init_block

; 416  : 
; 417  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  0005e	b8 01 00 00 00	 mov	 eax, 1

; 418  :     s->opt_len = s->static_len = 0L;

  00063	89 b1 ac 16 00
	00		 mov	 DWORD PTR [ecx+5804], esi
  00069	89 b1 a8 16 00
	00		 mov	 DWORD PTR [ecx+5800], esi

; 419  :     s->sym_next = s->matches = 0;

  0006f	89 b1 b0 16 00
	00		 mov	 DWORD PTR [ecx+5808], esi
  00075	89 b1 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], esi
  0007b	66 89 81 94 04
	00 00		 mov	 WORD PTR [ecx+1172], ax
  00082	5e		 pop	 esi

; 420  : }

  00083	c3		 ret	 0
_init_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _pqdownheap
_TEXT	SEGMENT
tv383 = -12						; size = 4
_tree$1$ = -8						; size = 4
_v$1$ = -4						; size = 4
_k$ = 8							; size = 4
_pqdownheap PROC					; COMDAT
; _s$ = ecx
; _tree$ = edx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 456  :     int v = s->heap[k];
; 457  :     int j = k << 1;  /* left son of k */
; 458  :     while (j <= s->heap_len) {

  00006	8b 81 50 14 00
	00		 mov	 eax, DWORD PTR [ecx+5200]
  0000c	53		 push	 ebx
  0000d	8b 5d 08	 mov	 ebx, DWORD PTR _k$[ebp]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 55 f8	 mov	 DWORD PTR _tree$1$[ebp], edx
  00015	8b bc 99 5c 0b
	00 00		 mov	 edi, DWORD PTR [ecx+ebx*4+2908]
  0001c	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  0001f	89 7d fc	 mov	 DWORD PTR _v$1$[ebp], edi
  00022	3b f0		 cmp	 esi, eax
  00024	0f 8f 97 00 00
	00		 jg	 $LN16@pqdownheap
  0002a	8d 3c ba	 lea	 edi, DWORD PTR [edx+edi*4]
  0002d	89 7d f4	 mov	 DWORD PTR tv383[ebp], edi
$LL2@pqdownheap:

; 459  :         /* Set j to the smallest of the two sons: */
; 460  :         if (j < s->heap_len &&

  00030	3b f0		 cmp	 esi, eax
  00032	7d 31		 jge	 SHORT $LN4@pqdownheap
  00034	8b bc b1 60 0b
	00 00		 mov	 edi, DWORD PTR [ecx+esi*4+2912]
  0003b	8b 9c b1 5c 0b
	00 00		 mov	 ebx, DWORD PTR [ecx+esi*4+2908]
  00042	0f b7 04 ba	 movzx	 eax, WORD PTR [edx+edi*4]
  00046	0f b7 14 9a	 movzx	 edx, WORD PTR [edx+ebx*4]
  0004a	66 3b c2	 cmp	 ax, dx
  0004d	72 12		 jb	 SHORT $LN5@pqdownheap
  0004f	75 11		 jne	 SHORT $LN19@pqdownheap
  00051	8a 84 0f 58 14
	00 00		 mov	 al, BYTE PTR [edi+ecx+5208]
  00058	3a 84 0b 58 14
	00 00		 cmp	 al, BYTE PTR [ebx+ecx+5208]
  0005f	77 01		 ja	 SHORT $LN19@pqdownheap
$LN5@pqdownheap:

; 461  :             smaller(tree, s->heap[j + 1], s->heap[j], s->depth)) {
; 462  :             j++;

  00061	46		 inc	 esi
$LN19@pqdownheap:

; 463  :         }
; 464  :         /* Exit if v is smaller than both sons */
; 465  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  00062	8b 5d 08	 mov	 ebx, DWORD PTR _k$[ebp]
$LN4@pqdownheap:
  00065	8b 94 b1 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+esi*4+2908]
  0006c	8b 45 f4	 mov	 eax, DWORD PTR tv383[ebp]
  0006f	8b 7d f8	 mov	 edi, DWORD PTR _tree$1$[ebp]
  00072	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00075	0f b7 3c 97	 movzx	 edi, WORD PTR [edi+edx*4]
  00079	66 3b c7	 cmp	 ax, di
  0007c	72 32		 jb	 SHORT $LN15@pqdownheap
  0007e	8b 7d fc	 mov	 edi, DWORD PTR _v$1$[ebp]
  00081	75 10		 jne	 SHORT $LN6@pqdownheap
  00083	8a 84 0f 58 14
	00 00		 mov	 al, BYTE PTR [edi+ecx+5208]
  0008a	3a 84 0a 58 14
	00 00		 cmp	 al, BYTE PTR [edx+ecx+5208]
  00091	76 2e		 jbe	 SHORT $LN16@pqdownheap
$LN6@pqdownheap:

; 466  : 
; 467  :         /* Exchange v with the smallest son */
; 468  :         s->heap[k] = s->heap[j];  k = j;

  00093	89 94 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], edx
  0009a	8b de		 mov	 ebx, esi
  0009c	8b 81 50 14 00
	00		 mov	 eax, DWORD PTR [ecx+5200]

; 469  : 
; 470  :         /* And continue down the tree, setting j to the left son of k */
; 471  :         j <<= 1;

  000a2	03 f6		 add	 esi, esi
  000a4	89 5d 08	 mov	 DWORD PTR _k$[ebp], ebx
  000a7	3b f0		 cmp	 esi, eax
  000a9	7f 16		 jg	 SHORT $LN16@pqdownheap

; 456  :     int v = s->heap[k];
; 457  :     int j = k << 1;  /* left son of k */
; 458  :     while (j <= s->heap_len) {

  000ab	8b 55 f8	 mov	 edx, DWORD PTR _tree$1$[ebp]
  000ae	eb 80		 jmp	 SHORT $LL2@pqdownheap
$LN15@pqdownheap:

; 472  :     }
; 473  :     s->heap[k] = v;

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _v$1$[ebp]
  000b3	5f		 pop	 edi

; 474  : }

  000b4	5e		 pop	 esi
  000b5	89 84 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], eax
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
$LN16@pqdownheap:
  000c1	89 bc 99 5c 0b
	00 00		 mov	 DWORD PTR [ecx+ebx*4+2908], edi
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_pqdownheap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
tv884 = -48						; size = 4
_bits$2$ = -48						; size = 4
_m$1$ = -44						; size = 4
tv907 = -44						; size = 4
_overflow$2$ = -44					; size = 4
tv889 = -40						; size = 4
_h$2$ = -40						; size = 4
_stree$1$ = -40						; size = 4
_extra$1$ = -36						; size = 4
tv901 = -32						; size = 4
_s$1$ = -28						; size = 4
_max_code$1$ = -24					; size = 4
tv904 = -20						; size = 4
tv872 = -20						; size = 4
tv876 = -16						; size = 4
tv909 = -12						; size = 4
_base$1$ = -8						; size = 4
_tree$1$ = -4						; size = 4
_gen_bitlen PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 490  :     ct_data *tree        = desc->dyn_tree;
; 491  :     int max_code         = desc->max_code;

  00006	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	89 45 e8	 mov	 DWORD PTR _max_code$1$[ebp], eax

; 492  :     const ct_data *stree = desc->stat_desc->static_tree;

  0000f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00012	53		 push	 ebx
  00013	8b d9		 mov	 ebx, ecx
  00015	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00017	56		 push	 esi
  00018	8b 10		 mov	 edx, DWORD PTR [eax]

; 493  :     const intf *extra    = desc->stat_desc->extra_bits;
; 494  :     int base             = desc->stat_desc->extra_base;
; 495  :     int max_length       = desc->stat_desc->max_length;

  0001a	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  0001d	89 55 d8	 mov	 DWORD PTR _stree$1$[ebp], edx
  00020	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00023	89 55 dc	 mov	 DWORD PTR _extra$1$[ebp], edx
  00026	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00029	0f 11 83 3c 0b
	00 00		 movups	 XMMWORD PTR [ebx+2876], xmm0
  00030	89 55 f8	 mov	 DWORD PTR _base$1$[ebp], edx

; 496  :     int h;              /* heap index */
; 497  :     int n, m;           /* iterate over the tree elements */
; 498  :     int bits;           /* bit length */
; 499  :     int xbits;          /* extra bits */
; 500  :     ush f;              /* frequency */
; 501  :     int overflow = 0;   /* number of elements with bit length too large */
; 502  : 
; 503  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00033	33 d2		 xor	 edx, edx
  00035	0f 11 83 4c 0b
	00 00		 movups	 XMMWORD PTR [ebx+2892], xmm0
  0003c	8b 83 54 14 00
	00		 mov	 eax, DWORD PTR [ebx+5204]
  00042	89 5d e4	 mov	 DWORD PTR _s$1$[ebp], ebx
  00045	89 4d fc	 mov	 DWORD PTR _tree$1$[ebp], ecx
  00048	89 75 d0	 mov	 DWORD PTR _bits$2$[ebp], esi
  0004b	8b 84 83 5c 0b
	00 00		 mov	 eax, DWORD PTR [ebx+eax*4+2908]
  00052	66 89 54 81 02	 mov	 WORD PTR [ecx+eax*4+2], dx

; 509  : 
; 510  :     for (h = s->heap_max + 1; h < HEAP_SIZE; h++) {

  00057	8b 93 54 14 00
	00		 mov	 edx, DWORD PTR [ebx+5204]
  0005d	42		 inc	 edx
  0005e	81 fa 3d 02 00
	00		 cmp	 edx, 573		; 0000023dH
  00064	0f 8d 89 01 00
	00		 jge	 $LN14@gen_bitlen

; 496  :     int h;              /* heap index */
; 497  :     int n, m;           /* iterate over the tree elements */
; 498  :     int bits;           /* bit length */
; 499  :     int xbits;          /* extra bits */
; 500  :     ush f;              /* frequency */
; 501  :     int overflow = 0;   /* number of elements with bit length too large */
; 502  : 
; 503  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  0006a	8d 8b 5c 0b 00
	00		 lea	 ecx, DWORD PTR [ebx+2908]
  00070	b8 3d 02 00 00	 mov	 eax, 573		; 0000023dH
  00075	8d 0c 91	 lea	 ecx, DWORD PTR [ecx+edx*4]
  00078	2b c2		 sub	 eax, edx
  0007a	89 4d f0	 mov	 DWORD PTR tv876[ebp], ecx
  0007d	33 d2		 xor	 edx, edx
  0007f	89 45 ec	 mov	 DWORD PTR tv904[ebp], eax
  00082	57		 push	 edi
$LL7@gen_bitlen:

; 511  :         n = s->heap[h];

  00083	8b 39		 mov	 edi, DWORD PTR [ecx]

; 512  :         bits = tree[tree[n].Dad].Len + 1;

  00085	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  00088	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  0008f	89 45 d4	 mov	 DWORD PTR tv907[ebp], eax
  00092	03 c1		 add	 eax, ecx
  00094	89 45 f4	 mov	 DWORD PTR tv909[ebp], eax
  00097	0f b7 40 02	 movzx	 eax, WORD PTR [eax+2]
  0009b	0f b7 4c 81 02	 movzx	 ecx, WORD PTR [ecx+eax*4+2]

; 513  :         if (bits > max_length) bits = max_length, overflow++;
; 514  :         tree[n].Len = (ush)bits;

  000a0	8b c6		 mov	 eax, esi
  000a2	41		 inc	 ecx
  000a3	3b ce		 cmp	 ecx, esi
  000a5	0f 4e c1	 cmovle	 eax, ecx
  000a8	8b 4d f4	 mov	 ecx, DWORD PTR tv909[ebp]
  000ab	89 45 e0	 mov	 DWORD PTR tv901[ebp], eax
  000ae	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000b1	0f 4e c2	 cmovle	 eax, edx
  000b4	8b d0		 mov	 edx, eax
  000b6	8b 45 e0	 mov	 eax, DWORD PTR tv901[ebp]
  000b9	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 515  :         /* We overwrite tree[n].Dad which is no longer needed */
; 516  : 
; 517  :         if (n > max_code) continue; /* not a leaf node */

  000bd	3b 7d e8	 cmp	 edi, DWORD PTR _max_code$1$[ebp]
  000c0	7f 46		 jg	 SHORT $LN5@gen_bitlen

; 518  : 
; 519  :         s->bl_count[bits]++;

  000c2	66 ff 84 43 3c
	0b 00 00	 inc	 WORD PTR [ebx+eax*2+2876]

; 520  :         xbits = 0;

  000ca	33 c9		 xor	 ecx, ecx

; 521  :         if (n >= base) xbits = extra[n - base];

  000cc	3b 7d f8	 cmp	 edi, DWORD PTR _base$1$[ebp]
  000cf	7c 09		 jl	 SHORT $LN20@gen_bitlen
  000d1	2b 7d f8	 sub	 edi, DWORD PTR _base$1$[ebp]
  000d4	8b 4d dc	 mov	 ecx, DWORD PTR _extra$1$[ebp]
  000d7	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
$LN20@gen_bitlen:

; 522  :         f = tree[n].Freq;
; 523  :         s->opt_len += (ulg)f * (unsigned)(bits + xbits);

  000da	8b 7d f4	 mov	 edi, DWORD PTR tv909[ebp]
  000dd	03 c1		 add	 eax, ecx
  000df	0f b7 3f	 movzx	 edi, WORD PTR [edi]
  000e2	0f af c7	 imul	 eax, edi
  000e5	01 83 a8 16 00
	00		 add	 DWORD PTR [ebx+5800], eax

; 524  :         if (stree) s->static_len += (ulg)f * (unsigned)(stree[n].Len + xbits);

  000eb	8b 45 d8	 mov	 eax, DWORD PTR _stree$1$[ebp]
  000ee	85 c0		 test	 eax, eax
  000f0	74 16		 je	 SHORT $LN5@gen_bitlen
  000f2	8b 5d d4	 mov	 ebx, DWORD PTR tv907[ebp]
  000f5	0f b7 44 03 02	 movzx	 eax, WORD PTR [ebx+eax+2]
  000fa	8b 5d e4	 mov	 ebx, DWORD PTR _s$1$[ebp]
  000fd	03 c1		 add	 eax, ecx
  000ff	0f af c7	 imul	 eax, edi
  00102	01 83 ac 16 00
	00		 add	 DWORD PTR [ebx+5804], eax
$LN5@gen_bitlen:

; 509  : 
; 510  :     for (h = s->heap_max + 1; h < HEAP_SIZE; h++) {

  00108	8b 4d f0	 mov	 ecx, DWORD PTR tv876[ebp]
  0010b	83 c1 04	 add	 ecx, 4
  0010e	83 6d ec 01	 sub	 DWORD PTR tv904[ebp], 1
  00112	89 4d f0	 mov	 DWORD PTR tv876[ebp], ecx
  00115	0f 85 68 ff ff
	ff		 jne	 $LL7@gen_bitlen

; 525  :     }
; 526  :     if (overflow == 0) return;

  0011b	89 55 d4	 mov	 DWORD PTR _overflow$2$[ebp], edx
  0011e	85 d2		 test	 edx, edx
  00120	0f 84 cc 00 00
	00		 je	 $LN50@gen_bitlen
  00126	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00129	81 c6 9e 05 00
	00		 add	 esi, 1438		; 0000059eH
  0012f	8d 3c 73	 lea	 edi, DWORD PTR [ebx+esi*2]
  00132	8b f0		 mov	 esi, eax
  00134	89 7d ec	 mov	 DWORD PTR tv872[ebp], edi
  00137	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@gen_bitlen:

; 527  : 
; 528  :     Tracev((stderr,"\nbit length overflow\n"));
; 529  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 530  : 
; 531  :     /* Find the first bit length which could increase: */
; 532  :     do {
; 533  :         bits = max_length - 1;

  00140	8b ce		 mov	 ecx, esi

; 534  :         while (s->bl_count[bits] == 0) bits--;

  00142	8d 81 9e 05 00
	00		 lea	 eax, DWORD PTR [ecx+1438]
  00148	66 83 3c 43 00	 cmp	 WORD PTR [ebx+eax*2], 0
  0014d	8d 04 43	 lea	 eax, DWORD PTR [ebx+eax*2]
  00150	75 0a		 jne	 SHORT $LN12@gen_bitlen
$LL11@gen_bitlen:
  00152	8d 40 fe	 lea	 eax, DWORD PTR [eax-2]
  00155	49		 dec	 ecx
  00156	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0015a	74 f6		 je	 SHORT $LL11@gen_bitlen
$LN12@gen_bitlen:

; 535  :         s->bl_count[bits]--;        /* move one leaf down the tree */
; 536  :         s->bl_count[bits + 1] += 2; /* move one overflow item as its brother */

  0015c	66 83 84 4b 3e
	0b 00 00 02	 add	 WORD PTR [ebx+ecx*2+2878], 2
  00165	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0016a	66 01 84 4b 3c
	0b 00 00	 add	 WORD PTR [ebx+ecx*2+2876], ax

; 537  :         s->bl_count[max_length]--;
; 538  :         /* The brother of the overflow item also moves one step up,
; 539  :          * but this does not affect bl_count[max_length]
; 540  :          */
; 541  :         overflow -= 2;

  00172	83 ea 02	 sub	 edx, 2
  00175	66 01 07	 add	 WORD PTR [edi], ax

; 542  :     } while (overflow > 0);

  00178	85 d2		 test	 edx, edx
  0017a	7f c4		 jg	 SHORT $LL10@gen_bitlen

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  0017c	8b 75 d0	 mov	 esi, DWORD PTR _bits$2$[ebp]
  0017f	ba 3d 02 00 00	 mov	 edx, 573		; 0000023dH
  00184	85 f6		 test	 esi, esi
  00186	74 6a		 je	 SHORT $LN50@gen_bitlen
$LL15@gen_bitlen:

; 550  :         n = s->bl_count[bits];

  00188	0f b7 07	 movzx	 eax, WORD PTR [edi]

; 551  :         while (n != 0) {

  0018b	85 c0		 test	 eax, eax
  0018d	74 58		 je	 SHORT $LN13@gen_bitlen

; 550  :         n = s->bl_count[bits];

  0018f	8d ba d7 02 00
	00		 lea	 edi, DWORD PTR [edx+727]
  00195	8d 3c bb	 lea	 edi, DWORD PTR [ebx+edi*4]
$LL16@gen_bitlen:

; 552  :             m = s->heap[--h];

  00198	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]
  0019b	8d 7f fc	 lea	 edi, DWORD PTR [edi-4]
  0019e	4a		 dec	 edx
  0019f	89 4d d4	 mov	 DWORD PTR _m$1$[ebp], ecx
  001a2	89 55 d8	 mov	 DWORD PTR _h$2$[ebp], edx

; 553  :             if (m > max_code) continue;

  001a5	3b 4d e8	 cmp	 ecx, DWORD PTR _max_code$1$[ebp]
  001a8	7f 36		 jg	 SHORT $LN36@gen_bitlen

; 554  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  001aa	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  001ad	0f b7 54 8a 02	 movzx	 edx, WORD PTR [edx+ecx*4+2]
  001b2	89 55 d0	 mov	 DWORD PTR tv884[ebp], edx
  001b5	3b d6		 cmp	 edx, esi
  001b7	74 23		 je	 SHORT $LN24@gen_bitlen

; 555  :                 Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 556  :                 s->opt_len += ((ulg)bits - tree[m].Len) * tree[m].Freq;

  001b9	8b 5d fc	 mov	 ebx, DWORD PTR _tree$1$[ebp]
  001bc	8b d6		 mov	 edx, esi
  001be	2b 55 d0	 sub	 edx, DWORD PTR tv884[ebp]
  001c1	0f b7 0c 8b	 movzx	 ecx, WORD PTR [ebx+ecx*4]
  001c5	8b 5d e4	 mov	 ebx, DWORD PTR _s$1$[ebp]
  001c8	0f af d1	 imul	 edx, ecx

; 557  :                 tree[m].Len = (ush)bits;

  001cb	8b 4d d4	 mov	 ecx, DWORD PTR _m$1$[ebp]
  001ce	01 93 a8 16 00
	00		 add	 DWORD PTR [ebx+5800], edx
  001d4	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  001d7	66 89 74 8a 02	 mov	 WORD PTR [edx+ecx*4+2], si
$LN24@gen_bitlen:

; 558  :             }
; 559  :             n--;

  001dc	8b 55 d8	 mov	 edx, DWORD PTR _h$2$[ebp]
  001df	48		 dec	 eax
$LN36@gen_bitlen:

; 551  :         while (n != 0) {

  001e0	85 c0		 test	 eax, eax
  001e2	75 b4		 jne	 SHORT $LL16@gen_bitlen
  001e4	8b 7d ec	 mov	 edi, DWORD PTR tv872[ebp]
$LN13@gen_bitlen:

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  001e7	83 ef 02	 sub	 edi, 2
  001ea	89 7d ec	 mov	 DWORD PTR tv872[ebp], edi
  001ed	83 ee 01	 sub	 esi, 1
  001f0	75 96		 jne	 SHORT $LL15@gen_bitlen
$LN50@gen_bitlen:
  001f2	5f		 pop	 edi
$LN14@gen_bitlen:
  001f3	5e		 pop	 esi

; 560  :         }
; 561  :     }
; 562  : }

  001f4	5b		 pop	 ebx
  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c3		 ret	 0
_gen_bitlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _gen_codes
_TEXT	SEGMENT
_next_code$ = -36					; size = 32
_tree$1$ = -4						; size = 4
_bl_count$ = 8						; size = 4
_gen_codes PROC						; COMDAT
; _tree$ = ecx
; _max_code$ = edx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b da		 mov	 ebx, edx
  0000a	89 4d fc	 mov	 DWORD PTR _tree$1$[ebp], ecx

; 577  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 578  :     unsigned code = 0;         /* running code value */

  0000d	8b 55 08	 mov	 edx, DWORD PTR _bl_count$[ebp]
  00010	8d 45 de	 lea	 eax, DWORD PTR _next_code$[ebp+2]
  00013	57		 push	 edi
  00014	33 ff		 xor	 edi, edi
  00016	be 01 00 00 00	 mov	 esi, 1
  0001b	2b d0		 sub	 edx, eax
  0001d	0f 1f 00	 npad	 3
$LL14@gen_codes:

; 579  :     int bits;                  /* bit index */
; 580  :     int n;                     /* code index */
; 581  : 
; 582  :     /* The distribution counts are first used to generate the code values
; 583  :      * without bit reversal.
; 584  :      */
; 585  :     for (bits = 1; bits <= MAX_BITS; bits++) {
; 586  :         code = (code + bl_count[bits - 1]) << 1;

  00020	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  00023	0f b7 44 05 dc	 movzx	 eax, WORD PTR _next_code$[ebp+eax]
  00028	03 f8		 add	 edi, eax
  0002a	03 ff		 add	 edi, edi

; 587  :         next_code[bits] = (ush)code;

  0002c	66 89 7c 75 dc	 mov	 WORD PTR _next_code$[ebp+esi*2], di
  00031	46		 inc	 esi
  00032	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00035	7e e9		 jle	 SHORT $LL14@gen_codes

; 588  :     }
; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS] - 1 == (1 << MAX_BITS) - 1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00037	33 f6		 xor	 esi, esi
  00039	85 db		 test	 ebx, ebx
  0003b	78 2a		 js	 SHORT $LN6@gen_codes
  0003d	0f 1f 00	 npad	 3
$LL7@gen_codes:

; 597  :         int len = tree[n].Len;

  00040	0f b7 54 b1 02	 movzx	 edx, WORD PTR [ecx+esi*4+2]

; 598  :         if (len == 0) continue;

  00045	85 d2		 test	 edx, edx
  00047	74 19		 je	 SHORT $LN5@gen_codes

; 599  :         /* Now reverse the bits */
; 600  :         tree[n].Code = (ush)bi_reverse(next_code[len]++, len);

  00049	0f b7 4c 55 dc	 movzx	 ecx, WORD PTR _next_code$[ebp+edx*2]
  0004e	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00051	66 89 44 55 dc	 mov	 WORD PTR _next_code$[ebp+edx*2], ax
  00056	e8 00 00 00 00	 call	 _bi_reverse
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  0005e	66 89 04 b1	 mov	 WORD PTR [ecx+esi*4], ax
$LN5@gen_codes:

; 588  :     }
; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS] - 1 == (1 << MAX_BITS) - 1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00062	46		 inc	 esi
  00063	3b f3		 cmp	 esi, ebx
  00065	7e d9		 jle	 SHORT $LL7@gen_codes
$LN6@gen_codes:
  00067	5f		 pop	 edi

; 601  : 
; 602  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 603  :             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len] - 1));
; 604  :     }
; 605  : }

  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_gen_codes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _build_tree
_TEXT	SEGMENT
_stree$1$ = -24						; size = 4
_desc$1$ = -20						; size = 4
tv715 = -16						; size = 4
_n$3$ = -16						; size = 4
_max_code$1$ = -12					; size = 4
_node$2$ = -8						; size = 4
_tree$1$ = -4						; size = 4
_build_tree PROC					; COMDAT
; _s$ = ecx
; _desc$ = edx

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	8b c2		 mov	 eax, edx

; 619  :     ct_data *tree         = desc->dyn_tree;
; 620  :     const ct_data *stree  = desc->stat_desc->static_tree;
; 621  :     int elems             = desc->stat_desc->elems;
; 622  :     int n, m;          /* iterate over heap elements */
; 623  :     int max_code = -1; /* largest code with non zero frequency */

  00008	83 ca ff	 or	 edx, -1
  0000b	53		 push	 ebx
  0000c	89 45 ec	 mov	 DWORD PTR _desc$1$[ebp], eax
  0000f	56		 push	 esi
  00010	8b 18		 mov	 ebx, DWORD PTR [eax]
  00012	8b f1		 mov	 esi, ecx
  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	57		 push	 edi
  00018	89 5d fc	 mov	 DWORD PTR _tree$1$[ebp], ebx
  0001b	89 55 f4	 mov	 DWORD PTR _max_code$1$[ebp], edx
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00023	89 4d e8	 mov	 DWORD PTR _stree$1$[ebp], ecx
  00026	33 c9		 xor	 ecx, ecx
  00028	89 7d f8	 mov	 DWORD PTR _node$2$[ebp], edi

; 624  :     int node;          /* new node being created */
; 625  : 
; 626  :     /* Construct the initial heap, with least frequent element in
; 627  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n + 1].
; 628  :      * heap[0] is not used.
; 629  :      */
; 630  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  0002b	c7 86 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5200], 0
  00035	c7 86 54 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [esi+5204], 573 ; 0000023dH

; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  0003f	85 ff		 test	 edi, edi
  00041	7e 35		 jle	 SHORT $LN35@build_tree
$LL4@build_tree:

; 633  :         if (tree[n].Freq != 0) {

  00043	66 83 3c 8b 00	 cmp	 WORD PTR [ebx+ecx*4], 0
  00048	74 1f		 je	 SHORT $LN13@build_tree

; 634  :             s->heap[++(s->heap_len)] = max_code = n;

  0004a	ff 86 50 14 00
	00		 inc	 DWORD PTR [esi+5200]
  00050	8b d1		 mov	 edx, ecx
  00052	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  00058	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 635  :             s->depth[n] = 0;

  0005f	c6 84 0e 58 14
	00 00 00	 mov	 BYTE PTR [esi+ecx+5208], 0

; 636  :         } else {

  00067	eb 07		 jmp	 SHORT $LN2@build_tree
$LN13@build_tree:

; 637  :             tree[n].Len = 0;

  00069	33 c0		 xor	 eax, eax
  0006b	66 89 44 8b 02	 mov	 WORD PTR [ebx+ecx*4+2], ax
$LN2@build_tree:

; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  00070	41		 inc	 ecx
  00071	3b cf		 cmp	 ecx, edi
  00073	7c ce		 jl	 SHORT $LL4@build_tree
  00075	89 55 f4	 mov	 DWORD PTR _max_code$1$[ebp], edx
$LN35@build_tree:

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  00078	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  0007e	83 f8 02	 cmp	 eax, 2
  00081	7d 5d		 jge	 SHORT $LN6@build_tree
$LL5@build_tree:

; 647  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  00083	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  00086	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv715[ebp], 0
  0008d	83 fa 02	 cmp	 edx, 2
  00090	8b f9		 mov	 edi, ecx
  00092	0f 4d 4d f0	 cmovge	 ecx, DWORD PTR tv715[ebp]
  00096	0f 4d fa	 cmovge	 edi, edx
  00099	40		 inc	 eax
  0009a	89 86 50 14 00
	00		 mov	 DWORD PTR [esi+5200], eax
  000a0	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx

; 648  :         tree[node].Freq = 1;

  000a7	b8 01 00 00 00	 mov	 eax, 1
  000ac	66 89 04 8b	 mov	 WORD PTR [ebx+ecx*4], ax

; 649  :         s->depth[node] = 0;
; 650  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  000b0	8b 45 e8	 mov	 eax, DWORD PTR _stree$1$[ebp]
  000b3	c6 84 31 58 14
	00 00 00	 mov	 BYTE PTR [ecx+esi+5208], 0
  000bb	ff 8e a8 16 00
	00		 dec	 DWORD PTR [esi+5800]
  000c1	85 c0		 test	 eax, eax
  000c3	74 0b		 je	 SHORT $LN15@build_tree
  000c5	0f b7 44 88 02	 movzx	 eax, WORD PTR [eax+ecx*4+2]
  000ca	29 86 ac 16 00
	00		 sub	 DWORD PTR [esi+5804], eax
$LN15@build_tree:

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  000d0	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  000d6	8b d7		 mov	 edx, edi
  000d8	83 f8 02	 cmp	 eax, 2
  000db	7c a6		 jl	 SHORT $LL5@build_tree
  000dd	89 55 f4	 mov	 DWORD PTR _max_code$1$[ebp], edx
$LN6@build_tree:

; 651  :         /* node is 0 or 1 so it does not have extra bits */
; 652  :     }
; 653  :     desc->max_code = max_code;

  000e0	8b 45 ec	 mov	 eax, DWORD PTR _desc$1$[ebp]
  000e3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 654  : 
; 655  :     /* The elements heap[heap_len/2 + 1 .. heap_len] are leaves of the tree,
; 656  :      * establish sub-heaps of increasing lengths:
; 657  :      */
; 658  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  000e6	8b 86 50 14 00
	00		 mov	 eax, DWORD PTR [esi+5200]
  000ec	99		 cdq
  000ed	2b c2		 sub	 eax, edx
  000ef	8b f8		 mov	 edi, eax
  000f1	d1 ff		 sar	 edi, 1
  000f3	83 ff 01	 cmp	 edi, 1
  000f6	7c 18		 jl	 SHORT $LL12@build_tree
$LL9@build_tree:
  000f8	57		 push	 edi
  000f9	8b d3		 mov	 edx, ebx
  000fb	8b ce		 mov	 ecx, esi
  000fd	e8 00 00 00 00	 call	 _pqdownheap
  00102	4f		 dec	 edi
  00103	83 c4 04	 add	 esp, 4
  00106	83 ff 01	 cmp	 edi, 1
  00109	7d ed		 jge	 SHORT $LL9@build_tree
  0010b	0f 1f 44 00 00	 npad	 5
$LL12@build_tree:

; 659  : 
; 660  :     /* Construct the Huffman tree by repeatedly combining the least two
; 661  :      * frequent nodes.
; 662  :      */
; 663  :     node = elems;              /* next internal node of the tree */
; 664  :     do {
; 665  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00110	8b 8e 50 14 00
	00		 mov	 ecx, DWORD PTR [esi+5200]
  00116	8b 9e 60 0b 00
	00		 mov	 ebx, DWORD PTR [esi+2912]
  0011c	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  0011f	6a 01		 push	 1
  00121	8b 84 8e 5c 0b
	00 00		 mov	 eax, DWORD PTR [esi+ecx*4+2908]
  00128	89 86 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], eax
  0012e	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00131	8b ce		 mov	 ecx, esi
  00133	89 5d f0	 mov	 DWORD PTR _n$3$[ebp], ebx
  00136	89 86 50 14 00
	00		 mov	 DWORD PTR [esi+5200], eax
  0013c	e8 00 00 00 00	 call	 _pqdownheap

; 666  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */
; 667  : 
; 668  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  00141	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  00147	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]
  0014d	8b 8e 60 0b 00
	00		 mov	 ecx, DWORD PTR [esi+2912]

; 669  :         s->heap[--(s->heap_max)] = m;
; 670  : 
; 671  :         /* Create a new node father of n and m */
; 672  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  00153	8b 55 fc	 mov	 edx, DWORD PTR _tree$1$[ebp]
  00156	8d 3c 8a	 lea	 edi, DWORD PTR [edx+ecx*4]
  00159	89 9c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ebx
  00160	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  00166	8b 86 54 14 00
	00		 mov	 eax, DWORD PTR [esi+5204]

; 673  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 674  :                                 s->depth[n] : s->depth[m]) + 1);
; 675  :         tree[n].Dad = tree[m].Dad = (ush)node;
; 676  : #ifdef DUMP_BL_TREE
; 677  :         if (tree == s->bl_tree) {
; 678  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 679  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 680  :         }
; 681  : #endif
; 682  :         /* and insert the new node in the heap */
; 683  :         s->heap[SMALLEST] = node++;
; 684  :         pqdownheap(s, tree, SMALLEST);

  0016c	6a 01		 push	 1
  0016e	89 8c 86 5c 0b
	00 00		 mov	 DWORD PTR [esi+eax*4+2908], ecx
  00175	66 8b 07	 mov	 ax, WORD PTR [edi]
  00178	66 03 04 9a	 add	 ax, WORD PTR [edx+ebx*4]
  0017c	8b 5d f8	 mov	 ebx, DWORD PTR _node$2$[ebp]
  0017f	66 89 04 9a	 mov	 WORD PTR [edx+ebx*4], ax
  00183	8a 8c 31 58 14
	00 00		 mov	 cl, BYTE PTR [ecx+esi+5208]
  0018a	8b 5d f0	 mov	 ebx, DWORD PTR _n$3$[ebp]
  0018d	0f b6 c1	 movzx	 eax, cl
  00190	8a 94 33 58 14
	00 00		 mov	 dl, BYTE PTR [ebx+esi+5208]
  00197	3a d1		 cmp	 dl, cl
  00199	0f b6 da	 movzx	 ebx, dl
  0019c	8b 55 f8	 mov	 edx, DWORD PTR _node$2$[ebp]
  0019f	8b 4d f0	 mov	 ecx, DWORD PTR _n$3$[ebp]
  001a2	0f 42 d8	 cmovb	 ebx, eax
  001a5	fe c3		 inc	 bl
  001a7	0f b7 c2	 movzx	 eax, dx
  001aa	88 9c 16 58 14
	00 00		 mov	 BYTE PTR [esi+edx+5208], bl
  001b1	8b 5d fc	 mov	 ebx, DWORD PTR _tree$1$[ebp]
  001b4	66 89 47 02	 mov	 WORD PTR [edi+2], ax
  001b8	66 89 44 8b 02	 mov	 WORD PTR [ebx+ecx*4+2], ax
  001bd	8b ce		 mov	 ecx, esi
  001bf	89 96 60 0b 00
	00		 mov	 DWORD PTR [esi+2912], edx
  001c5	42		 inc	 edx
  001c6	89 55 f8	 mov	 DWORD PTR _node$2$[ebp], edx
  001c9	8b d3		 mov	 edx, ebx
  001cb	e8 00 00 00 00	 call	 _pqdownheap
  001d0	83 c4 08	 add	 esp, 8

; 685  : 
; 686  :     } while (s->heap_len >= 2);

  001d3	83 be 50 14 00
	00 02		 cmp	 DWORD PTR [esi+5200], 2
  001da	0f 8d 30 ff ff
	ff		 jge	 $LL12@build_tree

; 687  : 
; 688  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  001e0	ff 8e 54 14 00
	00		 dec	 DWORD PTR [esi+5204]
  001e6	8b be 54 14 00
	00		 mov	 edi, DWORD PTR [esi+5204]
  001ec	8b 86 60 0b 00
	00		 mov	 eax, DWORD PTR [esi+2912]

; 689  : 
; 690  :     /* At this point, the fields freq and dad are set. We can now
; 691  :      * generate the bit lengths.
; 692  :      */
; 693  :     gen_bitlen(s, (tree_desc *)desc);

  001f2	8b 55 ec	 mov	 edx, DWORD PTR _desc$1$[ebp]
  001f5	89 84 be 5c 0b
	00 00		 mov	 DWORD PTR [esi+edi*4+2908], eax
  001fc	e8 00 00 00 00	 call	 _gen_bitlen

; 694  : 
; 695  :     /* The field len is now set, we can generate the bit codes */
; 696  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  00201	8b 55 f4	 mov	 edx, DWORD PTR _max_code$1$[ebp]
  00204	81 c6 3c 0b 00
	00		 add	 esi, 2876		; 00000b3cH
  0020a	56		 push	 esi
  0020b	8b cb		 mov	 ecx, ebx
  0020d	e8 00 00 00 00	 call	 _gen_codes
  00212	83 c4 04	 add	 esp, 4
  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	5b		 pop	 ebx

; 697  : }

  00218	8b e5		 mov	 esp, ebp
  0021a	5d		 pop	 ebp
  0021b	c3		 ret	 0
_build_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _scan_tree
_TEXT	SEGMENT
tv364 = -12						; size = 4
_prevlen$1$ = -8					; size = 4
tv355 = -4						; size = 4
tv353 = -4						; size = 4
tv362 = 8						; size = 4
_max_code$ = 8						; size = 4
_scan_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx

; 708  :     int n;                     /* iterates over all tree elements */
; 709  :     int prevlen = -1;          /* last emitted length */

  0000a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _prevlen$1$[ebp], -1
  00011	57		 push	 edi

; 710  :     int curlen;                /* length of current code */
; 711  :     int nextlen = tree[0].Len; /* length of next code */
; 712  :     int count = 0;             /* repeat count of the current code */
; 713  :     int max_count = 7;         /* max repeat count */
; 714  :     int min_count = 4;         /* min repeat count */
; 715  : 
; 716  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 717  :     tree[max_code + 1].Len = (ush)0xffff; /* guard */

  00012	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  00017	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0001b	8b d0		 mov	 edx, eax
  0001d	8b d8		 mov	 ebx, eax
  0001f	89 55 fc	 mov	 DWORD PTR tv353[ebp], edx
  00022	33 c0		 xor	 eax, eax
  00024	8b 55 08	 mov	 edx, DWORD PTR _max_code$[ebp]
  00027	66 89 7c 96 06	 mov	 WORD PTR [esi+edx*4+6], di

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  0002c	85 d2		 test	 edx, edx
  0002e	0f 88 b7 00 00
	00		 js	 $LN3@scan_tree

; 710  :     int curlen;                /* length of current code */
; 711  :     int nextlen = tree[0].Len; /* length of next code */
; 712  :     int count = 0;             /* repeat count of the current code */
; 713  :     int max_count = 7;         /* max repeat count */
; 714  :     int min_count = 4;         /* min repeat count */
; 715  : 
; 716  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 717  :     tree[max_code + 1].Len = (ush)0xffff; /* guard */

  00034	66 3b d8	 cmp	 bx, ax
  00037	ba 07 00 00 00	 mov	 edx, 7
  0003c	bf 8a 00 00 00	 mov	 edi, 138		; 0000008aH
  00041	0f 45 fa	 cmovne	 edi, edx
  00044	33 d2		 xor	 edx, edx
  00046	66 3b d8	 cmp	 bx, ax
  00049	0f 95 c2	 setne	 dl
  0004c	83 c6 06	 add	 esi, 6
  0004f	89 75 fc	 mov	 DWORD PTR tv355[ebp], esi
  00052	83 c2 03	 add	 edx, 3
  00055	8b 75 08	 mov	 esi, DWORD PTR _max_code$[ebp]
  00058	46		 inc	 esi
  00059	89 75 f4	 mov	 DWORD PTR tv364[ebp], esi
  0005c	0f 1f 40 00	 npad	 4
$LL4@scan_tree:

; 720  :         curlen = nextlen; nextlen = tree[n + 1].Len;

  00060	89 5d 08	 mov	 DWORD PTR tv362[ebp], ebx
  00063	8b f3		 mov	 esi, ebx
  00065	8b 5d fc	 mov	 ebx, DWORD PTR tv355[ebp]

; 721  :         if (++count < max_count && curlen == nextlen) {

  00068	40		 inc	 eax
  00069	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  0006c	3b c7		 cmp	 eax, edi
  0006e	7d 04		 jge	 SHORT $LN6@scan_tree
  00070	3b f3		 cmp	 esi, ebx
  00072	74 69		 je	 SHORT $LN2@scan_tree
$LN6@scan_tree:

; 722  :             continue;
; 723  :         } else if (count < min_count) {

  00074	3b c2		 cmp	 eax, edx
  00076	8b 55 08	 mov	 edx, DWORD PTR tv362[ebp]
  00079	7d 0a		 jge	 SHORT $LN8@scan_tree

; 724  :             s->bl_tree[curlen].Freq += count;

  0007b	66 01 84 b1 7c
	0a 00 00	 add	 WORD PTR [ecx+esi*4+2684], ax
  00083	eb 2f		 jmp	 SHORT $LN14@scan_tree
$LN8@scan_tree:

; 725  :         } else if (curlen != 0) {

  00085	85 d2		 test	 edx, edx
  00087	74 16		 je	 SHORT $LN10@scan_tree

; 726  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00089	3b 75 f8	 cmp	 esi, DWORD PTR _prevlen$1$[ebp]
  0008c	74 08		 je	 SHORT $LN24@scan_tree
  0008e	66 ff 84 b1 7c
	0a 00 00	 inc	 WORD PTR [ecx+esi*4+2684]
$LN24@scan_tree:

; 727  :             s->bl_tree[REP_3_6].Freq++;

  00096	66 ff 81 bc 0a
	00 00		 inc	 WORD PTR [ecx+2748]
  0009d	eb 15		 jmp	 SHORT $LN14@scan_tree
$LN10@scan_tree:

; 728  :         } else if (count <= 10) {

  0009f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000a2	7f 09		 jg	 SHORT $LN13@scan_tree

; 729  :             s->bl_tree[REPZ_3_10].Freq++;

  000a4	66 ff 81 c0 0a
	00 00		 inc	 WORD PTR [ecx+2752]

; 730  :         } else {

  000ab	eb 07		 jmp	 SHORT $LN14@scan_tree
$LN13@scan_tree:

; 731  :             s->bl_tree[REPZ_11_138].Freq++;

  000ad	66 ff 81 c4 0a
	00 00		 inc	 WORD PTR [ecx+2756]
$LN14@scan_tree:

; 732  :         }
; 733  :         count = 0; prevlen = curlen;

  000b4	33 c0		 xor	 eax, eax
  000b6	89 75 f8	 mov	 DWORD PTR _prevlen$1$[ebp], esi

; 734  :         if (nextlen == 0) {

  000b9	85 db		 test	 ebx, ebx
  000bb	75 0a		 jne	 SHORT $LN15@scan_tree

; 735  :             max_count = 138, min_count = 3;

  000bd	bf 8a 00 00 00	 mov	 edi, 138		; 0000008aH
  000c2	8d 50 03	 lea	 edx, DWORD PTR [eax+3]
  000c5	eb 16		 jmp	 SHORT $LN2@scan_tree
$LN15@scan_tree:

; 736  :         } else if (curlen == nextlen) {

  000c7	3b d3		 cmp	 edx, ebx
  000c9	75 0a		 jne	 SHORT $LN17@scan_tree

; 737  :             max_count = 6, min_count = 3;

  000cb	bf 06 00 00 00	 mov	 edi, 6
  000d0	8d 57 fd	 lea	 edx, DWORD PTR [edi-3]

; 738  :         } else {

  000d3	eb 08		 jmp	 SHORT $LN2@scan_tree
$LN17@scan_tree:

; 739  :             max_count = 7, min_count = 4;

  000d5	bf 07 00 00 00	 mov	 edi, 7
  000da	8d 57 fd	 lea	 edx, DWORD PTR [edi-3]
$LN2@scan_tree:

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  000dd	83 45 fc 04	 add	 DWORD PTR tv355[ebp], 4
  000e1	83 6d f4 01	 sub	 DWORD PTR tv364[ebp], 1
  000e5	0f 85 75 ff ff
	ff		 jne	 $LL4@scan_tree
$LN3@scan_tree:
  000eb	5f		 pop	 edi

; 740  :         }
; 741  :     }
; 742  : }

  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_scan_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _send_tree
_TEXT	SEGMENT
tv1971 = -32						; size = 4
tv1937 = -32						; size = 4
tv1895 = -32						; size = 4
tv1855 = -32						; size = 4
_nextlen$1$ = -32					; size = 4
tv2037 = -28						; size = 4
_tree$1$ = -28						; size = 4
tv2033 = -24						; size = 4
_len$1$ = -24						; size = 4
_len$1$ = -24						; size = 4
_len$1$ = -24						; size = 4
tv2036 = -20						; size = 4
_len$1$ = -20						; size = 4
tv1980 = -16						; size = 4
tv2032 = -12						; size = 4
_curlen$1$ = -8						; size = 4
_s$1$ = -4						; size = 4
$T1 = 8							; size = 4
$T2 = 8							; size = 4
tv1977 = 8						; size = 4
tv1975 = 8						; size = 4
tv1973 = 8						; size = 4
tv1969 = 8						; size = 4
tv1967 = 8						; size = 4
tv1964 = 8						; size = 4
tv1962 = 8						; size = 4
$T3 = 8							; size = 4
_len$1$ = 8						; size = 4
_max_code$ = 8						; size = 4
_send_tree PROC						; COMDAT
; _s$ = ecx
; _tree$ = edx

; 752  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx

; 753  :     int n;                     /* iterates over all tree elements */
; 754  :     int prevlen = -1;          /* last emitted length */
; 755  :     int curlen;                /* length of current code */
; 756  :     int nextlen = tree[0].Len; /* length of next code */

  00007	0f b7 5a 02	 movzx	 ebx, WORD PTR [edx+2]
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 757  :     int count = 0;             /* repeat count of the current code */

  0000d	33 ff		 xor	 edi, edi
  0000f	89 55 e4	 mov	 DWORD PTR _tree$1$[ebp], edx
  00012	83 ce ff	 or	 esi, -1
  00015	89 4d fc	 mov	 DWORD PTR _s$1$[ebp], ecx

; 758  :     int max_count = 7;         /* max repeat count */
; 759  :     int min_count = 4;         /* min repeat count */
; 760  : 
; 761  :     /* tree[max_code + 1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  00018	39 7d 08	 cmp	 DWORD PTR _max_code$[ebp], edi
  0001b	0f 8c 24 05 00
	00		 jl	 $LN3@send_tree
  00021	85 db		 test	 ebx, ebx
  00023	b8 07 00 00 00	 mov	 eax, 7
  00028	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  0002d	0f 45 d0	 cmovne	 edx, eax
  00030	8b 45 e4	 mov	 eax, DWORD PTR _tree$1$[ebp]
  00033	33 c9		 xor	 ecx, ecx
  00035	85 db		 test	 ebx, ebx
  00037	0f 95 c1	 setne	 cl
  0003a	83 c0 06	 add	 eax, 6
  0003d	89 45 f0	 mov	 DWORD PTR tv1980[ebp], eax
  00040	83 c1 03	 add	 ecx, 3
  00043	8b 45 08	 mov	 eax, DWORD PTR _max_code$[ebp]
  00046	40		 inc	 eax
  00047	89 45 e4	 mov	 DWORD PTR tv2037[ebp], eax
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  0004d	0f 1f 00	 npad	 3
$LL4@send_tree:

; 765  :         curlen = nextlen; nextlen = tree[n + 1].Len;

  00050	89 5d f4	 mov	 DWORD PTR tv2032[ebp], ebx
  00053	89 5d f8	 mov	 DWORD PTR _curlen$1$[ebp], ebx
  00056	89 5d e8	 mov	 DWORD PTR tv2033[ebp], ebx
  00059	8b 5d f0	 mov	 ebx, DWORD PTR tv1980[ebp]

; 766  :         if (++count < max_count && curlen == nextlen) {

  0005c	89 7d ec	 mov	 DWORD PTR tv2036[ebp], edi
  0005f	47		 inc	 edi
  00060	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  00063	89 5d e0	 mov	 DWORD PTR _nextlen$1$[ebp], ebx
  00066	3b fa		 cmp	 edi, edx
  00068	7d 09		 jge	 SHORT $LN9@send_tree
  0006a	39 5d f4	 cmp	 DWORD PTR tv2032[ebp], ebx
  0006d	0f 84 c4 04 00
	00		 je	 $LN2@send_tree
$LN9@send_tree:

; 767  :             continue;
; 768  :         } else if (count < min_count) {

  00073	3b f9		 cmp	 edi, ecx
  00075	0f 8d b4 00 00
	00		 jge	 $LN11@send_tree
  0007b	0f 1f 44 00 00	 npad	 5
$LL7@send_tree:

; 769  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  00080	8b 4d f8	 mov	 ecx, DWORD PTR _curlen$1$[ebp]
  00083	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  00089	0f b7 8c 88 7e
	0a 00 00	 movzx	 ecx, WORD PTR [eax+ecx*4+2686]
  00091	89 4d ec	 mov	 DWORD PTR _len$1$[ebp], ecx
  00094	8b 4d e8	 mov	 ecx, DWORD PTR tv2033[ebp]
  00097	0f b7 9c 88 7c
	0a 00 00	 movzx	 ebx, WORD PTR [eax+ecx*4+2684]
  0009f	8b ce		 mov	 ecx, esi
  000a1	66 8b d3	 mov	 dx, bx
  000a4	66 d3 e2	 shl	 dx, cl
  000a7	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  000ae	0f b7 ca	 movzx	 ecx, dx
  000b1	8b 55 ec	 mov	 edx, DWORD PTR _len$1$[ebp]
  000b4	89 4d 08	 mov	 DWORD PTR tv1973[ebp], ecx
  000b7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000bc	2b ca		 sub	 ecx, edx
  000be	3b f1		 cmp	 esi, ecx
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR tv1973[ebp]
  000c3	7e 47		 jle	 SHORT $LN13@send_tree
  000c5	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000c8	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  000cf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d2	8b 45 08	 mov	 eax, DWORD PTR tv1973[ebp]
  000d5	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000d8	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  000db	ff 40 14	 inc	 DWORD PTR [eax+20]
  000de	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  000e1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000e4	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  000ea	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000ed	b1 10		 mov	 cl, 16			; 00000010H
  000ef	8b 55 ec	 mov	 edx, DWORD PTR _len$1$[ebp]
  000f2	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  000f8	83 c2 f0	 add	 edx, -16		; fffffff0H
  000fb	ff 40 14	 inc	 DWORD PTR [eax+20]
  000fe	03 90 bc 16 00
	00		 add	 edx, DWORD PTR [eax+5820]
  00104	66 d3 eb	 shr	 bx, cl
  00107	0f b7 cb	 movzx	 ecx, bx
  0010a	eb 05		 jmp	 SHORT $LN5@send_tree
$LN13@send_tree:
  0010c	03 d6		 add	 edx, esi
  0010e	0f b7 c9	 movzx	 ecx, cx
$LN5@send_tree:
  00111	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  00118	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0011e	83 ef 01	 sub	 edi, 1
  00121	0f 85 59 ff ff
	ff		 jne	 $LL7@send_tree

; 770  : 
; 771  :         } else if (curlen != 0) {

  00127	8b 5d e0	 mov	 ebx, DWORD PTR _nextlen$1$[ebp]
  0012a	e9 de 03 00 00	 jmp	 $LN33@send_tree
$LN11@send_tree:
  0012f	83 7d f4 00	 cmp	 DWORD PTR tv2032[ebp], 0
  00133	0f 84 b1 01 00
	00		 je	 $LN15@send_tree

; 772  :             if (curlen != prevlen) {

  00139	8b 4d f8	 mov	 ecx, DWORD PTR _curlen$1$[ebp]
  0013c	3b ce		 cmp	 ecx, esi
  0013e	0f 84 93 00 00
	00		 je	 $LN47@send_tree

; 773  :                 send_code(s, curlen, s->bl_tree); count--;

  00144	8b 55 e8	 mov	 edx, DWORD PTR tv2033[ebp]
  00147	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0014c	0f b7 8c 88 7e
	0a 00 00	 movzx	 ecx, WORD PTR [eax+ecx*4+2686]
  00154	2b f1		 sub	 esi, ecx
  00156	89 4d 08	 mov	 DWORD PTR _len$1$[ebp], ecx
  00159	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0015f	0f b7 bc 90 7c
	0a 00 00	 movzx	 edi, WORD PTR [eax+edx*4+2684]
  00167	66 8b d7	 mov	 dx, di
  0016a	66 d3 e2	 shl	 dx, cl
  0016d	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00174	0f b7 d2	 movzx	 edx, dx
  00177	89 55 e0	 mov	 DWORD PTR tv1971[ebp], edx
  0017a	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00181	3b ce		 cmp	 ecx, esi
  00183	7e 46		 jle	 SHORT $LN18@send_tree
  00185	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00188	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0018b	8b 45 e0	 mov	 eax, DWORD PTR tv1971[ebp]
  0018e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00191	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  00194	ff 40 14	 inc	 DWORD PTR [eax+20]
  00197	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0019a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0019d	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  001a3	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  001a6	b1 10		 mov	 cl, 16			; 00000010H
  001a8	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  001ae	8b 55 08	 mov	 edx, DWORD PTR _len$1$[ebp]
  001b1	ff 40 14	 inc	 DWORD PTR [eax+20]
  001b4	83 c2 f0	 add	 edx, -16		; fffffff0H
  001b7	66 d3 ef	 shr	 di, cl
  001ba	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001c0	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  001c7	03 ca		 add	 ecx, edx
  001c9	eb 03		 jmp	 SHORT $LN19@send_tree
$LN18@send_tree:
  001cb	03 4d 08	 add	 ecx, DWORD PTR _len$1$[ebp]
$LN19@send_tree:
  001ce	8b 7d ec	 mov	 edi, DWORD PTR tv2036[ebp]
  001d1	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN47@send_tree:

; 774  :             }
; 775  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 776  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count - 3, 2);

  001d7	0f b7 88 be 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2750]
  001de	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  001e4	89 4d e8	 mov	 DWORD PTR _len$1$[ebp], ecx
  001e7	0f b7 88 bc 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2748]
  001ee	66 8b d1	 mov	 dx, cx
  001f1	89 4d e0	 mov	 DWORD PTR tv1855[ebp], ecx
  001f4	8b ce		 mov	 ecx, esi
  001f6	66 d3 e2	 shl	 dx, cl
  001f9	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00200	0f b7 ca	 movzx	 ecx, dx
  00203	8b 55 e8	 mov	 edx, DWORD PTR _len$1$[ebp]
  00206	89 4d 08	 mov	 DWORD PTR tv1969[ebp], ecx
  00209	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0020e	2b ca		 sub	 ecx, edx
  00210	3b f1		 cmp	 esi, ecx
  00212	8b 4d 08	 mov	 ecx, DWORD PTR tv1969[ebp]
  00215	7e 4a		 jle	 SHORT $LN20@send_tree
  00217	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0021a	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  00221	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00224	8b 45 08	 mov	 eax, DWORD PTR tv1969[ebp]
  00227	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0022a	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  0022d	ff 40 14	 inc	 DWORD PTR [eax+20]
  00230	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00233	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00236	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0023c	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0023f	b1 10		 mov	 cl, 16			; 00000010H
  00241	8b 75 e8	 mov	 esi, DWORD PTR _len$1$[ebp]
  00244	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0024a	83 c6 f0	 add	 esi, -16		; fffffff0H
  0024d	8b 55 e0	 mov	 edx, DWORD PTR tv1855[ebp]
  00250	ff 40 14	 inc	 DWORD PTR [eax+20]
  00253	03 b0 bc 16 00
	00		 add	 esi, DWORD PTR [eax+5820]
  00259	66 d3 ea	 shr	 dx, cl
  0025c	0f b7 ca	 movzx	 ecx, dx
  0025f	eb 05		 jmp	 SHORT $LN48@send_tree
$LN20@send_tree:
  00261	03 f2		 add	 esi, edx
  00263	0f b7 c9	 movzx	 ecx, cx
$LN48@send_tree:
  00266	89 4d 08	 mov	 DWORD PTR $T3[ebp], ecx
  00269	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  00270	8d 4f fd	 lea	 ecx, DWORD PTR [edi-3]
  00273	0f b7 f9	 movzx	 edi, cx
  00276	8b ce		 mov	 ecx, esi
  00278	66 8b d7	 mov	 dx, di
  0027b	89 b0 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], esi
  00281	66 d3 e2	 shl	 dx, cl
  00284	66 0b 55 08	 or	 dx, WORD PTR $T3[ebp]
  00288	0f b7 d2	 movzx	 edx, dx
  0028b	89 55 08	 mov	 DWORD PTR tv1967[ebp], edx
  0028e	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00291	7e 4f		 jle	 SHORT $LN22@send_tree
  00293	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00296	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  0029d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002a0	8b 45 08	 mov	 eax, DWORD PTR tv1967[ebp]
  002a3	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002a6	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  002a9	ff 40 14	 inc	 DWORD PTR [eax+20]
  002ac	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  002af	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002b2	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  002b8	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  002bb	b1 10		 mov	 cl, 16			; 00000010H
  002bd	0f b7 90 bc 16
	00 00		 movzx	 edx, WORD PTR [eax+5820]
  002c4	ff 40 14	 inc	 DWORD PTR [eax+20]
  002c7	2a ca		 sub	 cl, dl
  002c9	83 80 bc 16 00
	00 f2		 add	 DWORD PTR [eax+5820], -14 ; fffffff2H
  002d0	66 d3 ef	 shr	 di, cl
  002d3	0f b7 cf	 movzx	 ecx, di

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  002d6	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  002dd	e9 2b 02 00 00	 jmp	 $LN33@send_tree
$LN22@send_tree:

; 774  :             }
; 775  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 776  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count - 3, 2);

  002e2	8d 4e 02	 lea	 ecx, DWORD PTR [esi+2]
  002e5	e9 10 01 00 00	 jmp	 $LN51@send_tree
$LN15@send_tree:

; 777  : 
; 778  :         } else if (count <= 10) {

  002ea	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  002f0	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  002f3	0f 8f 16 01 00
	00		 jg	 $LN24@send_tree

; 779  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count - 3, 3);

  002f9	0f b7 88 c2 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2754]
  00300	89 4d e8	 mov	 DWORD PTR _len$1$[ebp], ecx
  00303	0f b7 88 c0 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2752]
  0030a	66 8b d1	 mov	 dx, cx
  0030d	89 4d e0	 mov	 DWORD PTR tv1895[ebp], ecx
  00310	8b ce		 mov	 ecx, esi
  00312	66 d3 e2	 shl	 dx, cl
  00315	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  0031c	0f b7 ca	 movzx	 ecx, dx
  0031f	8b 55 e8	 mov	 edx, DWORD PTR _len$1$[ebp]
  00322	89 4d 08	 mov	 DWORD PTR tv1964[ebp], ecx
  00325	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0032a	2b ca		 sub	 ecx, edx
  0032c	3b f1		 cmp	 esi, ecx
  0032e	8b 4d 08	 mov	 ecx, DWORD PTR tv1964[ebp]
  00331	7e 4a		 jle	 SHORT $LN26@send_tree
  00333	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00336	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  0033d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00340	8b 45 08	 mov	 eax, DWORD PTR tv1964[ebp]
  00343	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00346	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  00349	ff 40 14	 inc	 DWORD PTR [eax+20]
  0034c	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0034f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00352	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00358	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0035b	b1 10		 mov	 cl, 16			; 00000010H
  0035d	8b 75 e8	 mov	 esi, DWORD PTR _len$1$[ebp]
  00360	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00366	83 c6 f0	 add	 esi, -16		; fffffff0H
  00369	8b 55 e0	 mov	 edx, DWORD PTR tv1895[ebp]
  0036c	ff 40 14	 inc	 DWORD PTR [eax+20]
  0036f	03 b0 bc 16 00
	00		 add	 esi, DWORD PTR [eax+5820]
  00375	66 d3 ea	 shr	 dx, cl
  00378	0f b7 ca	 movzx	 ecx, dx
  0037b	eb 05		 jmp	 SHORT $LN49@send_tree
$LN26@send_tree:
  0037d	03 f2		 add	 esi, edx
  0037f	0f b7 c9	 movzx	 ecx, cx
$LN49@send_tree:
  00382	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  00385	8d 4f fd	 lea	 ecx, DWORD PTR [edi-3]
  00388	0f b7 f9	 movzx	 edi, cx
  0038b	8b ce		 mov	 ecx, esi
  0038d	66 8b d7	 mov	 dx, di
  00390	89 b0 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], esi
  00396	66 d3 e2	 shl	 dx, cl
  00399	66 0b 55 08	 or	 dx, WORD PTR $T2[ebp]
  0039d	0f b7 d2	 movzx	 edx, dx
  003a0	89 55 08	 mov	 DWORD PTR tv1962[ebp], edx
  003a3	83 fe 0d	 cmp	 esi, 13			; 0000000dH
  003a6	7e 4f		 jle	 SHORT $LN28@send_tree
  003a8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003ab	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  003b2	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  003b5	8b 45 08	 mov	 eax, DWORD PTR tv1962[ebp]
  003b8	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  003bb	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  003be	ff 40 14	 inc	 DWORD PTR [eax+20]
  003c1	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  003c4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003c7	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  003cd	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  003d0	b1 10		 mov	 cl, 16			; 00000010H
  003d2	0f b7 90 bc 16
	00 00		 movzx	 edx, WORD PTR [eax+5820]
  003d9	ff 40 14	 inc	 DWORD PTR [eax+20]
  003dc	2a ca		 sub	 cl, dl
  003de	83 80 bc 16 00
	00 f3		 add	 DWORD PTR [eax+5820], -13 ; fffffff3H
  003e5	66 d3 ef	 shr	 di, cl
  003e8	0f b7 cf	 movzx	 ecx, di

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  003eb	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  003f2	e9 16 01 00 00	 jmp	 $LN33@send_tree
$LN28@send_tree:

; 779  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count - 3, 3);

  003f7	8d 4e 03	 lea	 ecx, DWORD PTR [esi+3]
$LN51@send_tree:

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  003fa	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  00400	0f b7 ca	 movzx	 ecx, dx
  00403	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  0040a	e9 fe 00 00 00	 jmp	 $LN33@send_tree
$LN24@send_tree:

; 780  : 
; 781  :         } else {
; 782  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count - 11, 7);

  0040f	0f b7 88 c6 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2758]
  00416	89 4d e8	 mov	 DWORD PTR _len$1$[ebp], ecx
  00419	0f b7 88 c4 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2756]
  00420	66 8b d1	 mov	 dx, cx
  00423	89 4d e0	 mov	 DWORD PTR tv1937[ebp], ecx
  00426	8b ce		 mov	 ecx, esi
  00428	66 d3 e2	 shl	 dx, cl
  0042b	66 0b 90 b8 16
	00 00		 or	 dx, WORD PTR [eax+5816]
  00432	0f b7 ca	 movzx	 ecx, dx
  00435	8b 55 e8	 mov	 edx, DWORD PTR _len$1$[ebp]
  00438	89 4d 08	 mov	 DWORD PTR tv1975[ebp], ecx
  0043b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00440	2b ca		 sub	 ecx, edx
  00442	3b f1		 cmp	 esi, ecx
  00444	8b 4d 08	 mov	 ecx, DWORD PTR tv1975[ebp]
  00447	7e 4a		 jle	 SHORT $LN30@send_tree
  00449	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0044c	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  00453	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00456	8b 45 08	 mov	 eax, DWORD PTR tv1975[ebp]
  00459	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0045c	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  0045f	ff 40 14	 inc	 DWORD PTR [eax+20]
  00462	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00465	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00468	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0046e	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00471	b1 10		 mov	 cl, 16			; 00000010H
  00473	8b 75 e8	 mov	 esi, DWORD PTR _len$1$[ebp]
  00476	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  0047c	83 c6 f0	 add	 esi, -16		; fffffff0H
  0047f	8b 55 e0	 mov	 edx, DWORD PTR tv1937[ebp]
  00482	ff 40 14	 inc	 DWORD PTR [eax+20]
  00485	03 b0 bc 16 00
	00		 add	 esi, DWORD PTR [eax+5820]
  0048b	66 d3 ea	 shr	 dx, cl
  0048e	0f b7 ca	 movzx	 ecx, dx
  00491	eb 05		 jmp	 SHORT $LN50@send_tree
$LN30@send_tree:
  00493	03 f2		 add	 esi, edx
  00495	0f b7 c9	 movzx	 ecx, cx
$LN50@send_tree:
  00498	89 4d 08	 mov	 DWORD PTR $T1[ebp], ecx
  0049b	8d 4f f5	 lea	 ecx, DWORD PTR [edi-11]
  0049e	0f b7 f9	 movzx	 edi, cx
  004a1	8b ce		 mov	 ecx, esi
  004a3	66 8b d7	 mov	 dx, di
  004a6	89 b0 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], esi
  004ac	66 d3 e2	 shl	 dx, cl
  004af	66 0b 55 08	 or	 dx, WORD PTR $T1[ebp]
  004b3	0f b7 ca	 movzx	 ecx, dx
  004b6	89 4d 08	 mov	 DWORD PTR tv1977[ebp], ecx
  004b9	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  004c0	83 fe 09	 cmp	 esi, 9
  004c3	7e 3f		 jle	 SHORT $LN32@send_tree
  004c5	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  004c8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004cb	8b 45 08	 mov	 eax, DWORD PTR tv1977[ebp]
  004ce	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  004d1	8b 45 fc	 mov	 eax, DWORD PTR _s$1$[ebp]
  004d4	ff 40 14	 inc	 DWORD PTR [eax+20]
  004d7	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  004da	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  004dd	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  004e3	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  004e6	b1 10		 mov	 cl, 16			; 00000010H
  004e8	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  004ee	ff 40 14	 inc	 DWORD PTR [eax+20]
  004f1	66 d3 ef	 shr	 di, cl
  004f4	83 80 bc 16 00
	00 f7		 add	 DWORD PTR [eax+5820], -9 ; fffffff7H
  004fb	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00502	eb 09		 jmp	 SHORT $LN33@send_tree
$LN32@send_tree:
  00504	8d 4e 07	 lea	 ecx, DWORD PTR [esi+7]
  00507	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN33@send_tree:

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  0050d	8b 75 f8	 mov	 esi, DWORD PTR _curlen$1$[ebp]
  00510	33 ff		 xor	 edi, edi

; 785  :         if (nextlen == 0) {

  00512	85 db		 test	 ebx, ebx
  00514	75 0a		 jne	 SHORT $LN34@send_tree

; 786  :             max_count = 138, min_count = 3;

  00516	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  0051b	8d 4f 03	 lea	 ecx, DWORD PTR [edi+3]
  0051e	eb 17		 jmp	 SHORT $LN2@send_tree
$LN34@send_tree:

; 787  :         } else if (curlen == nextlen) {

  00520	39 5d f4	 cmp	 DWORD PTR tv2032[ebp], ebx
  00523	75 0a		 jne	 SHORT $LN36@send_tree

; 788  :             max_count = 6, min_count = 3;

  00525	ba 06 00 00 00	 mov	 edx, 6
  0052a	8d 4a fd	 lea	 ecx, DWORD PTR [edx-3]

; 789  :         } else {

  0052d	eb 08		 jmp	 SHORT $LN2@send_tree
$LN36@send_tree:

; 790  :             max_count = 7, min_count = 4;

  0052f	ba 07 00 00 00	 mov	 edx, 7
  00534	8d 4a fd	 lea	 ecx, DWORD PTR [edx-3]
$LN2@send_tree:

; 758  :     int max_count = 7;         /* max repeat count */
; 759  :     int min_count = 4;         /* min repeat count */
; 760  : 
; 761  :     /* tree[max_code + 1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  00537	83 45 f0 04	 add	 DWORD PTR tv1980[ebp], 4
  0053b	83 6d e4 01	 sub	 DWORD PTR tv2037[ebp], 1
  0053f	0f 85 0b fb ff
	ff		 jne	 $LL4@send_tree
$LN3@send_tree:
  00545	5f		 pop	 edi

; 791  :         }
; 792  :     }
; 793  : }

  00546	5e		 pop	 esi
  00547	5b		 pop	 ebx
  00548	8b e5		 mov	 esp, ebp
  0054a	5d		 pop	 ebp
  0054b	c3		 ret	 0
_send_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_build_bl_tree PROC					; COMDAT
; _s$ = ecx

; 801  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 802  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 803  : 
; 804  :     /* Determine the bit length frequencies for literal and distance trees */
; 805  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00003	ff b6 1c 0b 00
	00		 push	 DWORD PTR [esi+2844]
  00009	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  0000f	e8 00 00 00 00	 call	 _scan_tree

; 806  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  00014	ff b6 28 0b 00
	00		 push	 DWORD PTR [esi+2856]
  0001a	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00020	e8 00 00 00 00	 call	 _scan_tree
  00025	83 c4 08	 add	 esp, 8

; 807  : 
; 808  :     /* Build the bit length tree: */
; 809  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00028	8d 96 30 0b 00
	00		 lea	 edx, DWORD PTR [esi+2864]
  0002e	e8 00 00 00 00	 call	 _build_tree

; 810  :     /* opt_len now includes the length of the tree representations, except the
; 811  :      * lengths of the bit lengths codes and the 5 + 5 + 4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00033	ba 12 00 00 00	 mov	 edx, 18			; 00000012H
  00038	b8 10 00 00 00	 mov	 eax, OFFSET _bl_order+16
  0003d	0f 1f 00	 npad	 3
$LL4@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00040	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00044	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  0004d	75 79		 jne	 SHORT $LN8@build_bl_t
  0004f	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00053	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  0005c	75 69		 jne	 SHORT $LN11@build_bl_t
  0005e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00061	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  0006a	75 45		 jne	 SHORT $LN12@build_bl_t
  0006c	0f b6 48 ff	 movzx	 ecx, BYTE PTR [eax-1]
  00070	66 83 bc 8e 7e
	0a 00 00 00	 cmp	 WORD PTR [esi+ecx*4+2686], 0
  00079	75 20		 jne	 SHORT $LN13@build_bl_t

; 810  :     /* opt_len now includes the length of the tree representations, except the
; 811  :      * lengths of the bit lengths codes and the 5 + 5 + 4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  0007b	83 e8 04	 sub	 eax, 4
  0007e	83 ea 04	 sub	 edx, 4
  00081	3d 01 00 00 00	 cmp	 eax, OFFSET _bl_order+1
  00086	7d b8		 jge	 SHORT $LL4@build_bl_t

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex + 1) + 5 + 5 + 4;

  00088	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [edx*2+17]

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  0008f	8b c2		 mov	 eax, edx
  00091	03 ca		 add	 ecx, edx
  00093	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  00099	5e		 pop	 esi

; 827  : }

  0009a	c3		 ret	 0
$LN13@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  0009b	83 ea 03	 sub	 edx, 3

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  0009e	8b c2		 mov	 eax, edx
  000a0	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [edx*2+17]
  000a7	03 ca		 add	 ecx, edx
  000a9	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000af	5e		 pop	 esi

; 827  : }

  000b0	c3		 ret	 0
$LN12@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000b1	83 ea 02	 sub	 edx, 2

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  000b4	8b c2		 mov	 eax, edx
  000b6	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [edx*2+17]
  000bd	03 ca		 add	 ecx, edx
  000bf	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000c5	5e		 pop	 esi

; 827  : }

  000c6	c3		 ret	 0
$LN11@build_bl_t:

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000c7	4a		 dec	 edx
$LN8@build_bl_t:

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex + 1) + 5 + 5 + 4;

  000c8	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [edx*2+17]

; 823  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 824  :             s->opt_len, s->static_len));
; 825  : 
; 826  :     return max_blindex;

  000cf	8b c2		 mov	 eax, edx
  000d1	03 ca		 add	 ecx, edx
  000d3	01 8e a8 16 00
	00		 add	 DWORD PTR [esi+5800], ecx
  000d9	5e		 pop	 esi

; 827  : }

  000da	c3		 ret	 0
_build_bl_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_lcodes$1$ = -12					; size = 4
$T1 = -8						; size = 4
tv1040 = -8						; size = 4
tv1021 = -8						; size = 4
_rank$1$ = -4						; size = 4
_dcodes$ = 8						; size = 4
_blcodes$ = 12						; size = 4
_send_all_trees PROC					; COMDAT
; _s$ = ecx
; _lcodes$ = edx

; 837  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 55 f4	 mov	 DWORD PTR _lcodes$1$[ebp], edx
  0000d	57		 push	 edi
  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _blcodes$[ebp]

; 838  :     int rank;                    /* index in bl_order */
; 839  : 
; 840  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 841  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 842  :             "too many codes");
; 843  :     Tracev((stderr, "\nbl counts: "));
; 844  :     send_bits(s, lcodes - 257, 5);  /* not +255 as stated in appnote.txt */

  00011	8b 8e bc 16 00
	00		 mov	 ecx, DWORD PTR [esi+5820]
  00017	0f b7 86 b8 16
	00 00		 movzx	 eax, WORD PTR [esi+5816]
  0001e	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00021	7e 57		 jle	 SHORT $LN5@send_all_t
  00023	8d ba ff fe ff
	ff		 lea	 edi, DWORD PTR [edx-257]
  00029	66 8b d7	 mov	 dx, di
  0002c	66 d3 e2	 shl	 dx, cl
  0002f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00032	66 0b d0	 or	 dx, ax
  00035	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00038	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  0003f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00042	ff 46 14	 inc	 DWORD PTR [esi+20]
  00045	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00048	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004b	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  00051	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00054	b1 10		 mov	 cl, 16			; 00000010H
  00056	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  0005d	83 86 bc 16 00
	00 f5		 add	 DWORD PTR [esi+5820], -11 ; fffffff5H
  00064	2a c8		 sub	 cl, al
  00066	ff 46 14	 inc	 DWORD PTR [esi+20]
  00069	8b 9e bc 16 00
	00		 mov	 ebx, DWORD PTR [esi+5820]
  0006f	66 d3 ef	 shr	 di, cl
  00072	0f b7 d7	 movzx	 edx, di
  00075	8b 7d 0c	 mov	 edi, DWORD PTR _blcodes$[ebp]
  00078	eb 1f		 jmp	 SHORT $LN6@send_all_t
$LN5@send_all_t:
  0007a	8d 82 ff fe ff
	ff		 lea	 eax, DWORD PTR [edx-257]
  00080	8d 59 05	 lea	 ebx, DWORD PTR [ecx+5]
  00083	66 d3 e0	 shl	 ax, cl
  00086	0f b7 8e b8 16
	00 00		 movzx	 ecx, WORD PTR [esi+5816]
  0008d	66 0b c1	 or	 ax, cx
  00090	89 9e bc 16 00
	00		 mov	 DWORD PTR [esi+5820], ebx
  00096	0f b7 d0	 movzx	 edx, ax
$LN6@send_all_t:

; 845  :     send_bits(s, dcodes - 1,   5);

  00099	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  0009c	8b cb		 mov	 ecx, ebx
  0009e	48		 dec	 eax
  0009f	0f b7 c0	 movzx	 eax, ax
  000a2	89 45 f8	 mov	 DWORD PTR tv1021[ebp], eax
  000a5	66 d3 e0	 shl	 ax, cl
  000a8	66 0b c2	 or	 ax, dx
  000ab	0f b7 d0	 movzx	 edx, ax
  000ae	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  000b5	83 fb 0b	 cmp	 ebx, 11			; 0000000bH
  000b8	7e 41		 jle	 SHORT $LN7@send_all_t
  000ba	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000bd	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000c0	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  000c3	ff 46 14	 inc	 DWORD PTR [esi+20]
  000c6	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000c9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000cc	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  000d2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000d5	b1 10		 mov	 cl, 16			; 00000010H
  000d7	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  000de	83 86 bc 16 00
	00 f5		 add	 DWORD PTR [esi+5820], -11 ; fffffff5H
  000e5	2a c8		 sub	 cl, al
  000e7	8b 45 f8	 mov	 eax, DWORD PTR tv1021[ebp]
  000ea	ff 46 14	 inc	 DWORD PTR [esi+20]
  000ed	8b 9e bc 16 00
	00		 mov	 ebx, DWORD PTR [esi+5820]
  000f3	66 d3 e8	 shr	 ax, cl
  000f6	0f b7 d0	 movzx	 edx, ax
  000f9	eb 09		 jmp	 SHORT $LN8@send_all_t
$LN7@send_all_t:
  000fb	83 c3 05	 add	 ebx, 5
  000fe	89 9e bc 16 00
	00		 mov	 DWORD PTR [esi+5820], ebx
$LN8@send_all_t:

; 846  :     send_bits(s, blcodes - 4,  4);  /* not -3 as stated in appnote.txt */

  00104	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00107	8b cb		 mov	 ecx, ebx
  00109	0f b7 c0	 movzx	 eax, ax
  0010c	89 45 f8	 mov	 DWORD PTR tv1040[ebp], eax
  0010f	66 d3 e0	 shl	 ax, cl
  00112	66 0b c2	 or	 ax, dx
  00115	0f b7 d0	 movzx	 edx, ax
  00118	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  0011b	7e 48		 jle	 SHORT $LN9@send_all_t
  0011d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00120	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00123	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  0012a	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0012d	ff 46 14	 inc	 DWORD PTR [esi+20]
  00130	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00133	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00136	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  0013c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0013f	b1 10		 mov	 cl, 16			; 00000010H
  00141	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  00148	83 86 bc 16 00
	00 f4		 add	 DWORD PTR [esi+5820], -12 ; fffffff4H
  0014f	2a c8		 sub	 cl, al
  00151	8b 45 f8	 mov	 eax, DWORD PTR tv1040[ebp]
  00154	ff 46 14	 inc	 DWORD PTR [esi+20]
  00157	8b 9e bc 16 00
	00		 mov	 ebx, DWORD PTR [esi+5820]
  0015d	66 d3 e8	 shr	 ax, cl
  00160	0f b7 c8	 movzx	 ecx, ax
  00163	eb 0b		 jmp	 SHORT $LN10@send_all_t
$LN9@send_all_t:
  00165	83 c3 04	 add	 ebx, 4
  00168	8b ca		 mov	 ecx, edx
  0016a	89 9e bc 16 00
	00		 mov	 DWORD PTR [esi+5820], ebx
$LN10@send_all_t:

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  00170	33 c0		 xor	 eax, eax
  00172	66 89 8e b8 16
	00 00		 mov	 WORD PTR [esi+5816], cx
  00179	89 45 fc	 mov	 DWORD PTR _rank$1$[ebp], eax
  0017c	85 ff		 test	 edi, edi
  0017e	0f 8e aa 00 00
	00		 jle	 $LN3@send_all_t
  00184	0f b7 f9	 movzx	 edi, cx
  00187	89 7d f8	 mov	 DWORD PTR $T1[ebp], edi
  0018a	66 0f 1f 44 00
	00		 npad	 6
$LL4@send_all_t:

; 848  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 849  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  00190	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR _bl_order[eax]
  00197	8b cb		 mov	 ecx, ebx
  00199	83 fb 0d	 cmp	 ebx, 13			; 0000000dH
  0019c	7e 57		 jle	 SHORT $LN11@send_all_t
  0019e	0f b7 bc 86 7e
	0a 00 00	 movzx	 edi, WORD PTR [esi+eax*4+2686]
  001a6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001a9	66 8b d7	 mov	 dx, di
  001ac	66 d3 e2	 shl	 dx, cl
  001af	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001b2	66 0b 55 f8	 or	 dx, WORD PTR $T1[ebp]
  001b6	66 89 96 b8 16
	00 00		 mov	 WORD PTR [esi+5816], dx
  001bd	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  001c0	ff 46 14	 inc	 DWORD PTR [esi+20]
  001c3	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  001c6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c9	8a 86 b9 16 00
	00		 mov	 al, BYTE PTR [esi+5817]
  001cf	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001d2	b1 10		 mov	 cl, 16			; 00000010H
  001d4	0f b7 86 bc 16
	00 00		 movzx	 eax, WORD PTR [esi+5820]
  001db	83 86 bc 16 00
	00 f3		 add	 DWORD PTR [esi+5820], -13 ; fffffff3H
  001e2	2a c8		 sub	 cl, al
  001e4	ff 46 14	 inc	 DWORD PTR [esi+20]
  001e7	8b 96 bc 16 00
	00		 mov	 edx, DWORD PTR [esi+5820]
  001ed	66 d3 ef	 shr	 di, cl
  001f0	0f b7 cf	 movzx	 ecx, di
  001f3	eb 1a		 jmp	 SHORT $LN2@send_all_t
$LN11@send_all_t:
  001f5	0f b7 84 86 7e
	0a 00 00	 movzx	 eax, WORD PTR [esi+eax*4+2686]
  001fd	8d 53 03	 lea	 edx, DWORD PTR [ebx+3]
  00200	66 d3 e0	 shl	 ax, cl
  00203	66 0b c7	 or	 ax, di
  00206	89 96 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], edx
  0020c	0f b7 c8	 movzx	 ecx, ax
$LN2@send_all_t:

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  0020f	8b 45 fc	 mov	 eax, DWORD PTR _rank$1$[ebp]
  00212	8b da		 mov	 ebx, edx
  00214	40		 inc	 eax
  00215	0f b7 f9	 movzx	 edi, cx
  00218	66 89 8e b8 16
	00 00		 mov	 WORD PTR [esi+5816], cx
  0021f	89 45 fc	 mov	 DWORD PTR _rank$1$[ebp], eax
  00222	89 7d f8	 mov	 DWORD PTR $T1[ebp], edi
  00225	3b 45 0c	 cmp	 eax, DWORD PTR _blcodes$[ebp]
  00228	0f 8c 62 ff ff
	ff		 jl	 $LL4@send_all_t
$LN3@send_all_t:

; 850  :     }
; 851  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 852  : 
; 853  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes - 1);  /* literal tree */

  0022e	8b 45 f4	 mov	 eax, DWORD PTR _lcodes$1$[ebp]
  00231	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  00237	48		 dec	 eax
  00238	8b ce		 mov	 ecx, esi
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 _send_tree

; 854  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 855  : 
; 856  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes - 1);  /* distance tree */

  00240	8b 45 08	 mov	 eax, DWORD PTR _dcodes$[ebp]
  00243	8d 96 88 09 00
	00		 lea	 edx, DWORD PTR [esi+2440]
  00249	48		 dec	 eax
  0024a	8b ce		 mov	 ecx, esi
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 _send_tree
  00252	83 c4 08	 add	 esp, 8
  00255	5f		 pop	 edi
  00256	5e		 pop	 esi
  00257	5b		 pop	 ebx

; 857  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 858  : }

  00258	8b e5		 mov	 esp, ebp
  0025a	5d		 pop	 ebp
  0025b	c3		 ret	 0
_send_all_trees ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _compress_block
_TEXT	SEGMENT
$T1 = -32						; size = 4
_len$1$ = -32						; size = 4
tv1661 = -32						; size = 4
tv1659 = -32						; size = 4
tv1655 = -32						; size = 4
tv1654 = -32						; size = 4
tv1592 = -32						; size = 4
tv1733 = -28						; size = 4
tv1717 = -28						; size = 4
tv1657 = -28						; size = 4
_len$1$ = -24						; size = 4
_extra$2$ = -24						; size = 4
_extra$1$ = -24						; size = 4
_len$1$ = -24						; size = 4
_len$1$ = -24						; size = 4
_lc$1$ = -20						; size = 4
_sx$1$ = -16						; size = 4
$T2 = -12						; size = 4
tv1550 = -12						; size = 4
$T3 = -8						; size = 4
_ltree$1$ = -4						; size = 4
_dtree$ = 8						; size = 4
_compress_block PROC					; COMDAT
; _s$ = ecx
; _ltree$ = edx

; 1046 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	8b c1		 mov	 eax, ecx

; 1047 :     unsigned dist;      /* distance of matched string */
; 1048 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1049 :     unsigned sx = 0;    /* running index in sym_buf */

  00009	33 db		 xor	 ebx, ebx
  0000b	56		 push	 esi
  0000c	8b f2		 mov	 esi, edx
  0000e	57		 push	 edi

; 1050 :     unsigned code;      /* the code to send */
; 1051 :     int extra;          /* number of extra bits to send */
; 1052 : 
; 1053 :     if (s->sym_next != 0) do {

  0000f	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  00012	89 75 fc	 mov	 DWORD PTR _ltree$1$[ebp], esi
  00015	39 98 a0 16 00
	00		 cmp	 DWORD PTR [eax+5792], ebx
  0001b	0f 84 82 03 00
	00		 je	 $LN3@compress_b
$LL4@compress_b:

; 1054 :         dist = s->sym_buf[sx++] & 0xff;

  00021	8b 90 98 16 00
	00		 mov	 edx, DWORD PTR [eax+5784]

; 1055 :         dist += (unsigned)(s->sym_buf[sx++] & 0xff) << 8;

  00027	0f b6 4c 1a 01	 movzx	 ecx, BYTE PTR [edx+ebx+1]
  0002c	0f b6 3c 1a	 movzx	 edi, BYTE PTR [edx+ebx]
  00030	c1 e1 08	 shl	 ecx, 8
  00033	03 f9		 add	 edi, ecx

; 1056 :         lc = s->sym_buf[sx++];

  00035	0f b6 4c 1a 02	 movzx	 ecx, BYTE PTR [edx+ebx+2]
  0003a	83 c3 03	 add	 ebx, 3
  0003d	89 4d ec	 mov	 DWORD PTR _lc$1$[ebp], ecx
  00040	89 5d f0	 mov	 DWORD PTR _sx$1$[ebp], ebx

; 1057 :         if (dist == 0) {

  00043	85 ff		 test	 edi, edi
  00045	0f 85 9e 00 00
	00		 jne	 $LN6@compress_b

; 1058 :             send_code(s, lc, ltree); /* send a literal byte */

  0004b	0f b7 74 8e 02	 movzx	 esi, WORD PTR [esi+ecx*4+2]
  00050	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00055	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0005b	2b d6		 sub	 edx, esi
  0005d	8b 7d fc	 mov	 edi, DWORD PTR _ltree$1$[ebp]
  00060	3b ca		 cmp	 ecx, edx
  00062	8b 55 ec	 mov	 edx, DWORD PTR _lc$1$[ebp]
  00065	89 75 e8	 mov	 DWORD PTR _len$1$[ebp], esi
  00068	7e 64		 jle	 SHORT $LN8@compress_b
  0006a	0f b7 3c 97	 movzx	 edi, WORD PTR [edi+edx*4]
  0006e	66 8b d7	 mov	 dx, di
  00071	66 d3 e2	 shl	 dx, cl
  00074	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  0007b	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0007e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00081	66 8b 98 b8 16
	00 00		 mov	 bx, WORD PTR [eax+5816]
  00088	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  0008b	ff 40 14	 inc	 DWORD PTR [eax+20]
  0008e	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00091	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00094	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0009a	8b 5d f0	 mov	 ebx, DWORD PTR _sx$1$[ebp]
  0009d	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  000a0	b1 10		 mov	 cl, 16			; 00000010H
  000a2	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  000a8	8b 55 e8	 mov	 edx, DWORD PTR _len$1$[ebp]
  000ab	ff 40 14	 inc	 DWORD PTR [eax+20]
  000ae	83 c2 f0	 add	 edx, -16		; fffffff0H
  000b1	66 d3 ef	 shr	 di, cl
  000b4	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  000ba	03 ca		 add	 ecx, edx
  000bc	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di

; 1059 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1060 :         } else {

  000c3	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  000c9	e9 c1 02 00 00	 jmp	 $LN2@compress_b
$LN8@compress_b:

; 1058 :             send_code(s, lc, ltree); /* send a literal byte */

  000ce	66 8b 14 97	 mov	 dx, WORD PTR [edi+edx*4]
  000d2	66 d3 e2	 shl	 dx, cl
  000d5	66 09 90 b8 16
	00 00		 or	 WORD PTR [eax+5816], dx
  000dc	03 ce		 add	 ecx, esi

; 1059 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1060 :         } else {

  000de	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
  000e4	e9 a6 02 00 00	 jmp	 $LN2@compress_b
$LN6@compress_b:

; 1061 :             /* Here, lc is the match length - MIN_MATCH */
; 1062 :             code = _length_code[lc];

  000e9	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]

; 1063 :             send_code(s, code + LITERALS + 1, ltree);   /* send length code */

  000f0	8d 0c 95 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*4]
  000f7	0f b7 9c 31 06
	04 00 00	 movzx	 ebx, WORD PTR [ecx+esi+1030]
  000ff	0f b7 b4 96 04
	04 00 00	 movzx	 esi, WORD PTR [esi+edx*4+1028]
  00107	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0010c	89 4d e4	 mov	 DWORD PTR tv1717[ebp], ecx
  0010f	2b d3		 sub	 edx, ebx
  00111	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00117	89 5d e8	 mov	 DWORD PTR _len$1$[ebp], ebx
  0011a	89 75 f4	 mov	 DWORD PTR tv1550[ebp], esi
  0011d	3b ca		 cmp	 ecx, edx
  0011f	7e 54		 jle	 SHORT $LN10@compress_b
  00121	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00124	66 8b de	 mov	 bx, si
  00127	66 d3 e3	 shl	 bx, cl
  0012a	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00131	66 0b d9	 or	 bx, cx
  00134	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00137	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  0013e	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  00141	ff 40 14	 inc	 DWORD PTR [eax+20]
  00144	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00147	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0014a	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00150	8b 5d e8	 mov	 ebx, DWORD PTR _len$1$[ebp]
  00153	83 c3 f0	 add	 ebx, -16		; fffffff0H
  00156	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00159	b1 10		 mov	 cl, 16			; 00000010H
  0015b	8b 55 f4	 mov	 edx, DWORD PTR tv1550[ebp]
  0015e	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00164	ff 40 14	 inc	 DWORD PTR [eax+20]
  00167	03 98 bc 16 00
	00		 add	 ebx, DWORD PTR [eax+5820]
  0016d	66 d3 ea	 shr	 dx, cl
  00170	0f b7 d2	 movzx	 edx, dx
  00173	eb 12		 jmp	 SHORT $LN31@compress_b
$LN10@compress_b:
  00175	03 d9		 add	 ebx, ecx
  00177	66 d3 e6	 shl	 si, cl
  0017a	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00181	66 0b f1	 or	 si, cx
  00184	0f b7 d6	 movzx	 edx, si
$LN31@compress_b:

; 1064 :             extra = extra_lbits[code];

  00187	8b 75 e4	 mov	 esi, DWORD PTR tv1717[ebp]
  0018a	0f b7 ca	 movzx	 ecx, dx
  0018d	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00194	89 98 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ebx
  0019a	89 4d e0	 mov	 DWORD PTR tv1654[ebp], ecx
  0019d	8b 8e 00 00 00
	00		 mov	 ecx, DWORD PTR _extra_lbits[esi]
  001a3	0f b7 d2	 movzx	 edx, dx
  001a6	89 5d f8	 mov	 DWORD PTR $T3[ebp], ebx
  001a9	89 4d e8	 mov	 DWORD PTR _extra$1$[ebp], ecx
  001ac	89 55 f4	 mov	 DWORD PTR $T2[ebp], edx

; 1065 :             if (extra != 0) {

  001af	85 c9		 test	 ecx, ecx
  001b1	0f 84 8f 00 00
	00		 je	 $LN14@compress_b

; 1066 :                 lc -= base_length[code];

  001b7	8b 55 ec	 mov	 edx, DWORD PTR _lc$1$[ebp]
  001ba	2b 96 00 00 00
	00		 sub	 edx, DWORD PTR _base_length[esi]

; 1067 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  001c0	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  001c5	2b f1		 sub	 esi, ecx
  001c7	0f b7 ca	 movzx	 ecx, dx
  001ca	66 8b d1	 mov	 dx, cx
  001cd	89 4d e4	 mov	 DWORD PTR tv1657[ebp], ecx
  001d0	8b cb		 mov	 ecx, ebx
  001d2	66 d3 e2	 shl	 dx, cl
  001d5	66 0b 55 e0	 or	 dx, WORD PTR tv1654[ebp]
  001d9	0f b7 d2	 movzx	 edx, dx
  001dc	89 55 e0	 mov	 DWORD PTR tv1655[ebp], edx
  001df	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  001e6	3b de		 cmp	 ebx, esi
  001e8	7e 4a		 jle	 SHORT $LN13@compress_b
  001ea	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  001ed	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001f0	8b 5d e0	 mov	 ebx, DWORD PTR tv1655[ebp]
  001f3	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  001f6	ff 40 14	 inc	 DWORD PTR [eax+20]
  001f9	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  001fc	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001ff	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  00205	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  00208	b1 10		 mov	 cl, 16			; 00000010H
  0020a	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00210	8b 55 e4	 mov	 edx, DWORD PTR tv1657[ebp]
  00213	ff 40 14	 inc	 DWORD PTR [eax+20]
  00216	66 d3 ea	 shr	 dx, cl
  00219	8b 4d e8	 mov	 ecx, DWORD PTR _extra$1$[ebp]
  0021c	83 c1 f0	 add	 ecx, -16		; fffffff0H
  0021f	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx
  00226	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  0022c	8b 98 bc 16 00
	00		 mov	 ebx, DWORD PTR [eax+5820]
  00232	eb 09		 jmp	 SHORT $LN32@compress_b
$LN13@compress_b:
  00234	03 5d e8	 add	 ebx, DWORD PTR _extra$1$[ebp]
  00237	89 98 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ebx
$LN32@compress_b:

; 1068 :             }
; 1069 :             dist--; /* dist is now the match distance - 1 */

  0023d	0f b7 ca	 movzx	 ecx, dx
  00240	89 4d f4	 mov	 DWORD PTR $T2[ebp], ecx
  00243	89 5d f8	 mov	 DWORD PTR $T3[ebp], ebx
$LN14@compress_b:
  00246	4f		 dec	 edi

; 1070 :             code = d_code(dist);

  00247	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  0024d	73 08		 jae	 SHORT $LN23@compress_b
  0024f	8a 8f 00 00 00
	00		 mov	 cl, BYTE PTR __dist_code[edi]
  00255	eb 0b		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  00257	8b cf		 mov	 ecx, edi
  00259	c1 e9 07	 shr	 ecx, 7
  0025c	8a 89 00 01 00
	00		 mov	 cl, BYTE PTR __dist_code[ecx+256]
$LN24@compress_b:

; 1071 :             Assert (code < D_CODES, "bad d_code");
; 1072 : 
; 1073 :             send_code(s, code, dtree);       /* send the distance code */

  00262	8b 75 08	 mov	 esi, DWORD PTR _dtree$[ebp]
  00265	0f b6 c9	 movzx	 ecx, cl
  00268	c1 e1 02	 shl	 ecx, 2
  0026b	89 4d e4	 mov	 DWORD PTR tv1733[ebp], ecx
  0026e	0f b7 54 31 02	 movzx	 edx, WORD PTR [ecx+esi+2]
  00273	0f b7 34 31	 movzx	 esi, WORD PTR [ecx+esi]
  00277	89 55 e8	 mov	 DWORD PTR _len$1$[ebp], edx
  0027a	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0027f	8b 4d e8	 mov	 ecx, DWORD PTR _len$1$[ebp]
  00282	2b d1		 sub	 edx, ecx
  00284	89 75 e0	 mov	 DWORD PTR tv1592[ebp], esi
  00287	3b da		 cmp	 ebx, edx
  00289	7e 51		 jle	 SHORT $LN15@compress_b
  0028b	8b 4d f8	 mov	 ecx, DWORD PTR $T3[ebp]
  0028e	66 8b de	 mov	 bx, si
  00291	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00294	66 d3 e3	 shl	 bx, cl
  00297	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0029a	66 0b 5d f4	 or	 bx, WORD PTR $T2[ebp]
  0029e	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  002a5	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  002a8	ff 40 14	 inc	 DWORD PTR [eax+20]
  002ab	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  002ae	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  002b1	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  002b7	8b 5d e8	 mov	 ebx, DWORD PTR _len$1$[ebp]
  002ba	83 c3 f0	 add	 ebx, -16		; fffffff0H
  002bd	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  002c0	b1 10		 mov	 cl, 16			; 00000010H
  002c2	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  002c8	8b 55 e0	 mov	 edx, DWORD PTR tv1592[ebp]
  002cb	ff 40 14	 inc	 DWORD PTR [eax+20]
  002ce	03 98 bc 16 00
	00		 add	 ebx, DWORD PTR [eax+5820]
  002d4	66 d3 ea	 shr	 dx, cl
  002d7	0f b7 ca	 movzx	 ecx, dx
  002da	eb 14		 jmp	 SHORT $LN16@compress_b
$LN15@compress_b:
  002dc	03 cb		 add	 ecx, ebx
  002de	89 4d e0	 mov	 DWORD PTR $T1[ebp], ecx
  002e1	8b cb		 mov	 ecx, ebx
  002e3	8b 5d e0	 mov	 ebx, DWORD PTR $T1[ebp]
  002e6	66 d3 e6	 shl	 si, cl
  002e9	66 0b 75 f4	 or	 si, WORD PTR $T2[ebp]
  002ed	0f b7 ce	 movzx	 ecx, si
$LN16@compress_b:

; 1074 :             extra = extra_dbits[code];

  002f0	8b 55 e4	 mov	 edx, DWORD PTR tv1733[ebp]
  002f3	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  002fa	0f b7 c9	 movzx	 ecx, cx
  002fd	89 98 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ebx
  00303	89 4d e0	 mov	 DWORD PTR tv1659[ebp], ecx
  00306	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _extra_dbits[edx]
  0030c	89 4d e8	 mov	 DWORD PTR _extra$2$[ebp], ecx

; 1075 :             if (extra != 0) {

  0030f	85 c9		 test	 ecx, ecx
  00311	74 79		 je	 SHORT $LN30@compress_b

; 1076 :                 dist -= (unsigned)base_dist[code];

  00313	2b ba 00 00 00
	00		 sub	 edi, DWORD PTR _base_dist[edx]

; 1077 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  00319	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  0031e	2b f1		 sub	 esi, ecx
  00320	0f b7 ff	 movzx	 edi, di
  00323	8b cb		 mov	 ecx, ebx
  00325	66 8b d7	 mov	 dx, di
  00328	66 d3 e2	 shl	 dx, cl
  0032b	66 0b 55 e0	 or	 dx, WORD PTR tv1659[ebp]
  0032f	0f b7 ca	 movzx	 ecx, dx
  00332	89 4d e0	 mov	 DWORD PTR tv1661[ebp], ecx
  00335	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  0033c	3b de		 cmp	 ebx, esi
  0033e	7e 41		 jle	 SHORT $LN18@compress_b
  00340	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00343	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00346	8b 5d e0	 mov	 ebx, DWORD PTR tv1661[ebp]
  00349	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  0034c	ff 40 14	 inc	 DWORD PTR [eax+20]
  0034f	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00352	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00355	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  0035b	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  0035e	b1 10		 mov	 cl, 16			; 00000010H
  00360	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00366	ff 40 14	 inc	 DWORD PTR [eax+20]
  00369	66 d3 ef	 shr	 di, cl
  0036c	8b 4d e8	 mov	 ecx, DWORD PTR _extra$2$[ebp]
  0036f	83 c1 f0	 add	 ecx, -16		; fffffff0H
  00372	66 89 b8 b8 16
	00 00		 mov	 WORD PTR [eax+5816], di
  00379	01 88 bc 16 00
	00		 add	 DWORD PTR [eax+5820], ecx
  0037f	eb 0b		 jmp	 SHORT $LN30@compress_b
$LN18@compress_b:
  00381	8b 4d e8	 mov	 ecx, DWORD PTR _extra$2$[ebp]
  00384	03 cb		 add	 ecx, ebx
  00386	89 88 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], ecx
$LN30@compress_b:

; 1078 :             }
; 1079 :         } /* literal or match pair ? */
; 1080 : 
; 1081 :         /* Check that the overlay between pending_buf and sym_buf is ok: */
; 1082 :         Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");
; 1083 : 
; 1084 :     } while (sx < s->sym_next);

  0038c	8b 5d f0	 mov	 ebx, DWORD PTR _sx$1$[ebp]
$LN2@compress_b:
  0038f	8b 75 fc	 mov	 esi, DWORD PTR _ltree$1$[ebp]
  00392	3b 98 a0 16 00
	00		 cmp	 ebx, DWORD PTR [eax+5792]
  00398	0f 82 83 fc ff
	ff		 jb	 $LL4@compress_b
  0039e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
$LN3@compress_b:

; 1085 : 
; 1086 :     send_code(s, END_BLOCK, ltree);

  003a3	0f b7 96 02 04
	00 00		 movzx	 edx, WORD PTR [esi+1026]
  003aa	8b 7d fc	 mov	 edi, DWORD PTR _ltree$1$[ebp]
  003ad	2b ca		 sub	 ecx, edx
  003af	8b b0 bc 16 00
	00		 mov	 esi, DWORD PTR [eax+5820]
  003b5	3b f1		 cmp	 esi, ecx
  003b7	0f b7 98 b8 16
	00 00		 movzx	 ebx, WORD PTR [eax+5816]
  003be	8b ce		 mov	 ecx, esi
  003c0	89 55 e0	 mov	 DWORD PTR _len$1$[ebp], edx
  003c3	0f b7 bf 00 04
	00 00		 movzx	 edi, WORD PTR [edi+1024]
  003ca	7e 4e		 jle	 SHORT $LN20@compress_b
  003cc	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  003cf	66 8b df	 mov	 bx, di
  003d2	66 d3 e3	 shl	 bx, cl
  003d5	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  003dc	66 0b d9	 or	 bx, cx
  003df	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003e2	66 89 98 b8 16
	00 00		 mov	 WORD PTR [eax+5816], bx
  003e9	88 1c 0a	 mov	 BYTE PTR [edx+ecx], bl
  003ec	ff 40 14	 inc	 DWORD PTR [eax+20]
  003ef	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  003f2	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003f5	8a 88 b9 16 00
	00		 mov	 cl, BYTE PTR [eax+5817]
  003fb	88 0c 16	 mov	 BYTE PTR [esi+edx], cl
  003fe	b1 10		 mov	 cl, 16			; 00000010H
  00400	8b 55 e0	 mov	 edx, DWORD PTR _len$1$[ebp]
  00403	2a 88 bc 16 00
	00		 sub	 cl, BYTE PTR [eax+5820]
  00409	83 c2 f0	 add	 edx, -16		; fffffff0H
  0040c	ff 40 14	 inc	 DWORD PTR [eax+20]
  0040f	03 90 bc 16 00
	00		 add	 edx, DWORD PTR [eax+5820]
  00415	66 d3 ef	 shr	 di, cl
  00418	eb 08		 jmp	 SHORT $LN33@compress_b
$LN20@compress_b:
  0041a	66 d3 e7	 shl	 di, cl
  0041d	03 d6		 add	 edx, esi
  0041f	66 0b fb	 or	 di, bx
$LN33@compress_b:

; 1087 : }

  00422	0f b7 cf	 movzx	 ecx, di
  00425	5f		 pop	 edi
  00426	5e		 pop	 esi
  00427	66 89 88 b8 16
	00 00		 mov	 WORD PTR [eax+5816], cx
  0042e	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00434	5b		 pop	 ebx
  00435	8b e5		 mov	 esp, ebp
  00437	5d		 pop	 ebp
  00438	c3		 ret	 0
_compress_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _detect_data_type
_TEXT	SEGMENT
_detect_data_type PROC					; COMDAT
; _s$ = ecx

; 1104 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1105 :     /* block_mask is the bit mask of block-listed bytes
; 1106 :      * set bits 0..6, 14..25, and 28..31
; 1107 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1108 :      */
; 1109 :     unsigned long block_mask = 0xf3ffc07fUL;

  00004	b8 7f c0 ff f3	 mov	 eax, -201342849		; f3ffc07fH

; 1110 :     int n;
; 1111 : 
; 1112 :     /* Check for non-textual ("block-listed") bytes. */
; 1113 :     for (n = 0; n <= 31; n++, block_mask >>= 1)

  00009	33 f6		 xor	 esi, esi
  0000b	8d 97 94 00 00
	00		 lea	 edx, DWORD PTR [edi+148]
$LL4@detect_dat:

; 1114 :         if ((block_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00011	a8 01		 test	 al, 1
  00013	74 06		 je	 SHORT $LN2@detect_dat
  00015	66 83 3a 00	 cmp	 WORD PTR [edx], 0
  00019	75 47		 jne	 SHORT $LN15@detect_dat
$LN2@detect_dat:

; 1110 :     int n;
; 1111 : 
; 1112 :     /* Check for non-textual ("block-listed") bytes. */
; 1113 :     for (n = 0; n <= 31; n++, block_mask >>= 1)

  0001b	46		 inc	 esi
  0001c	d1 e8		 shr	 eax, 1
  0001e	83 c2 04	 add	 edx, 4
  00021	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00024	7e eb		 jle	 SHORT $LL4@detect_dat

; 1115 :             return Z_BINARY;
; 1116 : 
; 1117 :     /* Check for textual ("allow-listed") bytes. */
; 1118 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1119 :             || s->dyn_ltree[13].Freq != 0)

  00026	66 83 bf b8 00
	00 00 00	 cmp	 WORD PTR [edi+184], 0
  0002e	75 37		 jne	 SHORT $LN10@detect_dat
  00030	66 83 bf bc 00
	00 00 00	 cmp	 WORD PTR [edi+188], 0
  00038	75 2d		 jne	 SHORT $LN10@detect_dat
  0003a	66 83 bf c8 00
	00 00 00	 cmp	 WORD PTR [edi+200], 0
  00042	75 23		 jne	 SHORT $LN10@detect_dat

; 1121 :     for (n = 32; n < LITERALS; n++)

  00044	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00049	8d 87 14 01 00
	00		 lea	 eax, DWORD PTR [edi+276]
  0004f	90		 npad	 1
$LL7@detect_dat:

; 1122 :         if (s->dyn_ltree[n].Freq != 0)

  00050	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00054	75 11		 jne	 SHORT $LN10@detect_dat

; 1121 :     for (n = 32; n < LITERALS; n++)

  00056	41		 inc	 ecx
  00057	83 c0 04	 add	 eax, 4
  0005a	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00060	7c ee		 jl	 SHORT $LL7@detect_dat
$LN15@detect_dat:
  00062	5f		 pop	 edi

; 1123 :             return Z_TEXT;
; 1124 : 
; 1125 :     /* There are no "block-listed" or "allow-listed" bytes:
; 1126 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1127 :      */
; 1128 :     return Z_BINARY;
; 1129 : }

  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi
  00066	c3		 ret	 0
$LN10@detect_dat:
  00067	5f		 pop	 edi

; 1120 :         return Z_TEXT;

  00068	b8 01 00 00 00	 mov	 eax, 1

; 1123 :             return Z_TEXT;
; 1124 : 
; 1125 :     /* There are no "block-listed" or "allow-listed" bytes:
; 1126 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1127 :      */
; 1128 :     return Z_BINARY;
; 1129 : }

  0006d	5e		 pop	 esi
  0006e	c3		 ret	 0
_detect_data_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_bi_reverse PROC					; COMDAT
; _code$ = ecx
; _len$ = edx

; 1140 :     register unsigned res = 0;

  00000	33 c0		 xor	 eax, eax
  00002	56		 push	 esi
$LL4@bi_reverse:

; 1141 :     do {
; 1142 :         res |= code & 1;

  00003	8b f1		 mov	 esi, ecx

; 1143 :         code >>= 1, res <<= 1;
; 1144 :     } while (--len > 0);

  00005	4a		 dec	 edx
  00006	83 e6 01	 and	 esi, 1
  00009	d1 e9		 shr	 ecx, 1
  0000b	0b c6		 or	 eax, esi
  0000d	03 c0		 add	 eax, eax
  0000f	85 d2		 test	 edx, edx
  00011	7f f0		 jg	 SHORT $LL4@bi_reverse

; 1145 :     return res >> 1;

  00013	d1 e8		 shr	 eax, 1
  00015	5e		 pop	 esi

; 1146 : }

  00016	c3		 ret	 0
_bi_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _bi_flush
_TEXT	SEGMENT
_bi_flush PROC						; COMDAT
; _s$ = ecx

; 1153 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1154 :     if (s->bi_valid == 16) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000c	75 37		 jne	 SHORT $LN2@bi_flush

; 1155 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00014	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00031	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1156 :         s->bi_buf = 0;

  00034	33 c0		 xor	 eax, eax

; 1157 :         s->bi_valid = 0;

  00036	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax

; 1162 :     }
; 1163 : }

  0003c	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
  00043	5e		 pop	 esi
  00044	c3		 ret	 0
$LN2@bi_flush:

; 1158 :     } else if (s->bi_valid >= 8) {

  00045	83 f8 08	 cmp	 eax, 8
  00048	7c 27		 jl	 SHORT $LN4@bi_flush

; 1159 :         put_byte(s, (Byte)s->bi_buf);

  0004a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00050	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
  00056	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 1160 :         s->bi_buf >>= 8;

  00059	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  00060	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1161 :         s->bi_valid -= 8;

  00063	83 86 bc 16 00
	00 f8		 add	 DWORD PTR [esi+5820], -8 ; fffffff8H

; 1162 :     }
; 1163 : }

  0006a	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax
$LN4@bi_flush:
  00071	5e		 pop	 esi
  00072	c3		 ret	 0
_bi_flush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_bi_windup PROC						; COMDAT
; _s$ = ecx

; 1170 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1171 :     if (s->bi_valid > 8) {

  00003	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00009	83 f8 08	 cmp	 eax, 8
  0000c	7e 22		 jle	 SHORT $LN2@bi_windup

; 1172 :         put_short(s, s->bi_buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00014	0f b6 86 b8 16
	00 00		 movzx	 eax, BYTE PTR [esi+5816]
  0001b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0001e	ff 46 14	 inc	 DWORD PTR [esi+20]
  00021	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00024	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00027	0f b6 86 b9 16
	00 00		 movzx	 eax, BYTE PTR [esi+5817]
  0002e	eb 10		 jmp	 SHORT $LN6@bi_windup
$LN2@bi_windup:

; 1173 :     } else if (s->bi_valid > 0) {

  00030	85 c0		 test	 eax, eax
  00032	7e 12		 jle	 SHORT $LN4@bi_windup

; 1174 :         put_byte(s, (Byte)s->bi_buf);

  00034	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00037	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003a	8a 86 b8 16 00
	00		 mov	 al, BYTE PTR [esi+5816]
$LN6@bi_windup:

; 1175 :     }
; 1176 :     s->bi_buf = 0;

  00040	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00043	ff 46 14	 inc	 DWORD PTR [esi+20]
$LN4@bi_windup:
  00046	33 c0		 xor	 eax, eax
  00048	66 89 86 b8 16
	00 00		 mov	 WORD PTR [esi+5816], ax

; 1177 :     s->bi_valid = 0;

  0004f	89 86 bc 16 00
	00		 mov	 DWORD PTR [esi+5820], eax
  00055	5e		 pop	 esi

; 1178 : #ifdef ZLIB_DEBUG
; 1179 :     s->bits_sent = (s->bits_sent + 7) & ~7;
; 1180 : #endif
; 1181 : }

  00056	c3		 ret	 0
_bi_windup ENDP
_TEXT	ENDS
END
