; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	c:\users\chris\documents\github\zlib\contrib\vstudio\vc14\x86\zlibdllrelease\tmp\inftrees.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+2
?dext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::dext
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	016H
	DW	016H
	DW	017H
	DW	017H
	DW	018H
	DW	018H
	DW	019H
	DW	019H
	DW	01aH
	DW	01aH
	DW	01bH
	DW	01bH
	DW	01cH
	DW	01cH
	DW	01dH
	DW	01dH
	DW	040H
	DW	040H
?lext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::lext
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	015H
	DW	015H
	DW	010H
	DW	04dH
	DW	04cH
	ORG $+2
?lbase@?1??inflate_table@@9@9 DW 03H			; `inflate_table'::`2'::lbase
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	00H
	DW	00H
	ORG $+2
?dbase@?1??inflate_table@@9@9 DW 01H			; `inflate_table'::`2'::dbase
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	00H
	DW	00H
PUBLIC	_inflate_table
; Function compile flags: /Ogtp
; File C:\Users\chris\Documents\GitHub\zlib\inftrees.c
;	COMDAT _inflate_table
_TEXT	SEGMENT
_offs$ = -132						; size = 32
_count$ = -100						; size = 32
_lens$1$ = -68						; size = 4
tv1887 = -64						; size = 4
tv1860 = -64						; size = 4
_min$2$ = -60						; size = 4
tv1862 = -60						; size = 4
_type$1$ = -56						; size = 4
_mask$1$ = -52						; size = 4
_base$2$ = -48						; size = 4
_extra$2$ = -44						; size = 4
_incr$1$ = -40						; size = 4
tv1898 = -40						; size = 4
tv1866 = -40						; size = 4
tv1902 = -36						; size = 4
_low$1$ = -32						; size = 4
_match$1$ = -28						; size = 4
_curr$1$ = -24						; size = 4
tv1865 = -24						; size = 4
_len$2$ = -20						; size = 4
_huff$1$ = -16						; size = 4
_used$1$ = -12						; size = 4
_next$1$ = -8						; size = 4
_drop$1$ = -4						; size = 4
tv1863 = 8						; size = 4
_here$ = 8						; size = 4
_codes$ = 8						; size = 4
_table$ = 12						; size = 4
_bits$ = 16						; size = 4
_work$ = 20						; size = 4
_inflate_table PROC					; COMDAT
; _type$ = ecx
; _lens$ = edx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	56		 push	 esi
  0000a	89 4d c8	 mov	 DWORD PTR _type$1$[ebp], ecx
  0000d	0f 57 c0	 xorps	 xmm0, xmm0

; 40   :     unsigned len;               /* a code's length in bits */
; 41   :     unsigned sym;               /* index of code symbols */
; 42   :     unsigned min, max;          /* minimum and maximum code lengths */
; 43   :     unsigned root;              /* number of index bits for root table */
; 44   :     unsigned curr;              /* number of index bits for current table */
; 45   :     unsigned drop;              /* code bits to drop for sub-table */
; 46   :     int left;                   /* number of prefix codes available */
; 47   :     unsigned used;              /* code entries in table used */
; 48   :     unsigned huff;              /* Huffman code */
; 49   :     unsigned incr;              /* for incrementing code, index */
; 50   :     unsigned fill;              /* index for replicating entries */
; 51   :     unsigned low;               /* low bits for current root entry */
; 52   :     unsigned mask;              /* mask for low root bits */
; 53   :     code here;                  /* table entry for duplication */
; 54   :     code FAR *next;             /* next available space in table */
; 55   :     const unsigned short FAR *base;     /* base value table to use */
; 56   :     const unsigned short FAR *extra;    /* extra bits table to use */
; 57   :     unsigned match;             /* use base and extra for symbol >= match */
; 58   :     unsigned short count[MAXBITS+1];    /* number of codes of each length */
; 59   :     unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
; 60   :     static const unsigned short lbase[31] = { /* Length codes 257..285 base */
; 61   :         3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
; 62   :         35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
; 63   :     static const unsigned short lext[31] = { /* Length codes 257..285 extra */
; 64   :         16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
; 65   :         19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 77, 76};
; 66   :     static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
; 67   :         1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
; 68   :         257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
; 69   :         8193, 12289, 16385, 24577, 0, 0};
; 70   :     static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
; 71   :         16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
; 72   :         23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
; 73   :         28, 28, 29, 29, 64, 64};
; 74   : 
; 75   :     /*
; 76   :        Process a set of code lengths to create a canonical Huffman code.  The
; 77   :        code lengths are lens[0..codes-1].  Each length corresponds to the
; 78   :        symbols 0..codes-1.  The Huffman code is generated by first sorting the
; 79   :        symbols by length from short to long, and retaining the symbol order
; 80   :        for codes with equal lengths.  Then the code starts with all zero bits
; 81   :        for the first code of the shortest length, and the codes are integer
; 82   :        increments for the same length, and zeros are appended as the length
; 83   :        increases.  For the deflate format, these bits are stored backwards
; 84   :        from their more natural integer increment ordering, and so when the
; 85   :        decoding tables are built in the large loop below, the integer codes
; 86   :        are incremented backwards.
; 87   : 
; 88   :        This routine assumes, but does not check, that all of the entries in
; 89   :        lens[] are in the range 0..MAXBITS.  The caller must assure this.
; 90   :        1..MAXBITS is interpreted as that code length.  zero means that that
; 91   :        symbol does not occur in this code.
; 92   : 
; 93   :        The codes are sorted by computing a count of codes for each length,
; 94   :        creating from that a table of starting indices for each length in the
; 95   :        sorted table, and then entering the symbols in order in the sorted
; 96   :        table.  The sorted table is work[], with that space being provided by
; 97   :        the caller.
; 98   : 
; 99   :        The length counts are used for other purposes as well, i.e. finding
; 100  :        the minimum and maximum length codes, determining if there are any
; 101  :        codes at all, checking for a valid set of lengths, and looking ahead
; 102  :        at length counts to determine sub-table sizes when building the
; 103  :        decoding tables.
; 104  :      */
; 105  : 
; 106  :     /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
; 107  :     for (len = 0; len <= MAXBITS; len++)
; 108  :         count[len] = 0;
; 109  :     for (sym = 0; sym < codes; sym++)

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _codes$[ebp]
  00013	8b c2		 mov	 eax, edx
  00015	33 f6		 xor	 esi, esi
  00017	89 45 bc	 mov	 DWORD PTR _lens$1$[ebp], eax
  0001a	57		 push	 edi
  0001b	0f 11 45 9c	 movups	 XMMWORD PTR _count$[ebp], xmm0
  0001f	0f 11 45 ac	 movups	 XMMWORD PTR _count$[ebp+16], xmm0
  00023	85 c9		 test	 ecx, ecx
  00025	74 19		 je	 SHORT $LN6@inflate_ta
  00027	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL7@inflate_ta:

; 110  :         count[lens[sym]]++;

  00030	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00034	46		 inc	 esi
  00035	66 ff 44 45 9c	 inc	 WORD PTR _count$[ebp+eax*2]
  0003a	8b c2		 mov	 eax, edx
  0003c	3b f1		 cmp	 esi, ecx
  0003e	72 f0		 jb	 SHORT $LL7@inflate_ta
$LN6@inflate_ta:

; 111  : 
; 112  :     /* bound code lengths, force root to be within code lengths */
; 113  :     root = *bits;

  00040	8b 55 10	 mov	 edx, DWORD PTR _bits$[ebp]
  00043	8d 45 b6	 lea	 eax, DWORD PTR _count$[ebp+26]

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00046	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  0004b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0004d	0f 1f 00	 npad	 3
$LL10@inflate_ta:

; 115  :         if (count[max] != 0) break;

  00050	66 83 78 04 00	 cmp	 WORD PTR [eax+4], 0
  00055	75 38		 jne	 SHORT $LN78@inflate_ta
  00057	66 83 78 02 00	 cmp	 WORD PTR [eax+2], 0
  0005c	75 30		 jne	 SHORT $LN111@inflate_ta
  0005e	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00062	75 25		 jne	 SHORT $LN112@inflate_ta
  00064	66 83 78 fe 00	 cmp	 WORD PTR [eax-2], 0
  00069	75 19		 jne	 SHORT $LN113@inflate_ta
  0006b	66 83 78 fc 00	 cmp	 WORD PTR [eax-4], 0
  00070	75 0d		 jne	 SHORT $LN114@inflate_ta

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00072	83 ef 05	 sub	 edi, 5
  00075	83 e8 0a	 sub	 eax, 10			; 0000000aH
  00078	83 ff 01	 cmp	 edi, 1
  0007b	73 d3		 jae	 SHORT $LL10@inflate_ta
  0007d	eb 10		 jmp	 SHORT $LN78@inflate_ta
$LN114@inflate_ta:

; 115  :         if (count[max] != 0) break;

  0007f	83 ef 04	 sub	 edi, 4
  00082	eb 0b		 jmp	 SHORT $LN78@inflate_ta
$LN113@inflate_ta:
  00084	83 ef 03	 sub	 edi, 3
  00087	eb 06		 jmp	 SHORT $LN78@inflate_ta
$LN112@inflate_ta:
  00089	83 ef 02	 sub	 edi, 2
  0008c	eb 01		 jmp	 SHORT $LN78@inflate_ta
$LN111@inflate_ta:
  0008e	4f		 dec	 edi
$LN78@inflate_ta:

; 116  :     if (root > max) root = max;
; 117  :     if (max == 0) {                     /* no symbols to code at all */

  0008f	3b cf		 cmp	 ecx, edi
  00091	8b c7		 mov	 eax, edi
  00093	0f 46 c1	 cmovbe	 eax, ecx
  00096	85 ff		 test	 edi, edi
  00098	75 29		 jne	 SHORT $LN37@inflate_ta

; 118  :         here.op = (unsigned char)64;    /* invalid code marker */
; 119  :         here.bits = (unsigned char)1;
; 120  :         here.val = (unsigned short)0;
; 121  :         *(*table)++ = here;             /* make a table to force an error */

  0009a	8b 75 0c	 mov	 esi, DWORD PTR _table$[ebp]
  0009d	c7 45 08 40 01
	00 00		 mov	 DWORD PTR _here$[ebp], 320 ; 00000140H
  000a4	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
  000a7	5f		 pop	 edi
  000a8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000aa	89 01		 mov	 DWORD PTR [ecx], eax
  000ac	83 06 04	 add	 DWORD PTR [esi], 4
  000af	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 122  :         *(*table)++ = here;

  000b1	89 01		 mov	 DWORD PTR [ecx], eax
  000b3	83 06 04	 add	 DWORD PTR [esi], 4

; 123  :         *bits = 1;
; 124  :         return 0;     /* no symbols, but wait for decoding to report error */

  000b6	33 c0		 xor	 eax, eax
  000b8	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1

; 304  : }

  000be	5e		 pop	 esi
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
$LN37@inflate_ta:
  000c3	53		 push	 ebx

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000c4	bb 01 00 00 00	 mov	 ebx, 1
  000c9	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
  000cc	3b fb		 cmp	 edi, ebx
  000ce	76 10		 jbe	 SHORT $LN79@inflate_ta
$LL13@inflate_ta:

; 127  :         if (count[min] != 0) break;

  000d0	66 83 7c 5d 9c
	00		 cmp	 WORD PTR _count$[ebp+ebx*2], 0
  000d6	75 05		 jne	 SHORT $LN135@inflate_ta

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000d8	43		 inc	 ebx
  000d9	3b df		 cmp	 ebx, edi
  000db	72 f3		 jb	 SHORT $LL13@inflate_ta
$LN135@inflate_ta:
  000dd	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
$LN79@inflate_ta:

; 128  :     if (root < min) root = min;
; 129  : 
; 130  :     /* check for an over-subscribed or incomplete set of lengths */
; 131  :     left = 1;

  000e0	3b c3		 cmp	 eax, ebx
  000e2	8b cb		 mov	 ecx, ebx
  000e4	ba 01 00 00 00	 mov	 edx, 1
  000e9	0f 43 c8	 cmovae	 ecx, eax
  000ec	89 4d dc	 mov	 DWORD PTR tv1902[ebp], ecx

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000ef	8b ca		 mov	 ecx, edx
$LL16@inflate_ta:

; 133  :         left <<= 1;
; 134  :         left -= count[len];

  000f1	0f b7 44 4d 9c	 movzx	 eax, WORD PTR _count$[ebp+ecx*2]
  000f6	03 d2		 add	 edx, edx
  000f8	2b d0		 sub	 edx, eax

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  000fa	0f 88 d3 03 00
	00		 js	 $LN42@inflate_ta

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  00100	41		 inc	 ecx
  00101	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00104	76 eb		 jbe	 SHORT $LL16@inflate_ta

; 136  :     }
; 137  :     if (left > 0 && (type == CODES || max != 1))

  00106	85 d2		 test	 edx, edx
  00108	7e 13		 jle	 SHORT $LN41@inflate_ta
  0010a	83 7d c8 00	 cmp	 DWORD PTR _type$1$[ebp], 0
  0010e	0f 84 bf 03 00
	00		 je	 $LN42@inflate_ta
  00114	83 ff 01	 cmp	 edi, 1
  00117	0f 85 b6 03 00
	00		 jne	 $LN42@inflate_ta
$LN41@inflate_ta:

; 139  : 
; 140  :     /* generate offsets into symbol table for each length for sorting */
; 141  :     offs[1] = 0;

  0011d	33 c0		 xor	 eax, eax
  0011f	b9 02 00 00 00	 mov	 ecx, 2
  00124	66 89 85 7e ff
	ff ff		 mov	 WORD PTR _offs$[ebp+2], ax
  0012b	0f 1f 44 00 00	 npad	 5
$LL19@inflate_ta:

; 142  :     for (len = 1; len < MAXBITS; len++)
; 143  :         offs[len + 1] = offs[len] + count[len];

  00130	66 8b 44 0d 9c	 mov	 ax, WORD PTR _count$[ebp+ecx]
  00135	66 03 84 0d 7c
	ff ff ff	 add	 ax, WORD PTR _offs$[ebp+ecx]
  0013d	66 89 84 0d 7e
	ff ff ff	 mov	 WORD PTR _offs$[ebp+ecx+2], ax
  00145	83 c1 02	 add	 ecx, 2
  00148	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  0014b	72 e3		 jb	 SHORT $LL19@inflate_ta

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  0014d	8b 55 08	 mov	 edx, DWORD PTR _codes$[ebp]
  00150	33 c9		 xor	 ecx, ecx
  00152	85 d2		 test	 edx, edx
  00154	74 33		 je	 SHORT $LN21@inflate_ta
  00156	8b 75 14	 mov	 esi, DWORD PTR _work$[ebp]
  00159	8b 5d bc	 mov	 ebx, DWORD PTR _lens$1$[ebp]
  0015c	0f 1f 40 00	 npad	 4
$LL22@inflate_ta:

; 147  :         if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;

  00160	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  00164	66 85 c0	 test	 ax, ax
  00167	74 18		 je	 SHORT $LN20@inflate_ta
  00169	0f b7 84 45 7c
	ff ff ff	 movzx	 eax, WORD PTR _offs$[ebp+eax*2]
  00171	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00175	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  00179	66 ff 84 45 7c
	ff ff ff	 inc	 WORD PTR _offs$[ebp+eax*2]
$LN20@inflate_ta:

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00181	41		 inc	 ecx
  00182	3b ca		 cmp	 ecx, edx
  00184	72 da		 jb	 SHORT $LL22@inflate_ta
  00186	8b 5d ec	 mov	 ebx, DWORD PTR _len$2$[ebp]
$LN21@inflate_ta:

; 148  : 
; 149  :     /*
; 150  :        Create and fill in decoding tables.  In this loop, the table being
; 151  :        filled is at next and has curr index bits.  The code being used is huff
; 152  :        with length len.  That code is converted to an index by dropping drop
; 153  :        bits off of the bottom.  For codes where len is less than drop + curr,
; 154  :        those top drop + curr - len bits are incremented through all values to
; 155  :        fill the table with replicated entries.
; 156  : 
; 157  :        root is the number of index bits for the root table.  When len exceeds
; 158  :        root, sub-tables are created pointed to by the root entry with an index
; 159  :        of the low root bits of huff.  This is saved in low to check for when a
; 160  :        new sub-table should be started.  drop is zero when the root table is
; 161  :        being filled, and drop is root when sub-tables are being filled.
; 162  : 
; 163  :        When a new sub-table is needed, it is necessary to look ahead in the
; 164  :        code lengths to determine what size sub-table is needed.  The length
; 165  :        counts are used for this, and so count[] is decremented as codes are
; 166  :        entered in the tables.
; 167  : 
; 168  :        used keeps track of how many table entries have been allocated from the
; 169  :        provided *table space.  It is checked for LENS and DIST tables against
; 170  :        the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
; 171  :        the initial root table size constants.  See the comments in inftrees.h
; 172  :        for more information.
; 173  : 
; 174  :        sym increments through all symbols, and the loop terminates when
; 175  :        all codes of length max, i.e. all codes, have been processed.  This
; 176  :        routine permits incomplete codes, so another loop after this one fills
; 177  :        in the rest of the decoding tables with invalid code markers.
; 178  :      */
; 179  : 
; 180  :     /* set up for code type */
; 181  :     switch (type) {

  00189	8b 45 c8	 mov	 eax, DWORD PTR _type$1$[ebp]
  0018c	8b 75 0c	 mov	 esi, DWORD PTR _table$[ebp]
  0018f	8b 4d dc	 mov	 ecx, DWORD PTR tv1902[ebp]
  00192	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _huff$1$[ebp], 0
  00199	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _drop$1$[ebp], 0
  001a0	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _low$1$[ebp], -1
  001a7	83 e8 00	 sub	 eax, 0
  001aa	0f 84 1f 01 00
	00		 je	 $LN44@inflate_ta
  001b0	83 e8 01	 sub	 eax, 1
  001b3	0f 84 dd 00 00
	00		 je	 $LN45@inflate_ta

; 190  :         break;
; 191  :     default:    /* DISTS */
; 192  :         base = dbase;
; 193  :         extra = dext;
; 194  :         match = 0;
; 195  :     }
; 196  : 
; 197  :     /* initialize state for loop */
; 198  :     huff = 0;                   /* starting code */
; 199  :     sym = 0;                    /* starting code symbol */
; 200  :     len = min;                  /* starting code length */
; 201  :     next = *table;              /* current table to fill in */

  001b9	8b 06		 mov	 eax, DWORD PTR [esi]
  001bb	8b d3		 mov	 edx, ebx
  001bd	89 45 f8	 mov	 DWORD PTR _next$1$[ebp], eax

; 202  :     curr = root;                /* current table index bits */

  001c0	8b f1		 mov	 esi, ecx
  001c2	89 45 08	 mov	 DWORD PTR tv1863[ebp], eax

; 203  :     drop = 0;                   /* current bits to drop from code for index */
; 204  :     low = (unsigned)(-1);       /* trigger new sub-table when len > root */
; 205  :     used = 1U << root;          /* use root table entries */

  001c5	b8 01 00 00 00	 mov	 eax, 1
  001ca	d3 e0		 shl	 eax, cl

; 206  :     mask = used - 1;            /* mask for comparing low */

  001cc	8b c8		 mov	 ecx, eax
  001ce	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _base$2$[ebp], OFFSET ?dbase@?1??inflate_table@@9@9
  001d5	49		 dec	 ecx
  001d6	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _extra$2$[ebp], OFFSET ?dext@?1??inflate_table@@9@9

; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||

  001dd	83 7d c8 01	 cmp	 DWORD PTR _type$1$[ebp], 1
  001e1	89 4d cc	 mov	 DWORD PTR _mask$1$[ebp], ecx
  001e4	89 4d c0	 mov	 DWORD PTR tv1860[ebp], ecx
  001e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?dbase@?1??inflate_table@@9@9
  001ec	89 45 f4	 mov	 DWORD PTR _used$1$[ebp], eax
  001ef	89 4d d8	 mov	 DWORD PTR tv1866[ebp], ecx
  001f2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv1865[ebp], OFFSET ?dext@?1??inflate_table@@9@9
  001f9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _match$1$[ebp], 0
  00200	0f 84 c0 00 00
	00		 je	 $LN134@inflate_ta
  00206	83 7d c8 02	 cmp	 DWORD PTR _type$1$[ebp], 2
  0020a	89 4d d0	 mov	 DWORD PTR _base$2$[ebp], ecx
  0020d	8b 4d e8	 mov	 ecx, DWORD PTR tv1865[ebp]
  00210	89 4d d4	 mov	 DWORD PTR _extra$2$[ebp], ecx
  00213	8b 4d 08	 mov	 ecx, DWORD PTR tv1863[ebp]
  00216	89 4d f8	 mov	 DWORD PTR _next$1$[ebp], ecx
  00219	8b 4d c0	 mov	 ecx, DWORD PTR tv1860[ebp]
  0021c	89 4d cc	 mov	 DWORD PTR _mask$1$[ebp], ecx
  0021f	8b 4d 08	 mov	 ecx, DWORD PTR tv1863[ebp]
  00222	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _match$1$[ebp], 0
  00229	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _huff$1$[ebp], 0
  00230	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
  00233	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _drop$1$[ebp], 0
  0023a	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _low$1$[ebp], -1
  00241	89 45 f4	 mov	 DWORD PTR _used$1$[ebp], eax
  00244	0f 85 ae 00 00
	00		 jne	 $LL25@inflate_ta
  0024a	8b 5d d8	 mov	 ebx, DWORD PTR tv1866[ebp]
  0024d	89 5d d0	 mov	 DWORD PTR _base$2$[ebp], ebx
  00250	8b 5d e8	 mov	 ebx, DWORD PTR tv1865[ebp]
  00253	89 5d d4	 mov	 DWORD PTR _extra$2$[ebp], ebx
  00256	8b da		 mov	 ebx, edx
  00258	89 4d f8	 mov	 DWORD PTR _next$1$[ebp], ecx
  0025b	8b 4d c0	 mov	 ecx, DWORD PTR tv1860[ebp]
  0025e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _match$1$[ebp], 0
  00265	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _huff$1$[ebp], 0
  0026c	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
  0026f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _drop$1$[ebp], 0
  00276	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _low$1$[ebp], -1
  0027d	89 45 f4	 mov	 DWORD PTR _used$1$[ebp], eax
  00280	89 4d cc	 mov	 DWORD PTR _mask$1$[ebp], ecx
  00283	3d 50 02 00 00	 cmp	 eax, 592		; 00000250H
  00288	76 6e		 jbe	 SHORT $LL25@inflate_ta
$LN62@inflate_ta:
  0028a	5b		 pop	 ebx
  0028b	5f		 pop	 edi

; 279  :                 (type == DISTS && used > ENOUGH_DISTS))
; 280  :                 return 1;

  0028c	b8 01 00 00 00	 mov	 eax, 1

; 304  : }

  00291	5e		 pop	 esi
  00292	8b e5		 mov	 esp, ebp
  00294	5d		 pop	 ebp
  00295	c3		 ret	 0
$LN45@inflate_ta:

; 185  :         break;
; 186  :     case LENS:
; 187  :         base = lbase;
; 188  :         extra = lext;
; 189  :         match = 257;

  00296	b8 01 00 00 00	 mov	 eax, 1
  0029b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _base$2$[ebp], OFFSET ?lbase@?1??inflate_table@@9@9
  002a2	d3 e0		 shl	 eax, cl
  002a4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002a6	8b 75 dc	 mov	 esi, DWORD PTR tv1902[ebp]
  002a9	89 4d f8	 mov	 DWORD PTR _next$1$[ebp], ecx
  002ac	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  002af	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _extra$2$[ebp], OFFSET ?lext@?1??inflate_table@@9@9
  002b6	c7 45 e4 01 01
	00 00		 mov	 DWORD PTR _match$1$[ebp], 257 ; 00000101H
  002bd	89 45 f4	 mov	 DWORD PTR _used$1$[ebp], eax
  002c0	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
  002c3	89 4d cc	 mov	 DWORD PTR _mask$1$[ebp], ecx
$LN134@inflate_ta:

; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||

  002c6	3d 54 03 00 00	 cmp	 eax, 852		; 00000354H
  002cb	77 bd		 ja	 SHORT $LN62@inflate_ta
  002cd	eb 29		 jmp	 SHORT $LL25@inflate_ta
$LN44@inflate_ta:

; 182  :     case CODES:
; 183  :         base = extra = work;    /* dummy value--not used */

  002cf	8b 45 14	 mov	 eax, DWORD PTR _work$[ebp]
  002d2	89 45 d4	 mov	 DWORD PTR _extra$2$[ebp], eax
  002d5	89 45 d0	 mov	 DWORD PTR _base$2$[ebp], eax

; 184  :         match = 20;

  002d8	b8 01 00 00 00	 mov	 eax, 1
  002dd	d3 e0		 shl	 eax, cl
  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	8b 75 dc	 mov	 esi, DWORD PTR tv1902[ebp]
  002e4	89 45 f4	 mov	 DWORD PTR _used$1$[ebp], eax
  002e7	48		 dec	 eax
  002e8	c7 45 e4 14 00
	00 00		 mov	 DWORD PTR _match$1$[ebp], 20 ; 00000014H
  002ef	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
  002f2	89 4d f8	 mov	 DWORD PTR _next$1$[ebp], ecx
  002f5	89 45 cc	 mov	 DWORD PTR _mask$1$[ebp], eax
$LL25@inflate_ta:

; 210  :         (type == DISTS && used > ENOUGH_DISTS))
; 211  :         return 1;
; 212  : 
; 213  :     /* process all codes and make table entries */
; 214  :     for (;;) {
; 215  :         /* create table entry */
; 216  :         here.bits = (unsigned char)(len - drop);

  002f8	8a c3		 mov	 al, bl
  002fa	2a 45 fc	 sub	 al, BYTE PTR _drop$1$[ebp]
  002fd	88 45 09	 mov	 BYTE PTR _here$[ebp+1], al

; 217  :         if (work[sym] + 1U < match) {

  00300	8b 45 14	 mov	 eax, DWORD PTR _work$[ebp]
  00303	0f b7 10	 movzx	 edx, WORD PTR [eax]
  00306	8b ca		 mov	 ecx, edx
  00308	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0030b	3b 45 e4	 cmp	 eax, DWORD PTR _match$1$[ebp]
  0030e	73 0a		 jae	 SHORT $LN50@inflate_ta

; 218  :             here.op = (unsigned char)0;

  00310	c6 45 08 00	 mov	 BYTE PTR _here$[ebp], 0

; 219  :             here.val = work[sym];

  00314	66 89 55 0a	 mov	 WORD PTR _here$[ebp+2], dx

; 220  :         }

  00318	eb 25		 jmp	 SHORT $LN53@inflate_ta
$LN50@inflate_ta:

; 221  :         else if (work[sym] >= match) {

  0031a	8b 45 e4	 mov	 eax, DWORD PTR _match$1$[ebp]
  0031d	3b c8		 cmp	 ecx, eax
  0031f	72 14		 jb	 SHORT $LN52@inflate_ta

; 222  :             here.op = (unsigned char)(extra[work[sym] - match]);

  00321	2b c8		 sub	 ecx, eax
  00323	8b 45 d4	 mov	 eax, DWORD PTR _extra$2$[ebp]
  00326	8a 04 48	 mov	 al, BYTE PTR [eax+ecx*2]
  00329	88 45 08	 mov	 BYTE PTR _here$[ebp], al

; 223  :             here.val = base[work[sym] - match];

  0032c	8b 45 d0	 mov	 eax, DWORD PTR _base$2$[ebp]
  0032f	66 8b 04 48	 mov	 ax, WORD PTR [eax+ecx*2]

; 224  :         }

  00333	eb 06		 jmp	 SHORT $LN143@inflate_ta
$LN52@inflate_ta:

; 225  :         else {
; 226  :             here.op = (unsigned char)(32 + 64);         /* end of block */

  00335	c6 45 08 60	 mov	 BYTE PTR _here$[ebp], 96 ; 00000060H

; 227  :             here.val = 0;

  00339	33 c0		 xor	 eax, eax
$LN143@inflate_ta:

; 228  :         }
; 229  : 
; 230  :         /* replicate for those indices with low len bits equal to huff */
; 231  :         incr = 1U << (len - drop);

  0033b	66 89 45 0a	 mov	 WORD PTR _here$[ebp+2], ax
$LN53@inflate_ta:
  0033f	8b cb		 mov	 ecx, ebx
  00341	b8 01 00 00 00	 mov	 eax, 1
  00346	2b 4d fc	 sub	 ecx, DWORD PTR _drop$1$[ebp]

; 232  :         fill = 1U << curr;

  00349	ba 01 00 00 00	 mov	 edx, 1
  0034e	d3 e0		 shl	 eax, cl
  00350	8b ce		 mov	 ecx, esi
  00352	89 45 d8	 mov	 DWORD PTR _incr$1$[ebp], eax
  00355	c1 e0 02	 shl	 eax, 2
  00358	d3 e2		 shl	 edx, cl
  0035a	8b 4d fc	 mov	 ecx, DWORD PTR _drop$1$[ebp]
  0035d	89 45 c0	 mov	 DWORD PTR tv1887[ebp], eax
  00360	8b 45 f0	 mov	 eax, DWORD PTR _huff$1$[ebp]
  00363	d3 e8		 shr	 eax, cl
  00365	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  00368	03 c2		 add	 eax, edx

; 233  :         min = fill;                 /* save offset to next table */

  0036a	89 55 c4	 mov	 DWORD PTR _min$2$[ebp], edx
  0036d	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  00370	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
$LL30@inflate_ta:

; 234  :         do {
; 235  :             fill -= incr;

  00373	2b 4d c0	 sub	 ecx, DWORD PTR tv1887[ebp]

; 236  :             next[(huff >> drop) + fill] = here;

  00376	89 01		 mov	 DWORD PTR [ecx], eax
  00378	2b 55 d8	 sub	 edx, DWORD PTR _incr$1$[ebp]

; 237  :         } while (fill != 0);

  0037b	75 f6		 jne	 SHORT $LL30@inflate_ta

; 238  : 
; 239  :         /* backwards increment the len-bit code huff */
; 240  :         incr = 1U << (len - 1);

  0037d	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00380	ba 01 00 00 00	 mov	 edx, 1
  00385	d3 e2		 shl	 edx, cl

; 241  :         while (huff & incr)

  00387	8b 4d f0	 mov	 ecx, DWORD PTR _huff$1$[ebp]
  0038a	85 d1		 test	 edx, ecx
  0038c	74 08		 je	 SHORT $LN32@inflate_ta
  0038e	66 90		 npad	 2
$LL31@inflate_ta:

; 242  :             incr >>= 1;

  00390	d1 ea		 shr	 edx, 1
  00392	85 d1		 test	 edx, ecx
  00394	75 fa		 jne	 SHORT $LL31@inflate_ta
$LN32@inflate_ta:

; 243  :         if (incr != 0) {

  00396	85 d2		 test	 edx, edx
  00398	74 09		 je	 SHORT $LN54@inflate_ta

; 244  :             huff &= incr - 1;

  0039a	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0039d	23 c1		 and	 eax, ecx

; 245  :             huff += incr;

  0039f	03 d0		 add	 edx, eax

; 246  :         }

  003a1	eb 02		 jmp	 SHORT $LN144@inflate_ta
$LN54@inflate_ta:

; 247  :         else
; 248  :             huff = 0;

  003a3	33 d2		 xor	 edx, edx
$LN144@inflate_ta:

; 249  : 
; 250  :         /* go to next symbol, update count, len */
; 251  :         sym++;

  003a5	8b 45 14	 mov	 eax, DWORD PTR _work$[ebp]

; 252  :         if (--(count[len]) == 0) {

  003a8	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  003ad	83 c0 02	 add	 eax, 2
  003b0	89 55 f0	 mov	 DWORD PTR _huff$1$[ebp], edx
  003b3	66 01 4c 5d 9c	 add	 WORD PTR _count$[ebp+ebx*2], cx
  003b8	89 45 14	 mov	 DWORD PTR _work$[ebp], eax
  003bb	75 15		 jne	 SHORT $LN56@inflate_ta

; 253  :             if (len == max) break;

  003bd	3b df		 cmp	 ebx, edi
  003bf	0f 84 db 00 00
	00		 je	 $LN82@inflate_ta

; 254  :             len = lens[work[sym]];

  003c5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  003c8	8b 4d bc	 mov	 ecx, DWORD PTR _lens$1$[ebp]
  003cb	0f b7 1c 41	 movzx	 ebx, WORD PTR [ecx+eax*2]
  003cf	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
$LN56@inflate_ta:

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  003d2	8b 4d dc	 mov	 ecx, DWORD PTR tv1902[ebp]
  003d5	3b d9		 cmp	 ebx, ecx
  003d7	0f 86 1b ff ff
	ff		 jbe	 $LL25@inflate_ta
  003dd	8b 45 cc	 mov	 eax, DWORD PTR _mask$1$[ebp]
  003e0	23 c2		 and	 eax, edx
  003e2	89 45 d8	 mov	 DWORD PTR tv1898[ebp], eax
  003e5	3b 45 e0	 cmp	 eax, DWORD PTR _low$1$[ebp]
  003e8	0f 84 0a ff ff
	ff		 je	 $LL25@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)

  003ee	8b 45 fc	 mov	 eax, DWORD PTR _drop$1$[ebp]
  003f1	85 c0		 test	 eax, eax

; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  003f3	8b 55 f8	 mov	 edx, DWORD PTR _next$1$[ebp]
  003f6	0f 44 c1	 cmove	 eax, ecx
  003f9	8b 4d c4	 mov	 ecx, DWORD PTR _min$2$[ebp]
  003fc	89 45 fc	 mov	 DWORD PTR _drop$1$[ebp], eax
  003ff	8d 14 8a	 lea	 edx, DWORD PTR [edx+ecx*4]
  00402	89 55 f8	 mov	 DWORD PTR _next$1$[ebp], edx

; 265  : 
; 266  :             /* determine length of next table */
; 267  :             curr = len - drop;

  00405	8b d3		 mov	 edx, ebx
  00407	2b d0		 sub	 edx, eax

; 268  :             left = (int)(1 << curr);

  00409	b8 01 00 00 00	 mov	 eax, 1
  0040e	8b ca		 mov	 ecx, edx
  00410	89 55 e8	 mov	 DWORD PTR _curr$1$[ebp], edx
  00413	d3 e0		 shl	 eax, cl

; 269  :             while (curr + drop < max) {

  00415	3b df		 cmp	 ebx, edi
  00417	73 27		 jae	 SHORT $LN81@inflate_ta

; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  00419	8d 55 9c	 lea	 edx, DWORD PTR _count$[ebp]
  0041c	8b f3		 mov	 esi, ebx
  0041e	8d 14 5a	 lea	 edx, DWORD PTR [edx+ebx*2]
  00421	8b d9		 mov	 ebx, ecx
$LL33@inflate_ta:

; 270  :                 left -= count[curr + drop];

  00423	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00426	2b c1		 sub	 eax, ecx

; 271  :                 if (left <= 0) break;

  00428	85 c0		 test	 eax, eax
  0042a	7e 0b		 jle	 SHORT $LN136@inflate_ta

; 272  :                 curr++;

  0042c	46		 inc	 esi
  0042d	43		 inc	 ebx
  0042e	83 c2 02	 add	 edx, 2

; 273  :                 left <<= 1;

  00431	03 c0		 add	 eax, eax
  00433	3b f7		 cmp	 esi, edi
  00435	72 ec		 jb	 SHORT $LL33@inflate_ta
$LN136@inflate_ta:
  00437	89 5d e8	 mov	 DWORD PTR _curr$1$[ebp], ebx
  0043a	8b 5d ec	 mov	 ebx, DWORD PTR _len$2$[ebp]
  0043d	8b 55 e8	 mov	 edx, DWORD PTR _curr$1$[ebp]
$LN81@inflate_ta:

; 274  :             }
; 275  : 
; 276  :             /* check for enough space */
; 277  :             used += 1U << curr;

  00440	8b ca		 mov	 ecx, edx
  00442	b8 01 00 00 00	 mov	 eax, 1
  00447	d3 e0		 shl	 eax, cl
  00449	8b 4d f4	 mov	 ecx, DWORD PTR _used$1$[ebp]
  0044c	03 c8		 add	 ecx, eax

; 278  :             if ((type == LENS && used > ENOUGH_LENS) ||

  0044e	8b 45 c8	 mov	 eax, DWORD PTR _type$1$[ebp]
  00451	89 4d f4	 mov	 DWORD PTR _used$1$[ebp], ecx
  00454	83 f8 01	 cmp	 eax, 1
  00457	75 08		 jne	 SHORT $LN63@inflate_ta
  00459	81 f9 54 03 00
	00		 cmp	 ecx, 852		; 00000354H
  0045f	eb 0b		 jmp	 SHORT $LN145@inflate_ta
$LN63@inflate_ta:
  00461	83 f8 02	 cmp	 eax, 2
  00464	75 0c		 jne	 SHORT $LN61@inflate_ta
  00466	81 f9 50 02 00
	00		 cmp	 ecx, 592		; 00000250H
$LN145@inflate_ta:

; 281  : 
; 282  :             /* point entry in root table to sub-table */
; 283  :             low = huff & mask;

  0046c	0f 87 18 fe ff
	ff		 ja	 $LN62@inflate_ta
$LN61@inflate_ta:

; 284  :             (*table)[low].op = (unsigned char)curr;

  00472	8b 4d 0c	 mov	 ecx, DWORD PTR _table$[ebp]
  00475	8b 75 d8	 mov	 esi, DWORD PTR tv1898[ebp]
  00478	89 75 e0	 mov	 DWORD PTR _low$1$[ebp], esi
  0047b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0047d	88 14 b0	 mov	 BYTE PTR [eax+esi*4], dl

; 285  :             (*table)[low].bits = (unsigned char)root;

  00480	8b 01		 mov	 eax, DWORD PTR [ecx]
  00482	8b 55 dc	 mov	 edx, DWORD PTR tv1902[ebp]
  00485	88 54 b0 01	 mov	 BYTE PTR [eax+esi*4+1], dl

; 286  :             (*table)[low].val = (unsigned short)(next - *table);

  00489	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0048b	8b 45 f8	 mov	 eax, DWORD PTR _next$1$[ebp]
  0048e	2b c1		 sub	 eax, ecx
  00490	c1 f8 02	 sar	 eax, 2
  00493	66 89 44 b1 02	 mov	 WORD PTR [ecx+esi*4+2], ax

; 287  :         }
; 288  :     }

  00498	8b 75 e8	 mov	 esi, DWORD PTR _curr$1$[ebp]
  0049b	e9 58 fe ff ff	 jmp	 $LL25@inflate_ta
$LN82@inflate_ta:

; 289  : 
; 290  :     /* fill in remaining table entry if code is incomplete (guaranteed to have
; 291  :        at most one remaining entry, since if the code is incomplete, the
; 292  :        maximum code length that was allowed to get this far is one bit) */
; 293  :     if (huff != 0) {

  004a0	85 d2		 test	 edx, edx
  004a2	74 13		 je	 SHORT $LN64@inflate_ta

; 294  :         here.op = (unsigned char)64;            /* invalid code marker */
; 295  :         here.bits = (unsigned char)(len - drop);
; 296  :         here.val = (unsigned short)0;
; 297  :         next[huff] = here;

  004a4	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  004a7	33 c0		 xor	 eax, eax
  004a9	c6 45 08 40	 mov	 BYTE PTR _here$[ebp], 64 ; 00000040H
  004ad	66 89 45 0a	 mov	 WORD PTR _here$[ebp+2], ax
  004b1	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
  004b4	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN64@inflate_ta:

; 298  :     }
; 299  : 
; 300  :     /* set return parameters */
; 301  :     *table += used;

  004b7	8b 75 0c	 mov	 esi, DWORD PTR _table$[ebp]
  004ba	8b 45 f4	 mov	 eax, DWORD PTR _used$1$[ebp]

; 302  :     *bits = root;

  004bd	8b 4d 10	 mov	 ecx, DWORD PTR _bits$[ebp]
  004c0	c1 e0 02	 shl	 eax, 2
  004c3	01 06		 add	 DWORD PTR [esi], eax
  004c5	8b 45 dc	 mov	 eax, DWORD PTR tv1902[ebp]
  004c8	5b		 pop	 ebx
  004c9	5f		 pop	 edi
  004ca	89 01		 mov	 DWORD PTR [ecx], eax

; 303  :     return 0;

  004cc	33 c0		 xor	 eax, eax

; 304  : }

  004ce	5e		 pop	 esi
  004cf	8b e5		 mov	 esp, ebp
  004d1	5d		 pop	 ebp
  004d2	c3		 ret	 0
$LN42@inflate_ta:
  004d3	5b		 pop	 ebx
  004d4	5f		 pop	 edi

; 138  :         return -1;                      /* incomplete set */

  004d5	83 c8 ff	 or	 eax, -1

; 304  : }

  004d8	5e		 pop	 esi
  004d9	8b e5		 mov	 esp, ebp
  004db	5d		 pop	 ebp
  004dc	c3		 ret	 0
_inflate_table ENDP
_TEXT	ENDS
END
