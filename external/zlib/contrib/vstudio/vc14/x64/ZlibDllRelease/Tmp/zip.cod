; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
EXTRN	__imp__time64:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_srand:PROC
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
PUBLIC	zipClose
PUBLIC	zipCloseFileInZip
PUBLIC	zipCloseFileInZipRaw64
PUBLIC	zipCloseFileInZipRaw
PUBLIC	zipWriteInFileInZip
PUBLIC	zipOpenNewFileInZip
PUBLIC	zipOpenNewFileInZip64
PUBLIC	zipOpenNewFileInZip2_64
PUBLIC	zipOpenNewFileInZip2
PUBLIC	zipOpenNewFileInZip3_64
PUBLIC	zipOpenNewFileInZip3
PUBLIC	zipOpenNewFileInZip4_64
PUBLIC	zipOpen64
PUBLIC	zipOpen
PUBLIC	zipOpen2_64
PUBLIC	zipOpen2
PUBLIC	zipOpen3
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipClose DD imagerel $LN38
	DD	imagerel $LN38+49
	DD	imagerel $unwind$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zipClose DD imagerel $LN38+49
	DD	imagerel $LN38+54
	DD	imagerel $chain$0$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zipClose DD imagerel $LN38+54
	DD	imagerel $LN38+87
	DD	imagerel $chain$1$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zipClose DD imagerel $LN38+87
	DD	imagerel $LN38+255
	DD	imagerel $chain$2$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipClose DD imagerel $LN38+255
	DD	imagerel $LN38+307
	DD	imagerel $chain$3$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zipClose DD imagerel $LN38+307
	DD	imagerel $LN38+330
	DD	imagerel $chain$4$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipClose DD imagerel $LN38+330
	DD	imagerel $LN38+361
	DD	imagerel $chain$5$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_GlobalComment DD imagerel Write_GlobalComment
	DD	imagerel Write_GlobalComment+137
	DD	imagerel $unwind$Write_GlobalComment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_EndOfCentralDirectoryRecord DD imagerel Write_EndOfCentralDirectoryRecord
	DD	imagerel Write_EndOfCentralDirectoryRecord+54
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$Write_EndOfCentralDirectoryRecord DD imagerel Write_EndOfCentralDirectoryRecord+54
	DD	imagerel Write_EndOfCentralDirectoryRecord+116
	DD	imagerel $chain$0$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$Write_EndOfCentralDirectoryRecord DD imagerel Write_EndOfCentralDirectoryRecord+116
	DD	imagerel Write_EndOfCentralDirectoryRecord+280
	DD	imagerel $chain$2$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$Write_EndOfCentralDirectoryRecord DD imagerel Write_EndOfCentralDirectoryRecord+280
	DD	imagerel Write_EndOfCentralDirectoryRecord+285
	DD	imagerel $chain$3$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$Write_EndOfCentralDirectoryRecord DD imagerel Write_EndOfCentralDirectoryRecord+285
	DD	imagerel Write_EndOfCentralDirectoryRecord+294
	DD	imagerel $chain$4$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryRecord DD imagerel Write_Zip64EndOfCentralDirectoryRecord
	DD	imagerel Write_Zip64EndOfCentralDirectoryRecord+301
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryLocator DD imagerel Write_Zip64EndOfCentralDirectoryLocator
	DD	imagerel Write_Zip64EndOfCentralDirectoryLocator+125
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryLocator
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZipRaw64 DD imagerel $LN94
	DD	imagerel $LN94+54
	DD	imagerel $unwind$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zipCloseFileInZipRaw64 DD imagerel $LN94+54
	DD	imagerel $LN94+594
	DD	imagerel $chain$2$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zipCloseFileInZipRaw64 DD imagerel $LN94+594
	DD	imagerel $LN94+1133
	DD	imagerel $chain$4$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipCloseFileInZipRaw64 DD imagerel $LN94+1133
	DD	imagerel $LN94+1151
	DD	imagerel $chain$5$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipWriteInFileInZip DD imagerel $LN40
	DD	imagerel $LN40+56
	DD	imagerel $unwind$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zipWriteInFileInZip DD imagerel $LN40+56
	DD	imagerel $LN40+216
	DD	imagerel $chain$0$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zipWriteInFileInZip DD imagerel $LN40+216
	DD	imagerel $LN40+322
	DD	imagerel $chain$2$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipWriteInFileInZip DD imagerel $LN40+322
	DD	imagerel $LN40+349
	DD	imagerel $chain$3$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+37
	DD	imagerel zip64FlushWriteBuffer+118
	DD	imagerel $chain$2$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+118
	DD	imagerel zip64FlushWriteBuffer+123
	DD	imagerel $chain$3$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+123
	DD	imagerel zip64FlushWriteBuffer+219
	DD	imagerel $chain$4$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip DD imagerel $LN4
	DD	imagerel $LN4+137
	DD	imagerel $unwind$zipOpenNewFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip64 DD imagerel $LN4
	DD	imagerel $LN4+144
	DD	imagerel $unwind$zipOpenNewFileInZip64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2_64 DD imagerel $LN4
	DD	imagerel $LN4+151
	DD	imagerel $unwind$zipOpenNewFileInZip2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2 DD imagerel $LN4
	DD	imagerel $LN4+144
	DD	imagerel $unwind$zipOpenNewFileInZip2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3_64 DD imagerel $LN4
	DD	imagerel $LN4+179
	DD	imagerel $unwind$zipOpenNewFileInZip3_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3 DD imagerel $LN4
	DD	imagerel $LN4+172
	DD	imagerel $unwind$zipOpenNewFileInZip3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip4_64 DD imagerel $LN97
	DD	imagerel $LN97+81
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zipOpenNewFileInZip4_64 DD imagerel $LN97+81
	DD	imagerel $LN97+937
	DD	imagerel $chain$4$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipOpenNewFileInZip4_64 DD imagerel $LN97+937
	DD	imagerel $LN97+986
	DD	imagerel $chain$5$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$zipOpenNewFileInZip4_64 DD imagerel $LN97+986
	DD	imagerel $LN97+1006
	DD	imagerel $chain$6$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$zipOpenNewFileInZip4_64 DD imagerel $LN97+1006
	DD	imagerel $LN97+1015
	DD	imagerel $chain$7$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$zipOpenNewFileInZip4_64 DD imagerel $LN97+1015
	DD	imagerel $LN97+1416
	DD	imagerel $chain$8$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$zipOpenNewFileInZip4_64 DD imagerel $LN97+1416
	DD	imagerel $LN97+1430
	DD	imagerel $chain$9$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_LocalFileHeader DD imagerel Write_LocalFileHeader
	DD	imagerel Write_LocalFileHeader+604
	DD	imagerel $unwind$Write_LocalFileHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2_64 DD imagerel $LN7
	DD	imagerel $LN7+94
	DD	imagerel $unwind$zipOpen2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2 DD imagerel $LN8
	DD	imagerel $LN8+78
	DD	imagerel $unwind$zipOpen2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen3 DD imagerel $LN24
	DD	imagerel $LN24+412
	DD	imagerel $unwind$zipOpen3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LoadCentralDirectoryRecord DD imagerel LoadCentralDirectoryRecord
	DD	imagerel LoadCentralDirectoryRecord+948
	DD	imagerel $unwind$LoadCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+96
	DD	imagerel $unwind$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+96
	DD	imagerel zip64local_SearchCentralDir64+116
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+116
	DD	imagerel zip64local_SearchCentralDir64+308
	DD	imagerel $chain$1$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+308
	DD	imagerel zip64local_SearchCentralDir64+331
	DD	imagerel $chain$2$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+331
	DD	imagerel zip64local_SearchCentralDir64+540
	DD	imagerel $chain$3$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+98
	DD	imagerel $unwind$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+98
	DD	imagerel zip64local_SearchCentralDir+118
	DD	imagerel $chain$0$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+118
	DD	imagerel zip64local_SearchCentralDir+308
	DD	imagerel $chain$1$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+308
	DD	imagerel zip64local_SearchCentralDir+342
	DD	imagerel $chain$2$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+342
	DD	imagerel zip64local_SearchCentralDir+361
	DD	imagerel $chain$3$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong64 DD imagerel zip64local_getLong64
	DD	imagerel zip64local_getLong64+369
	DD	imagerel $unwind$zip64local_getLong64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong DD imagerel zip64local_getLong
	DD	imagerel zip64local_getLong+205
	DD	imagerel $unwind$zip64local_getLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getShort DD imagerel zip64local_getShort
	DD	imagerel zip64local_getShort+124
	DD	imagerel $unwind$zip64local_getShort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getByte DD imagerel zip64local_getByte
	DD	imagerel zip64local_getByte+102
	DD	imagerel $unwind$zip64local_getByte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_putValue DD imagerel zip64local_putValue
	DD	imagerel zip64local_putValue+114
	DD	imagerel $unwind$zip64local_putValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_data_in_datablock DD imagerel add_data_in_datablock
	DD	imagerel add_data_in_datablock+212
	DD	imagerel $unwind$add_data_in_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_linkedlist DD imagerel free_linkedlist
	DD	imagerel free_linkedlist+32
	DD	imagerel $unwind$free_linkedlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_datablock DD imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$free_datablock DD imagerel free_datablock+9
	DD	imagerel free_datablock+38
	DD	imagerel $chain$0$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$free_datablock DD imagerel free_datablock+38
	DD	imagerel free_datablock+43
	DD	imagerel $chain$1$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$allocate_new_datablock DD imagerel allocate_new_datablock
	DD	imagerel allocate_new_datablock+38
	DD	imagerel $unwind$allocate_new_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$crypthead DD imagerel crypthead
	DD	imagerel crypthead+329
	DD	imagerel $unwind$crypthead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_keys DD imagerel init_keys
	DD	imagerel init_keys+107
	DD	imagerel $unwind$init_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_keys DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypthead DD 0c1c01H
	DD	0e641cH
	DD	0d541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$allocate_new_datablock DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$free_datablock DD 021H
	DD	imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$free_datablock DD 020521H
	DD	043405H
	DD	imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_datablock DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_linkedlist DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_data_in_datablock DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_putValue DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getByte DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getShort DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong64 DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64local_SearchCentralDir DD 021H
	DD	imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+98
	DD	imagerel $unwind$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64local_SearchCentralDir DD 021H
	DD	imagerel zip64local_SearchCentralDir+98
	DD	imagerel zip64local_SearchCentralDir+118
	DD	imagerel $chain$0$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip64local_SearchCentralDir DD 020521H
	DD	0ac405H
	DD	imagerel zip64local_SearchCentralDir+98
	DD	imagerel zip64local_SearchCentralDir+118
	DD	imagerel $chain$0$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64local_SearchCentralDir DD 020521H
	DD	0bf405H
	DD	imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+98
	DD	imagerel $unwind$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir DD 081001H
	DD	0d3410H
	DD	0e00c3210H
	DD	07008d00aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64local_SearchCentralDir64 DD 021H
	DD	imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+96
	DD	imagerel $unwind$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64local_SearchCentralDir64 DD 021H
	DD	imagerel zip64local_SearchCentralDir64+96
	DD	imagerel zip64local_SearchCentralDir64+116
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip64local_SearchCentralDir64 DD 020521H
	DD	0cc405H
	DD	imagerel zip64local_SearchCentralDir64+96
	DD	imagerel zip64local_SearchCentralDir64+116
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64local_SearchCentralDir64 DD 020521H
	DD	04d405H
	DD	imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+96
	DD	imagerel $unwind$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir64 DD 070d01H
	DD	0f009420dH
	DD	07005e007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LoadCentralDirectoryRecord DD 091401H
	DD	0f00d6214H
	DD	0d009e00bH
	DD	07005c007H
	DD	030036004H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen3 DD 0b2a01H
	DD	02037e42aH
	DD	02036742aH
	DD	02035642aH
	DD	02034342aH
	DD	02032012aH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2 DD 020901H
	DD	03002f209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2_64 DD 020701H
	DD	0110107H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_LocalFileHeader DD 0a4401H
	DD	085444H
	DD	0a6413H
	DD	093413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$zipOpenNewFileInZip4_64 DD 021H
	DD	imagerel $LN97
	DD	imagerel $LN97+81
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$zipOpenNewFileInZip4_64 DD 060021H
	DD	0ae400H
	DD	0cc400H
	DD	0d6400H
	DD	imagerel $LN97
	DD	imagerel $LN97+81
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$zipOpenNewFileInZip4_64 DD 021H
	DD	imagerel $LN97
	DD	imagerel $LN97+81
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$zipOpenNewFileInZip4_64 DD 060021H
	DD	0ae400H
	DD	0cc400H
	DD	0d6400H
	DD	imagerel $LN97
	DD	imagerel $LN97+81
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipOpenNewFileInZip4_64 DD 080021H
	DD	0ae400H
	DD	0bd400H
	DD	0cc400H
	DD	0d6400H
	DD	imagerel $LN97
	DD	imagerel $LN97+81
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zipOpenNewFileInZip4_64 DD 0a3421H
	DD	0ae434H
	DD	0bd42dH
	DD	0cc41dH
	DD	0d6410H
	DD	0135408H
	DD	imagerel $LN97
	DD	imagerel $LN97+81
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip4_64 DD 041201H
	DD	0f00ed212H
	DD	0300b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3_64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2_64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zip64FlushWriteBuffer DD 021H
	DD	imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64FlushWriteBuffer DD 021H
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64FlushWriteBuffer DD 040a21H
	DD	08e40aH
	DD	076405H
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64FlushWriteBuffer DD 020521H
	DD	065405H
	DD	imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64FlushWriteBuffer DD 040a01H
	DD	09340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipWriteInFileInZip DD 021H
	DD	imagerel $LN40
	DD	imagerel $LN40+56
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zipWriteInFileInZip DD 020021H
	DD	066400H
	DD	imagerel $LN40
	DD	imagerel $LN40+56
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zipWriteInFileInZip DD 020521H
	DD	066405H
	DD	imagerel $LN40
	DD	imagerel $LN40+56
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipWriteInFileInZip DD 081501H
	DD	097415H
	DD	085415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipCloseFileInZipRaw64 DD 021H
	DD	imagerel $LN94
	DD	imagerel $LN94+54
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zipCloseFileInZipRaw64 DD 060021H
	DD	0ce400H
	DD	0b7400H
	DD	0a5400H
	DD	imagerel $LN94
	DD	imagerel $LN94+54
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zipCloseFileInZipRaw64 DD 060f21H
	DD	0ce40fH
	DD	0b740aH
	DD	0a5405H
	DD	imagerel $LN94
	DD	imagerel $LN94+54
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZipRaw64 DD 060d01H
	DD	0f009320dH
	DD	0c005d007H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryLocator DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryRecord DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$Write_EndOfCentralDirectoryRecord DD 021H
	DD	imagerel Write_EndOfCentralDirectoryRecord
	DD	imagerel Write_EndOfCentralDirectoryRecord+54
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$Write_EndOfCentralDirectoryRecord DD 021H
	DD	imagerel Write_EndOfCentralDirectoryRecord+54
	DD	imagerel Write_EndOfCentralDirectoryRecord+116
	DD	imagerel $chain$0$Write_EndOfCentralDirectoryRecord
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$Write_EndOfCentralDirectoryRecord DD 040f21H
	DD	0ae40fH
	DD	097405H
	DD	imagerel Write_EndOfCentralDirectoryRecord+54
	DD	imagerel Write_EndOfCentralDirectoryRecord+116
	DD	imagerel $chain$0$Write_EndOfCentralDirectoryRecord
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$Write_EndOfCentralDirectoryRecord DD 020521H
	DD	086405H
	DD	imagerel Write_EndOfCentralDirectoryRecord
	DD	imagerel Write_EndOfCentralDirectoryRecord+54
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_EndOfCentralDirectoryRecord DD 040901H
	DD	0f0053209H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_GlobalComment DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipClose DD 021H
	DD	imagerel $LN38
	DD	imagerel $LN38+49
	DD	imagerel $unwind$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zipClose DD 021H
	DD	imagerel $LN38+49
	DD	imagerel $LN38+54
	DD	imagerel $chain$0$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipClose DD 021H
	DD	imagerel $LN38+54
	DD	imagerel $LN38+87
	DD	imagerel $chain$1$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zipClose DD 020521H
	DD	083405H
	DD	imagerel $LN38+54
	DD	imagerel $LN38+87
	DD	imagerel $chain$1$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zipClose DD 020521H
	DD	0af405H
	DD	imagerel $LN38+49
	DD	imagerel $LN38+54
	DD	imagerel $chain$0$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zipClose DD 020521H
	DD	09c405H
	DD	imagerel $LN38
	DD	imagerel $LN38+49
	DD	imagerel $unwind$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipClose DD 060d01H
	DD	0b540dH
	DD	0e009320dH
	DD	060067007H
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$dead$ = 8
time	PROC						; COMDAT

; 552  :             return _time64(_Time);

  00000	33 c9		 xor	 ecx, ecx
  00002	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__time64
time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
;	COMDAT decrypt_byte
_TEXT	SEGMENT
pkeys$ = 8
pcrc_32_tab$dead$ = 16
decrypt_byte PROC					; COMDAT

; 36   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 37   :                      * unpredictable manner on 16-bit systems; not a problem
; 38   :                      * with any known compiler so far, though */
; 39   : 
; 40   :     (void)pcrc_32_tab;
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00000	8b 51 08	 mov	 edx, DWORD PTR [rcx+8]
  00003	81 e2 fd ff 00
	00		 and	 edx, 65533		; 0000fffdH
  00009	83 ca 02	 or	 edx, 2

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  0000c	8b c2		 mov	 eax, edx
  0000e	83 f0 01	 xor	 eax, 1
  00011	0f af c2	 imul	 eax, edx
  00014	c1 e8 08	 shr	 eax, 8
  00017	0f b6 c0	 movzx	 eax, al

; 43   : }

  0001a	c3		 ret	 0
decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
;	COMDAT update_keys
_TEXT	SEGMENT
pkeys$ = 8
pcrc_32_tab$ = 16
c$ = 24
update_keys PROC					; COMDAT

; 49   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00000	44 8b 11	 mov	 r10d, DWORD PTR [rcx]
  00003	4c 8b d9	 mov	 r11, rcx
  00006	45 8b ca	 mov	 r9d, r10d
  00009	41 8b c0	 mov	 eax, r8d
  0000c	4c 33 c8	 xor	 r9, rax
  0000f	41 c1 ea 08	 shr	 r10d, 8
  00013	41 0f b6 c1	 movzx	 eax, r9b
  00017	44 33 14 82	 xor	 r10d, DWORD PTR [rdx+rax*4]
  0001b	44 89 11	 mov	 DWORD PTR [rcx], r10d

; 50   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  0001e	41 0f b6 c2	 movzx	 eax, r10b

; 51   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  00022	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00025	69 c0 05 84 08
	08		 imul	 eax, eax, 134775813	; 08088405H
  0002b	ff c0		 inc	 eax
  0002d	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 52   :     {
; 53   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00030	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00033	48 c1 e8 18	 shr	 rax, 24

; 54   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  00037	48 33 c1	 xor	 rax, rcx
  0003a	c1 e9 08	 shr	 ecx, 8
  0003d	0f b6 c0	 movzx	 eax, al
  00040	33 0c 82	 xor	 ecx, DWORD PTR [rdx+rax*4]

; 55   :     }
; 56   :     return c;

  00043	41 8b c0	 mov	 eax, r8d
  00046	41 89 4b 08	 mov	 DWORD PTR [r11+8], ecx

; 57   : }

  0004a	c3		 ret	 0
update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
;	COMDAT init_keys
_TEXT	SEGMENT
passwd$ = 48
pkeys$ = 56
pcrc_32_tab$ = 64
init_keys PROC						; COMDAT

; 64   : static void init_keys(const char* passwd, unsigned long* pkeys, const z_crc_t* pcrc_32_tab) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 65   :     *(pkeys+0) = 305419896L;

  0000f	c7 02 78 56 34
	12		 mov	 DWORD PTR [rdx], 305419896 ; 12345678H
  00015	49 8b f0	 mov	 rsi, r8

; 66   :     *(pkeys+1) = 591751049L;

  00018	c7 42 04 89 67
	45 23		 mov	 DWORD PTR [rdx+4], 591751049 ; 23456789H
  0001f	48 8b fa	 mov	 rdi, rdx

; 67   :     *(pkeys+2) = 878082192L;

  00022	c7 42 08 90 78
	56 34		 mov	 DWORD PTR [rdx+8], 878082192 ; 34567890H
  00029	48 8b d9	 mov	 rbx, rcx

; 68   :     while (*passwd != '\0') {

  0002c	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0002f	84 c0		 test	 al, al
  00031	74 28		 je	 SHORT $LN3@init_keys
  00033	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@init_keys:

; 69   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00040	44 0f be c0	 movsx	 r8d, al
  00044	48 8b d6	 mov	 rdx, rsi
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	e8 00 00 00 00	 call	 update_keys
  0004f	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]

; 70   :         passwd++;

  00053	48 8d 5b 01	 lea	 rbx, QWORD PTR [rbx+1]
  00057	84 c0		 test	 al, al
  00059	75 e5		 jne	 SHORT $LL2@init_keys
$LN3@init_keys:

; 71   :     }
; 72   : }

  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00060	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h
;	COMDAT crypthead
_TEXT	SEGMENT
header$ = 32
passwd$ = 96
buf$ = 104
bufSize$dead$ = 112
pkeys$ = 120
pcrc_32_tab$ = 128
crcForCrypting$ = 136
crypthead PROC						; COMDAT

; 93   :                           unsigned long crcForCrypting) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 94   :     unsigned n;                  /* index in random header */
; 95   :     int t;                       /* temporary */
; 96   :     int c;                       /* random byte */
; 97   :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 98   :     static unsigned calls = 0;   /* ensure different random header each time */
; 99   : 
; 100  :     if (bufSize<RAND_HEAD_LEN)
; 101  :       return 0;
; 102  : 
; 103  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 104  :      * output of rand() to get less predictability, since rand() is
; 105  :      * often poorly implemented.
; 106  :      */
; 107  :     if (++calls == 1)

  0001c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  00022	49 8b d9	 mov	 rbx, r9
  00025	ff c0		 inc	 eax
  00027	4c 8b ea	 mov	 r13, rdx
  0002a	89 05 00 00 00
	00		 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00030	4c 8b e1	 mov	 r12, rcx
  00033	83 f8 01	 cmp	 eax, 1
  00036	75 15		 jne	 SHORT $LN9@crypthead
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h

; 552  :             return _time64(_Time);

  00038	33 c9		 xor	 ecx, ecx
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\crypt.h

; 109  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00040	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  00045	8b c8		 mov	 ecx, eax
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
$LN9@crypthead:

; 110  :     }
; 111  :     init_keys(passwd, pkeys, pcrc_32_tab);

  0004d	4c 8b b4 24 80
	00 00 00	 mov	 r14, QWORD PTR pcrc_32_tab$[rsp]
  00055	48 8b d3	 mov	 rdx, rbx
  00058	4d 8b c6	 mov	 r8, r14
  0005b	49 8b cc	 mov	 rcx, r12
  0005e	e8 00 00 00 00	 call	 init_keys
  00063	bd 0a 00 00 00	 mov	 ebp, 10
  00068	48 8d 74 24 20	 lea	 rsi, QWORD PTR header$[rsp]
  0006d	44 8b fd	 mov	 r15d, ebp
$LL4@crypthead:

; 112  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 113  :     {
; 114  :         c = (rand() >> 7) & 0xff;

  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00076	c1 f8 07	 sar	 eax, 7

; 115  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  00079	48 8b cb	 mov	 rcx, rbx
  0007c	44 0f b6 c0	 movzx	 r8d, al
  00080	e8 00 00 00 00	 call	 decrypt_byte
  00085	49 8b d6	 mov	 rdx, r14
  00088	8b f8		 mov	 edi, eax
  0008a	e8 00 00 00 00	 call	 update_keys
  0008f	44 32 c7	 xor	 r8b, dil
  00092	44 88 06	 mov	 BYTE PTR [rsi], r8b
  00095	48 8d 76 01	 lea	 rsi, QWORD PTR [rsi+1]
  00099	49 83 ef 01	 sub	 r15, 1
  0009d	75 d1		 jne	 SHORT $LL4@crypthead

; 116  :     }
; 117  :     /* Encrypt random header (last two bytes is high word of crc) */
; 118  :     init_keys(passwd, pkeys, pcrc_32_tab);

  0009f	4d 8b c6	 mov	 r8, r14
  000a2	48 8b d3	 mov	 rdx, rbx
  000a5	49 8b cc	 mov	 rcx, r12
  000a8	e8 00 00 00 00	 call	 init_keys
  000ad	4c 8d 7c 24 20	 lea	 r15, QWORD PTR header$[rsp]
  000b2	49 8b f5	 mov	 rsi, r13
  000b5	4d 2b fd	 sub	 r15, r13
$LL7@crypthead:

; 119  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 120  :     {
; 121  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	e8 00 00 00 00	 call	 decrypt_byte
  000c0	45 0f b6 04 37	 movzx	 r8d, BYTE PTR [r15+rsi]
  000c5	49 8b d6	 mov	 rdx, r14
  000c8	8b f8		 mov	 edi, eax
  000ca	e8 00 00 00 00	 call	 update_keys
  000cf	44 32 c7	 xor	 r8b, dil
  000d2	44 88 06	 mov	 BYTE PTR [rsi], r8b
  000d5	48 8d 76 01	 lea	 rsi, QWORD PTR [rsi+1]
  000d9	48 83 ed 01	 sub	 rbp, 1
  000dd	75 d9		 jne	 SHORT $LL7@crypthead

; 122  :     }
; 123  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  000df	48 8b cb	 mov	 rcx, rbx
  000e2	e8 00 00 00 00	 call	 decrypt_byte
  000e7	8b ac 24 88 00
	00 00		 mov	 ebp, DWORD PTR crcForCrypting$[rsp]
  000ee	49 8b d6	 mov	 rdx, r14
  000f1	8b fd		 mov	 edi, ebp
  000f3	8b f0		 mov	 esi, eax
  000f5	c1 ef 10	 shr	 edi, 16
  000f8	44 0f b6 c7	 movzx	 r8d, dil
  000fc	e8 00 00 00 00	 call	 update_keys
  00101	40 32 fe	 xor	 dil, sil

; 124  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  00104	48 8b cb	 mov	 rcx, rbx
  00107	41 88 7d 0a	 mov	 BYTE PTR [r13+10], dil
  0010b	e8 00 00 00 00	 call	 decrypt_byte
  00110	c1 ed 18	 shr	 ebp, 24
  00113	49 8b d6	 mov	 rdx, r14
  00116	44 8b c5	 mov	 r8d, ebp
  00119	8b f8		 mov	 edi, eax
  0011b	e8 00 00 00 00	 call	 update_keys

; 125  :     return n;
; 126  : }

  00120	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00125	40 32 ef	 xor	 bpl, dil
  00128	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  0012d	b8 0c 00 00 00	 mov	 eax, 12
  00132	41 88 6d 0b	 mov	 BYTE PTR [r13+11], bpl
  00136	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0013b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013f	41 5f		 pop	 r15
  00141	41 5e		 pop	 r14
  00143	41 5d		 pop	 r13
  00145	41 5c		 pop	 r12
  00147	5f		 pop	 rdi
  00148	c3		 ret	 0
crypthead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT allocate_new_datablock
_TEXT	SEGMENT
allocate_new_datablock PROC				; COMDAT

; 190  : local linkedlist_datablock_internal* allocate_new_datablock(void) {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 191  :     linkedlist_datablock_internal* ldi;
; 192  :     ldi = (linkedlist_datablock_internal*)

  00004	b9 08 10 00 00	 mov	 ecx, 4104		; 00001008H
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 193  :                  ALLOC(sizeof(linkedlist_datablock_internal));
; 194  :     if (ldi!=NULL)

  0000f	48 85 c0	 test	 rax, rax
  00012	74 0d		 je	 SHORT $LN4@allocate_n

; 195  :     {
; 196  :         ldi->next_datablock = NULL ;

  00014	33 c9		 xor	 ecx, ecx

; 197  :         ldi->filled_in_this_block = 0 ;
; 198  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  00016	48 c7 40 08 f0
	0f 00 00	 mov	 QWORD PTR [rax+8], 4080	; 00000ff0H
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@allocate_n:

; 199  :     }
; 200  :     return ldi;
; 201  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
allocate_new_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT free_datablock
_TEXT	SEGMENT
ldi$ = 48
free_datablock PROC					; COMDAT

; 203  : local void free_datablock(linkedlist_datablock_internal* ldi) {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 204  :     while (ldi!=NULL)

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 1d		 je	 SHORT $LN3@free_datab
  00009	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0000e	66 90		 npad	 2
$LL2@free_datab:

; 205  :     {
; 206  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00010	48 8b 19	 mov	 rbx, QWORD PTR [rcx]

; 207  :         TRYFREE(ldi);

  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 208  :         ldi = ldinext;

  00019	48 8b cb	 mov	 rcx, rbx
  0001c	48 85 db	 test	 rbx, rbx
  0001f	75 ef		 jne	 SHORT $LL2@free_datab

; 204  :     while (ldi!=NULL)

  00021	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]
$LN3@free_datab:

; 209  :     }
; 210  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
free_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT init_linkedlist
_TEXT	SEGMENT
ll$ = 8
init_linkedlist PROC					; COMDAT

; 213  :     ll->first_block = ll->last_block = NULL;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00006	48 89 01	 mov	 QWORD PTR [rcx], rax

; 214  : }

  00009	c3		 ret	 0
init_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT free_linkedlist
_TEXT	SEGMENT
ll$ = 48
free_linkedlist PROC					; COMDAT

; 216  : local void free_linkedlist(linkedlist_data* ll) {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 217  :     free_datablock(ll->first_block);

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	e8 00 00 00 00	 call	 free_datablock

; 218  :     ll->first_block = ll->last_block = NULL;

  00011	33 c0		 xor	 eax, eax
  00013	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
  00017	48 89 03	 mov	 QWORD PTR [rbx], rax

; 219  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5b		 pop	 rbx
  0001f	c3		 ret	 0
free_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT add_data_in_datablock
_TEXT	SEGMENT
ll$ = 48
buf$ = 56
len$ = 64
add_data_in_datablock PROC				; COMDAT

; 222  : local int add_data_in_datablock(linkedlist_data* ll, const void* buf, uLong len) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	41 8b f8	 mov	 edi, r8d
  00018	48 8b f2	 mov	 rsi, rdx
  0001b	4c 8b f1	 mov	 r14, rcx

; 223  :     linkedlist_datablock_internal* ldi;
; 224  :     const unsigned char* from_copy;
; 225  : 
; 226  :     if (ll==NULL)

  0001e	48 85 c9	 test	 rcx, rcx
  00021	0f 84 92 00 00
	00		 je	 $LN17@add_data_i

; 227  :         return ZIP_INTERNALERROR;
; 228  : 
; 229  :     if (ll->last_block == NULL)

  00027	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]
  0002b	48 85 db	 test	 rbx, rbx
  0002e	75 14		 jne	 SHORT $LN9@add_data_i

; 230  :     {
; 231  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00030	e8 00 00 00 00	 call	 allocate_new_datablock
  00035	49 89 46 08	 mov	 QWORD PTR [r14+8], rax
  00039	48 8b d8	 mov	 rbx, rax
  0003c	49 89 06	 mov	 QWORD PTR [r14], rax

; 232  :         if (ll->first_block == NULL)

  0003f	48 85 c0	 test	 rax, rax
  00042	74 75		 je	 SHORT $LN17@add_data_i
$LN9@add_data_i:

; 233  :             return ZIP_INTERNALERROR;
; 234  :     }
; 235  : 
; 236  :     ldi = ll->last_block;
; 237  :     from_copy = (const unsigned char*)buf;
; 238  : 
; 239  :     while (len>0)

  00044	85 ff		 test	 edi, edi
  00046	74 6d		 je	 SHORT $LN3@add_data_i
$LL2@add_data_i:

; 240  :     {
; 241  :         uInt copy_this;
; 242  :         uInt i;
; 243  :         unsigned char* to_copy;
; 244  : 
; 245  :         if (ldi->avail_in_this_block==0)

  00048	83 7b 08 00	 cmp	 DWORD PTR [rbx+8], 0
  0004c	75 14		 jne	 SHORT $LN10@add_data_i

; 246  :         {
; 247  :             ldi->next_datablock = allocate_new_datablock();

  0004e	e8 00 00 00 00	 call	 allocate_new_datablock
  00053	48 89 03	 mov	 QWORD PTR [rbx], rax

; 248  :             if (ldi->next_datablock == NULL)

  00056	48 85 c0	 test	 rax, rax
  00059	74 5e		 je	 SHORT $LN17@add_data_i

; 250  :             ldi = ldi->next_datablock ;

  0005b	48 8b d8	 mov	 rbx, rax

; 251  :             ll->last_block = ldi;

  0005e	49 89 46 08	 mov	 QWORD PTR [r14+8], rax
$LN10@add_data_i:

; 252  :         }
; 253  : 
; 254  :         if (ldi->avail_in_this_block < len)

  00062	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]

; 255  :             copy_this = (uInt)ldi->avail_in_this_block;
; 256  :         else
; 257  :             copy_this = (uInt)len;
; 258  : 
; 259  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  00066	44 3b c7	 cmp	 r8d, edi
  00069	8b 43 0c	 mov	 eax, DWORD PTR [rbx+12]
  0006c	44 0f 43 c7	 cmovae	 r8d, edi
  00070	48 83 c0 14	 add	 rax, 20
  00074	48 03 c3	 add	 rax, rbx
  00077	33 d2		 xor	 edx, edx

; 260  : 
; 261  :         for (i=0;i<copy_this;i++)

  00079	45 85 c0	 test	 r8d, r8d
  0007c	74 24		 je	 SHORT $LN5@add_data_i
  0007e	4c 8b ce	 mov	 r9, rsi
  00081	4c 2b c8	 sub	 r9, rax
  00084	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL6@add_data_i:

; 262  :             *(to_copy+i)=*(from_copy+i);

  00090	41 0f b6 0c 01	 movzx	 ecx, BYTE PTR [r9+rax]
  00095	ff c2		 inc	 edx
  00097	88 08		 mov	 BYTE PTR [rax], cl
  00099	48 8d 40 01	 lea	 rax, QWORD PTR [rax+1]
  0009d	41 3b d0	 cmp	 edx, r8d
  000a0	72 ee		 jb	 SHORT $LL6@add_data_i
$LN5@add_data_i:

; 263  : 
; 264  :         ldi->filled_in_this_block += copy_this;

  000a2	44 01 43 0c	 add	 DWORD PTR [rbx+12], r8d

; 265  :         ldi->avail_in_this_block -= copy_this;

  000a6	44 29 43 08	 sub	 DWORD PTR [rbx+8], r8d

; 266  :         from_copy += copy_this ;

  000aa	41 8b c0	 mov	 eax, r8d
  000ad	48 03 f0	 add	 rsi, rax

; 267  :         len -= copy_this;

  000b0	41 2b f8	 sub	 edi, r8d
  000b3	75 93		 jne	 SHORT $LL2@add_data_i
$LN3@add_data_i:

; 268  :     }
; 269  :     return ZIP_OK;

  000b5	33 c0		 xor	 eax, eax
  000b7	eb 05		 jmp	 SHORT $LN1@add_data_i
$LN17@add_data_i:

; 249  :                 return ZIP_INTERNALERROR;

  000b9	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
$LN1@add_data_i:

; 270  : }

  000be	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c3	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c8	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	41 5e		 pop	 r14
  000d3	c3		 ret	 0
add_data_in_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_putValue
_TEXT	SEGMENT
buf$ = 48
pzlib_filefunc_def$ = 48
filestream$ = 56
x$ = 64
nbByte$ = 72
zip64local_putValue PROC				; COMDAT

; 282  : local int zip64local_putValue(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T x, int nbByte) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 63 d9	 movsxd	 rbx, r9d
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 283  :     unsigned char buf[8];
; 284  :     int n;
; 285  :     for (n = 0; n < nbByte; n++)

  00018	45 85 c9	 test	 r9d, r9d
  0001b	7e 14		 jle	 SHORT $LN3@zip64local
  0001d	33 c0		 xor	 eax, eax
  0001f	90		 npad	 1
$LL16@zip64local:

; 286  :     {
; 287  :         buf[n] = (unsigned char)(x & 0xff);

  00020	44 88 44 04 30	 mov	 BYTE PTR buf$[rsp+rax], r8b
  00025	48 ff c0	 inc	 rax

; 288  :         x >>= 8;

  00028	49 c1 e8 08	 shr	 r8, 8
  0002c	48 3b c3	 cmp	 rax, rbx
  0002f	7c ef		 jl	 SHORT $LL16@zip64local
$LN3@zip64local:

; 289  :     }
; 290  :     if (x != 0)

  00031	4d 85 c0	 test	 r8, r8
  00034	74 14		 je	 SHORT $LN6@zip64local

; 291  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 292  :       for (n = 0; n < nbByte; n++)

  00036	45 85 c9	 test	 r9d, r9d
  00039	7e 0f		 jle	 SHORT $LN6@zip64local
  0003b	4c 8b c3	 mov	 r8, rbx
  0003e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00043	b2 ff		 mov	 dl, 255			; 000000ffH
  00045	e8 00 00 00 00	 call	 memset
$LN6@zip64local:

; 293  :         {
; 294  :           buf[n] = 0xff;
; 295  :         }
; 296  :       }
; 297  : 
; 298  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,(uLong)nbByte)!=(uLong)nbByte)

  0004a	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  0004e	4c 8d 44 24 30	 lea	 r8, QWORD PTR buf$[rsp]
  00053	44 8b cb	 mov	 r9d, ebx
  00056	48 8b d6	 mov	 rdx, rsi
  00059	ff 57 10	 call	 QWORD PTR [rdi+16]

; 299  :         return ZIP_ERRNO;
; 300  :     else
; 301  :         return ZIP_OK;
; 302  : }

  0005c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00061	2b c3		 sub	 eax, ebx
  00063	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00068	f7 d8		 neg	 eax
  0006a	1b c0		 sbb	 eax, eax
  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
zip64local_putValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_putValue_inmemory
_TEXT	SEGMENT
dest$ = 8
x$ = 16
nbByte$ = 24
zip64local_putValue_inmemory PROC			; COMDAT

; 304  : local void zip64local_putValue_inmemory (void* dest, ZPOS64_T x, int nbByte) {

  00000	4d 63 c8	 movsxd	 r9, r8d

; 305  :     unsigned char* buf=(unsigned char*)dest;
; 306  :     int n;
; 307  :     for (n = 0; n < nbByte; n++) {

  00003	4d 8b c1	 mov	 r8, r9
  00006	45 85 c9	 test	 r9d, r9d
  00009	7e 14		 jle	 SHORT $LN3@zip64local
  0000b	33 c0		 xor	 eax, eax
  0000d	0f 1f 00	 npad	 3
$LL14@zip64local:

; 308  :         buf[n] = (unsigned char)(x & 0xff);

  00010	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  00013	48 ff c0	 inc	 rax

; 309  :         x >>= 8;

  00016	48 c1 ea 08	 shr	 rdx, 8
  0001a	49 3b c0	 cmp	 rax, r8
  0001d	7c f1		 jl	 SHORT $LL14@zip64local
$LN3@zip64local:

; 310  :     }
; 311  : 
; 312  :     if (x != 0)

  0001f	48 85 d2	 test	 rdx, rdx
  00022	74 0c		 je	 SHORT $LN6@zip64local

; 313  :     {     /* data overflow - hack for ZIP64 */
; 314  :        for (n = 0; n < nbByte; n++)

  00024	45 85 c9	 test	 r9d, r9d
  00027	7e 07		 jle	 SHORT $LN6@zip64local
  00029	b2 ff		 mov	 dl, 255			; 000000ffH
  0002b	e9 00 00 00 00	 jmp	 memset
$LN6@zip64local:

; 315  :        {
; 316  :           buf[n] = 0xff;
; 317  :        }
; 318  :     }
; 319  : }

  00030	c3		 ret	 0
zip64local_putValue_inmemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_TmzDateToDosDate
_TEXT	SEGMENT
ptm$ = 8
zip64local_TmzDateToDosDate PROC			; COMDAT

; 325  :     uLong year = (uLong)ptm->tm_year;

  00000	8b 51 14	 mov	 edx, DWORD PTR [rcx+20]
  00003	4c 8b c1	 mov	 r8, rcx

; 326  :     if (year>=1980)

  00006	81 fa bc 07 00
	00		 cmp	 edx, 1980		; 000007bcH
  0000c	72 08		 jb	 SHORT $LN2@zip64local

; 327  :         year-=1980;

  0000e	81 c2 44 f8 ff
	ff		 add	 edx, -1980		; fffff844H
  00014	eb 08		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:

; 328  :     else if (year>=80)

  00016	83 fa 50	 cmp	 edx, 80			; 00000050H
  00019	72 03		 jb	 SHORT $LN4@zip64local

; 329  :         year-=80;

  0001b	83 c2 b0	 add	 edx, -80		; ffffffb0H
$LN4@zip64local:

; 330  :     return

  0001e	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  00021	c1 e0 06	 shl	 eax, 6
  00024	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00027	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00029	c1 e2 04	 shl	 edx, 4
  0002c	d1 e9		 shr	 ecx, 1
  0002e	c1 e0 05	 shl	 eax, 5
  00031	03 c1		 add	 eax, ecx
  00033	41 8b 48 10	 mov	 ecx, DWORD PTR [r8+16]
  00037	ff c1		 inc	 ecx
  00039	03 d1		 add	 edx, ecx
  0003b	c1 e2 05	 shl	 edx, 5
  0003e	41 03 50 0c	 add	 edx, DWORD PTR [r8+12]
  00042	c1 e2 10	 shl	 edx, 16
  00045	0b c2		 or	 eax, edx

; 331  :       (uLong) (((uLong)(ptm->tm_mday) + (32 * (uLong)(ptm->tm_mon+1)) + (512 * year)) << 16) |
; 332  :         (((uLong)ptm->tm_sec/2) + (32 * (uLong)ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));
; 333  : }

  00047	c3		 ret	 0
zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_getByte
_TEXT	SEGMENT
c$ = 48
pzlib_filefunc_def$ = 48
filestream$ = 56
pi$ = 64
zip64local_getByte PROC					; COMDAT

; 338  : local int zip64local_getByte(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int* pi) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	49 8b f8	 mov	 rdi, r8

; 339  :     unsigned char c;
; 340  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00015	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00019	4c 8d 44 24 30	 lea	 r8, QWORD PTR c$[rsp]
  0001e	41 b9 01 00 00
	00		 mov	 r9d, 1
  00024	48 8b f2	 mov	 rsi, rdx
  00027	ff 53 08	 call	 QWORD PTR [rbx+8]

; 341  :     if (err==1)

  0002a	83 f8 01	 cmp	 eax, 1
  0002d	75 19		 jne	 SHORT $LN2@zip64local

; 342  :     {
; 343  :         *pi = (int)c;

  0002f	0f b6 44 24 30	 movzx	 eax, BYTE PTR c$[rsp]
  00034	89 07		 mov	 DWORD PTR [rdi], eax

; 344  :         return ZIP_OK;

  00036	33 c0		 xor	 eax, eax

; 349  :             return ZIP_ERRNO;
; 350  :         else
; 351  :             return ZIP_EOF;
; 352  :     }
; 353  : }

  00038	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0003d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
$LN2@zip64local:

; 345  :     }
; 346  :     else
; 347  :     {
; 348  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00048	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0004c	48 8b d6	 mov	 rdx, rsi
  0004f	ff 53 30	 call	 QWORD PTR [rbx+48]

; 349  :             return ZIP_ERRNO;
; 350  :         else
; 351  :             return ZIP_EOF;
; 352  :     }
; 353  : }

  00052	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00057	f7 d8		 neg	 eax
  00059	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005e	1b c0		 sbb	 eax, eax
  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
zip64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_getShort
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getShort PROC				; COMDAT

; 359  : local int zip64local_getShort(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b d8	 mov	 rbx, r8

; 360  :     uLong x ;
; 361  :     int i = 0;

  00017	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 362  :     int err;
; 363  : 
; 364  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0001f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00024	48 8b fa	 mov	 rdi, rdx
  00027	48 8b f1	 mov	 rsi, rcx
  0002a	e8 00 00 00 00	 call	 zip64local_getByte

; 365  :     x = (uLong)i;

  0002f	8b 6c 24 48	 mov	 ebp, DWORD PTR i$[rsp]
  00033	44 8b c8	 mov	 r9d, eax

; 366  : 
; 367  :     if (err==ZIP_OK)

  00036	85 c0		 test	 eax, eax
  00038	75 24		 jne	 SHORT $LN3@zip64local

; 368  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003a	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0003f	48 8b d7	 mov	 rdx, rdi
  00042	48 8b ce	 mov	 rcx, rsi
  00045	e8 00 00 00 00	 call	 zip64local_getByte
  0004a	44 8b c8	 mov	 r9d, eax

; 370  : 
; 371  :     if (err==ZIP_OK)

  0004d	85 c0		 test	 eax, eax
  0004f	75 0d		 jne	 SHORT $LN3@zip64local

; 369  :     x += ((uLong)i)<<8;

  00051	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00055	c1 e0 08	 shl	 eax, 8
  00058	03 c5		 add	 eax, ebp

; 372  :         *pX = x;
; 373  :     else
; 374  :         *pX = 0;
; 375  :     return err;

  0005a	89 03		 mov	 DWORD PTR [rbx], eax
  0005c	eb 06		 jmp	 SHORT $LN8@zip64local
$LN3@zip64local:
  0005e	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0
$LN8@zip64local:

; 376  : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	41 8b c1	 mov	 eax, r9d
  0006c	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00071	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5f		 pop	 rdi
  0007b	c3		 ret	 0
zip64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_getLong
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getLong PROC					; COMDAT

; 378  : local int zip64local_getLong(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	4d 8b f0	 mov	 r14, r8

; 379  :     uLong x ;
; 380  :     int i = 0;

  00018	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 381  :     int err;
; 382  : 
; 383  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00020	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00025	48 8b fa	 mov	 rdi, rdx
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	e8 00 00 00 00	 call	 zip64local_getByte

; 384  :     x = (uLong)i;

  00030	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00035	41 8b da	 mov	 ebx, r10d
  00038	44 8b c8	 mov	 r9d, eax

; 385  : 
; 386  :     if (err==ZIP_OK)

  0003b	85 c0		 test	 eax, eax
  0003d	75 18		 jne	 SHORT $LN2@zip64local

; 387  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00044	48 8b d7	 mov	 rdx, rdi
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	e8 00 00 00 00	 call	 zip64local_getByte
  0004f	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00054	44 8b c8	 mov	 r9d, eax
$LN2@zip64local:

; 388  :     x += ((uLong)i)<<8;

  00057	41 8b c2	 mov	 eax, r10d
  0005a	c1 e0 08	 shl	 eax, 8
  0005d	03 d8		 add	 ebx, eax

; 389  : 
; 390  :     if (err==ZIP_OK)

  0005f	45 85 c9	 test	 r9d, r9d
  00062	75 18		 jne	 SHORT $LN3@zip64local

; 391  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00064	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00069	48 8b d7	 mov	 rdx, rdi
  0006c	48 8b ce	 mov	 rcx, rsi
  0006f	e8 00 00 00 00	 call	 zip64local_getByte
  00074	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00079	44 8b c8	 mov	 r9d, eax
$LN3@zip64local:

; 392  :     x += ((uLong)i)<<16;

  0007c	41 c1 e2 10	 shl	 r10d, 16
  00080	41 03 da	 add	 ebx, r10d

; 393  : 
; 394  :     if (err==ZIP_OK)

  00083	45 85 c9	 test	 r9d, r9d
  00086	75 25		 jne	 SHORT $LN5@zip64local

; 395  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00088	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0008d	48 8b d7	 mov	 rdx, rdi
  00090	48 8b ce	 mov	 rcx, rsi
  00093	e8 00 00 00 00	 call	 zip64local_getByte
  00098	44 8b c8	 mov	 r9d, eax

; 397  : 
; 398  :     if (err==ZIP_OK)

  0009b	85 c0		 test	 eax, eax
  0009d	75 0e		 jne	 SHORT $LN5@zip64local

; 396  :     x += ((uLong)i)<<24;

  0009f	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  000a3	c1 e0 18	 shl	 eax, 24
  000a6	03 c3		 add	 eax, ebx

; 399  :         *pX = x;
; 400  :     else
; 401  :         *pX = 0;
; 402  :     return err;

  000a8	41 89 06	 mov	 DWORD PTR [r14], eax
  000ab	eb 07		 jmp	 SHORT $LN12@zip64local
$LN5@zip64local:
  000ad	41 c7 06 00 00
	00 00		 mov	 DWORD PTR [r14], 0
$LN12@zip64local:

; 403  : }

  000b4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b9	41 8b c1	 mov	 eax, r9d
  000bc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c1	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ca	41 5e		 pop	 r14
  000cc	c3		 ret	 0
zip64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_getLong64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getLong64 PROC				; COMDAT

; 406  : local int zip64local_getLong64(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	4d 8b f0	 mov	 r14, r8

; 407  :   ZPOS64_T x;
; 408  :   int i = 0;

  00018	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 409  :   int err;
; 410  : 
; 411  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00020	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00025	48 8b fa	 mov	 rdi, rdx
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	e8 00 00 00 00	 call	 zip64local_getByte

; 412  :   x = (ZPOS64_T)i;

  00030	4c 63 54 24 48	 movsxd	 r10, DWORD PTR i$[rsp]
  00035	44 8b c8	 mov	 r9d, eax
  00038	49 8b da	 mov	 rbx, r10

; 413  : 
; 414  :   if (err==ZIP_OK)

  0003b	85 c0		 test	 eax, eax
  0003d	75 18		 jne	 SHORT $LN2@zip64local

; 415  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00044	48 8b d7	 mov	 rdx, rdi
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	e8 00 00 00 00	 call	 zip64local_getByte
  0004f	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00054	44 8b c8	 mov	 r9d, eax
$LN2@zip64local:

; 416  :   x += ((ZPOS64_T)i)<<8;

  00057	49 63 c2	 movsxd	 rax, r10d
  0005a	48 c1 e0 08	 shl	 rax, 8
  0005e	48 03 d8	 add	 rbx, rax

; 417  : 
; 418  :   if (err==ZIP_OK)

  00061	45 85 c9	 test	 r9d, r9d
  00064	75 18		 jne	 SHORT $LN3@zip64local

; 419  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00066	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0006b	48 8b d7	 mov	 rdx, rdi
  0006e	48 8b ce	 mov	 rcx, rsi
  00071	e8 00 00 00 00	 call	 zip64local_getByte
  00076	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  0007b	44 8b c8	 mov	 r9d, eax
$LN3@zip64local:

; 420  :   x += ((ZPOS64_T)i)<<16;

  0007e	49 63 c2	 movsxd	 rax, r10d
  00081	48 c1 e0 10	 shl	 rax, 16
  00085	48 03 d8	 add	 rbx, rax

; 421  : 
; 422  :   if (err==ZIP_OK)

  00088	45 85 c9	 test	 r9d, r9d
  0008b	75 18		 jne	 SHORT $LN4@zip64local

; 423  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0008d	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00092	48 8b d7	 mov	 rdx, rdi
  00095	48 8b ce	 mov	 rcx, rsi
  00098	e8 00 00 00 00	 call	 zip64local_getByte
  0009d	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000a2	44 8b c8	 mov	 r9d, eax
$LN4@zip64local:

; 424  :   x += ((ZPOS64_T)i)<<24;

  000a5	49 63 c2	 movsxd	 rax, r10d
  000a8	48 c1 e0 18	 shl	 rax, 24
  000ac	48 03 d8	 add	 rbx, rax

; 425  : 
; 426  :   if (err==ZIP_OK)

  000af	45 85 c9	 test	 r9d, r9d
  000b2	75 18		 jne	 SHORT $LN5@zip64local

; 427  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000b4	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  000b9	48 8b d7	 mov	 rdx, rdi
  000bc	48 8b ce	 mov	 rcx, rsi
  000bf	e8 00 00 00 00	 call	 zip64local_getByte
  000c4	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000c9	44 8b c8	 mov	 r9d, eax
$LN5@zip64local:

; 428  :   x += ((ZPOS64_T)i)<<32;

  000cc	49 63 c2	 movsxd	 rax, r10d
  000cf	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  000d3	48 03 d8	 add	 rbx, rax

; 429  : 
; 430  :   if (err==ZIP_OK)

  000d6	45 85 c9	 test	 r9d, r9d
  000d9	75 18		 jne	 SHORT $LN6@zip64local

; 431  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000db	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  000e0	48 8b d7	 mov	 rdx, rdi
  000e3	48 8b ce	 mov	 rcx, rsi
  000e6	e8 00 00 00 00	 call	 zip64local_getByte
  000eb	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000f0	44 8b c8	 mov	 r9d, eax
$LN6@zip64local:

; 432  :   x += ((ZPOS64_T)i)<<40;

  000f3	49 63 c2	 movsxd	 rax, r10d
  000f6	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  000fa	48 03 d8	 add	 rbx, rax

; 433  : 
; 434  :   if (err==ZIP_OK)

  000fd	45 85 c9	 test	 r9d, r9d
  00100	75 18		 jne	 SHORT $LN7@zip64local

; 435  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00102	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00107	48 8b d7	 mov	 rdx, rdi
  0010a	48 8b ce	 mov	 rcx, rsi
  0010d	e8 00 00 00 00	 call	 zip64local_getByte
  00112	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00117	44 8b c8	 mov	 r9d, eax
$LN7@zip64local:

; 436  :   x += ((ZPOS64_T)i)<<48;

  0011a	49 63 c2	 movsxd	 rax, r10d
  0011d	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00121	48 03 d8	 add	 rbx, rax

; 437  : 
; 438  :   if (err==ZIP_OK)

  00124	45 85 c9	 test	 r9d, r9d
  00127	75 28		 jne	 SHORT $LN9@zip64local

; 439  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00129	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0012e	48 8b d7	 mov	 rdx, rdi
  00131	48 8b ce	 mov	 rcx, rsi
  00134	e8 00 00 00 00	 call	 zip64local_getByte
  00139	44 8b c8	 mov	 r9d, eax

; 441  : 
; 442  :   if (err==ZIP_OK)

  0013c	85 c0		 test	 eax, eax
  0013e	75 11		 jne	 SHORT $LN9@zip64local

; 440  :   x += ((ZPOS64_T)i)<<56;

  00140	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  00145	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00149	48 03 c3	 add	 rax, rbx

; 443  :     *pX = x;
; 444  :   else
; 445  :     *pX = 0;
; 446  : 
; 447  :   return err;

  0014c	49 89 06	 mov	 QWORD PTR [r14], rax
  0014f	eb 07		 jmp	 SHORT $LN20@zip64local
$LN9@zip64local:
  00151	49 c7 06 00 00
	00 00		 mov	 QWORD PTR [r14], 0
$LN20@zip64local:

; 448  : }

  00158	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015d	41 8b c1	 mov	 eax, r9d
  00160	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00165	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0016a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016e	41 5e		 pop	 r14
  00170	c3		 ret	 0
zip64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_SearchCentralDir
_TEXT	SEGMENT
pzlib_filefunc_def$ = 80
filestream$ = 88
uSizeFile$1$ = 96
zip64local_SearchCentralDir PROC			; COMDAT

; 457  : local ZPOS64_T zip64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream) {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 458  :   unsigned char* buf;
; 459  :   ZPOS64_T uSizeFile;
; 460  :   ZPOS64_T uBackRead;
; 461  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 462  :   ZPOS64_T uPosFound=0;

  00010	33 ff		 xor	 edi, edi

; 463  : 
; 464  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00012	45 33 c0	 xor	 r8d, r8d
  00015	4c 8b ea	 mov	 r13, rdx
  00018	4c 8b f1	 mov	 r14, rcx
  0001b	bd ff ff 00 00	 mov	 ebp, 65535		; 0000ffffH
  00020	44 8d 4f 02	 lea	 r9d, QWORD PTR [rdi+2]
  00024	e8 00 00 00 00	 call	 call_zseek64
  00029	85 c0		 test	 eax, eax
  0002b	0f 85 25 01 00
	00		 jne	 $LN32@zip64local

; 465  :     return 0;
; 466  : 
; 467  : 
; 468  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00031	49 8b d5	 mov	 rdx, r13
  00034	49 8b ce	 mov	 rcx, r14
  00037	e8 00 00 00 00	 call	 call_ztell64

; 469  : 
; 470  :   if (uMaxBack>uSizeFile)

  0003c	48 3b c5	 cmp	 rax, rbp
  0003f	48 89 44 24 60	 mov	 QWORD PTR uSizeFile$1$[rsp], rax

; 471  :     uMaxBack = uSizeFile;
; 472  : 
; 473  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00044	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00049	48 8b d8	 mov	 rbx, rax
  0004c	48 0f 42 e8	 cmovb	 rbp, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00056	48 8b f0	 mov	 rsi, rax

; 474  :   if (buf==NULL)

  00059	48 85 c0	 test	 rax, rax
  0005c	0f 84 f4 00 00
	00		 je	 $LN32@zip64local
  00062	4c 89 7c 24 58	 mov	 QWORD PTR [rsp+88], r15

; 475  :     return 0;
; 476  : 
; 477  :   uBackRead = 4;

  00067	41 bf 04 00 00
	00		 mov	 r15d, 4

; 478  :   while (uBackRead<uMaxBack)

  0006d	49 3b ef	 cmp	 rbp, r15
  00070	0f 86 be 00 00
	00		 jbe	 $LN35@zip64local
  00076	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  0007b	0f 1f 44 00 00	 npad	 5
$LL2@zip64local:

; 479  :   {
; 480  :     uLong uReadSize;
; 481  :     ZPOS64_T uReadPos ;
; 482  :     int i;
; 483  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00080	49 8d 8f 00 04
	00 00		 lea	 rcx, QWORD PTR [r15+1024]

; 484  :       uBackRead = uMaxBack;
; 485  :     else
; 486  :       uBackRead+=BUFREADCOMMENT;
; 487  :     uReadPos = uSizeFile-uBackRead ;

  00087	4c 8b e3	 mov	 r12, rbx
  0008a	48 3b cd	 cmp	 rcx, rbp

; 488  : 
; 489  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0008d	b8 04 04 00 00	 mov	 eax, 1028		; 00000404H
  00092	4c 8b fd	 mov	 r15, rbp

; 490  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 491  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00095	49 8b d5	 mov	 rdx, r13
  00098	4c 0f 46 f9	 cmovbe	 r15, rcx
  0009c	49 8b ce	 mov	 rcx, r14
  0009f	4d 2b e7	 sub	 r12, r15
  000a2	41 2b dc	 sub	 ebx, r12d
  000a5	4d 8b c4	 mov	 r8, r12
  000a8	4c 3b f8	 cmp	 r15, rax
  000ab	0f 47 d8	 cmova	 ebx, eax
  000ae	45 33 c9	 xor	 r9d, r9d
  000b1	e8 00 00 00 00	 call	 call_zseek64
  000b6	85 c0		 test	 eax, eax
  000b8	75 75		 jne	 SHORT $LN46@zip64local

; 492  :       break;
; 493  : 
; 494  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000ba	49 8b 4e 38	 mov	 rcx, QWORD PTR [r14+56]
  000be	44 8b cb	 mov	 r9d, ebx
  000c1	4c 8b c6	 mov	 r8, rsi
  000c4	49 8b d5	 mov	 rdx, r13
  000c7	41 ff 56 08	 call	 QWORD PTR [r14+8]
  000cb	3b c3		 cmp	 eax, ebx
  000cd	75 60		 jne	 SHORT $LN46@zip64local

; 495  :       break;
; 496  : 
; 497  :     for (i=(int)uReadSize-3; (i--)>0;)

  000cf	8d 53 fd	 lea	 edx, DWORD PTR [rbx-3]
  000d2	48 63 c2	 movsxd	 rax, edx
  000d5	85 d2		 test	 edx, edx
  000d7	7e 48		 jle	 SHORT $LN34@zip64local
  000d9	48 83 c0 03	 add	 rax, 3
  000dd	49 c7 c0 fd ff
	ff ff		 mov	 r8, -3
  000e4	48 03 c6	 add	 rax, rsi
  000e7	4c 2b c6	 sub	 r8, rsi
  000ea	66 0f 1f 44 00
	00		 npad	 6
$LL4@zip64local:
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff ca		 dec	 edx
  000f5	48 ff c8	 dec	 rax

; 498  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 499  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  000f8	80 78 fd 50	 cmp	 BYTE PTR [rax-3], 80	; 00000050H
  000fc	75 11		 jne	 SHORT $LN14@zip64local
  000fe	80 79 fd 4b	 cmp	 BYTE PTR [rcx-3], 75	; 0000004bH
  00102	75 0b		 jne	 SHORT $LN14@zip64local
  00104	80 78 ff 05	 cmp	 BYTE PTR [rax-1], 5
  00108	75 05		 jne	 SHORT $LN14@zip64local
  0010a	80 38 06	 cmp	 BYTE PTR [rax], 6
  0010d	74 0b		 je	 SHORT $LN22@zip64local
$LN14@zip64local:

; 495  :       break;
; 496  : 
; 497  :     for (i=(int)uReadSize-3; (i--)>0;)

  0010f	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
  00113	48 85 c9	 test	 rcx, rcx
  00116	7f d8		 jg	 SHORT $LL4@zip64local
  00118	eb 07		 jmp	 SHORT $LN34@zip64local
$LN22@zip64local:

; 500  :       {
; 501  :         uPosFound = uReadPos+(unsigned)i;

  0011a	8b fa		 mov	 edi, edx
  0011c	49 03 fc	 add	 rdi, r12

; 502  :         break;
; 503  :       }
; 504  : 
; 505  :     if (uPosFound!=0)

  0011f	75 0e		 jne	 SHORT $LN46@zip64local
$LN34@zip64local:

; 478  :   while (uBackRead<uMaxBack)

  00121	48 8b 5c 24 60	 mov	 rbx, QWORD PTR uSizeFile$1$[rsp]
  00126	4c 3b fd	 cmp	 r15, rbp
  00129	0f 82 51 ff ff
	ff		 jb	 $LL2@zip64local
$LN46@zip64local:
  0012f	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
$LN35@zip64local:

; 506  :       break;
; 507  :   }
; 508  :   TRYFREE(buf);

  00134	48 8b ce	 mov	 rcx, rsi
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 509  :   return uPosFound;

  0013d	4c 8b 7c 24 58	 mov	 r15, QWORD PTR [rsp+88]
  00142	48 8b c7	 mov	 rax, rdi

; 510  : }

  00145	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0014a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0014e	41 5e		 pop	 r14
  00150	41 5d		 pop	 r13
  00152	5f		 pop	 rdi
  00153	5e		 pop	 rsi
  00154	5d		 pop	 rbp
  00155	c3		 ret	 0
$LN32@zip64local:
  00156	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0015b	33 c0		 xor	 eax, eax
  0015d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00161	41 5e		 pop	 r14
  00163	41 5d		 pop	 r13
  00165	5f		 pop	 rdi
  00166	5e		 pop	 rsi
  00167	5d		 pop	 rbp
  00168	c3		 ret	 0
zip64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_SearchCentralDir64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 96
filestream$ = 104
uSizeFile$1$ = 112
uL$ = 112
relativeOffset$ = 120
zip64local_SearchCentralDir64 PROC			; COMDAT

; 516  : local ZPOS64_T zip64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream) {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 517  :   unsigned char* buf;
; 518  :   ZPOS64_T uSizeFile;
; 519  :   ZPOS64_T uBackRead;
; 520  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 521  :   ZPOS64_T uPosFound=0;

  0000d	33 ed		 xor	 ebp, ebp

; 522  :   uLong uL;
; 523  :   ZPOS64_T relativeOffset;
; 524  : 
; 525  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0000f	45 33 c0	 xor	 r8d, r8d
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b f9	 mov	 rdi, rcx
  00018	41 bf ff ff 00
	00		 mov	 r15d, 65535		; 0000ffffH
  0001e	44 8d 4d 02	 lea	 r9d, QWORD PTR [rbp+2]
  00022	e8 00 00 00 00	 call	 call_zseek64
  00027	85 c0		 test	 eax, eax
  00029	0f 85 de 01 00
	00		 jne	 $LN43@zip64local

; 526  :     return 0;
; 527  : 
; 528  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  0002f	48 8b d6	 mov	 rdx, rsi
  00032	48 8b cf	 mov	 rcx, rdi
  00035	e8 00 00 00 00	 call	 call_ztell64

; 529  : 
; 530  :   if (uMaxBack>uSizeFile)

  0003a	49 3b c7	 cmp	 rax, r15
  0003d	48 89 44 24 70	 mov	 QWORD PTR uSizeFile$1$[rsp], rax

; 531  :     uMaxBack = uSizeFile;
; 532  : 
; 533  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00042	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00047	48 8b d8	 mov	 rbx, rax
  0004a	4c 0f 42 f8	 cmovb	 r15, rax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00054	4c 8b f0	 mov	 r14, rax

; 534  :   if (buf==NULL)

  00057	48 85 c0	 test	 rax, rax
  0005a	0f 84 ad 01 00
	00		 je	 $LN43@zip64local
  00060	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13

; 535  :     return 0;
; 536  : 
; 537  :   uBackRead = 4;

  00065	41 bd 04 00 00
	00		 mov	 r13d, 4

; 538  :   while (uBackRead<uMaxBack)

  0006b	4d 3b fd	 cmp	 r15, r13
  0006e	0f 86 c0 00 00
	00		 jbe	 $LN57@zip64local
  00074	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@zip64local:

; 539  :   {
; 540  :     uLong uReadSize;
; 541  :     ZPOS64_T uReadPos;
; 542  :     int i;
; 543  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00080	49 8d 8d 00 04
	00 00		 lea	 rcx, QWORD PTR [r13+1024]

; 544  :       uBackRead = uMaxBack;
; 545  :     else
; 546  :       uBackRead+=BUFREADCOMMENT;
; 547  :     uReadPos = uSizeFile-uBackRead ;

  00087	4c 8b e3	 mov	 r12, rbx
  0008a	49 3b cf	 cmp	 rcx, r15

; 548  : 
; 549  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0008d	b8 04 04 00 00	 mov	 eax, 1028		; 00000404H
  00092	4d 8b ef	 mov	 r13, r15

; 550  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 551  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00095	48 8b d6	 mov	 rdx, rsi
  00098	4c 0f 46 e9	 cmovbe	 r13, rcx
  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	4d 2b e5	 sub	 r12, r13
  000a2	41 2b dc	 sub	 ebx, r12d
  000a5	4d 8b c4	 mov	 r8, r12
  000a8	4c 3b e8	 cmp	 r13, rax
  000ab	0f 47 d8	 cmova	 ebx, eax
  000ae	45 33 c9	 xor	 r9d, r9d
  000b1	e8 00 00 00 00	 call	 call_zseek64
  000b6	85 c0		 test	 eax, eax
  000b8	75 75		 jne	 SHORT $LN79@zip64local

; 552  :       break;
; 553  : 
; 554  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000ba	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000be	44 8b cb	 mov	 r9d, ebx
  000c1	4d 8b c6	 mov	 r8, r14
  000c4	48 8b d6	 mov	 rdx, rsi
  000c7	ff 57 08	 call	 QWORD PTR [rdi+8]
  000ca	3b c3		 cmp	 eax, ebx
  000cc	75 61		 jne	 SHORT $LN79@zip64local

; 555  :       break;
; 556  : 
; 557  :     for (i=(int)uReadSize-3; (i--)>0;)

  000ce	8d 53 fd	 lea	 edx, DWORD PTR [rbx-3]
  000d1	48 63 c2	 movsxd	 rax, edx
  000d4	85 d2		 test	 edx, edx
  000d6	7e 49		 jle	 SHORT $LN56@zip64local
  000d8	48 83 c0 03	 add	 rax, 3
  000dc	49 c7 c0 fd ff
	ff ff		 mov	 r8, -3
  000e3	49 03 c6	 add	 rax, r14
  000e6	4d 2b c6	 sub	 r8, r14
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@zip64local:
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff ca		 dec	 edx
  000f5	48 ff c8	 dec	 rax

; 558  :     {
; 559  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 560  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  000f8	80 78 fd 50	 cmp	 BYTE PTR [rax-3], 80	; 00000050H
  000fc	75 11		 jne	 SHORT $LN14@zip64local
  000fe	80 79 fd 4b	 cmp	 BYTE PTR [rcx-3], 75	; 0000004bH
  00102	75 0b		 jne	 SHORT $LN14@zip64local
  00104	80 78 ff 06	 cmp	 BYTE PTR [rax-1], 6
  00108	75 05		 jne	 SHORT $LN14@zip64local
  0010a	80 38 07	 cmp	 BYTE PTR [rax], 7
  0010d	74 0b		 je	 SHORT $LN33@zip64local
$LN14@zip64local:

; 555  :       break;
; 556  : 
; 557  :     for (i=(int)uReadSize-3; (i--)>0;)

  0010f	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
  00113	48 85 c9	 test	 rcx, rcx
  00116	7f d8		 jg	 SHORT $LL4@zip64local
  00118	eb 07		 jmp	 SHORT $LN56@zip64local
$LN33@zip64local:

; 561  :       {
; 562  :         uPosFound = uReadPos+(unsigned)i;

  0011a	8b ea		 mov	 ebp, edx
  0011c	49 03 ec	 add	 rbp, r12

; 563  :         break;
; 564  :       }
; 565  :     }
; 566  : 
; 567  :       if (uPosFound!=0)

  0011f	75 0e		 jne	 SHORT $LN79@zip64local
$LN56@zip64local:

; 538  :   while (uBackRead<uMaxBack)

  00121	48 8b 5c 24 70	 mov	 rbx, QWORD PTR uSizeFile$1$[rsp]
  00126	4d 3b ef	 cmp	 r13, r15
  00129	0f 82 51 ff ff
	ff		 jb	 $LL2@zip64local
$LN79@zip64local:
  0012f	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
$LN57@zip64local:

; 568  :         break;
; 569  :   }
; 570  : 
; 571  :   TRYFREE(buf);

  00134	49 8b ce	 mov	 rcx, r14
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0013d	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]

; 572  :   if (uPosFound == 0)

  00142	48 85 ed	 test	 rbp, rbp
  00145	0f 84 c2 00 00
	00		 je	 $LN43@zip64local

; 573  :     return 0;
; 574  : 
; 575  :   /* Zip64 end of central directory locator */
; 576  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0014b	45 33 c9	 xor	 r9d, r9d
  0014e	4c 8b c5	 mov	 r8, rbp
  00151	48 8b d6	 mov	 rdx, rsi
  00154	48 8b cf	 mov	 rcx, rdi
  00157	e8 00 00 00 00	 call	 call_zseek64
  0015c	85 c0		 test	 eax, eax
  0015e	0f 85 a9 00 00
	00		 jne	 $LN43@zip64local

; 577  :     return 0;
; 578  : 
; 579  :   /* the signature, already checked */
; 580  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00164	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  00169	48 8b d6	 mov	 rdx, rsi
  0016c	48 8b cf	 mov	 rcx, rdi
  0016f	e8 00 00 00 00	 call	 zip64local_getLong
  00174	85 c0		 test	 eax, eax
  00176	0f 85 91 00 00
	00		 jne	 $LN43@zip64local

; 581  :     return 0;
; 582  : 
; 583  :   /* number of the disk with the start of the zip64 end of  central directory */
; 584  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  0017c	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  00181	48 8b d6	 mov	 rdx, rsi
  00184	48 8b cf	 mov	 rcx, rdi
  00187	e8 00 00 00 00	 call	 zip64local_getLong
  0018c	85 c0		 test	 eax, eax
  0018e	75 7d		 jne	 SHORT $LN43@zip64local

; 585  :     return 0;
; 586  :   if (uL != 0)

  00190	39 44 24 70	 cmp	 DWORD PTR uL$[rsp], eax
  00194	75 77		 jne	 SHORT $LN43@zip64local

; 587  :     return 0;
; 588  : 
; 589  :   /* relative offset of the zip64 end of central directory record */
; 590  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  00196	4c 8d 44 24 78	 lea	 r8, QWORD PTR relativeOffset$[rsp]
  0019b	48 8b d6	 mov	 rdx, rsi
  0019e	48 8b cf	 mov	 rcx, rdi
  001a1	e8 00 00 00 00	 call	 zip64local_getLong64
  001a6	85 c0		 test	 eax, eax
  001a8	75 63		 jne	 SHORT $LN43@zip64local

; 591  :     return 0;
; 592  : 
; 593  :   /* total number of disks */
; 594  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001aa	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001af	48 8b d6	 mov	 rdx, rsi
  001b2	48 8b cf	 mov	 rcx, rdi
  001b5	e8 00 00 00 00	 call	 zip64local_getLong
  001ba	85 c0		 test	 eax, eax
  001bc	75 4f		 jne	 SHORT $LN43@zip64local

; 595  :     return 0;
; 596  :   if (uL != 1)

  001be	83 7c 24 70 01	 cmp	 DWORD PTR uL$[rsp], 1
  001c3	75 48		 jne	 SHORT $LN43@zip64local

; 597  :     return 0;
; 598  : 
; 599  :   /* Goto Zip64 end of central directory record */
; 600  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  001c5	48 8b 5c 24 78	 mov	 rbx, QWORD PTR relativeOffset$[rsp]
  001ca	45 33 c9	 xor	 r9d, r9d
  001cd	4c 8b c3	 mov	 r8, rbx
  001d0	48 8b d6	 mov	 rdx, rsi
  001d3	48 8b cf	 mov	 rcx, rdi
  001d6	e8 00 00 00 00	 call	 call_zseek64
  001db	85 c0		 test	 eax, eax
  001dd	75 2e		 jne	 SHORT $LN43@zip64local

; 601  :     return 0;
; 602  : 
; 603  :   /* the signature */
; 604  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001df	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001e4	48 8b d6	 mov	 rdx, rsi
  001e7	48 8b cf	 mov	 rcx, rdi
  001ea	e8 00 00 00 00	 call	 zip64local_getLong
  001ef	85 c0		 test	 eax, eax
  001f1	75 1a		 jne	 SHORT $LN43@zip64local

; 605  :     return 0;
; 606  : 
; 607  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  001f3	81 7c 24 70 50
	4b 06 06	 cmp	 DWORD PTR uL$[rsp], 101075792 ; 06064b50H
  001fb	75 10		 jne	 SHORT $LN43@zip64local

; 609  : 
; 610  :   return relativeOffset;

  001fd	48 8b c3	 mov	 rax, rbx

; 611  : }

  00200	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00204	41 5f		 pop	 r15
  00206	41 5e		 pop	 r14
  00208	5f		 pop	 rdi
  00209	5e		 pop	 rsi
  0020a	5d		 pop	 rbp
  0020b	5b		 pop	 rbx
  0020c	c3		 ret	 0
$LN43@zip64local:

; 608  :     return 0;

  0020d	33 c0		 xor	 eax, eax

; 611  : }

  0020f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00213	41 5f		 pop	 r15
  00215	41 5e		 pop	 r14
  00217	5f		 pop	 rdi
  00218	5e		 pop	 rsi
  00219	5d		 pop	 rbp
  0021a	5b		 pop	 rbx
  0021b	c3		 ret	 0
zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT LoadCentralDirectoryRecord
_TEXT	SEGMENT
number_entry$ = 32
tv461 = 128
size_comment$ = 128
size_central_dir$ = 128
number_entry_CD$ = 128
VersionNeeded$ = 128
VersionMadeBy$ = 128
sizeEndOfCentralDirectory$1 = 128
uL$ = 128
pziinit$ = 128
offset_central_dir$1$ = 136
offset_central_dir$ = 136
number_disk_with_CD$ = 136
number_disk$ = 144
number_entry_CD$1$ = 152
LoadCentralDirectoryRecord PROC				; COMDAT

; 613  : local int LoadCentralDirectoryRecord(zip64_internal* pziinit) {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 54		 push	 r12
  00007	41 55		 push	 r13
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 8b ec	 mov	 rbp, rsp
  00010	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 614  :   int err=ZIP_OK;
; 615  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 616  : 
; 617  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 618  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 619  :   ZPOS64_T central_pos;
; 620  :   uLong uL;
; 621  : 
; 622  :   uLong number_disk;          /* number of the current dist, used for
; 623  :                               spaning ZIP, unsupported, always 0*/
; 624  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 625  :                               for spaning ZIP, unsupported, always 0*/
; 626  :   ZPOS64_T number_entry;
; 627  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 628  :                                 the central dir
; 629  :                                 (same than number_entry on nospan) */
; 630  :   uLong VersionMadeBy;
; 631  :   uLong VersionNeeded;
; 632  :   uLong size_comment;
; 633  : 
; 634  :   int hasZIP64Record = 0;
; 635  : 
; 636  :   // check first if we find a ZIP64 record
; 637  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  00014	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00018	48 8b d9	 mov	 rbx, rcx
  0001b	33 f6		 xor	 esi, esi
  0001d	e8 00 00 00 00	 call	 zip64local_SearchCentralDir64

; 638  :   if(central_pos > 0)

  00022	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00026	4c 8b e0	 mov	 r12, rax
  00029	48 8b cb	 mov	 rcx, rbx
  0002c	48 85 c0	 test	 rax, rax
  0002f	0f 84 23 01 00
	00		 je	 $LN55@LoadCentra

; 645  :   }
; 646  : 
; 647  : /* disable to allow appending to empty ZIP archive
; 648  :         if (central_pos==0)
; 649  :             err=ZIP_ERRNO;
; 650  : */
; 651  : 
; 652  :   if(hasZIP64Record)
; 653  :   {
; 654  :     ZPOS64_T sizeEndOfCentralDirectory;
; 655  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  00035	45 33 c9	 xor	 r9d, r9d
  00038	4c 8b c0	 mov	 r8, rax
  0003b	e8 00 00 00 00	 call	 call_zseek64

; 656  :       err=ZIP_ERRNO;
; 657  : 
; 658  :     /* the signature, already checked */
; 659  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  00040	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00044	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00048	85 c0		 test	 eax, eax
  0004a	8b fe		 mov	 edi, esi
  0004c	41 bf ff ff ff
	ff		 mov	 r15d, -1
  00052	48 8b cb	 mov	 rcx, rbx
  00055	41 0f 45 ff	 cmovne	 edi, r15d
  00059	e8 00 00 00 00	 call	 zip64local_getLong

; 660  :       err=ZIP_ERRNO;
; 661  : 
; 662  :     /* size of zip64 end of central directory record */
; 663  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  0005e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00062	4c 8d 45 48	 lea	 r8, QWORD PTR sizeEndOfCentralDirectory$1[rbp-56]
  00066	85 c0		 test	 eax, eax
  00068	48 8b cb	 mov	 rcx, rbx
  0006b	41 0f 45 ff	 cmovne	 edi, r15d
  0006f	e8 00 00 00 00	 call	 zip64local_getLong64

; 664  :       err=ZIP_ERRNO;
; 665  : 
; 666  :     /* version made by */
; 667  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  00074	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00078	4c 8d 45 48	 lea	 r8, QWORD PTR VersionMadeBy$[rbp-56]
  0007c	85 c0		 test	 eax, eax
  0007e	48 8b cb	 mov	 rcx, rbx
  00081	41 0f 45 ff	 cmovne	 edi, r15d
  00085	e8 00 00 00 00	 call	 zip64local_getShort

; 668  :       err=ZIP_ERRNO;
; 669  : 
; 670  :     /* version needed to extract */
; 671  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  0008a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008e	4c 8d 45 48	 lea	 r8, QWORD PTR VersionNeeded$[rbp-56]
  00092	85 c0		 test	 eax, eax
  00094	48 8b cb	 mov	 rcx, rbx
  00097	41 0f 45 ff	 cmovne	 edi, r15d
  0009b	e8 00 00 00 00	 call	 zip64local_getShort

; 672  :       err=ZIP_ERRNO;
; 673  : 
; 674  :     /* number of this disk */
; 675  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  000a0	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000a4	4c 8d 45 58	 lea	 r8, QWORD PTR number_disk$[rbp-56]
  000a8	85 c0		 test	 eax, eax
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	41 0f 45 ff	 cmovne	 edi, r15d
  000b1	e8 00 00 00 00	 call	 zip64local_getLong

; 676  :       err=ZIP_ERRNO;
; 677  : 
; 678  :     /* number of the disk with the start of the central directory */
; 679  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  000b6	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ba	4c 8d 45 50	 lea	 r8, QWORD PTR number_disk_with_CD$[rbp-56]
  000be	85 c0		 test	 eax, eax
  000c0	48 8b cb	 mov	 rcx, rbx
  000c3	41 0f 45 ff	 cmovne	 edi, r15d
  000c7	e8 00 00 00 00	 call	 zip64local_getLong

; 680  :       err=ZIP_ERRNO;
; 681  : 
; 682  :     /* total number of entries in the central directory on this disk */
; 683  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  000cc	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000d0	4c 8d 45 e8	 lea	 r8, QWORD PTR number_entry$[rbp-56]
  000d4	85 c0		 test	 eax, eax
  000d6	48 8b cb	 mov	 rcx, rbx
  000d9	41 0f 45 ff	 cmovne	 edi, r15d
  000dd	e8 00 00 00 00	 call	 zip64local_getLong64

; 684  :       err=ZIP_ERRNO;
; 685  : 
; 686  :     /* total number of entries in the central directory */
; 687  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  000e2	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e6	4c 8d 45 48	 lea	 r8, QWORD PTR number_entry_CD$[rbp-56]
  000ea	85 c0		 test	 eax, eax
  000ec	48 8b cb	 mov	 rcx, rbx
  000ef	41 0f 45 ff	 cmovne	 edi, r15d
  000f3	e8 00 00 00 00	 call	 zip64local_getLong64
  000f8	85 c0		 test	 eax, eax

; 688  :       err=ZIP_ERRNO;
; 689  : 
; 690  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  000fa	48 8b 45 48	 mov	 rax, QWORD PTR number_entry_CD$[rbp-56]
  000fe	48 89 45 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], rax
  00102	41 0f 45 ff	 cmovne	 edi, r15d
  00106	48 3b 45 e8	 cmp	 rax, QWORD PTR number_entry$[rbp-56]
  0010a	75 0a		 jne	 SHORT $LN19@LoadCentra
  0010c	39 75 50	 cmp	 DWORD PTR number_disk_with_CD$[rbp-56], esi
  0010f	75 05		 jne	 SHORT $LN19@LoadCentra
  00111	39 75 58	 cmp	 DWORD PTR number_disk$[rbp-56], esi
  00114	74 05		 je	 SHORT $LN18@LoadCentra
$LN19@LoadCentra:

; 691  :       err=ZIP_BADZIPFILE;

  00116	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN18@LoadCentra:

; 692  : 
; 693  :     /* size of the central directory */
; 694  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  0011b	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0011f	4c 8d 45 48	 lea	 r8, QWORD PTR size_central_dir$[rbp-56]
  00123	48 8b cb	 mov	 rcx, rbx
  00126	e8 00 00 00 00	 call	 zip64local_getLong64

; 695  :       err=ZIP_ERRNO;
; 696  : 
; 697  :     /* offset of start of central directory with respect to the
; 698  :     starting disk number */
; 699  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  0012b	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0012f	4c 8d 45 50	 lea	 r8, QWORD PTR offset_central_dir$[rbp-56]
  00133	85 c0		 test	 eax, eax
  00135	48 8b cb	 mov	 rcx, rbx
  00138	41 0f 45 ff	 cmovne	 edi, r15d
  0013c	e8 00 00 00 00	 call	 zip64local_getLong64

; 700  :       err=ZIP_ERRNO;
; 701  : 
; 702  :     // TODO..
; 703  :     // read the comment from the standard central header.
; 704  :     size_comment = 0;
; 705  :   }

  00141	4c 8b 6d 50	 mov	 r13, QWORD PTR offset_central_dir$[rbp-56]
  00145	85 c0		 test	 eax, eax
  00147	4c 8b 75 48	 mov	 r14, QWORD PTR size_central_dir$[rbp-56]
  0014b	41 0f 45 ff	 cmovne	 edi, r15d
  0014f	4c 89 6d 50	 mov	 QWORD PTR offset_central_dir$1$[rbp-56], r13
  00153	e9 2b 01 00 00	 jmp	 $LN36@LoadCentra
$LN55@LoadCentra:

; 639  :   {
; 640  :     hasZIP64Record = 1;
; 641  :   }
; 642  :   else if(central_pos == 0)
; 643  :   {
; 644  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  00158	e8 00 00 00 00	 call	 zip64local_SearchCentralDir

; 706  :   else
; 707  :   {
; 708  :     // Read End of central Directory info
; 709  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0015d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00161	45 33 c9	 xor	 r9d, r9d
  00164	4c 8b c0	 mov	 r8, rax
  00167	48 8b cb	 mov	 rcx, rbx
  0016a	4c 8b e0	 mov	 r12, rax
  0016d	e8 00 00 00 00	 call	 call_zseek64

; 710  :       err=ZIP_ERRNO;
; 711  : 
; 712  :     /* the signature, already checked */
; 713  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  00172	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00176	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  0017a	85 c0		 test	 eax, eax
  0017c	8b fe		 mov	 edi, esi
  0017e	41 bf ff ff ff
	ff		 mov	 r15d, -1
  00184	48 8b cb	 mov	 rcx, rbx
  00187	41 0f 45 ff	 cmovne	 edi, r15d
  0018b	e8 00 00 00 00	 call	 zip64local_getLong

; 714  :       err=ZIP_ERRNO;
; 715  : 
; 716  :     /* number of this disk */
; 717  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00190	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00194	4c 8d 45 58	 lea	 r8, QWORD PTR number_disk$[rbp-56]
  00198	85 c0		 test	 eax, eax
  0019a	48 8b cb	 mov	 rcx, rbx
  0019d	41 0f 45 ff	 cmovne	 edi, r15d
  001a1	e8 00 00 00 00	 call	 zip64local_getShort

; 718  :       err=ZIP_ERRNO;
; 719  : 
; 720  :     /* number of the disk with the start of the central directory */
; 721  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  001a6	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001aa	4c 8d 45 50	 lea	 r8, QWORD PTR number_disk_with_CD$[rbp-56]
  001ae	85 c0		 test	 eax, eax
  001b0	48 8b cb	 mov	 rcx, rbx
  001b3	41 0f 45 ff	 cmovne	 edi, r15d
  001b7	e8 00 00 00 00	 call	 zip64local_getShort

; 722  :       err=ZIP_ERRNO;
; 723  : 
; 724  :     /* total number of entries in the central dir on this disk */
; 725  :     number_entry = 0;
; 726  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  001bc	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001c0	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  001c4	85 c0		 test	 eax, eax
  001c6	48 8b cb	 mov	 rcx, rbx
  001c9	41 0f 45 ff	 cmovne	 edi, r15d
  001cd	e8 00 00 00 00	 call	 zip64local_getShort
  001d2	85 c0		 test	 eax, eax
  001d4	74 08		 je	 SHORT $LN26@LoadCentra

; 727  :       err=ZIP_ERRNO;

  001d6	41 8b ff	 mov	 edi, r15d
  001d9	4c 8b f6	 mov	 r14, rsi
  001dc	eb 04		 jmp	 SHORT $LN27@LoadCentra
$LN26@LoadCentra:

; 728  :     else
; 729  :       number_entry = uL;

  001de	44 8b 75 48	 mov	 r14d, DWORD PTR uL$[rbp-56]
$LN27@LoadCentra:

; 730  : 
; 731  :     /* total number of entries in the central dir */
; 732  :     number_entry_CD = 0;
; 733  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  001e2	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001e6	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  001ea	48 8b cb	 mov	 rcx, rbx
  001ed	48 89 75 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], rsi
  001f1	e8 00 00 00 00	 call	 zip64local_getShort
  001f6	85 c0		 test	 eax, eax
  001f8	74 08		 je	 SHORT $LN28@LoadCentra

; 734  :       err=ZIP_ERRNO;

  001fa	41 8b ff	 mov	 edi, r15d
  001fd	48 8b c6	 mov	 rax, rsi
  00200	eb 0b		 jmp	 SHORT $LN29@LoadCentra
$LN28@LoadCentra:

; 735  :     else
; 736  :       number_entry_CD = uL;

  00202	44 8b 6d 48	 mov	 r13d, DWORD PTR uL$[rbp-56]
  00206	4c 89 6d 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], r13
  0020a	41 8b c5	 mov	 eax, r13d
$LN29@LoadCentra:

; 737  : 
; 738  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  0020d	49 3b c6	 cmp	 rax, r14
  00210	75 0a		 jne	 SHORT $LN31@LoadCentra
  00212	39 75 50	 cmp	 DWORD PTR number_disk_with_CD$[rbp-56], esi
  00215	75 05		 jne	 SHORT $LN31@LoadCentra
  00217	39 75 58	 cmp	 DWORD PTR number_disk$[rbp-56], esi
  0021a	74 05		 je	 SHORT $LN30@LoadCentra
$LN31@LoadCentra:

; 739  :       err=ZIP_BADZIPFILE;

  0021c	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN30@LoadCentra:

; 740  : 
; 741  :     /* size of the central directory */
; 742  :     size_central_dir = 0;
; 743  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00221	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00225	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00229	48 8b cb	 mov	 rcx, rbx
  0022c	4c 8b f6	 mov	 r14, rsi
  0022f	e8 00 00 00 00	 call	 zip64local_getLong
  00234	85 c0		 test	 eax, eax
  00236	74 05		 je	 SHORT $LN32@LoadCentra

; 744  :       err=ZIP_ERRNO;

  00238	41 8b ff	 mov	 edi, r15d
  0023b	eb 04		 jmp	 SHORT $LN33@LoadCentra
$LN32@LoadCentra:

; 745  :     else
; 746  :       size_central_dir = uL;

  0023d	44 8b 75 48	 mov	 r14d, DWORD PTR uL$[rbp-56]
$LN33@LoadCentra:

; 747  : 
; 748  :     /* offset of start of central directory with respect to the starting disk number */
; 749  :     offset_central_dir = 0;
; 750  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00241	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00245	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00249	48 8b cb	 mov	 rcx, rbx
  0024c	48 89 75 50	 mov	 QWORD PTR offset_central_dir$1$[rbp-56], rsi
  00250	4c 8b ee	 mov	 r13, rsi
  00253	e8 00 00 00 00	 call	 zip64local_getLong
  00258	85 c0		 test	 eax, eax
  0025a	74 05		 je	 SHORT $LN34@LoadCentra

; 751  :       err=ZIP_ERRNO;

  0025c	41 8b ff	 mov	 edi, r15d
  0025f	eb 08		 jmp	 SHORT $LN35@LoadCentra
$LN34@LoadCentra:

; 752  :     else
; 753  :       offset_central_dir = uL;

  00261	44 8b 6d 48	 mov	 r13d, DWORD PTR uL$[rbp-56]
  00265	4c 89 6d 50	 mov	 QWORD PTR offset_central_dir$1$[rbp-56], r13
$LN35@LoadCentra:

; 754  : 
; 755  : 
; 756  :     /* zipfile global comment length */
; 757  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  00269	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0026d	4c 8d 45 48	 lea	 r8, QWORD PTR size_comment$[rbp-56]
  00271	48 8b cb	 mov	 rcx, rbx
  00274	e8 00 00 00 00	 call	 zip64local_getShort
  00279	8b 75 48	 mov	 esi, DWORD PTR size_comment$[rbp-56]
  0027c	85 c0		 test	 eax, eax
  0027e	74 03		 je	 SHORT $LN36@LoadCentra

; 758  :       err=ZIP_ERRNO;

  00280	41 8b ff	 mov	 edi, r15d
$LN36@LoadCentra:

; 759  :   }
; 760  : 
; 761  :   if ((central_pos<offset_central_dir+size_central_dir) &&

  00283	4b 8d 04 2e	 lea	 rax, QWORD PTR [r14+r13]
  00287	4c 3b e0	 cmp	 r12, rax
  0028a	0f 82 05 01 00
	00		 jb	 $LN52@LoadCentra

; 762  :     (err==ZIP_OK))
; 763  :     err=ZIP_BADZIPFILE;
; 764  : 
; 765  :   if (err!=ZIP_OK)

  00290	85 ff		 test	 edi, edi
  00292	0f 85 fd 00 00
	00		 jne	 $LN52@LoadCentra

; 769  :   }
; 770  : 
; 771  :   if (size_comment>0)

  00298	85 f6		 test	 esi, esi
  0029a	74 33		 je	 SHORT $LN40@LoadCentra

; 772  :   {
; 773  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  0029c	8d 4e 01	 lea	 ecx, DWORD PTR [rsi+1]
  0029f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002a5	48 89 83 60 01
	01 00		 mov	 QWORD PTR [rbx+65888], rax

; 774  :     if (pziinit->globalcomment)

  002ac	48 85 c0	 test	 rax, rax
  002af	74 1e		 je	 SHORT $LN40@LoadCentra

; 775  :     {
; 776  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  002b1	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  002b5	44 8b ce	 mov	 r9d, esi
  002b8	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  002bc	4c 8b c0	 mov	 r8, rax
  002bf	ff 53 08	 call	 QWORD PTR [rbx+8]

; 777  :       pziinit->globalcomment[size_comment]=0;

  002c2	8b c8		 mov	 ecx, eax
  002c4	48 8b 83 60 01
	01 00		 mov	 rax, QWORD PTR [rbx+65888]
  002cb	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
$LN40@LoadCentra:

; 778  :     }
; 779  :   }
; 780  : 
; 781  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  002cf	4d 2b e5	 sub	 r12, r13

; 782  :   pziinit->add_position_when_writing_offset = byte_before_the_zipfile;
; 783  : 
; 784  :   {
; 785  :     ZPOS64_T size_central_dir_to_read = size_central_dir;
; 786  :     size_t buf_size = SIZEDATA_INDATABLOCK;
; 787  :     void* buf_read = (void*)ALLOC(buf_size);

  002d2	b9 f0 0f 00 00	 mov	 ecx, 4080		; 00000ff0H
  002d7	4d 2b e6	 sub	 r12, r14
  002da	4c 89 a3 50 01
	01 00		 mov	 QWORD PTR [rbx+65872], r12
  002e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 788  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  002e7	48 8b 75 50	 mov	 rsi, QWORD PTR offset_central_dir$1$[rbp-56]
  002eb	45 33 c9	 xor	 r9d, r9d
  002ee	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  002f2	49 03 f4	 add	 rsi, r12
  002f5	4c 8b c6	 mov	 r8, rsi
  002f8	48 89 75 48	 mov	 QWORD PTR tv461[rbp-56], rsi
  002fc	48 8b cb	 mov	 rcx, rbx
  002ff	4c 8b e8	 mov	 r13, rax
  00302	e8 00 00 00 00	 call	 call_zseek64
  00307	85 c0		 test	 eax, eax
  00309	41 0f 45 ff	 cmovne	 edi, r15d

; 789  :       err=ZIP_ERRNO;
; 790  : 
; 791  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  0030d	4d 85 f6	 test	 r14, r14
  00310	74 47		 je	 SHORT $LN3@LoadCentra
$LL2@LoadCentra:
  00312	85 ff		 test	 edi, edi
  00314	75 3f		 jne	 SHORT $LN57@LoadCentra

; 792  :     {
; 793  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;
; 794  :       if (read_this > size_central_dir_to_read)
; 795  :         read_this = size_central_dir_to_read;
; 796  : 
; 797  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  00316	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0031a	be f0 0f 00 00	 mov	 esi, 4080		; 00000ff0H
  0031f	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00323	4c 3b f6	 cmp	 r14, rsi
  00326	4d 8b c5	 mov	 r8, r13
  00329	49 0f 42 f6	 cmovb	 rsi, r14
  0032d	44 8b ce	 mov	 r9d, esi
  00330	ff 53 08	 call	 QWORD PTR [rbx+8]
  00333	8b c0		 mov	 eax, eax
  00335	48 3b c6	 cmp	 rax, rsi
  00338	74 05		 je	 SHORT $LN53@LoadCentra

; 798  :         err=ZIP_ERRNO;

  0033a	41 8b ff	 mov	 edi, r15d

; 799  : 
; 800  :       if (err==ZIP_OK)

  0033d	eb 11		 jmp	 SHORT $LN44@LoadCentra
$LN53@LoadCentra:

; 801  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  0033f	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  00343	44 8b c6	 mov	 r8d, esi
  00346	49 8b d5	 mov	 rdx, r13
  00349	e8 00 00 00 00	 call	 add_data_in_datablock
  0034e	8b f8		 mov	 edi, eax
$LN44@LoadCentra:

; 802  : 
; 803  :       size_central_dir_to_read-=read_this;

  00350	4c 2b f6	 sub	 r14, rsi
  00353	75 bd		 jne	 SHORT $LL2@LoadCentra
$LN57@LoadCentra:
  00355	48 8b 75 48	 mov	 rsi, QWORD PTR tv461[rbp-56]
$LN3@LoadCentra:

; 804  :     }
; 805  :     TRYFREE(buf_read);

  00359	4d 85 ed	 test	 r13, r13
  0035c	74 09		 je	 SHORT $LN45@LoadCentra
  0035e	49 8b cd	 mov	 rcx, r13
  00361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN45@LoadCentra:

; 806  :   }
; 807  :   pziinit->begin_pos = byte_before_the_zipfile;
; 808  :   pziinit->number_entry = number_entry_CD;

  00367	48 8b 45 60	 mov	 rax, QWORD PTR number_entry_CD$1$[rbp-56]

; 809  : 
; 810  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  0036b	45 33 c9	 xor	 r9d, r9d
  0036e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00372	4c 8b c6	 mov	 r8, rsi
  00375	48 8b cb	 mov	 rcx, rbx
  00378	48 89 83 58 01
	01 00		 mov	 QWORD PTR [rbx+65880], rax
  0037f	4c 89 a3 48 01
	01 00		 mov	 QWORD PTR [rbx+65864], r12
  00386	e8 00 00 00 00	 call	 call_zseek64
  0038b	85 c0		 test	 eax, eax
  0038d	41 0f 45 ff	 cmovne	 edi, r15d

; 811  :     err=ZIP_ERRNO;
; 812  : 
; 813  :   return err;

  00391	8b c7		 mov	 eax, edi
  00393	eb 0e		 jmp	 SHORT $LN1@LoadCentra
$LN52@LoadCentra:

; 766  :   {
; 767  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  00395	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00399	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0039d	ff 53 28	 call	 QWORD PTR [rbx+40]

; 768  :     return ZIP_ERRNO;

  003a0	41 8b c7	 mov	 eax, r15d
$LN1@LoadCentra:

; 814  : }

  003a3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  003a7	41 5f		 pop	 r15
  003a9	41 5e		 pop	 r14
  003ab	41 5d		 pop	 r13
  003ad	41 5c		 pop	 r12
  003af	5f		 pop	 rdi
  003b0	5e		 pop	 rsi
  003b1	5b		 pop	 rbx
  003b2	5d		 pop	 rbp
  003b3	c3		 ret	 0
LoadCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen3
_TEXT	SEGMENT
ziinit$ = 32
pathname$ = 65952
append$ = 65960
globalcomment$ = 65968
pzlib_filefunc64_32_def$ = 65976
zipOpen3 PROC						; COMDAT

; 821  : extern zipFile ZEXPORT zipOpen3(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def) {

$LN24:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00014	55		 push	 rbp
  00015	48 8d ac 24 70
	ff fe ff	 lea	 rbp, QWORD PTR [rsp-65680]
  0001d	b8 90 01 01 00	 mov	 eax, 65936		; 00010190H
  00022	e8 00 00 00 00	 call	 __chkstk
  00027	48 2b e0	 sub	 rsp, rax

; 822  :     zip64_internal ziinit;
; 823  :     zip64_internal* zi;
; 824  :     int err=ZIP_OK;

  0002a	33 db		 xor	 ebx, ebx
  0002c	8b f2		 mov	 esi, edx

; 825  : 
; 826  :     ziinit.z_filefunc.zseek32_file = NULL;

  0002e	48 89 5c 24 70	 mov	 QWORD PTR ziinit$[rsp+80], rbx
  00033	4d 8b f0	 mov	 r14, r8

; 827  :     ziinit.z_filefunc.ztell32_file = NULL;

  00036	48 89 5c 24 68	 mov	 QWORD PTR ziinit$[rsp+72], rbx
  0003b	48 8b d1	 mov	 rdx, rcx

; 828  :     if (pzlib_filefunc64_32_def==NULL)

  0003e	4d 85 c9	 test	 r9, r9
  00041	75 0c		 jne	 SHORT $LN2@zipOpen3

; 829  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  00043	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00048	e8 00 00 00 00	 call	 fill_fopen64_filefunc
  0004d	eb 3d		 jmp	 SHORT $LN3@zipOpen3
$LN2@zipOpen3:

; 830  :     else
; 831  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  0004f	41 0f 28 01	 movaps	 xmm0, XMMWORD PTR [r9]
  00053	41 0f 28 49 10	 movaps	 xmm1, XMMWORD PTR [r9+16]
  00058	0f 29 44 24 20	 movaps	 XMMWORD PTR ziinit$[rsp], xmm0
  0005d	41 0f 28 41 20	 movaps	 xmm0, XMMWORD PTR [r9+32]
  00062	0f 29 4c 24 30	 movaps	 XMMWORD PTR ziinit$[rsp+16], xmm1
  00067	41 0f 28 49 30	 movaps	 xmm1, XMMWORD PTR [r9+48]
  0006c	0f 29 44 24 40	 movaps	 XMMWORD PTR ziinit$[rsp+32], xmm0
  00071	41 0f 28 41 40	 movaps	 xmm0, XMMWORD PTR [r9+64]
  00076	0f 29 4c 24 50	 movaps	 XMMWORD PTR ziinit$[rsp+48], xmm1
  0007b	f2 41 0f 10 49
	50		 movsd	 xmm1, QWORD PTR [r9+80]
  00081	0f 29 44 24 60	 movaps	 XMMWORD PTR ziinit$[rsp+64], xmm0
  00086	f2 0f 11 4c 24
	70		 movsd	 QWORD PTR ziinit$[rsp+80], xmm1
$LN3@zipOpen3:

; 832  : 
; 833  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,

  0008c	b8 0b 00 00 00	 mov	 eax, 11
  00091	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00096	41 b8 07 00 00
	00		 mov	 r8d, 7
  0009c	85 f6		 test	 esi, esi
  0009e	44 0f 44 c0	 cmove	 r8d, eax
  000a2	e8 00 00 00 00	 call	 call_zopen64
  000a7	48 89 44 24 78	 mov	 QWORD PTR ziinit$[rsp+88], rax
  000ac	48 8b f8	 mov	 rdi, rax

; 834  :                   pathname,
; 835  :                   (append == APPEND_STATUS_CREATE) ?
; 836  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 837  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));
; 838  : 
; 839  :     if (ziinit.filestream == NULL)

  000af	48 85 c0	 test	 rax, rax
  000b2	74 6b		 je	 SHORT $LN22@zipOpen3

; 840  :         return NULL;
; 841  : 
; 842  :     if (append == APPEND_STATUS_CREATEAFTER)

  000b4	83 fe 01	 cmp	 esi, 1
  000b7	75 14		 jne	 SHORT $LN5@zipOpen3

; 843  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  000b9	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  000bd	45 33 c0	 xor	 r8d, r8d
  000c0	48 8b d0	 mov	 rdx, rax
  000c3	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000c8	e8 00 00 00 00	 call	 call_zseek64
$LN5@zipOpen3:

; 844  : 
; 845  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  000cd	48 8b d7	 mov	 rdx, rdi
  000d0	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000d5	e8 00 00 00 00	 call	 call_ztell64

; 846  :     ziinit.in_opened_file_inzip = 0;
; 847  :     ziinit.ci.stream_initialised = 0;
; 848  :     ziinit.number_entry = 0;
; 849  :     ziinit.add_position_when_writing_offset = 0;
; 850  :     init_linkedlist(&(ziinit.central_dir));

  000da	48 8d 4d 80	 lea	 rcx, QWORD PTR ziinit$[rbp-160]
  000de	48 89 85 68 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65608], rax
  000e5	89 5d 90	 mov	 DWORD PTR ziinit$[rbp-144], ebx
  000e8	89 5d f0	 mov	 DWORD PTR ziinit$[rbp-48], ebx
  000eb	48 89 9d 78 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65624], rbx
  000f2	48 89 9d 70 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65616], rbx
  000f9	e8 00 00 00 00	 call	 init_linkedlist

; 851  : 
; 852  : 
; 853  : 
; 854  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  000fe	b9 68 01 01 00	 mov	 ecx, 65896		; 00010168H
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00109	48 8b f8	 mov	 rdi, rax

; 855  :     if (zi==NULL)

  0010c	48 85 c0	 test	 rax, rax
  0010f	75 12		 jne	 SHORT $LN6@zipOpen3

; 856  :     {
; 857  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  00111	48 8b 54 24 78	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  00116	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  0011b	ff 54 24 48	 call	 QWORD PTR ziinit$[rsp+40]
$LN22@zipOpen3:

; 888  :     }
; 889  : }

  0011f	33 c0		 xor	 eax, eax
  00121	eb 5c		 jmp	 SHORT $LN10@zipOpen3
$LN6@zipOpen3:

; 858  :         return NULL;
; 859  :     }
; 860  : 
; 861  :     /* now we add file in a zipfile */
; 862  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 863  :     ziinit.globalcomment = NULL;

  00123	48 89 9d 80 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65632], rbx
  0012a	48 8b cb	 mov	 rcx, rbx

; 864  :     if (append == APPEND_STATUS_ADDINZIP)

  0012d	83 fe 02	 cmp	 esi, 2
  00130	75 13		 jne	 SHORT $LN7@zipOpen3

; 865  :     {
; 866  :       // Read and Cache Central Directory Records
; 867  :       err = LoadCentralDirectoryRecord(&ziinit);

  00132	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00137	e8 00 00 00 00	 call	 LoadCentralDirectoryRecord
  0013c	48 8b 8d 80 00
	01 00		 mov	 rcx, QWORD PTR ziinit$[rbp+65632]
  00143	8b d8		 mov	 ebx, eax
$LN7@zipOpen3:

; 868  :     }
; 869  : 
; 870  :     if (globalcomment)

  00145	4d 85 f6	 test	 r14, r14
  00148	74 03		 je	 SHORT $LN8@zipOpen3

; 871  :     {
; 872  :       *globalcomment = ziinit.globalcomment;

  0014a	49 89 0e	 mov	 QWORD PTR [r14], rcx
$LN8@zipOpen3:

; 873  :     }
; 874  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 875  : 
; 876  :     if (err != ZIP_OK)

  0014d	85 db		 test	 ebx, ebx
  0014f	74 18		 je	 SHORT $LN9@zipOpen3

; 877  :     {
; 878  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 879  :         TRYFREE(ziinit.globalcomment);

  00151	48 85 c9	 test	 rcx, rcx
  00154	74 06		 je	 SHORT $LN11@zipOpen3
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN11@zipOpen3:

; 880  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 881  :         TRYFREE(zi);

  0015c	48 8b cf	 mov	 rcx, rdi
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 882  :         return NULL;

  00165	33 c0		 xor	 eax, eax
  00167	eb 16		 jmp	 SHORT $LN10@zipOpen3
$LN9@zipOpen3:

; 883  :     }
; 884  :     else
; 885  :     {
; 886  :         *zi = ziinit;

  00169	41 b8 68 01 01
	00		 mov	 r8d, 65896		; 00010168H
  0016f	48 8d 54 24 20	 lea	 rdx, QWORD PTR ziinit$[rsp]
  00174	48 8b cf	 mov	 rcx, rdi
  00177	e8 00 00 00 00	 call	 memcpy

; 887  :         return (zipFile)zi;

  0017c	48 8b c7	 mov	 rax, rdi
$LN10@zipOpen3:

; 888  :     }
; 889  : }

  0017f	4c 8d 9c 24 90
	01 01 00	 lea	 r11, QWORD PTR [rsp+65936]
  00187	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  0018b	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  0018f	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  00193	4d 8b 73 28	 mov	 r14, QWORD PTR [r11+40]
  00197	49 8b e3	 mov	 rsp, r11
  0019a	5d		 pop	 rbp
  0019b	c3		 ret	 0
zipOpen3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen2
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$1 = 32
pathname$ = 144
append$ = 152
globalcomment$ = 160
pzlib_filefunc32_def$ = 168
zipOpen2 PROC						; COMDAT

; 891  : extern zipFile ZEXPORT zipOpen2(const char *pathname, int append, zipcharpc* globalcomment, zlib_filefunc_def* pzlib_filefunc32_def) {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00009	4d 8b d0	 mov	 r10, r8
  0000c	44 8b da	 mov	 r11d, edx
  0000f	48 8b d9	 mov	 rbx, rcx

; 892  :     if (pzlib_filefunc32_def != NULL)

  00012	4d 85 c9	 test	 r9, r9
  00015	74 29		 je	 SHORT $LN2@zipOpen2

; 893  :     {
; 894  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 895  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00017	49 8b d1	 mov	 rdx, r9
  0001a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0001f	e8 00 00 00 00	 call	 fill_zlib_filefunc64_32_def_from_filefunc32

; 896  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00024	4d 8b c2	 mov	 r8, r10
  00027	4c 8d 4c 24 20	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0002c	41 8b d3	 mov	 edx, r11d
  0002f	48 8b cb	 mov	 rcx, rbx

; 897  :     }
; 898  :     else
; 899  :         return zipOpen3(pathname, append, globalcomment, NULL);
; 900  : }

  00032	e8 00 00 00 00	 call	 zipOpen3
  00037	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
$LN2@zipOpen2:
  00040	e8 00 00 00 00	 call	 zipOpen3
  00045	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
zipOpen2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen2_64
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$1 = 32
pathname$ = 144
append$ = 152
globalcomment$ = 160
pzlib_filefunc_def$ = 168
zipOpen2_64 PROC					; COMDAT

; 902  : extern zipFile ZEXPORT zipOpen2_64(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def) {

$LN7:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 903  :     if (pzlib_filefunc_def != NULL)

  00007	4d 85 c9	 test	 r9, r9
  0000a	74 45		 je	 SHORT $LN2@zipOpen2_6

; 904  :     {
; 905  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 906  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  0000c	41 0f 10 01	 movups	 xmm0, XMMWORD PTR [r9]

; 907  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00010	33 c0		 xor	 eax, eax
  00012	41 0f 10 49 10	 movups	 xmm1, XMMWORD PTR [r9+16]
  00017	48 89 44 24 68	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$1[rsp+72], rax
  0001c	0f 29 44 24 20	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp], xmm0
  00021	41 0f 10 41 20	 movups	 xmm0, XMMWORD PTR [r9+32]

; 908  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00026	48 89 44 24 70	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$1[rsp+80], rax
  0002b	0f 29 4c 24 30	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+16], xmm1
  00030	41 0f 10 49 30	 movups	 xmm1, XMMWORD PTR [r9+48]

; 909  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00035	4c 8d 4c 24 20	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0003a	0f 29 44 24 40	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+32], xmm0
  0003f	0f 29 4c 24 50	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+48], xmm1

; 910  :     }
; 911  :     else
; 912  :         return zipOpen3(pathname, append, globalcomment, NULL);
; 913  : }

  00044	e8 00 00 00 00	 call	 zipOpen3
  00049	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00050	c3		 ret	 0
$LN2@zipOpen2_6:
  00051	e8 00 00 00 00	 call	 zipOpen3
  00056	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0005d	c3		 ret	 0
zipOpen2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen
_TEXT	SEGMENT
pathname$ = 8
append$ = 16
zipOpen	PROC						; COMDAT

; 918  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	e9 00 00 00 00	 jmp	 zipOpen3
zipOpen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen64
_TEXT	SEGMENT
pathname$ = 8
append$ = 16
zipOpen64 PROC						; COMDAT

; 922  :     return zipOpen3(pathname,append,NULL,NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	e9 00 00 00 00	 jmp	 zipOpen3
zipOpen64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT Write_LocalFileHeader
_TEXT	SEGMENT
zi$ = 64
filename$ = 72
size_extrafield_local$ = 80
extrafield_local$ = 88
Write_LocalFileHeader PROC				; COMDAT

; 925  : local int Write_LocalFileHeader(zip64_internal* zi, const char* filename, uInt size_extrafield_local, const void* extrafield_local) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	4d 8b f9	 mov	 r15, r9
  00016	45 8b f0	 mov	 r14d, r8d
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	48 8b d9	 mov	 rbx, rcx

; 926  :   /* write the local header */
; 927  :   int err;
; 928  :   uInt size_filename = (uInt)strlen(filename);

  0001f	48 c7 c7 ff ff
	ff ff		 mov	 rdi, -1
$LL27@Write_Loca:
  00026	48 ff c7	 inc	 rdi
  00029	80 3c 3a 00	 cmp	 BYTE PTR [rdx+rdi], 0
  0002d	75 f7		 jne	 SHORT $LL27@Write_Loca

; 929  :   uInt size_extrafield = size_extrafield_local;
; 930  : 
; 931  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  0002f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00033	41 b9 04 00 00
	00		 mov	 r9d, 4
  00039	41 b8 50 4b 03
	04		 mov	 r8d, 67324752		; 04034b50H
  0003f	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00044	e8 00 00 00 00	 call	 zip64local_putValue

; 932  : 
; 933  :   if (err==ZIP_OK)

  00049	85 c0		 test	 eax, eax
  0004b	0f 85 f2 01 00
	00		 jne	 $LN30@Write_Loca

; 934  :   {
; 935  :     if(zi->ci.zip64)
; 936  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */
; 937  :     else
; 938  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */
; 939  :   }
; 940  : 
; 941  :   if (err==ZIP_OK)

  00051	83 bb 0c 01 01
	00 00		 cmp	 DWORD PTR [rbx+65804], 0
  00058	b8 14 00 00 00	 mov	 eax, 20
  0005d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00061	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  00067	44 0f 44 c0	 cmove	 r8d, eax
  0006b	48 8b cb	 mov	 rcx, rbx
  0006e	44 8d 48 ee	 lea	 r9d, QWORD PTR [rax-18]
  00072	e8 00 00 00 00	 call	 zip64local_putValue
  00077	85 c0		 test	 eax, eax
  00079	0f 85 c4 01 00
	00		 jne	 $LN30@Write_Loca

; 942  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  0007f	44 8b 83 f4 00
	00 00		 mov	 r8d, DWORD PTR [rbx+244]
  00086	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  0008a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 zip64local_putValue

; 943  : 
; 944  :   if (err==ZIP_OK)

  00096	85 c0		 test	 eax, eax
  00098	0f 85 a5 01 00
	00		 jne	 $LN30@Write_Loca

; 945  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  0009e	44 8b 83 f8 00
	00 00		 mov	 r8d, DWORD PTR [rbx+248]
  000a5	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  000a9	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ad	48 8b cb	 mov	 rcx, rbx
  000b0	e8 00 00 00 00	 call	 zip64local_putValue

; 946  : 
; 947  :   if (err==ZIP_OK)

  000b5	85 c0		 test	 eax, eax
  000b7	0f 85 86 01 00
	00		 jne	 $LN30@Write_Loca

; 948  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  000bd	44 8b 83 00 01
	01 00		 mov	 r8d, DWORD PTR [rbx+65792]
  000c4	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  000c8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	e8 00 00 00 00	 call	 zip64local_putValue

; 949  : 
; 950  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 951  :   if (err==ZIP_OK)

  000d4	85 c0		 test	 eax, eax
  000d6	0f 85 67 01 00
	00		 jne	 $LN30@Write_Loca

; 952  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  000dc	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e0	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  000e4	45 33 c0	 xor	 r8d, r8d
  000e7	48 8b cb	 mov	 rcx, rbx
  000ea	e8 00 00 00 00	 call	 zip64local_putValue

; 953  :   if (err==ZIP_OK)

  000ef	85 c0		 test	 eax, eax
  000f1	0f 85 4c 01 00
	00		 jne	 $LN30@Write_Loca

; 954  :   {
; 955  :     if(zi->ci.zip64)
; 956  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */
; 957  :     else
; 958  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */
; 959  :   }
; 960  :   if (err==ZIP_OK)

  000f7	8b 83 0c 01 01
	00		 mov	 eax, DWORD PTR [rbx+65804]
  000fd	bd ff ff ff ff	 mov	 ebp, -1			; ffffffffH
  00102	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00106	f7 d8		 neg	 eax
  00108	41 b9 04 00 00
	00		 mov	 r9d, 4
  0010e	48 8b cb	 mov	 rcx, rbx
  00111	4d 1b c0	 sbb	 r8, r8
  00114	4c 23 c5	 and	 r8, rbp
  00117	e8 00 00 00 00	 call	 zip64local_putValue
  0011c	85 c0		 test	 eax, eax
  0011e	0f 85 1f 01 00
	00		 jne	 $LN30@Write_Loca

; 961  :   {
; 962  :     if(zi->ci.zip64)
; 963  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */
; 964  :     else
; 965  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */
; 966  :   }
; 967  : 
; 968  :   if (err==ZIP_OK)

  00124	8b 83 0c 01 01
	00		 mov	 eax, DWORD PTR [rbx+65804]
  0012a	41 b9 04 00 00
	00		 mov	 r9d, 4
  00130	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00134	f7 d8		 neg	 eax
  00136	48 8b cb	 mov	 rcx, rbx
  00139	4d 1b c0	 sbb	 r8, r8
  0013c	4c 23 c5	 and	 r8, rbp
  0013f	e8 00 00 00 00	 call	 zip64local_putValue
  00144	85 c0		 test	 eax, eax
  00146	0f 85 f7 00 00
	00		 jne	 $LN30@Write_Loca

; 969  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  0014c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00150	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00154	44 8b c7	 mov	 r8d, edi
  00157	48 8b cb	 mov	 rcx, rbx
  0015a	e8 00 00 00 00	 call	 zip64local_putValue

; 970  : 
; 971  :   if(zi->ci.zip64)
; 972  :   {
; 973  :     size_extrafield += 20;
; 974  :   }
; 975  : 
; 976  :   if (err==ZIP_OK)

  0015f	85 c0		 test	 eax, eax
  00161	0f 85 dc 00 00
	00		 jne	 $LN30@Write_Loca
  00167	39 83 0c 01 01
	00		 cmp	 DWORD PTR [rbx+65804], eax
  0016d	45 8d 46 14	 lea	 r8d, DWORD PTR [r14+20]

; 977  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  00171	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00175	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00179	45 0f 44 c6	 cmove	 r8d, r14d
  0017d	48 8b cb	 mov	 rcx, rbx
  00180	e8 00 00 00 00	 call	 zip64local_putValue
  00185	8b e8		 mov	 ebp, eax

; 978  : 
; 979  :   if ((err==ZIP_OK) && (size_filename > 0))

  00187	85 c0		 test	 eax, eax
  00189	0f 85 b4 00 00
	00		 jne	 $LN30@Write_Loca
  0018f	85 ff		 test	 edi, edi
  00191	74 1f		 je	 SHORT $LN26@Write_Loca

; 980  :   {
; 981  :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  00193	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00197	44 8b cf	 mov	 r9d, edi
  0019a	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0019e	4c 8b c6	 mov	 r8, rsi
  001a1	ff 53 10	 call	 QWORD PTR [rbx+16]
  001a4	3b c7		 cmp	 eax, edi
  001a6	74 0a		 je	 SHORT $LN26@Write_Loca
$LN48@Write_Loca:

; 1011 : }

  001a8	b8 ff ff ff ff	 mov	 eax, -1
  001ad	e9 91 00 00 00	 jmp	 $LN30@Write_Loca
$LN26@Write_Loca:

; 982  :       err = ZIP_ERRNO;
; 983  :   }
; 984  : 
; 985  :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  001b2	45 85 f6	 test	 r14d, r14d
  001b5	74 16		 je	 SHORT $LN25@Write_Loca

; 986  :   {
; 987  :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  001b7	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001bb	45 8b ce	 mov	 r9d, r14d
  001be	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001c2	4d 8b c7	 mov	 r8, r15
  001c5	ff 53 10	 call	 QWORD PTR [rbx+16]
  001c8	41 3b c6	 cmp	 eax, r14d
  001cb	75 db		 jne	 SHORT $LN48@Write_Loca
$LN25@Write_Loca:

; 988  :       err = ZIP_ERRNO;
; 989  :   }
; 990  : 
; 991  : 
; 992  :   if ((err==ZIP_OK) && (zi->ci.zip64))

  001cd	83 bb 0c 01 01
	00 00		 cmp	 DWORD PTR [rbx+65804], 0
  001d4	74 6b		 je	 SHORT $LN28@Write_Loca

; 993  :   {
; 994  :       // write the Zip64 extended info
; 995  :       short HeaderID = 1;
; 996  :       short DataSize = 16;
; 997  :       ZPOS64_T CompressedSize = 0;
; 998  :       ZPOS64_T UncompressedSize = 0;
; 999  : 
; 1000 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1001 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  001d6	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001da	48 8b cb	 mov	 rcx, rbx
  001dd	e8 00 00 00 00	 call	 call_ztell64

; 1002 : 
; 1003 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)HeaderID,2);

  001e2	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001e6	41 b9 02 00 00
	00		 mov	 r9d, 2
  001ec	48 8b cb	 mov	 rcx, rbx
  001ef	48 89 83 10 01
	01 00		 mov	 QWORD PTR [rbx+65808], rax
  001f6	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  001fa	e8 00 00 00 00	 call	 zip64local_putValue

; 1004 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)DataSize,2);

  001ff	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00203	41 b9 02 00 00
	00		 mov	 r9d, 2
  00209	48 8b cb	 mov	 rcx, rbx
  0020c	45 8d 41 0e	 lea	 r8d, QWORD PTR [r9+14]
  00210	e8 00 00 00 00	 call	 zip64local_putValue

; 1005 : 
; 1006 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  00215	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00219	41 b9 08 00 00
	00		 mov	 r9d, 8
  0021f	45 33 c0	 xor	 r8d, r8d
  00222	48 8b cb	 mov	 rcx, rbx
  00225	e8 00 00 00 00	 call	 zip64local_putValue

; 1007 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  0022a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0022e	41 b9 08 00 00
	00		 mov	 r9d, 8
  00234	45 33 c0	 xor	 r8d, r8d
  00237	48 8b cb	 mov	 rcx, rbx
  0023a	e8 00 00 00 00	 call	 zip64local_putValue
  0023f	eb 02		 jmp	 SHORT $LN30@Write_Loca
$LN28@Write_Loca:

; 1008 :   }
; 1009 : 
; 1010 :   return err;

  00241	8b c5		 mov	 eax, ebp
$LN30@Write_Loca:
  00243	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]

; 1011 : }

  00248	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0024d	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00252	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00256	41 5f		 pop	 r15
  00258	41 5e		 pop	 r14
  0025a	5f		 pop	 rdi
  0025b	c3		 ret	 0
Write_LocalFileHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip4_64
_TEXT	SEGMENT
bufHead$1 = 64
tv1386 = 144
file$ = 144
filename$ = 152
zipfi$ = 160
extrafield_local$ = 168
size_extrafield_local$ = 176
extrafield_global$ = 184
size_extrafield_global$ = 192
comment$ = 200
method$ = 208
level$ = 216
raw$ = 224
windowBits$ = 232
memLevel$ = 240
strategy$ = 248
password$ = 256
crcForCrypting$ = 264
versionMadeBy$ = 272
flagBase$ = 280
zip64$ = 288
zipOpenNewFileInZip4_64 PROC				; COMDAT

; 1027 :                                            uLong versionMadeBy, uLong flagBase, int zip64) {

$LN97:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	53		 push	 rbx
  0000b	57		 push	 rdi
  0000c	41 57		 push	 r15
  0000e	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1028 :     zip64_internal* zi;
; 1029 :     uInt size_filename;
; 1030 :     uInt size_comment;
; 1031 :     uInt i;
; 1032 :     int err = ZIP_OK;
; 1033 : 
; 1034 : #    ifdef NOCRYPT
; 1035 :     (crcForCrypting);
; 1036 :     if (password != NULL)
; 1037 :         return ZIP_PARAMERROR;
; 1038 : #    endif
; 1039 : 
; 1040 :     if (file == NULL)

  00018	48 85 c9	 test	 rcx, rcx
  0001b	0f 84 67 05 00
	00		 je	 $LN59@zipOpenNew

; 1041 :         return ZIP_PARAMERROR;
; 1042 : 
; 1043 : #ifdef HAVE_BZIP2
; 1044 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1045 :       return ZIP_PARAMERROR;
; 1046 : #else
; 1047 :     if ((method!=0) && (method!=Z_DEFLATED))

  00021	44 8b bc 24 d0
	00 00 00	 mov	 r15d, DWORD PTR method$[rsp]
  00029	41 f7 c7 f7 ff
	ff ff		 test	 r15d, -9		; fffffff7H
  00030	0f 85 52 05 00
	00		 jne	 $LN59@zipOpenNew

; 1049 : #endif
; 1050 : 
; 1051 :     zi = (zip64_internal*)file;
; 1052 : 
; 1053 :     if (zi->in_opened_file_inzip == 1)

  00036	83 79 70 01	 cmp	 DWORD PTR [rcx+112], 1
  0003a	75 15		 jne	 SHORT $LN14@zipOpenNew

; 1054 :     {
; 1055 :         err = zipCloseFileInZip (file);

  0003c	e8 00 00 00 00	 call	 zipCloseFileInZip

; 1056 :         if (err != ZIP_OK)

  00041	85 c0		 test	 eax, eax
  00043	0f 85 a5 03 00
	00		 jne	 $LN1@zipOpenNew
  00049	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
$LN14@zipOpenNew:
  00051	48 89 ac 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rbp

; 1057 :             return err;
; 1058 :     }
; 1059 : 
; 1060 :     if (filename==NULL)
; 1061 :         filename="-";
; 1062 : 
; 1063 :     if (comment==NULL)

  00059	48 85 ff	 test	 rdi, rdi
  0005c	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  00061	48 8b b4 24 c8
	00 00 00	 mov	 rsi, QWORD PTR comment$[rsp]
  00069	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  0006e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
  00075	4c 0f 45 e7	 cmovne	 r12, rdi
  00079	4c 89 6c 24 58	 mov	 QWORD PTR [rsp+88], r13
  0007e	33 d2		 xor	 edx, edx
  00080	4c 89 74 24 50	 mov	 QWORD PTR [rsp+80], r14
  00085	48 85 f6	 test	 rsi, rsi
  00088	75 04		 jne	 SHORT $LN16@zipOpenNew

; 1064 :         size_comment = 0;

  0008a	8b ea		 mov	 ebp, edx
  0008c	eb 0f		 jmp	 SHORT $LN17@zipOpenNew
$LN16@zipOpenNew:

; 1065 :     else
; 1066 :         size_comment = (uInt)strlen(comment);

  0008e	48 c7 c5 ff ff
	ff ff		 mov	 rbp, -1
$LL63@zipOpenNew:
  00095	48 ff c5	 inc	 rbp
  00098	38 14 2e	 cmp	 BYTE PTR [rsi+rbp], dl
  0009b	75 f8		 jne	 SHORT $LL63@zipOpenNew
$LN17@zipOpenNew:

; 1067 : 
; 1068 :     size_filename = (uInt)strlen(filename);

  0009d	49 c7 c6 ff ff
	ff ff		 mov	 r14, -1
$LL62@zipOpenNew:
  000a4	49 ff c6	 inc	 r14
  000a7	43 38 14 34	 cmp	 BYTE PTR [r12+r14], dl
  000ab	75 f7		 jne	 SHORT $LL62@zipOpenNew

; 1069 : 
; 1070 :     if (zipfi == NULL)

  000ad	4d 85 c0	 test	 r8, r8
  000b0	75 04		 jne	 SHORT $LN18@zipOpenNew

; 1071 :         zi->ci.dosDate = 0;

  000b2	8b c2		 mov	 eax, edx
  000b4	eb 10		 jmp	 SHORT $LN21@zipOpenNew
$LN18@zipOpenNew:

; 1072 :     else
; 1073 :     {
; 1074 :         if (zipfi->dosDate != 0)

  000b6	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  000ba	85 c0		 test	 eax, eax
  000bc	75 08		 jne	 SHORT $LN21@zipOpenNew

; 1075 :             zi->ci.dosDate = zipfi->dosDate;
; 1076 :         else
; 1077 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  000be	49 8b c8	 mov	 rcx, r8
  000c1	e8 00 00 00 00	 call	 zip64local_TmzDateToDosDate
$LN21@zipOpenNew:

; 1078 :     }
; 1079 : 
; 1080 :     zi->ci.flag = flagBase;
; 1081 :     if ((level==8) || (level==9))

  000c6	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR level$[rsp]
  000cd	89 83 00 01 01
	00		 mov	 DWORD PTR [rbx+65792], eax
  000d3	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR flagBase$[rsp]
  000da	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
  000e0	83 f9 08	 cmp	 ecx, 8
  000e3	74 05		 je	 SHORT $LN23@zipOpenNew
  000e5	83 f9 09	 cmp	 ecx, 9
  000e8	75 09		 jne	 SHORT $LN22@zipOpenNew
$LN23@zipOpenNew:

; 1082 :       zi->ci.flag |= 2;

  000ea	83 c8 02	 or	 eax, 2
  000ed	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN22@zipOpenNew:

; 1083 :     if (level==2)

  000f3	83 f9 02	 cmp	 ecx, 2
  000f6	75 05		 jne	 SHORT $LN24@zipOpenNew

; 1084 :       zi->ci.flag |= 4;

  000f8	83 c8 04	 or	 eax, 4
  000fb	eb 08		 jmp	 SHORT $LN94@zipOpenNew
$LN24@zipOpenNew:

; 1085 :     if (level==1)

  000fd	83 f9 01	 cmp	 ecx, 1
  00100	75 09		 jne	 SHORT $LN25@zipOpenNew

; 1086 :       zi->ci.flag |= 6;

  00102	83 c8 06	 or	 eax, 6
$LN94@zipOpenNew:

; 1087 :     if (password != NULL)

  00105	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN25@zipOpenNew:
  0010b	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  00114	74 09		 je	 SHORT $LN26@zipOpenNew

; 1088 :       zi->ci.flag |= 1;

  00116	83 c8 01	 or	 eax, 1
  00119	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN26@zipOpenNew:

; 1089 : 
; 1090 :     zi->ci.crc32 = 0;
; 1091 :     zi->ci.method = method;
; 1092 :     zi->ci.encrypt = 0;
; 1093 :     zi->ci.stream_initialised = 0;
; 1094 :     zi->ci.pos_in_buffered_data = 0;
; 1095 :     zi->ci.raw = raw;

  0011f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR raw$[rsp]

; 1096 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  00126	48 8b cb	 mov	 rcx, rbx
  00129	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0012d	89 83 fc 00 00
	00		 mov	 DWORD PTR [rbx+252], eax
  00133	48 c7 83 04 01
	01 00 00 00 00
	00		 mov	 QWORD PTR [rbx+65796], 0
  0013e	44 89 bb f8 00
	00 00		 mov	 DWORD PTR [rbx+248], r15d
  00145	48 c7 83 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+208], 0
  00150	e8 00 00 00 00	 call	 call_ztell64

; 1097 : 
; 1098 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  00155	44 8b ac 24 c0
	00 00 00	 mov	 r13d, DWORD PTR size_extrafield_global$[rsp]
  0015d	48 89 83 d8 00
	00 00		 mov	 QWORD PTR [rbx+216], rax
  00164	8d 45 2e	 lea	 eax, DWORD PTR [rbp+46]
  00167	41 03 c6	 add	 eax, r14d

; 1099 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  0016a	c7 83 f0 00 00
	00 20 00 00 00	 mov	 DWORD PTR [rbx+240], 32	; 00000020H
  00174	41 03 c5	 add	 eax, r13d
  00177	89 83 ec 00 00
	00		 mov	 DWORD PTR [rbx+236], eax

; 1100 : 
; 1101 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  0017d	8d 48 20	 lea	 ecx, DWORD PTR [rax+32]
  00180	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00186	48 8d bb e0 00
	00 00		 lea	 rdi, QWORD PTR [rbx+224]

; 1102 : 
; 1103 :     zi->ci.size_centralExtra = size_extrafield_global;

  0018d	44 89 ab e8 00
	00 00		 mov	 DWORD PTR [rbx+232], r13d

; 1104 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  00194	48 8b c8	 mov	 rcx, rax
  00197	48 89 07	 mov	 QWORD PTR [rdi], rax
  0019a	ba 50 4b 01 02	 mov	 edx, 33639248		; 02014b50H
  0019f	41 b8 04 00 00
	00		 mov	 r8d, 4
  001a5	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1105 :     /* version info */
; 1106 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  001aa	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  001ad	41 b8 02 00 00
	00		 mov	 r8d, 2
  001b3	8b 94 24 10 01
	00 00		 mov	 edx, DWORD PTR versionMadeBy$[rsp]
  001ba	48 83 c1 04	 add	 rcx, 4
  001be	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1107 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  001c3	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  001c6	ba 14 00 00 00	 mov	 edx, 20
  001cb	48 83 c1 06	 add	 rcx, 6
  001cf	44 8d 42 ee	 lea	 r8d, QWORD PTR [rdx-18]
  001d3	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1108 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  001d8	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  001db	41 b8 02 00 00
	00		 mov	 r8d, 2
  001e1	8b 93 f4 00 00
	00		 mov	 edx, DWORD PTR [rbx+244]
  001e7	48 83 c1 08	 add	 rcx, 8
  001eb	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1109 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  001f0	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  001f3	41 b8 02 00 00
	00		 mov	 r8d, 2
  001f9	8b 93 f8 00 00
	00		 mov	 edx, DWORD PTR [rbx+248]
  001ff	48 83 c1 0a	 add	 rcx, 10
  00203	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1110 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  00208	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0020b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00211	8b 93 00 01 01
	00		 mov	 edx, DWORD PTR [rbx+65792]
  00217	48 83 c1 0c	 add	 rcx, 12
  0021b	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1111 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  00220	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00223	33 d2		 xor	 edx, edx
  00225	48 83 c1 10	 add	 rcx, 16
  00229	44 8d 42 04	 lea	 r8d, QWORD PTR [rdx+4]
  0022d	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1112 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  00232	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00235	33 d2		 xor	 edx, edx
  00237	48 83 c1 14	 add	 rcx, 20
  0023b	44 8d 42 04	 lea	 r8d, QWORD PTR [rdx+4]
  0023f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1113 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  00244	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00247	33 d2		 xor	 edx, edx
  00249	48 83 c1 18	 add	 rcx, 24
  0024d	44 8d 42 04	 lea	 r8d, QWORD PTR [rdx+4]
  00251	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1114 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  00256	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00259	41 b8 02 00 00
	00		 mov	 r8d, 2
  0025f	48 83 c1 1c	 add	 rcx, 28
  00263	41 8b d6	 mov	 edx, r14d
  00266	45 8b fe	 mov	 r15d, r14d
  00269	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1115 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  0026e	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00271	41 8b d5	 mov	 edx, r13d
  00274	48 83 c1 1e	 add	 rcx, 30
  00278	48 89 94 24 90
	00 00 00	 mov	 QWORD PTR tv1386[rsp], rdx
  00280	41 b8 02 00 00
	00		 mov	 r8d, 2
  00286	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1116 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  0028b	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0028e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00294	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00298	44 8b ed	 mov	 r13d, ebp
  0029b	8b d5		 mov	 edx, ebp
  0029d	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1117 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  002a2	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  002a5	33 d2		 xor	 edx, edx
  002a7	48 83 c1 22	 add	 rcx, 34			; 00000022H
  002ab	44 8d 42 02	 lea	 r8d, QWORD PTR [rdx+2]
  002af	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1118 : 
; 1119 :     if (zipfi==NULL)

  002b4	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  002b7	41 b8 02 00 00
	00		 mov	 r8d, 2
  002bd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  002c5	48 83 c1 24	 add	 rcx, 36			; 00000024H
  002c9	48 85 c0	 test	 rax, rax
  002cc	75 0b		 jne	 SHORT $LN27@zipOpenNew

; 1120 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  002ce	33 d2		 xor	 edx, edx
  002d0	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1123 : 
; 1124 :     if (zipfi==NULL)
; 1125 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  002d5	33 d2		 xor	 edx, edx
  002d7	eb 13		 jmp	 SHORT $LN95@zipOpenNew
$LN27@zipOpenNew:

; 1121 :     else
; 1122 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  002d9	8b 50 1c	 mov	 edx, DWORD PTR [rax+28]
  002dc	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1126 :     else
; 1127 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  002e1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  002e9	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
$LN95@zipOpenNew:

; 1128 : 
; 1129 :     if(zi->ci.pos_local_header >= 0xffffffff)

  002ec	48 8b cf	 mov	 rcx, rdi
  002ef	41 b8 04 00 00
	00		 mov	 r8d, 4
  002f5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002f8	48 83 c1 26	 add	 rcx, 38			; 00000026H
  002fc	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  00301	48 8b 83 d8 00
	00 00		 mov	 rax, QWORD PTR [rbx+216]
  00308	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  0030d	48 3b c2	 cmp	 rax, rdx
  00310	73 09		 jae	 SHORT $LN32@zipOpenNew

; 1130 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);
; 1131 :     else
; 1132 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writing_offset,4);

  00312	8b d0		 mov	 edx, eax
  00314	48 2b 93 50 01
	01 00		 sub	 rdx, QWORD PTR [rbx+65872]
$LN32@zipOpenNew:

; 1133 : 
; 1134 :     for (i=0;i<size_filename;i++)

  0031b	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0031e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00324	48 83 c1 2a	 add	 rcx, 42			; 0000002aH
  00328	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  0032d	45 85 f6	 test	 r14d, r14d
  00330	74 29		 je	 SHORT $LN66@zipOpenNew

; 1135 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  00332	45 33 f6	 xor	 r14d, r14d
  00335	4d 8b c4	 mov	 r8, r12
  00338	41 8b d6	 mov	 edx, r14d
  0033b	4d 8b cf	 mov	 r9, r15
  0033e	66 90		 npad	 2
$LL4@zipOpenNew:
  00340	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  00344	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  00348	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0034b	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  0034f	88 44 0a 2d	 mov	 BYTE PTR [rdx+rcx+45], al
  00353	49 83 e9 01	 sub	 r9, 1
  00357	75 e7		 jne	 SHORT $LL4@zipOpenNew

; 1133 : 
; 1134 :     for (i=0;i<size_filename;i++)

  00359	eb 03		 jmp	 SHORT $LN3@zipOpenNew
$LN66@zipOpenNew:
  0035b	45 33 f6	 xor	 r14d, r14d
$LN3@zipOpenNew:

; 1136 : 
; 1137 :     for (i=0;i<size_extrafield_global;i++)

  0035e	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR size_extrafield_global$[rsp], 0
  00366	4c 8b 9c 24 90
	00 00 00	 mov	 r11, QWORD PTR tv1386[rsp]
  0036e	76 2d		 jbe	 SHORT $LN6@zipOpenNew

; 1138 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =

  00370	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR extrafield_global$[rsp]
  00378	4d 8b c6	 mov	 r8, r14
  0037b	4d 8b d3	 mov	 r10, r11
  0037e	66 90		 npad	 2
$LL7@zipOpenNew:
  00380	41 0f b6 01	 movzx	 eax, BYTE PTR [r9]
  00384	4b 8d 14 38	 lea	 rdx, QWORD PTR [r8+r15]
  00388	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0038b	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  0038f	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]
  00393	88 44 0a 2e	 mov	 BYTE PTR [rdx+rcx+46], al
  00397	49 83 ea 01	 sub	 r10, 1
  0039b	75 e3		 jne	 SHORT $LL7@zipOpenNew
$LN6@zipOpenNew:

; 1139 :               *(((const char*)extrafield_global)+i);
; 1140 : 
; 1141 :     for (i=0;i<size_comment;i++)

  0039d	85 ed		 test	 ebp, ebp
  0039f	48 8b ac 24 98
	00 00 00	 mov	 rbp, QWORD PTR [rsp+152]
  003a7	74 26		 je	 SHORT $LN9@zipOpenNew

; 1142 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1143 :               size_extrafield_global+i) = *(comment+i);

  003a9	4d 8b c6	 mov	 r8, r14
  003ac	0f 1f 40 00	 npad	 4
$LL10@zipOpenNew:
  003b0	0f b6 06	 movzx	 eax, BYTE PTR [rsi]
  003b3	4b 8d 14 03	 lea	 rdx, QWORD PTR [r11+r8]
  003b7	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  003ba	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  003be	49 03 d7	 add	 rdx, r15
  003c1	48 8d 76 01	 lea	 rsi, QWORD PTR [rsi+1]
  003c5	88 44 0a 2e	 mov	 BYTE PTR [rdx+rcx+46], al
  003c9	49 83 ed 01	 sub	 r13, 1
  003cd	75 e1		 jne	 SHORT $LL10@zipOpenNew
$LN9@zipOpenNew:

; 1144 :     if (zi->ci.central_header == NULL)

  003cf	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  003d3	4c 8b 6c 24 58	 mov	 r13, QWORD PTR [rsp+88]
  003d8	75 1d		 jne	 SHORT $LN33@zipOpenNew

; 1145 :         return ZIP_INTERNALERROR;

  003da	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
$LN93@zipOpenNew:
  003df	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  003e4	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  003e9	4c 8b 74 24 50	 mov	 r14, QWORD PTR [rsp+80]
$LN1@zipOpenNew:

; 1228 : }

  003ee	48 83 c4 70	 add	 rsp, 112		; 00000070H
  003f2	41 5f		 pop	 r15
  003f4	5f		 pop	 rdi
  003f5	5b		 pop	 rbx
  003f6	c3		 ret	 0
$LN33@zipOpenNew:

; 1146 : 
; 1147 :     zi->ci.zip64 = zip64;

  003f7	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]

; 1148 :     zi->ci.totalCompressedData = 0;
; 1149 :     zi->ci.totalUncompressedData = 0;
; 1150 :     zi->ci.pos_zip64extrainfo = 0;
; 1151 : 
; 1152 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  003fe	49 8b d4	 mov	 rdx, r12
  00401	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  00409	48 8b cb	 mov	 rcx, rbx
  0040c	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR size_extrafield_local$[rsp]
  00414	89 83 0c 01 01
	00		 mov	 DWORD PTR [rbx+65804], eax
  0041a	4c 89 b3 18 01
	01 00		 mov	 QWORD PTR [rbx+65816], r14
  00421	4c 89 b3 20 01
	01 00		 mov	 QWORD PTR [rbx+65824], r14
  00428	4c 89 b3 10 01
	01 00		 mov	 QWORD PTR [rbx+65808], r14
  0042f	e8 00 00 00 00	 call	 Write_LocalFileHeader

; 1153 : 
; 1154 : #ifdef HAVE_BZIP2
; 1155 :     zi->ci.bstream.avail_in = (uInt)0;
; 1156 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1157 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1158 :     zi->ci.bstream.total_in_hi32 = 0;
; 1159 :     zi->ci.bstream.total_in_lo32 = 0;
; 1160 :     zi->ci.bstream.total_out_hi32 = 0;
; 1161 :     zi->ci.bstream.total_out_lo32 = 0;
; 1162 : #endif
; 1163 : 
; 1164 :     zi->ci.stream.avail_in = (uInt)0;

  00434	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0

; 1165 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1166 :     zi->ci.stream.next_out = zi->ci.buffered_data;

  0043f	48 8d 8b 00 01
	00 00		 lea	 rcx, QWORD PTR [rbx+256]
  00446	48 89 8b 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rcx
  0044d	8b f0		 mov	 esi, eax
  0044f	48 c7 83 90 00
	00 00 00 00 01
	00		 mov	 QWORD PTR [rbx+144], 65536 ; 00010000H

; 1167 :     zi->ci.stream.total_in = 0;
; 1168 :     zi->ci.stream.total_out = 0;
; 1169 :     zi->ci.stream.data_type = Z_BINARY;

  0045a	44 89 b3 c0 00
	00 00		 mov	 DWORD PTR [rbx+192], r14d

; 1170 : 
; 1171 : #ifdef HAVE_BZIP2
; 1172 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1173 : #else
; 1174 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00461	85 c0		 test	 eax, eax
  00463	0f 85 94 00 00
	00		 jne	 $LN38@zipOpenNew
  00469	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  00470	0f 85 87 00 00
	00		 jne	 $LN38@zipOpenNew
  00476	39 83 fc 00 00
	00		 cmp	 DWORD PTR [rbx+252], eax
  0047c	75 7f		 jne	 SHORT $LN38@zipOpenNew

; 1175 : #endif
; 1176 :     {
; 1177 :         if(zi->ci.method == Z_DEFLATED)
; 1178 :         {
; 1179 :           zi->ci.stream.zalloc = (alloc_func)0;
; 1180 :           zi->ci.stream.zfree = (free_func)0;
; 1181 :           zi->ci.stream.opaque = (voidpf)0;
; 1182 : 
; 1183 :           if (windowBits>0)
; 1184 :               windowBits = -windowBits;
; 1185 : 
; 1186 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  0047e	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00485	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  00489	8b 94 24 d8 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00490	44 8d 46 08	 lea	 r8d, QWORD PTR [rsi+8]
  00494	44 8b c8	 mov	 r9d, eax
  00497	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  0049f	41 f7 d9	 neg	 r9d
  004a2	4c 89 b3 a8 00
	00 00		 mov	 QWORD PTR [rbx+168], r14
  004a9	85 c0		 test	 eax, eax
  004ab	4c 89 b3 b0 00
	00 00		 mov	 QWORD PTR [rbx+176], r14
  004b2	4c 89 b3 b8 00
	00 00		 mov	 QWORD PTR [rbx+184], r14
  004b9	44 0f 4e c8	 cmovle	 r9d, eax
  004bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BA@MAILBDAG@1?42?413?41?9motley@
  004c4	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  004c9	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  004d0	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  004d4	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  004db	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  004df	e8 00 00 00 00	 call	 deflateInit2_
  004e4	8b f0		 mov	 esi, eax

; 1187 : 
; 1188 :           if (err==Z_OK)

  004e6	85 c0		 test	 eax, eax
  004e8	75 13		 jne	 SHORT $LN38@zipOpenNew

; 1189 :               zi->ci.stream_initialised = Z_DEFLATED;

  004ea	c7 83 d0 00 00
	00 08 00 00 00	 mov	 DWORD PTR [rbx+208], 8
  004f4	44 89 b3 40 01
	01 00		 mov	 DWORD PTR [rbx+65856], r14d
  004fb	eb 0b		 jmp	 SHORT $LN57@zipOpenNew
$LN38@zipOpenNew:

; 1190 :         }
; 1191 :         else if(zi->ci.method == Z_BZIP2ED)
; 1192 :         {
; 1193 : #ifdef HAVE_BZIP2
; 1194 :             // Init BZip stuff here
; 1195 :           zi->ci.bstream.bzalloc = 0;
; 1196 :           zi->ci.bstream.bzfree = 0;
; 1197 :           zi->ci.bstream.opaque = (voidpf)0;
; 1198 : 
; 1199 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1200 :           if(err == BZ_OK)
; 1201 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1202 : #endif
; 1203 :         }
; 1204 : 
; 1205 :     }
; 1206 : 
; 1207 : #    ifndef NOCRYPT
; 1208 :     zi->ci.crypt_header_size = 0;

  004fd	44 89 b3 40 01
	01 00		 mov	 DWORD PTR [rbx+65856], r14d

; 1209 :     if ((err==Z_OK) && (password != NULL))

  00504	85 f6		 test	 esi, esi
  00506	75 79		 jne	 SHORT $LN42@zipOpenNew
$LN57@zipOpenNew:
  00508	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR password$[rsp]
  00510	48 85 ff	 test	 rdi, rdi
  00513	74 65		 je	 SHORT $LN56@zipOpenNew

; 1210 :     {
; 1211 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1212 :         unsigned int sizeHead;
; 1213 :         zi->ci.encrypt = 1;

  00515	c7 83 08 01 01
	00 01 00 00 00	 mov	 DWORD PTR [rbx+65800], 1

; 1214 :         zi->ci.pcrc_32_tab = get_crc_table();

  0051f	e8 00 00 00 00	 call	 get_crc_table

; 1215 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1216 : 
; 1217 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  00524	8b 94 24 08 01
	00 00		 mov	 edx, DWORD PTR crcForCrypting$[rsp]
  0052b	4c 8d 8b 28 01
	01 00		 lea	 r9, QWORD PTR [rbx+65832]
  00532	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  00536	48 8b cf	 mov	 rcx, rdi
  00539	48 8d 54 24 40	 lea	 rdx, QWORD PTR bufHead$1[rsp]
  0053e	48 89 83 38 01
	01 00		 mov	 QWORD PTR [rbx+65848], rax
  00545	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0054a	e8 00 00 00 00	 call	 crypthead

; 1218 :         zi->ci.crypt_header_size = sizeHead;
; 1219 : 
; 1220 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  0054f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00553	4c 8d 44 24 40	 lea	 r8, QWORD PTR bufHead$1[rsp]
  00558	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0055c	44 8b c8	 mov	 r9d, eax
  0055f	8b f8		 mov	 edi, eax
  00561	89 83 40 01 01
	00		 mov	 DWORD PTR [rbx+65856], eax
  00567	ff 53 10	 call	 QWORD PTR [rbx+16]
  0056a	3b c7		 cmp	 eax, edi
  0056c	74 0c		 je	 SHORT $LN56@zipOpenNew

; 1221 :                 err = ZIP_ERRNO;

  0056e	be ff ff ff ff	 mov	 esi, -1

; 1227 :     return err;

  00573	8b c6		 mov	 eax, esi
  00575	e9 65 fe ff ff	 jmp	 $LN93@zipOpenNew
$LN56@zipOpenNew:

; 1222 :     }
; 1223 : #    endif
; 1224 : 
; 1225 :     if (err==Z_OK)
; 1226 :         zi->in_opened_file_inzip = 1;

  0057a	c7 43 70 01 00
	00 00		 mov	 DWORD PTR [rbx+112], 1
$LN42@zipOpenNew:

; 1227 :     return err;

  00581	8b c6		 mov	 eax, esi
  00583	e9 57 fe ff ff	 jmp	 $LN93@zipOpenNew
$LN59@zipOpenNew:

; 1048 :       return ZIP_PARAMERROR;

  00588	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1228 : }

  0058d	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00591	41 5f		 pop	 r15
  00593	5f		 pop	 rdi
  00594	5b		 pop	 rbx
  00595	c3		 ret	 0
zipOpenNewFileInZip4_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip3
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zipOpenNewFileInZip3 PROC				; COMDAT

; 1250 :                                         const char* password, uLong crcForCrypting) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1251 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  0002b	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  0002f	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  00036	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0003a	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00041	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  00045	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  0004c	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00050	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00057	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0005b	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00062	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00066	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  0006d	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00071	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00079	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  0007d	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00084	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00088	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00090	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00094	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0009b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0009f	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1252 :                                    extrafield_local, size_extrafield_local,
; 1253 :                                    extrafield_global, size_extrafield_global,
; 1254 :                                    comment, method, level, raw,
; 1255 :                                    windowBits, memLevel, strategy,
; 1256 :                                    password, crcForCrypting, VERSIONMADEBY, 0, 0);
; 1257 : }

  000a4	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000ab	c3		 ret	 0
zipOpenNewFileInZip3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip3_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zip64$ = 304
zipOpenNewFileInZip3_64 PROC				; COMDAT

; 1264 :                                          const char* password, uLong crcForCrypting, int zip64) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1265 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00026	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0002a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  00032	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00036	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  0003d	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00041	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00048	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  0004c	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00053	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00057	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0005e	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00062	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00069	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0006d	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00074	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00078	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00080	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00084	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0008b	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0008f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00097	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  0009b	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000a2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a6	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1266 :                                    extrafield_local, size_extrafield_local,
; 1267 :                                    extrafield_global, size_extrafield_global,
; 1268 :                                    comment, method, level, raw,
; 1269 :                                    windowBits, memLevel, strategy,
; 1270 :                                    password, crcForCrypting, VERSIONMADEBY, 0, zip64);
; 1271 : }

  000ab	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000b2	c3		 ret	 0
zipOpenNewFileInZip3_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip2
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zipOpenNewFileInZip2 PROC				; COMDAT

; 1276 :                                         const char* comment, int method, int level, int raw) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1277 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0001c	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00020	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00024	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0002b	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00033	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  0003b	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0003f	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00046	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0004a	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0005d	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00061	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00068	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0006c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00074	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00078	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0007f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00083	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1278 :                                    extrafield_local, size_extrafield_local,
; 1279 :                                    extrafield_global, size_extrafield_global,
; 1280 :                                    comment, method, level, raw,
; 1281 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1282 :                                    NULL, 0, VERSIONMADEBY, 0, 0);
; 1283 : }

  00088	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0008f	c3		 ret	 0
zipOpenNewFileInZip2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip2_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zip64$ = 264
zipOpenNewFileInZip2_64 PROC				; COMDAT

; 1288 :                                            const char* comment, int method, int level, int raw, int zip64) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1289 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00027	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0002b	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00032	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0003a	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00042	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00046	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0004d	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00051	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00058	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0005c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00064	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00068	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0006f	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00073	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  0007b	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  0007f	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  00086	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0008a	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1290 :                                    extrafield_local, size_extrafield_local,
; 1291 :                                    extrafield_global, size_extrafield_global,
; 1292 :                                    comment, method, level, raw,
; 1293 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1294 :                                    NULL, 0, VERSIONMADEBY, 0, zip64);
; 1295 : }

  0008f	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00096	c3		 ret	 0
zipOpenNewFileInZip2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zip64$ = 256
zipOpenNewFileInZip64 PROC				; COMDAT

; 1300 :                                          const char* comment, int method, int level, int zip64) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1301 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00027	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0002b	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00033	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  0003b	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0003f	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00046	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0004a	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0005d	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00061	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00068	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0006c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00074	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00078	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0007f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00083	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1302 :                                    extrafield_local, size_extrafield_local,
; 1303 :                                    extrafield_global, size_extrafield_global,
; 1304 :                                    comment, method, level, 0,
; 1305 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1306 :                                    NULL, 0, VERSIONMADEBY, 0, zip64);
; 1307 : }

  00088	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0008f	c3		 ret	 0
zipOpenNewFileInZip64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zipOpenNewFileInZip PROC				; COMDAT

; 1312 :                                        const char* comment, int method, int level) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1313 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0001c	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00020	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00024	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0002c	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00034	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00038	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0003f	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00043	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  0004a	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0004e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00056	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  0005a	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00061	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00065	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  0006d	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00071	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1314 :                                    extrafield_local, size_extrafield_local,
; 1315 :                                    extrafield_global, size_extrafield_global,
; 1316 :                                    comment, method, level, 0,
; 1317 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1318 :                                    NULL, 0, VERSIONMADEBY, 0, 0);
; 1319 : }

  00081	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00088	c3		 ret	 0
zipOpenNewFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zip64FlushWriteBuffer
_TEXT	SEGMENT
zi$ = 48
zip64FlushWriteBuffer PROC				; COMDAT

; 1321 : local int zip64FlushWriteBuffer(zip64_internal* zi) {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1322 :     int err=ZIP_OK;
; 1323 : 
; 1324 :     if (zi->ci.encrypt != 0)

  0000a	83 b9 08 01 01
	00 00		 cmp	 DWORD PTR [rcx+65800], 0
  00011	48 8b d9	 mov	 rbx, rcx
  00014	74 65		 je	 SHORT $LN3@zip64Flush
  00016	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 1325 :     {
; 1326 : #ifndef NOCRYPT
; 1327 :         uInt i;
; 1328 :         int t;
; 1329 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  0001b	33 ed		 xor	 ebp, ebp
  0001d	39 a9 d4 00 00
	00		 cmp	 DWORD PTR [rcx+212], ebp
  00023	76 51		 jbe	 SHORT $LN14@zip64Flush
  00025	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0002a	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  0002f	90		 npad	 1
$LL4@zip64Flush:

; 1330 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  00030	48 8d 8b 28 01
	01 00		 lea	 rcx, QWORD PTR [rbx+65832]
  00037	e8 00 00 00 00	 call	 decrypt_byte
  0003c	48 8b 93 38 01
	01 00		 mov	 rdx, QWORD PTR [rbx+65848]
  00043	48 8d 8b 28 01
	01 00		 lea	 rcx, QWORD PTR [rbx+65832]
  0004a	44 0f b6 84 1d
	00 01 00 00	 movzx	 r8d, BYTE PTR [rbp+rbx+256]
  00053	8b f0		 mov	 esi, eax
  00055	e8 00 00 00 00	 call	 update_keys
  0005a	40 30 b4 1d 00
	01 00 00	 xor	 BYTE PTR [rbp+rbx+256], sil
  00062	ff c5		 inc	 ebp
  00064	3b ab d4 00 00
	00		 cmp	 ebp, DWORD PTR [rbx+212]
  0006a	72 c4		 jb	 SHORT $LL4@zip64Flush

; 1325 :     {
; 1326 : #ifndef NOCRYPT
; 1327 :         uInt i;
; 1328 :         int t;
; 1329 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  0006c	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]
  00071	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
$LN14@zip64Flush:
  00076	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN3@zip64Flush:

; 1331 : #endif
; 1332 :     }
; 1333 : 
; 1334 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  0007b	44 8b 8b d4 00
	00 00		 mov	 r9d, DWORD PTR [rbx+212]
  00082	4c 8d 83 00 01
	00 00		 lea	 r8, QWORD PTR [rbx+256]
  00089	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008d	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00091	8b bb d4 00 00
	00		 mov	 edi, DWORD PTR [rbx+212]
  00097	ff 53 10	 call	 QWORD PTR [rbx+16]
  0009a	33 d2		 xor	 edx, edx

; 1335 :       err = ZIP_ERRNO;
; 1336 : 
; 1337 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;
; 1338 : 
; 1339 : #ifdef HAVE_BZIP2
; 1340 :     if(zi->ci.method == Z_BZIP2ED)
; 1341 :     {
; 1342 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1343 :       zi->ci.bstream.total_in_lo32 = 0;
; 1344 :       zi->ci.bstream.total_in_hi32 = 0;
; 1345 :     }
; 1346 :     else
; 1347 : #endif
; 1348 :     {
; 1349 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;
; 1350 :       zi->ci.stream.total_in = 0;
; 1351 :     }
; 1352 : 
; 1353 : 
; 1354 :     zi->ci.pos_in_buffered_data = 0;

  0009c	c7 83 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+212], 0
  000a6	3b c7		 cmp	 eax, edi
  000a8	b9 ff ff ff ff	 mov	 ecx, -1
  000ad	0f 45 d1	 cmovne	 edx, ecx
  000b0	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  000b6	48 01 bb 18 01
	01 00		 add	 QWORD PTR [rbx+65816], rdi

; 1355 : 
; 1356 :     return err;

  000bd	8b c2		 mov	 eax, edx
  000bf	48 01 8b 20 01
	01 00		 add	 QWORD PTR [rbx+65824], rcx
  000c6	c7 83 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+132], 0

; 1357 : }

  000d0	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000d5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
zip64FlushWriteBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipWriteInFileInZip
_TEXT	SEGMENT
file$ = 48
buf$ = 56
len$ = 64
zipWriteInFileInZip PROC				; COMDAT

; 1359 : extern int ZEXPORT zipWriteInFileInZip(zipFile file, const void* buf, unsigned int len) {

$LN40:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1360 :     zip64_internal* zi;
; 1361 :     int err=ZIP_OK;

  00015	33 ed		 xor	 ebp, ebp
  00017	41 8b f8	 mov	 edi, r8d
  0001a	4c 8b f2	 mov	 r14, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1362 : 
; 1363 :     if (file == NULL)

  00020	48 85 c9	 test	 rcx, rcx
  00023	0f 84 19 01 00
	00		 je	 $LN28@zipWriteIn

; 1364 :         return ZIP_PARAMERROR;
; 1365 :     zi = (zip64_internal*)file;
; 1366 : 
; 1367 :     if (zi->in_opened_file_inzip == 0)

  00029	39 69 70	 cmp	 DWORD PTR [rcx+112], ebp
  0002c	0f 84 10 01 00
	00		 je	 $LN28@zipWriteIn

; 1369 : 
; 1370 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  00032	8b 89 04 01 01
	00		 mov	 ecx, DWORD PTR [rcx+65796]
  00038	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003d	e8 00 00 00 00	 call	 crc32

; 1371 : 
; 1372 : #ifdef HAVE_BZIP2
; 1373 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1374 :     {
; 1375 :       zi->ci.bstream.next_in = (void*)buf;
; 1376 :       zi->ci.bstream.avail_in = len;
; 1377 :       err = BZ_RUN_OK;
; 1378 : 
; 1379 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1380 :       {
; 1381 :         if (zi->ci.bstream.avail_out == 0)
; 1382 :         {
; 1383 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1384 :             err = ZIP_ERRNO;
; 1385 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1386 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1387 :         }
; 1388 : 
; 1389 : 
; 1390 :         if(err != BZ_RUN_OK)
; 1391 :           break;
; 1392 : 
; 1393 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1394 :         {
; 1395 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1396 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1397 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1398 : 
; 1399 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1400 :         }
; 1401 :       }
; 1402 : 
; 1403 :       if(err == BZ_RUN_OK)
; 1404 :         err = ZIP_OK;
; 1405 :     }
; 1406 :     else
; 1407 : #endif
; 1408 :     {
; 1409 :       zi->ci.stream.next_in = (Bytef*)(uintptr_t)buf;

  00042	4c 89 73 78	 mov	 QWORD PTR [rbx+120], r14

; 1410 :       zi->ci.stream.avail_in = len;

  00046	44 8d 75 ff	 lea	 r14d, QWORD PTR [rbp-1]
  0004a	89 83 04 01 01
	00		 mov	 DWORD PTR [rbx+65796], eax
  00050	89 bb 80 00 00
	00		 mov	 DWORD PTR [rbx+128], edi
$LL2@zipWriteIn:

; 1411 : 
; 1412 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00056	83 bb 80 00 00
	00 00		 cmp	 DWORD PTR [rbx+128], 0
  0005d	76 70		 jbe	 SHORT $LN30@zipWriteIn

; 1413 :       {
; 1414 :           if (zi->ci.stream.avail_out == 0)

  0005f	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [rbx+144]
  00065	85 c0		 test	 eax, eax
  00067	75 2c		 jne	 SHORT $LN27@zipWriteIn

; 1415 :           {
; 1416 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  00071	41 3b c6	 cmp	 eax, r14d

; 1417 :                   err = ZIP_ERRNO;
; 1418 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00074	c7 83 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rbx+144], 65536 ; 00010000H

; 1419 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  0007e	48 8d 83 00 01
	00 00		 lea	 rax, QWORD PTR [rbx+256]
  00085	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
  0008c	41 0f 44 ee	 cmove	 ebp, r14d
  00090	b8 00 00 01 00	 mov	 eax, 65536		; 00010000H
$LN27@zipWriteIn:

; 1420 :           }
; 1421 : 
; 1422 : 
; 1423 :           if(err != ZIP_OK)

  00095	85 ed		 test	 ebp, ebp
  00097	75 36		 jne	 SHORT $LN30@zipWriteIn

; 1424 :               break;
; 1425 : 
; 1426 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00099	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  000a0	75 36		 jne	 SHORT $LN23@zipWriteIn
  000a2	39 ab fc 00 00
	00		 cmp	 DWORD PTR [rbx+252], ebp
  000a8	75 2e		 jne	 SHORT $LN23@zipWriteIn

; 1427 :           {
; 1428 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  000aa	8b bb 94 00 00
	00		 mov	 edi, DWORD PTR [rbx+148]

; 1429 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  000b0	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  000b4	33 d2		 xor	 edx, edx
  000b6	e8 00 00 00 00	 call	 deflate

; 1430 : 
; 1431 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  000bb	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  000c1	8b e8		 mov	 ebp, eax
  000c3	2b cf		 sub	 ecx, edi
  000c5	01 8b d4 00 00
	00		 add	 DWORD PTR [rbx+212], ecx
  000cb	85 c0		 test	 eax, eax
  000cd	74 87		 je	 SHORT $LL2@zipWriteIn
$LN30@zipWriteIn:

; 1452 :               }
; 1453 :           }
; 1454 :       }// while(...)
; 1455 :     }
; 1456 : 
; 1457 :     return err;

  000cf	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000d4	8b c5		 mov	 eax, ebp
  000d6	eb 6f		 jmp	 SHORT $LN1@zipWriteIn
$LN23@zipWriteIn:

; 1432 :           }
; 1433 :           else
; 1434 :           {
; 1435 :               uInt copy_this,i;
; 1436 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  000d8	44 8b 8b 80 00
	00 00		 mov	 r9d, DWORD PTR [rbx+128]

; 1437 :                   copy_this = zi->ci.stream.avail_in;
; 1438 :               else
; 1439 :                   copy_this = zi->ci.stream.avail_out;
; 1440 : 
; 1441 :               for (i = 0; i < copy_this; i++)

  000df	44 3b c8	 cmp	 r9d, eax
  000e2	44 0f 43 c8	 cmovae	 r9d, eax
  000e6	45 33 c0	 xor	 r8d, r8d
  000e9	45 85 c9	 test	 r9d, r9d
  000ec	74 1e		 je	 SHORT $LN5@zipWriteIn
  000ee	66 90		 npad	 2
$LL6@zipWriteIn:

; 1442 :                   *(((char*)zi->ci.stream.next_out)+i) =

  000f0	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  000f4	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  000fb	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00100	41 88 04 08	 mov	 BYTE PTR [r8+rcx], al
  00104	41 ff c0	 inc	 r8d
  00107	45 3b c1	 cmp	 r8d, r9d
  0010a	72 e4		 jb	 SHORT $LL6@zipWriteIn
$LN5@zipWriteIn:

; 1443 :                       *(((const char*)zi->ci.stream.next_in)+i);
; 1444 :               {
; 1445 :                   zi->ci.stream.avail_in -= copy_this;

  0010c	44 29 8b 80 00
	00 00		 sub	 DWORD PTR [rbx+128], r9d

; 1446 :                   zi->ci.stream.avail_out-= copy_this;

  00113	44 29 8b 90 00
	00 00		 sub	 DWORD PTR [rbx+144], r9d

; 1447 :                   zi->ci.stream.next_in+= copy_this;
; 1448 :                   zi->ci.stream.next_out+= copy_this;
; 1449 :                   zi->ci.stream.total_in+= copy_this;

  0011a	44 01 8b 84 00
	00 00		 add	 DWORD PTR [rbx+132], r9d

; 1450 :                   zi->ci.stream.total_out+= copy_this;

  00121	44 01 8b 94 00
	00 00		 add	 DWORD PTR [rbx+148], r9d
  00128	41 8b c1	 mov	 eax, r9d
  0012b	48 01 43 78	 add	 QWORD PTR [rbx+120], rax
  0012f	48 01 83 88 00
	00 00		 add	 QWORD PTR [rbx+136], rax

; 1451 :                   zi->ci.pos_in_buffered_data += copy_this;

  00136	44 01 8b d4 00
	00 00		 add	 DWORD PTR [rbx+212], r9d
  0013d	e9 14 ff ff ff	 jmp	 $LL2@zipWriteIn
$LN28@zipWriteIn:

; 1368 :         return ZIP_PARAMERROR;

  00142	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
$LN1@zipWriteIn:

; 1458 : }

  00147	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0014c	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00151	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00156	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0015a	41 5e		 pop	 r14
  0015c	c3		 ret	 0
zipWriteInFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZipRaw
_TEXT	SEGMENT
file$ = 8
uncompressed_size$ = 16
crc32$ = 24
zipCloseFileInZipRaw PROC				; COMDAT

; 1461 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00000	8b d2		 mov	 edx, edx
  00002	e9 00 00 00 00	 jmp	 zipCloseFileInZipRaw64
zipCloseFileInZipRaw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZipRaw64
_TEXT	SEGMENT
file$ = 80
uncompressed_size$ = 88
crc32$ = 96
zipCloseFileInZipRaw64 PROC				; COMDAT

; 1464 : extern int ZEXPORT zipCloseFileInZipRaw64(zipFile file, ZPOS64_T uncompressed_size, uLong crc32) {

$LN94:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 54		 push	 r12
  00005	41 55		 push	 r13
  00007	41 57		 push	 r15
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1465 :     zip64_internal* zi;
; 1466 :     ZPOS64_T compressed_size;
; 1467 :     uLong invalidValue = 0xffffffff;
; 1468 :     unsigned datasize = 0;
; 1469 :     int err=ZIP_OK;

  0000d	45 33 ed	 xor	 r13d, r13d
  00010	45 8b e0	 mov	 r12d, r8d
  00013	4c 8b fa	 mov	 r15, rdx
  00016	48 8b d9	 mov	 rbx, rcx
  00019	41 8b f5	 mov	 esi, r13d

; 1470 : 
; 1471 :     if (file == NULL)

  0001c	48 85 c9	 test	 rcx, rcx
  0001f	0f 84 48 04 00
	00		 je	 $LN55@zipCloseFi

; 1472 :         return ZIP_PARAMERROR;
; 1473 :     zi = (zip64_internal*)file;
; 1474 : 
; 1475 :     if (zi->in_opened_file_inzip == 0)

  00025	44 39 69 70	 cmp	 DWORD PTR [rcx+112], r13d
  00029	0f 84 3e 04 00
	00		 je	 $LN55@zipCloseFi

; 1477 :     zi->ci.stream.avail_in = 0;
; 1478 : 
; 1479 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0002f	83 b9 f8 00 00
	00 08		 cmp	 DWORD PTR [rcx+248], 8
  00036	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0003b	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  00040	4c 89 74 24 60	 mov	 QWORD PTR [rsp+96], r14
  00045	44 89 a9 80 00
	00 00		 mov	 DWORD PTR [rcx+128], r13d
  0004c	75 61		 jne	 SHORT $LN11@zipCloseFi
  0004e	44 39 a9 fc 00
	00 00		 cmp	 DWORD PTR [rcx+252], r13d
  00055	75 58		 jne	 SHORT $LN11@zipCloseFi
$LL2@zipCloseFi:

; 1480 :                 {
; 1481 :                         while (err==ZIP_OK)
; 1482 :                         {
; 1483 :                                 uLong uTotalOutBefore;
; 1484 :                                 if (zi->ci.stream.avail_out == 0)

  00057	44 39 ab 90 00
	00 00		 cmp	 DWORD PTR [rbx+144], r13d
  0005e	75 20		 jne	 SHORT $LN8@zipCloseFi

; 1485 :                                 {
; 1486 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00060	48 8b cb	 mov	 rcx, rbx
  00063	e8 00 00 00 00	 call	 zip64FlushWriteBuffer

; 1487 :                                                 err = ZIP_ERRNO;
; 1488 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1489 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  00068	48 8d 83 00 01
	00 00		 lea	 rax, QWORD PTR [rbx+256]
  0006f	c7 83 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rbx+144], 65536 ; 00010000H
  00079	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
$LN8@zipCloseFi:

; 1490 :                                 }
; 1491 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  00080	8b bb 94 00 00
	00		 mov	 edi, DWORD PTR [rbx+148]

; 1492 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  00086	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  0008a	ba 04 00 00 00	 mov	 edx, 4
  0008f	e8 00 00 00 00	 call	 deflate
  00094	8b f0		 mov	 esi, eax

; 1493 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00096	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0009c	2b c7		 sub	 eax, edi
  0009e	01 83 d4 00 00
	00		 add	 DWORD PTR [rbx+212], eax
  000a4	85 f6		 test	 esi, esi
  000a6	74 af		 je	 SHORT $LL2@zipCloseFi

; 1494 :                         }
; 1495 :                 }
; 1496 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1497 :     {
; 1498 : #ifdef HAVE_BZIP2
; 1499 :       err = BZ_FINISH_OK;
; 1500 :       while (err==BZ_FINISH_OK)
; 1501 :       {
; 1502 :         uLong uTotalOutBefore;
; 1503 :         if (zi->ci.bstream.avail_out == 0)
; 1504 :         {
; 1505 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1506 :             err = ZIP_ERRNO;
; 1507 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1508 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1509 :         }
; 1510 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1511 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1512 :         if(err == BZ_STREAM_END)
; 1513 :           err = Z_STREAM_END;
; 1514 : 
; 1515 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1516 :       }
; 1517 : 
; 1518 :       if(err == BZ_FINISH_OK)
; 1519 :         err = ZIP_OK;
; 1520 : #endif
; 1521 :     }
; 1522 : 
; 1523 :     if (err==Z_STREAM_END)

  000a8	83 fe 01	 cmp	 esi, 1
  000ab	41 0f 44 f5	 cmove	 esi, r13d
$LN11@zipCloseFi:

; 1524 :         err=ZIP_OK; /* this is normal */
; 1525 : 
; 1526 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  000af	bf ff ff ff ff	 mov	 edi, -1
  000b4	44 39 ab d4 00
	00 00		 cmp	 DWORD PTR [rbx+212], r13d
  000bb	76 11		 jbe	 SHORT $LN13@zipCloseFi
  000bd	85 f6		 test	 esi, esi
  000bf	75 0d		 jne	 SHORT $LN13@zipCloseFi

; 1527 :                 {
; 1528 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  000c1	48 8b cb	 mov	 rcx, rbx
  000c4	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  000c9	3b c7		 cmp	 eax, edi
  000cb	0f 44 f7	 cmove	 esi, edi
$LN13@zipCloseFi:

; 1529 :             err = ZIP_ERRNO;
; 1530 :                 }
; 1531 : 
; 1532 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000ce	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  000d5	75 1e		 jne	 SHORT $LN14@zipCloseFi
  000d7	44 39 ab fc 00
	00 00		 cmp	 DWORD PTR [rbx+252], r13d
  000de	75 2c		 jne	 SHORT $LN16@zipCloseFi

; 1533 :     {
; 1534 :         int tmp_err = deflateEnd(&zi->ci.stream);

  000e0	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  000e4	e8 00 00 00 00	 call	 deflateEnd

; 1535 :         if (err == ZIP_OK)

  000e9	85 f6		 test	 esi, esi

; 1536 :             err = tmp_err;
; 1537 :         zi->ci.stream_initialised = 0;

  000eb	44 89 ab d0 00
	00 00		 mov	 DWORD PTR [rbx+208], r13d
  000f2	0f 44 f0	 cmove	 esi, eax
$LN14@zipCloseFi:

; 1538 :     }
; 1539 : #ifdef HAVE_BZIP2
; 1540 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1541 :     {
; 1542 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1543 :                         if (err==ZIP_OK)
; 1544 :                                 err = tmperr;
; 1545 :                         zi->ci.stream_initialised = 0;
; 1546 :     }
; 1547 : #endif
; 1548 : 
; 1549 :     if (!zi->ci.raw)

  000f5	44 39 ab fc 00
	00 00		 cmp	 DWORD PTR [rbx+252], r13d
  000fc	75 0e		 jne	 SHORT $LN16@zipCloseFi

; 1550 :     {
; 1551 :         crc32 = (uLong)zi->ci.crc32;

  000fe	44 8b a3 04 01
	01 00		 mov	 r12d, DWORD PTR [rbx+65796]

; 1552 :         uncompressed_size = zi->ci.totalUncompressedData;

  00105	4c 8b bb 20 01
	01 00		 mov	 r15, QWORD PTR [rbx+65824]
$LN16@zipCloseFi:

; 1553 :     }
; 1554 :     compressed_size = zi->ci.totalCompressedData;
; 1555 : 
; 1556 : #    ifndef NOCRYPT
; 1557 :     compressed_size += zi->ci.crypt_header_size;

  0010c	8b ab 40 01 01
	00		 mov	 ebp, DWORD PTR [rbx+65856]

; 1558 : #    endif
; 1559 : 
; 1560 :     // update Current Item crc and sizes,
; 1561 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  00112	bf ff ff ff ff	 mov	 edi, -1			; ffffffffH
  00117	48 03 ab 18 01
	01 00		 add	 rbp, QWORD PTR [rbx+65816]
  0011e	48 3b ef	 cmp	 rbp, rdi
  00121	73 2c		 jae	 SHORT $LN18@zipCloseFi
  00123	4c 3b ff	 cmp	 r15, rdi
  00126	73 27		 jae	 SHORT $LN18@zipCloseFi
  00128	48 39 bb d8 00
	00 00		 cmp	 QWORD PTR [rbx+216], rdi
  0012f	73 1e		 jae	 SHORT $LN18@zipCloseFi

; 1565 :       /*version needed*/
; 1566 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  00131	4c 8d b3 e0 00
	00 00		 lea	 r14, QWORD PTR [rbx+224]
  00138	41 b8 04 00 00
	00		 mov	 r8d, 4
  0013e	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  00141	49 8b d4	 mov	 rdx, r12
  00144	48 83 c1 10	 add	 rcx, 16
  00148	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  0014d	eb 5a		 jmp	 SHORT $LN19@zipCloseFi
$LN18@zipCloseFi:

; 1562 :     {
; 1563 :       /*version Made by*/
; 1564 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  0014f	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00156	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  0015b	48 83 c1 04	 add	 rcx, 4
  0015f	44 8d 42 d5	 lea	 r8d, QWORD PTR [rdx-43]
  00163	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1565 :       /*version needed*/
; 1566 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  00168	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0016f	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  00174	48 83 c1 06	 add	 rcx, 6
  00178	44 8d 42 d5	 lea	 r8d, QWORD PTR [rdx-43]
  0017c	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1567 : 
; 1568 :     }
; 1569 : 
; 1570 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  00181	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00188	4c 8d b3 e0 00
	00 00		 lea	 r14, QWORD PTR [rbx+224]
  0018f	48 83 c1 10	 add	 rcx, 16
  00193	41 b8 04 00 00
	00		 mov	 r8d, 4
  00199	49 8b d4	 mov	 rdx, r12
  0019c	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1571 : 
; 1572 : 
; 1573 :     if(compressed_size >= 0xffffffff)
; 1574 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  001a1	48 8b d7	 mov	 rdx, rdi
  001a4	48 3b ef	 cmp	 rbp, rdi
  001a7	73 03		 jae	 SHORT $LN20@zipCloseFi
$LN19@zipCloseFi:

; 1575 :     else
; 1576 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/

  001a9	48 8b d5	 mov	 rdx, rbp
$LN20@zipCloseFi:

; 1577 : 
; 1578 :     /// set internal file attributes field
; 1579 :     if (zi->ci.stream.data_type == Z_ASCII)

  001ac	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  001af	41 b8 04 00 00
	00		 mov	 r8d, 4
  001b5	48 83 c1 14	 add	 rcx, 20
  001b9	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  001be	83 bb c0 00 00
	00 01		 cmp	 DWORD PTR [rbx+192], 1
  001c5	75 15		 jne	 SHORT $LN21@zipCloseFi

; 1580 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  001c7	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  001ca	ba 01 00 00 00	 mov	 edx, 1
  001cf	48 83 c1 24	 add	 rcx, 36			; 00000024H
  001d3	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  001d7	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN21@zipCloseFi:

; 1581 : 
; 1582 :     if(uncompressed_size >= 0xffffffff)
; 1583 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/
; 1584 :     else
; 1585 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/
; 1586 : 
; 1587 :     // Add ZIP64 extra info field for uncompressed size
; 1588 :     if(uncompressed_size >= 0xffffffff)

  001dc	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  001df	4c 3b ff	 cmp	 r15, rdi
  001e2	49 8b d7	 mov	 rdx, r15
  001e5	41 b8 04 00 00
	00		 mov	 r8d, 4
  001eb	48 0f 43 d7	 cmovae	 rdx, rdi
  001ef	48 83 c1 18	 add	 rcx, 24
  001f3	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1589 :       datasize += 8;
; 1590 : 
; 1591 :     // Add ZIP64 extra info field for compressed size
; 1592 :     if(compressed_size >= 0xffffffff)

  001f8	4c 3b ff	 cmp	 r15, rdi
  001fb	b8 08 00 00 00	 mov	 eax, 8
  00200	41 0f 42 c5	 cmovb	 eax, r13d

; 1593 :       datasize += 8;
; 1594 : 
; 1595 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1596 :     if(zi->ci.pos_local_header >= 0xffffffff)

  00204	48 3b ef	 cmp	 rbp, rdi
  00207	8d 48 08	 lea	 ecx, DWORD PTR [rax+8]
  0020a	0f 42 c8	 cmovb	 ecx, eax

; 1597 :       datasize += 8;
; 1598 : 
; 1599 :     if(datasize > 0)

  0020d	48 39 bb d8 00
	00 00		 cmp	 QWORD PTR [rbx+216], rdi
  00214	44 8d 69 08	 lea	 r13d, DWORD PTR [rcx+8]
  00218	44 0f 42 e9	 cmovb	 r13d, ecx
  0021c	45 85 ed	 test	 r13d, r13d
  0021f	0f 84 f4 00 00
	00		 je	 $LN54@zipCloseFi

; 1600 :     {
; 1601 :       char* p = NULL;
; 1602 : 
; 1603 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  00225	41 8d 45 04	 lea	 eax, DWORD PTR [r13+4]
  00229	3b 83 f0 00 00
	00		 cmp	 eax, DWORD PTR [rbx+240]
  0022f	76 21		 jbe	 SHORT $LN28@zipCloseFi

; 1604 :       {
; 1605 :         // we can not write more data to the buffer that we have room for.
; 1606 :         return ZIP_BADZIPFILE;

  00231	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H
$LN91@zipCloseFi:
  00236	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0023b	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00240	4c 8b 74 24 60	 mov	 r14, QWORD PTR [rsp+96]

; 1697 : }

  00245	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00249	41 5f		 pop	 r15
  0024b	41 5d		 pop	 r13
  0024d	41 5c		 pop	 r12
  0024f	5e		 pop	 rsi
  00250	5b		 pop	 rbx
  00251	c3		 ret	 0
$LN28@zipCloseFi:

; 1607 :       }
; 1608 : 
; 1609 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  00252	8b bb ec 00 00
	00		 mov	 edi, DWORD PTR [rbx+236]

; 1610 : 
; 1611 :       // Add Extra Information Header for 'ZIP64 information'
; 1612 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  00258	ba 01 00 00 00	 mov	 edx, 1
  0025d	49 03 3e	 add	 rdi, QWORD PTR [r14]
  00260	48 8b cf	 mov	 rcx, rdi
  00263	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00267	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1613 :       p += 2;
; 1614 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  0026c	41 8b d5	 mov	 edx, r13d
  0026f	48 8d 4f 02	 lea	 rcx, QWORD PTR [rdi+2]
  00273	41 b8 02 00 00
	00		 mov	 r8d, 2
  00279	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1615 :       p += 2;
; 1616 : 
; 1617 :       if(uncompressed_size >= 0xffffffff)

  0027e	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00283	48 83 c7 04	 add	 rdi, 4
  00287	4c 3b f8	 cmp	 r15, rax
  0028a	72 1a		 jb	 SHORT $LN29@zipCloseFi

; 1618 :       {
; 1619 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  0028c	41 b8 08 00 00
	00		 mov	 r8d, 8
  00292	49 8b d7	 mov	 rdx, r15
  00295	48 8b cf	 mov	 rcx, rdi
  00298	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1620 :         p += 8;

  0029d	48 83 c7 08	 add	 rdi, 8
  002a1	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
$LN29@zipCloseFi:

; 1621 :       }
; 1622 : 
; 1623 :       if(compressed_size >= 0xffffffff)

  002a6	48 3b e8	 cmp	 rbp, rax
  002a9	72 1a		 jb	 SHORT $LN30@zipCloseFi

; 1624 :       {
; 1625 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  002ab	41 b8 08 00 00
	00		 mov	 r8d, 8
  002b1	48 8b d5	 mov	 rdx, rbp
  002b4	48 8b cf	 mov	 rcx, rdi
  002b7	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1626 :         p += 8;

  002bc	48 83 c7 08	 add	 rdi, 8
  002c0	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
$LN30@zipCloseFi:

; 1627 :       }
; 1628 : 
; 1629 :       if(zi->ci.pos_local_header >= 0xffffffff)

  002c5	48 8b 93 d8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+216]
  002cc	48 3b d0	 cmp	 rdx, rax
  002cf	72 0e		 jb	 SHORT $LN31@zipCloseFi

; 1630 :       {
; 1631 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  002d1	41 b8 08 00 00
	00		 mov	 r8d, 8
  002d7	48 8b cf	 mov	 rcx, rdi
  002da	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN31@zipCloseFi:

; 1632 :         p += 8;
; 1633 :       }
; 1634 : 
; 1635 :       // Update how much extra free space we got in the memory buffer
; 1636 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1637 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1638 :       zi->ci.size_centralExtraFree -= datasize + 4;
; 1639 :       zi->ci.size_centralheader += datasize + 4;
; 1640 : 
; 1641 :       // Update the extra info size field
; 1642 :       zi->ci.size_centralExtra += datasize + 4;
; 1643 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  002df	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  002e2	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  002e7	41 2b c5	 sub	 eax, r13d
  002ea	48 83 c1 1e	 add	 rcx, 30
  002ee	01 83 f0 00 00
	00		 add	 DWORD PTR [rbx+240], eax
  002f4	41 b8 02 00 00
	00		 mov	 r8d, 2
  002fa	41 8d 45 04	 lea	 eax, DWORD PTR [r13+4]
  002fe	01 83 ec 00 00
	00		 add	 DWORD PTR [rbx+236], eax
  00304	41 8d 45 04	 lea	 eax, DWORD PTR [r13+4]
  00308	01 83 e8 00 00
	00		 add	 DWORD PTR [rbx+232], eax
  0030e	8b 93 e8 00 00
	00		 mov	 edx, DWORD PTR [rbx+232]
  00314	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN54@zipCloseFi:

; 1644 :     }
; 1645 : 
; 1646 :     if (err==ZIP_OK)

  00319	85 f6		 test	 esi, esi
  0031b	75 15		 jne	 SHORT $LN32@zipCloseFi

; 1647 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  0031d	44 8b 83 ec 00
	00 00		 mov	 r8d, DWORD PTR [rbx+236]
  00324	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  00328	49 8b 16	 mov	 rdx, QWORD PTR [r14]
  0032b	e8 00 00 00 00	 call	 add_data_in_datablock
  00330	8b f0		 mov	 esi, eax
$LN32@zipCloseFi:

; 1648 : 
; 1649 :     free(zi->ci.central_header);

  00332	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  00335	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1650 : 
; 1651 :     if (err==ZIP_OK)

  0033b	85 f6		 test	 esi, esi
  0033d	0f 85 15 01 00
	00		 jne	 $LN46@zipCloseFi

; 1652 :     {
; 1653 :         // Update the LocalFileHeader with the new values.
; 1654 : 
; 1655 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00343	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00347	48 8b cb	 mov	 rcx, rbx
  0034a	e8 00 00 00 00	 call	 call_ztell64

; 1656 : 
; 1657 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0034f	4c 8b 83 d8 00
	00 00		 mov	 r8, QWORD PTR [rbx+216]
  00356	45 33 c9	 xor	 r9d, r9d
  00359	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0035d	49 83 c0 0e	 add	 r8, 14
  00361	48 8b cb	 mov	 rcx, rbx
  00364	48 8b f8	 mov	 rdi, rax
  00367	e8 00 00 00 00	 call	 call_zseek64
  0036c	85 c0		 test	 eax, eax
  0036e	74 0b		 je	 SHORT $LN52@zipCloseFi

; 1658 :             err = ZIP_ERRNO;

  00370	41 be ff ff ff
	ff		 mov	 r14d, -1
  00376	41 8b f6	 mov	 esi, r14d

; 1659 : 
; 1660 :         if (err==ZIP_OK)

  00379	eb 1d		 jmp	 SHORT $LN35@zipCloseFi
$LN52@zipCloseFi:

; 1661 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  0037b	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0037f	41 b9 04 00 00
	00		 mov	 r9d, 4
  00385	4d 8b c4	 mov	 r8, r12
  00388	48 8b cb	 mov	 rcx, rbx
  0038b	e8 00 00 00 00	 call	 zip64local_putValue
  00390	8b f0		 mov	 esi, eax
  00392	41 be ff ff ff
	ff		 mov	 r14d, -1
$LN35@zipCloseFi:

; 1662 : 
; 1663 :         if(uncompressed_size >= 0xffffffff || compressed_size >= 0xffffffff )

  00398	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0039d	4c 3b f8	 cmp	 r15, rax
  003a0	73 3d		 jae	 SHORT $LN38@zipCloseFi
  003a2	48 3b e8	 cmp	 rbp, rax
  003a5	73 38		 jae	 SHORT $LN38@zipCloseFi

; 1679 :         }
; 1680 :         else
; 1681 :         {
; 1682 :           if (err==ZIP_OK) /* compressed size, unknown */

  003a7	85 f6		 test	 esi, esi
  003a9	0f 85 91 00 00
	00		 jne	 $LN40@zipCloseFi

; 1683 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  003af	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003b3	44 8d 4e 04	 lea	 r9d, QWORD PTR [rsi+4]
  003b7	4c 8b c5	 mov	 r8, rbp
  003ba	48 8b cb	 mov	 rcx, rbx
  003bd	e8 00 00 00 00	 call	 zip64local_putValue
  003c2	8b f0		 mov	 esi, eax

; 1684 : 
; 1685 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  003c4	85 c0		 test	 eax, eax
  003c6	75 78		 jne	 SHORT $LN40@zipCloseFi

; 1686 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  003c8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003cc	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  003d0	4d 8b c7	 mov	 r8, r15
  003d3	48 8b cb	 mov	 rcx, rbx
  003d6	e8 00 00 00 00	 call	 zip64local_putValue
  003db	8b f0		 mov	 esi, eax
  003dd	eb 61		 jmp	 SHORT $LN40@zipCloseFi
$LN38@zipCloseFi:

; 1664 :         {
; 1665 :           if(zi->ci.pos_zip64extrainfo > 0)

  003df	4c 8b 83 10 01
	01 00		 mov	 r8, QWORD PTR [rbx+65808]
  003e6	4d 85 c0	 test	 r8, r8
  003e9	74 50		 je	 SHORT $LN39@zipCloseFi

; 1666 :           {
; 1667 :             // Update the size in the ZIP64 extended field.
; 1668 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  003eb	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003ef	49 83 c0 04	 add	 r8, 4
  003f3	45 33 c9	 xor	 r9d, r9d
  003f6	48 8b cb	 mov	 rcx, rbx
  003f9	e8 00 00 00 00	 call	 call_zseek64
  003fe	85 c0		 test	 eax, eax
  00400	74 05		 je	 SHORT $LN41@zipCloseFi

; 1669 :               err = ZIP_ERRNO;

  00402	41 8b f6	 mov	 esi, r14d

; 1670 : 
; 1671 :             if (err==ZIP_OK) /* compressed size, unknown */

  00405	eb 39		 jmp	 SHORT $LN40@zipCloseFi
$LN41@zipCloseFi:
  00407	85 f6		 test	 esi, esi
  00409	75 35		 jne	 SHORT $LN40@zipCloseFi

; 1672 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  0040b	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0040f	44 8d 4e 08	 lea	 r9d, QWORD PTR [rsi+8]
  00413	4d 8b c7	 mov	 r8, r15
  00416	48 8b cb	 mov	 rcx, rbx
  00419	e8 00 00 00 00	 call	 zip64local_putValue
  0041e	8b f0		 mov	 esi, eax

; 1673 : 
; 1674 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  00420	85 c0		 test	 eax, eax
  00422	75 1c		 jne	 SHORT $LN40@zipCloseFi

; 1675 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  00424	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00428	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  0042c	4c 8b c5	 mov	 r8, rbp
  0042f	48 8b cb	 mov	 rcx, rbx
  00432	e8 00 00 00 00	 call	 zip64local_putValue
  00437	8b f0		 mov	 esi, eax

; 1676 :           }

  00439	eb 05		 jmp	 SHORT $LN40@zipCloseFi
$LN39@zipCloseFi:

; 1677 :           else
; 1678 :               err = ZIP_BADZIPFILE; // Caller passed zip64 = 0, so no room for zip64 info -> fatal

  0043b	be 99 ff ff ff	 mov	 esi, -103		; ffffffffffffff99H
$LN40@zipCloseFi:

; 1687 :         }
; 1688 : 
; 1689 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00440	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00444	45 33 c9	 xor	 r9d, r9d
  00447	4c 8b c7	 mov	 r8, rdi
  0044a	48 8b cb	 mov	 rcx, rbx
  0044d	e8 00 00 00 00	 call	 call_zseek64
  00452	85 c0		 test	 eax, eax
  00454	41 0f 45 f6	 cmovne	 esi, r14d
$LN46@zipCloseFi:

; 1690 :             err = ZIP_ERRNO;
; 1691 :     }
; 1692 : 
; 1693 :     zi->number_entry ++;

  00458	48 ff 83 58 01
	01 00		 inc	 QWORD PTR [rbx+65880]

; 1694 :     zi->in_opened_file_inzip = 0;
; 1695 : 
; 1696 :     return err;

  0045f	8b c6		 mov	 eax, esi
  00461	c7 43 70 00 00
	00 00		 mov	 DWORD PTR [rbx+112], 0
  00468	e9 c9 fd ff ff	 jmp	 $LN91@zipCloseFi
$LN55@zipCloseFi:

; 1476 :         return ZIP_PARAMERROR;

  0046d	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1697 : }

  00472	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00476	41 5f		 pop	 r15
  00478	41 5d		 pop	 r13
  0047a	41 5c		 pop	 r12
  0047c	5e		 pop	 rsi
  0047d	5b		 pop	 rbx
  0047e	c3		 ret	 0
zipCloseFileInZipRaw64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZip
_TEXT	SEGMENT
file$ = 8
zipCloseFileInZip PROC					; COMDAT

; 1700 :     return zipCloseFileInZipRaw (file,0,0);

  00000	45 33 c0	 xor	 r8d, r8d
  00003	33 d2		 xor	 edx, edx
  00005	e9 00 00 00 00	 jmp	 zipCloseFileInZipRaw
zipCloseFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
zi$ = 48
zip64eocd_pos_inzip$ = 56
Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT

; 1703 : local int Write_Zip64EndOfCentralDirectoryLocator(zip64_internal* zi, ZPOS64_T zip64eocd_pos_inzip) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 1704 :   int err = ZIP_OK;
; 1705 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writing_offset;
; 1706 : 
; 1707 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  0000d	41 b9 04 00 00
	00		 mov	 r9d, 4
  00013	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00017	41 b8 50 4b 06
	07		 mov	 r8d, 117853008		; 07064b50H
  0001d	48 2b b9 50 01
	01 00		 sub	 rdi, QWORD PTR [rcx+65872]
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 zip64local_putValue

; 1708 : 
; 1709 :   /*num disks*/
; 1710 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0002c	85 c0		 test	 eax, eax
  0002e	75 42		 jne	 SHORT $LN8@Write_Zip6

; 1711 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00030	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00034	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  00038	45 33 c0	 xor	 r8d, r8d
  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	e8 00 00 00 00	 call	 zip64local_putValue

; 1712 : 
; 1713 :   /*relative offset*/
; 1714 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00043	85 c0		 test	 eax, eax
  00045	75 2b		 jne	 SHORT $LN8@Write_Zip6

; 1715 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  00047	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0004b	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  0004f	4c 8b c7	 mov	 r8, rdi
  00052	48 8b cb	 mov	 rcx, rbx
  00055	e8 00 00 00 00	 call	 zip64local_putValue

; 1716 : 
; 1717 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1718 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0005a	85 c0		 test	 eax, eax
  0005c	75 14		 jne	 SHORT $LN8@Write_Zip6

; 1719 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  0005e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00062	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  00066	44 8d 40 01	 lea	 r8d, QWORD PTR [rax+1]
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	e8 00 00 00 00	 call	 zip64local_putValue
$LN8@Write_Zip6:

; 1720 : 
; 1721 :     return err;
; 1722 : }

  00072	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
zi$ = 48
size_centraldir$ = 56
centraldir_pos_inzip$ = 64
Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT

; 1724 : local int Write_Zip64EndOfCentralDirectoryRecord(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	8b f2		 mov	 esi, edx

; 1725 :   int err = ZIP_OK;
; 1726 : 
; 1727 :   uLong Zip64DataSize = 44;
; 1728 : 
; 1729 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00014	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00018	41 b8 50 4b 06
	06		 mov	 r8d, 101075792		; 06064b50H
  0001e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 zip64local_putValue

; 1730 : 
; 1731 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 e9 00 00
	00		 jne	 $LN10@Write_Zip6

; 1732 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00034	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00038	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  0003c	44 8d 40 2c	 lea	 r8d, QWORD PTR [rax+44]
  00040	48 8b cb	 mov	 rcx, rbx
  00043	e8 00 00 00 00	 call	 zip64local_putValue

; 1733 : 
; 1734 :   if (err==ZIP_OK) /* version made by */

  00048	85 c0		 test	 eax, eax
  0004a	0f 85 cd 00 00
	00		 jne	 $LN10@Write_Zip6

; 1735 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00050	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00054	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00058	44 8d 40 2d	 lea	 r8d, QWORD PTR [rax+45]
  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	e8 00 00 00 00	 call	 zip64local_putValue

; 1736 : 
; 1737 :   if (err==ZIP_OK) /* version needed */

  00064	85 c0		 test	 eax, eax
  00066	0f 85 b1 00 00
	00		 jne	 $LN10@Write_Zip6

; 1738 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0006c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00070	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00074	44 8d 40 2d	 lea	 r8d, QWORD PTR [rax+45]
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 zip64local_putValue

; 1739 : 
; 1740 :   if (err==ZIP_OK) /* number of this disk */

  00080	85 c0		 test	 eax, eax
  00082	0f 85 95 00 00
	00		 jne	 $LN10@Write_Zip6

; 1741 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00088	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008c	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  00090	45 33 c0	 xor	 r8d, r8d
  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 zip64local_putValue

; 1742 : 
; 1743 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0009b	85 c0		 test	 eax, eax
  0009d	75 7e		 jne	 SHORT $LN10@Write_Zip6

; 1744 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  0009f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000a3	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  000a7	45 33 c0	 xor	 r8d, r8d
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	e8 00 00 00 00	 call	 zip64local_putValue

; 1745 : 
; 1746 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  000b2	85 c0		 test	 eax, eax
  000b4	75 67		 jne	 SHORT $LN10@Write_Zip6

; 1747 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000b6	4c 8b 83 58 01
	01 00		 mov	 r8, QWORD PTR [rbx+65880]
  000bd	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  000c1	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000c5	48 8b cb	 mov	 rcx, rbx
  000c8	e8 00 00 00 00	 call	 zip64local_putValue

; 1748 : 
; 1749 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000cd	85 c0		 test	 eax, eax
  000cf	75 4c		 jne	 SHORT $LN10@Write_Zip6

; 1750 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000d1	4c 8b 83 58 01
	01 00		 mov	 r8, QWORD PTR [rbx+65880]
  000d8	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  000dc	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e0	48 8b cb	 mov	 rcx, rbx
  000e3	e8 00 00 00 00	 call	 zip64local_putValue

; 1751 : 
; 1752 :   if (err==ZIP_OK) /* size of the central directory */

  000e8	85 c0		 test	 eax, eax
  000ea	75 31		 jne	 SHORT $LN10@Write_Zip6

; 1753 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  000ec	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000f0	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  000f4	44 8b c6	 mov	 r8d, esi
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 zip64local_putValue

; 1754 : 
; 1755 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000ff	85 c0		 test	 eax, eax
  00101	75 1a		 jne	 SHORT $LN10@Write_Zip6

; 1756 :   {
; 1757 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  00103	48 2b bb 50 01
	01 00		 sub	 rdi, QWORD PTR [rbx+65872]

; 1758 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  0010a	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  0010e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00112	4c 8b c7	 mov	 r8, rdi
  00115	48 8b cb	 mov	 rcx, rbx
  00118	e8 00 00 00 00	 call	 zip64local_putValue
$LN10@Write_Zip6:

; 1759 :   }
; 1760 :   return err;
; 1761 : }

  0011d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00122	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00127	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012b	5f		 pop	 rdi
  0012c	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
zi$ = 64
size_centraldir$ = 72
centraldir_pos_inzip$ = 80
Write_EndOfCentralDirectoryRecord PROC			; COMDAT

; 1763 : local int Write_EndOfCentralDirectoryRecord(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip) {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 57		 push	 r15
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	49 8b e8	 mov	 rbp, r8
  0000c	44 8b fa	 mov	 r15d, edx

; 1764 :   int err = ZIP_OK;
; 1765 : 
; 1766 :   /*signature*/
; 1767 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  0000f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00013	41 b8 50 4b 05
	06		 mov	 r8d, 101010256		; 06054b50H
  00019	41 b9 04 00 00
	00		 mov	 r9d, 4
  0001f	48 8b d9	 mov	 rbx, rcx
  00022	e8 00 00 00 00	 call	 zip64local_putValue

; 1768 : 
; 1769 :   if (err==ZIP_OK) /* number of this disk */

  00027	85 c0		 test	 eax, eax
  00029	0f 85 ee 00 00
	00		 jne	 $LN13@Write_EndO

; 1770 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  0002f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00033	45 33 c0	 xor	 r8d, r8d
  00036	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	be 02 00 00 00	 mov	 esi, 2
  00043	44 8b ce	 mov	 r9d, esi
  00046	e8 00 00 00 00	 call	 zip64local_putValue

; 1771 : 
; 1772 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0004b	85 c0		 test	 eax, eax
  0004d	0f 85 c5 00 00
	00		 jne	 $LN30@Write_EndO

; 1773 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00053	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00057	44 8b ce	 mov	 r9d, esi
  0005a	45 33 c0	 xor	 r8d, r8d
  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 zip64local_putValue

; 1774 : 
; 1775 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00065	85 c0		 test	 eax, eax
  00067	0f 85 ab 00 00
	00		 jne	 $LN30@Write_EndO

; 1776 :   {
; 1777 :     {
; 1778 :       if(zi->number_entry >= 0xFFFF)

  0006d	48 8b 83 58 01
	01 00		 mov	 rax, QWORD PTR [rbx+65880]
  00074	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00079	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH
  0007e	4c 89 74 24 50	 mov	 QWORD PTR [rsp+80], r14
  00083	4c 8b f3	 mov	 r14, rbx

; 1779 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  00086	44 8b c7	 mov	 r8d, edi
  00089	48 3b c7	 cmp	 rax, rdi
  0008c	73 03		 jae	 SHORT $LN6@Write_EndO

; 1780 :       else
; 1781 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  0008e	44 8b c0	 mov	 r8d, eax
$LN6@Write_EndO:

; 1782 :     }
; 1783 :   }
; 1784 : 
; 1785 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  00091	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00095	44 8b ce	 mov	 r9d, esi
  00098	49 8b ce	 mov	 rcx, r14
  0009b	e8 00 00 00 00	 call	 zip64local_putValue
  000a0	85 c0		 test	 eax, eax
  000a2	75 6a		 jne	 SHORT $LN32@Write_EndO

; 1786 :   {
; 1787 :     if(zi->number_entry >= 0xFFFF)

  000a4	48 8b 83 58 01
	01 00		 mov	 rax, QWORD PTR [rbx+65880]
  000ab	48 3b c7	 cmp	 rax, rdi
  000ae	73 02		 jae	 SHORT $LN9@Write_EndO

; 1788 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record
; 1789 :     else
; 1790 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  000b0	8b f8		 mov	 edi, eax
$LN9@Write_EndO:

; 1791 :   }
; 1792 : 
; 1793 :   if (err==ZIP_OK) /* size of the central directory */

  000b2	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000b6	44 8b ce	 mov	 r9d, esi
  000b9	4c 8b c7	 mov	 r8, rdi
  000bc	49 8b ce	 mov	 rcx, r14
  000bf	e8 00 00 00 00	 call	 zip64local_putValue
  000c4	85 c0		 test	 eax, eax
  000c6	75 46		 jne	 SHORT $LN32@Write_EndO

; 1794 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  000c8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000cc	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  000d0	4d 8b c7	 mov	 r8, r15
  000d3	48 8b cb	 mov	 rcx, rbx
  000d6	e8 00 00 00 00	 call	 zip64local_putValue

; 1795 : 
; 1796 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000db	85 c0		 test	 eax, eax
  000dd	75 2f		 jne	 SHORT $LN32@Write_EndO

; 1797 :   {
; 1798 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000df	48 8b 8b 50 01
	01 00		 mov	 rcx, QWORD PTR [rbx+65872]
  000e6	48 8b c5	 mov	 rax, rbp
  000e9	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ed	48 2b c1	 sub	 rax, rcx

; 1799 :     if(pos >= 0xffffffff)

  000f0	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  000f6	41 b9 04 00 00
	00		 mov	 r9d, 4
  000fc	49 3b c0	 cmp	 rax, r8
  000ff	73 05		 jae	 SHORT $LN33@Write_EndO

; 1800 :     {
; 1801 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);
; 1802 :     }
; 1803 :     else
; 1804 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writing_offset),4);

  00101	2b e9		 sub	 ebp, ecx
  00103	44 8b c5	 mov	 r8d, ebp
$LN33@Write_EndO:
  00106	48 8b cb	 mov	 rcx, rbx
  00109	e8 00 00 00 00	 call	 zip64local_putValue
$LN32@Write_EndO:
  0010e	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00113	4c 8b 74 24 50	 mov	 r14, QWORD PTR [rsp+80]
$LN30@Write_EndO:
  00118	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
$LN13@Write_EndO:

; 1805 :   }
; 1806 : 
; 1807 :    return err;
; 1808 : }

  0011d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00121	41 5f		 pop	 r15
  00123	5d		 pop	 rbp
  00124	5b		 pop	 rbx
  00125	c3		 ret	 0
Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT Write_GlobalComment
_TEXT	SEGMENT
zi$ = 48
global_comment$ = 56
Write_GlobalComment PROC				; COMDAT

; 1810 : local int Write_GlobalComment(zip64_internal* zi, const char* global_comment) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1811 :   int err = ZIP_OK;
; 1812 :   uInt size_global_comment = 0;

  0001a	33 db		 xor	 ebx, ebx
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	48 8b e9	 mov	 rbp, rcx

; 1813 : 
; 1814 :   if(global_comment != NULL)

  00022	4c 8d 73 ff	 lea	 r14, QWORD PTR [rbx-1]
  00026	48 85 d2	 test	 rdx, rdx
  00029	74 0e		 je	 SHORT $LN2@Write_Glob

; 1815 :     size_global_comment = (uInt)strlen(global_comment);

  0002b	49 8b de	 mov	 rbx, r14
  0002e	66 90		 npad	 2
$LL6@Write_Glob:
  00030	48 ff c3	 inc	 rbx
  00033	80 3c 1a 00	 cmp	 BYTE PTR [rdx+rbx], 0
  00037	75 f7		 jne	 SHORT $LL6@Write_Glob
$LN2@Write_Glob:

; 1816 : 
; 1817 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00039	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0003d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00043	44 8b c3	 mov	 r8d, ebx
  00046	e8 00 00 00 00	 call	 zip64local_putValue
  0004b	8b f0		 mov	 esi, eax

; 1818 : 
; 1819 :   if (err == ZIP_OK && size_global_comment > 0)

  0004d	85 c0		 test	 eax, eax
  0004f	75 1d		 jne	 SHORT $LN4@Write_Glob
  00051	85 db		 test	 ebx, ebx
  00053	74 19		 je	 SHORT $LN4@Write_Glob

; 1820 :   {
; 1821 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  00055	48 8b 55 58	 mov	 rdx, QWORD PTR [rbp+88]
  00059	44 8b cb	 mov	 r9d, ebx
  0005c	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
  00060	4c 8b c7	 mov	 r8, rdi
  00063	ff 55 10	 call	 QWORD PTR [rbp+16]
  00066	3b c3		 cmp	 eax, ebx
  00068	41 0f 45 f6	 cmovne	 esi, r14d

; 1822 :       err = ZIP_ERRNO;
; 1823 :   }
; 1824 :   return err;

  0006c	8b c6		 mov	 eax, esi
$LN4@Write_Glob:

; 1825 : }

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00078	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0007d	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	41 5e		 pop	 r14
  00088	c3		 ret	 0
Write_GlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\zip.c
;	COMDAT zipClose
_TEXT	SEGMENT
file$ = 64
global_comment$ = 72
zipClose PROC						; COMDAT

; 1827 : extern int ZEXPORT zipClose(zipFile file, const char* global_comment) {

$LN38:
  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 56		 push	 r14
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1828 :     zip64_internal* zi;
; 1829 :     int err = 0;

  0000d	33 f6		 xor	 esi, esi
  0000f	4c 8b f2	 mov	 r14, rdx
  00012	48 8b f9	 mov	 rdi, rcx

; 1830 :     uLong size_centraldir = 0;

  00015	8b ee		 mov	 ebp, esi

; 1831 :     ZPOS64_T centraldir_pos_inzip;
; 1832 :     ZPOS64_T pos;
; 1833 : 
; 1834 :     if (file == NULL)

  00017	48 85 c9	 test	 rcx, rcx
  0001a	75 11		 jne	 SHORT $LN4@zipClose

; 1835 :         return ZIP_PARAMERROR;

  0001c	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 1891 : 
; 1892 :     return err;
; 1893 : }

  0001f	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	41 5e		 pop	 r14
  0002a	5f		 pop	 rdi
  0002b	5e		 pop	 rsi
  0002c	c3		 ret	 0
$LN4@zipClose:

; 1836 : 
; 1837 :     zi = (zip64_internal*)file;
; 1838 : 
; 1839 :     if (zi->in_opened_file_inzip == 1)

  0002d	83 79 70 01	 cmp	 DWORD PTR [rcx+112], 1
  00031	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  00036	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  0003b	75 07		 jne	 SHORT $LN5@zipClose

; 1840 :     {
; 1841 :         err = zipCloseFileInZip (file);

  0003d	e8 00 00 00 00	 call	 zipCloseFileInZip
  00042	8b f0		 mov	 esi, eax
$LN5@zipClose:

; 1842 :     }
; 1843 : 
; 1844 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1845 :     if (global_comment==NULL)

  00044	4d 85 f6	 test	 r14, r14
  00047	75 07		 jne	 SHORT $LN24@zipClose

; 1846 :         global_comment = zi->globalcomment;

  00049	4c 8b b7 60 01
	01 00		 mov	 r14, QWORD PTR [rdi+65888]
$LN24@zipClose:

; 1847 : #endif
; 1848 : 
; 1849 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00050	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00054	48 8b cf	 mov	 rcx, rdi
  00057	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0005c	e8 00 00 00 00	 call	 call_ztell64
  00061	4c 8b f8	 mov	 r15, rax

; 1850 : 
; 1851 :     if (err==ZIP_OK)

  00064	41 bc ff ff ff
	ff		 mov	 r12d, -1
  0006a	85 f6		 test	 esi, esi
  0006c	75 37		 jne	 SHORT $LN3@zipClose

; 1852 :     {
; 1853 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  0006e	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]

; 1854 :         while (ldi!=NULL)

  00072	48 85 db	 test	 rbx, rbx
  00075	74 2e		 je	 SHORT $LN3@zipClose
$LL2@zipClose:

; 1855 :         {
; 1856 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  00077	85 f6		 test	 esi, esi
  00079	75 1f		 jne	 SHORT $LN9@zipClose
  0007b	44 8b 4b 0c	 mov	 r9d, DWORD PTR [rbx+12]
  0007f	45 85 c9	 test	 r9d, r9d
  00082	74 16		 je	 SHORT $LN9@zipClose

; 1857 :             {
; 1858 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  00084	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00088	4c 8d 43 14	 lea	 r8, QWORD PTR [rbx+20]
  0008c	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00090	ff 57 10	 call	 QWORD PTR [rdi+16]
  00093	3b 43 0c	 cmp	 eax, DWORD PTR [rbx+12]
  00096	41 0f 45 f4	 cmovne	 esi, r12d
$LN9@zipClose:

; 1859 :                     err = ZIP_ERRNO;
; 1860 :             }
; 1861 : 
; 1862 :             size_centraldir += ldi->filled_in_this_block;

  0009a	03 6b 0c	 add	 ebp, DWORD PTR [rbx+12]

; 1863 :             ldi = ldi->next_datablock;

  0009d	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  000a0	48 85 db	 test	 rbx, rbx
  000a3	75 d2		 jne	 SHORT $LL2@zipClose
$LN3@zipClose:

; 1864 :         }
; 1865 :     }
; 1866 :     free_linkedlist(&(zi->central_dir));

  000a5	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  000a9	e8 00 00 00 00	 call	 free_linkedlist

; 1867 : 
; 1868 :     pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000ae	49 8b c7	 mov	 rax, r15

; 1869 :     if(pos >= 0xffffffff || zi->number_entry > 0xFFFF)

  000b1	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  000b6	48 2b 87 50 01
	01 00		 sub	 rax, QWORD PTR [rdi+65872]
  000bd	48 3b c1	 cmp	 rax, rcx
  000c0	73 0d		 jae	 SHORT $LN11@zipClose
  000c2	48 81 bf 58 01
	01 00 ff ff 00
	00		 cmp	 QWORD PTR [rdi+65880], 65535 ; 0000ffffH
  000cd	76 27		 jbe	 SHORT $LN10@zipClose
$LN11@zipClose:

; 1870 :     {
; 1871 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  000cf	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  000d3	48 8b cf	 mov	 rcx, rdi
  000d6	e8 00 00 00 00	 call	 call_ztell64

; 1872 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000db	4d 8b c7	 mov	 r8, r15
  000de	8b d5		 mov	 edx, ebp
  000e0	48 8b cf	 mov	 rcx, rdi
  000e3	48 8b d8	 mov	 rbx, rax
  000e6	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryRecord

; 1873 : 
; 1874 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  000eb	48 8b d3	 mov	 rdx, rbx
  000ee	48 8b cf	 mov	 rcx, rdi
  000f1	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryLocator
$LN10@zipClose:

; 1875 :     }
; 1876 : 
; 1877 :     if (err==ZIP_OK)

  000f6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fb	85 f6		 test	 esi, esi
  000fd	75 20		 jne	 SHORT $LN13@zipClose

; 1878 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000ff	4d 8b c7	 mov	 r8, r15
  00102	8b d5		 mov	 edx, ebp
  00104	48 8b cf	 mov	 rcx, rdi
  00107	e8 00 00 00 00	 call	 Write_EndOfCentralDirectoryRecord
  0010c	8b f0		 mov	 esi, eax

; 1879 : 
; 1880 :     if(err == ZIP_OK)

  0010e	85 c0		 test	 eax, eax
  00110	75 0d		 jne	 SHORT $LN13@zipClose

; 1881 :       err = Write_GlobalComment(zi, global_comment);

  00112	49 8b d6	 mov	 rdx, r14
  00115	48 8b cf	 mov	 rcx, rdi
  00118	e8 00 00 00 00	 call	 Write_GlobalComment
  0011d	8b f0		 mov	 esi, eax
$LN13@zipClose:

; 1882 : 
; 1883 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  0011f	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00123	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00127	ff 57 28	 call	 QWORD PTR [rdi+40]
  0012a	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
  0012f	85 c0		 test	 eax, eax
  00131	74 06		 je	 SHORT $LN15@zipClose

; 1884 :         if (err == ZIP_OK)

  00133	85 f6		 test	 esi, esi
  00135	41 0f 44 f4	 cmove	 esi, r12d
$LN15@zipClose:

; 1885 :             err = ZIP_ERRNO;
; 1886 : 
; 1887 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1888 :     TRYFREE(zi->globalcomment);

  00139	48 8b 8f 60 01
	01 00		 mov	 rcx, QWORD PTR [rdi+65888]
  00140	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  00145	48 85 c9	 test	 rcx, rcx
  00148	74 06		 je	 SHORT $LN16@zipClose
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN16@zipClose:

; 1889 : #endif
; 1890 :     TRYFREE(zi);

  00150	48 8b cf	 mov	 rcx, rdi
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1891 : 
; 1892 :     return err;
; 1893 : }

  00159	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0015e	8b c6		 mov	 eax, esi
  00160	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00164	41 5e		 pop	 r14
  00166	5f		 pop	 rdi
  00167	5e		 pop	 rsi
  00168	c3		 ret	 0
zipClose ENDP
_TEXT	ENDS
END
