; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp__ftelli64:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_fseek:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_ftell:PROC
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb@ DB 'r+b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
PUBLIC	fill_fopen64_filefunc
PUBLIC	fill_zlib_filefunc64_32_def_from_filefunc32
PUBLIC	call_ztell64
PUBLIC	call_zseek64
PUBLIC	call_zopen64
;	COMDAT pdata
pdata	SEGMENT
$pdata$fseek64_file_func DD imagerel fseek64_file_func
	DD	imagerel fseek64_file_func+89
	DD	imagerel $unwind$fseek64_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fseek_file_func DD imagerel fseek_file_func
	DD	imagerel fseek_file_func+89
	DD	imagerel $unwind$fseek_file_func
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_ztell64 DD imagerel $LN8
	DD	imagerel $LN8+53
	DD	imagerel $unwind$call_ztell64
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_ztell64 DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fseek_file_func DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fseek64_file_func DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT call_zopen64
_TEXT	SEGMENT
pfilefunc$ = 8
filename$ = 16
mode$ = 24
call_zopen64 PROC					; COMDAT

; 32   :     if (pfilefunc->zfile_func64.zopen64_file != NULL)

  00000	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00003	48 8b c1	 mov	 rax, rcx
  00006	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0000a	4d 85 c9	 test	 r9, r9
  0000d	74 03		 je	 SHORT $LN2@call_zopen

; 33   :         return (*(pfilefunc->zfile_func64.zopen64_file)) (pfilefunc->zfile_func64.opaque,filename,mode);

  0000f	49 ff e1	 rex_jmp r9
$LN2@call_zopen:

; 34   :     else
; 35   :     {
; 36   :         return (*(pfilefunc->zopen32_file))(pfilefunc->zfile_func64.opaque,(const char*)filename,mode);

  00012	48 ff 60 40	 rex_jmp QWORD PTR [rax+64]
call_zopen64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT call_zseek64
_TEXT	SEGMENT
pfilefunc$ = 8
filestream$ = 16
offset$ = 24
origin$ = 32
call_zseek64 PROC					; COMDAT

; 41   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00000	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00004	4c 8b d1	 mov	 r10, rcx
  00007	48 85 c0	 test	 rax, rax
  0000a	74 07		 je	 SHORT $LN2@call_zseek

; 42   :         return (*(pfilefunc->zfile_func64.zseek64_file)) (pfilefunc->zfile_func64.opaque,filestream,offset,origin);

  0000c	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00010	48 ff e0	 rex_jmp rax
$LN2@call_zseek:

; 43   :     else
; 44   :     {
; 45   :         uLong offsetTruncated = (uLong)offset;
; 46   :         if (offsetTruncated != offset)

  00013	41 8b c0	 mov	 eax, r8d
  00016	49 3b c0	 cmp	 rax, r8
  00019	74 06		 je	 SHORT $LN4@call_zseek

; 47   :             return -1;

  0001b	b8 ff ff ff ff	 mov	 eax, -1

; 50   :     }
; 51   : }

  00020	c3		 ret	 0
$LN4@call_zseek:

; 48   :         else
; 49   :             return (*(pfilefunc->zseek32_file))(pfilefunc->zfile_func64.opaque,filestream,offsetTruncated,origin);

  00021	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00025	49 ff 62 50	 rex_jmp QWORD PTR [r10+80]
call_zseek64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT call_ztell64
_TEXT	SEGMENT
pfilefunc$ = 48
filestream$ = 56
call_ztell64 PROC					; COMDAT

; 53   : ZPOS64_T call_ztell64 (const zlib_filefunc64_32_def* pfilefunc, voidpf filestream) {

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8b c1	 mov	 rax, rcx

; 54   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00007	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0000b	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00010	74 08		 je	 SHORT $LN2@call_ztell

; 60   :             return (ZPOS64_T)-1;
; 61   :         else
; 62   :             return tell_uLong;
; 63   :     }
; 64   : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 55   :         return (*(pfilefunc->zfile_func64.ztell64_file)) (pfilefunc->zfile_func64.opaque,filestream);

  00016	48 ff 60 18	 rex_jmp QWORD PTR [rax+24]
$LN2@call_ztell:

; 56   :     else
; 57   :     {
; 58   :         uLong tell_uLong = (uLong)(*(pfilefunc->ztell32_file))(pfilefunc->zfile_func64.opaque,filestream);

  0001a	ff 50 48	 call	 QWORD PTR [rax+72]

; 59   :         if ((tell_uLong) == MAXU32)

  0001d	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  00020	8b c8		 mov	 ecx, eax
  00022	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00029	48 0f 44 ca	 cmove	 rcx, rdx
  0002d	48 8b c1	 mov	 rax, rcx

; 60   :             return (ZPOS64_T)-1;
; 61   :         else
; 62   :             return tell_uLong;
; 63   :     }
; 64   : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
call_ztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fill_zlib_filefunc64_32_def_from_filefunc32
_TEXT	SEGMENT
p_filefunc64_32$ = 8
p_filefunc32$ = 16
fill_zlib_filefunc64_32_def_from_filefunc32 PROC	; COMDAT

; 67   :     p_filefunc64_32->zfile_func64.zopen64_file = NULL;
; 68   :     p_filefunc64_32->zopen32_file = p_filefunc32->zopen_file;

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	45 33 c0	 xor	 r8d, r8d
  00006	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 69   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;
; 70   :     p_filefunc64_32->zfile_func64.zread_file = p_filefunc32->zread_file;

  0000a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0000e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 71   :     p_filefunc64_32->zfile_func64.zwrite_file = p_filefunc32->zwrite_file;

  00012	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00016	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 72   :     p_filefunc64_32->zfile_func64.ztell64_file = NULL;
; 73   :     p_filefunc64_32->zfile_func64.zseek64_file = NULL;
; 74   :     p_filefunc64_32->zfile_func64.zclose_file = p_filefunc32->zclose_file;

  0001a	48 8b 42 28	 mov	 rax, QWORD PTR [rdx+40]
  0001e	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 75   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  00022	48 8b 42 30	 mov	 rax, QWORD PTR [rdx+48]
  00026	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 76   :     p_filefunc64_32->zfile_func64.opaque = p_filefunc32->opaque;

  0002a	48 8b 42 38	 mov	 rax, QWORD PTR [rdx+56]
  0002e	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 77   :     p_filefunc64_32->zseek32_file = p_filefunc32->zseek_file;

  00032	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  00036	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 78   :     p_filefunc64_32->ztell32_file = p_filefunc32->ztell_file;

  0003a	48 8b 42 18	 mov	 rax, QWORD PTR [rdx+24]
  0003e	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
  00042	4c 89 01	 mov	 QWORD PTR [rcx], r8
  00045	4c 89 41 18	 mov	 QWORD PTR [rcx+24], r8
  00049	4c 89 41 20	 mov	 QWORD PTR [rcx+32], r8

; 79   : }

  0004d	c3		 ret	 0
fill_zlib_filefunc64_32_def_from_filefunc32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fopen_file_func
_TEXT	SEGMENT
opaque$ = 8
filename$ = 16
mode$ = 24
fopen_file_func PROC					; COMDAT

; 84   :     FILE* file = NULL;
; 85   :     const char* mode_fopen = NULL;
; 86   :     (void)opaque;
; 87   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00000	41 8b c0	 mov	 eax, r8d
  00003	33 c9		 xor	 ecx, ecx
  00005	24 03		 and	 al, 3
  00007	4c 8b ca	 mov	 r9, rdx
  0000a	3c 01		 cmp	 al, 1
  0000c	75 09		 jne	 SHORT $LN2@fopen_file

; 88   :         mode_fopen = "rb";

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb@
  00015	eb 1e		 jmp	 SHORT $LN6@fopen_file
$LN2@fopen_file:

; 89   :     else
; 90   :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00017	41 f6 c0 04	 test	 r8b, 4
  0001b	74 09		 je	 SHORT $LN4@fopen_file

; 91   :         mode_fopen = "r+b";

  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HMFOOINA@r?$CLb@
  00024	eb 0f		 jmp	 SHORT $LN6@fopen_file
$LN4@fopen_file:

; 92   :     else
; 93   :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00026	41 f6 c0 08	 test	 r8b, 8
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02GMLFBBN@wb@
  00031	48 0f 44 d1	 cmove	 rdx, rcx
$LN6@fopen_file:

; 94   :         mode_fopen = "wb";
; 95   : 
; 96   :     if ((filename!=NULL) && (mode_fopen != NULL))

  00035	4d 85 c9	 test	 r9, r9
  00038	74 0f		 je	 SHORT $LN9@fopen_file
  0003a	48 85 d2	 test	 rdx, rdx
  0003d	74 0a		 je	 SHORT $LN9@fopen_file

; 97   :         file = fopen(filename, mode_fopen);

  0003f	49 8b c9	 mov	 rcx, r9
  00042	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fopen
$LN9@fopen_file:

; 98   :     return file;
; 99   : }

  00049	48 8b c1	 mov	 rax, rcx
  0004c	c3		 ret	 0
fopen_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fopen64_file_func
_TEXT	SEGMENT
opaque$ = 8
filename$ = 16
mode$ = 24
fopen64_file_func PROC					; COMDAT

; 102  :     FILE* file = NULL;
; 103  :     const char* mode_fopen = NULL;
; 104  :     (void)opaque;
; 105  :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00000	41 8b c0	 mov	 eax, r8d
  00003	33 c9		 xor	 ecx, ecx
  00005	24 03		 and	 al, 3
  00007	4c 8b ca	 mov	 r9, rdx
  0000a	3c 01		 cmp	 al, 1
  0000c	75 09		 jne	 SHORT $LN2@fopen64_fi

; 106  :         mode_fopen = "rb";

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb@
  00015	eb 1e		 jmp	 SHORT $LN6@fopen64_fi
$LN2@fopen64_fi:

; 107  :     else
; 108  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00017	41 f6 c0 04	 test	 r8b, 4
  0001b	74 09		 je	 SHORT $LN4@fopen64_fi

; 109  :         mode_fopen = "r+b";

  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HMFOOINA@r?$CLb@
  00024	eb 0f		 jmp	 SHORT $LN6@fopen64_fi
$LN4@fopen64_fi:

; 110  :     else
; 111  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00026	41 f6 c0 08	 test	 r8b, 8
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02GMLFBBN@wb@
  00031	48 0f 44 d1	 cmove	 rdx, rcx
$LN6@fopen64_fi:

; 112  :         mode_fopen = "wb";
; 113  : 
; 114  :     if ((filename!=NULL) && (mode_fopen != NULL))

  00035	4d 85 c9	 test	 r9, r9
  00038	74 0f		 je	 SHORT $LN9@fopen64_fi
  0003a	48 85 d2	 test	 rdx, rdx
  0003d	74 0a		 je	 SHORT $LN9@fopen64_fi

; 115  :         file = FOPEN_FUNC((const char*)filename, mode_fopen);

  0003f	49 8b c9	 mov	 rcx, r9
  00042	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fopen
$LN9@fopen64_fi:

; 116  :     return file;
; 117  : }

  00049	48 8b c1	 mov	 rax, rcx
  0004c	c3		 ret	 0
fopen64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fread_file_func
_TEXT	SEGMENT
opaque$ = 8
stream$ = 16
buf$ = 24
size$ = 32
fread_file_func PROC					; COMDAT

; 120  : static uLong ZCALLBACK fread_file_func(voidpf opaque, voidpf stream, void* buf, uLong size) {

  00000	49 8b c8	 mov	 rcx, r8

; 121  :     uLong ret;
; 122  :     (void)opaque;
; 123  :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00003	45 8b c1	 mov	 r8d, r9d
  00006	4c 8b ca	 mov	 r9, rdx
  00009	ba 01 00 00 00	 mov	 edx, 1
  0000e	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fread
fread_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fwrite_file_func
_TEXT	SEGMENT
opaque$ = 8
stream$ = 16
buf$ = 24
size$ = 32
fwrite_file_func PROC					; COMDAT

; 127  : static uLong ZCALLBACK fwrite_file_func(voidpf opaque, voidpf stream, const void* buf, uLong size) {

  00000	49 8b c8	 mov	 rcx, r8

; 128  :     uLong ret;
; 129  :     (void)opaque;
; 130  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00003	45 8b c1	 mov	 r8d, r9d
  00006	4c 8b ca	 mov	 r9, rdx
  00009	ba 01 00 00 00	 mov	 edx, 1
  0000e	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fwrite
fwrite_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT ftell_file_func
_TEXT	SEGMENT
opaque$ = 8
stream$ = 16
ftell_file_func PROC					; COMDAT

; 135  :     long ret;
; 136  :     (void)opaque;
; 137  :     ret = ftell((FILE *)stream);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_ftell
ftell_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT ftell64_file_func
_TEXT	SEGMENT
opaque$ = 8
stream$ = 16
ftell64_file_func PROC					; COMDAT

; 143  :     ZPOS64_T ret;
; 144  :     (void)opaque;
; 145  :     ret = (ZPOS64_T)FTELLO_FUNC((FILE *)stream);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__ftelli64
ftell64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fseek_file_func
_TEXT	SEGMENT
opaque$ = 48
stream$ = 56
offset$ = 64
origin$ = 72
fseek_file_func PROC					; COMDAT

; 149  : static long ZCALLBACK fseek_file_func(voidpf opaque, voidpf stream, uLong offset, int origin) {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 150  :     int fseek_origin=0;
; 151  :     long ret;
; 152  :     (void)opaque;
; 153  :     switch (origin)

  00006	33 db		 xor	 ebx, ebx
  00008	45 8b d0	 mov	 r10d, r8d
  0000b	4c 8b da	 mov	 r11, rdx
  0000e	45 85 c9	 test	 r9d, r9d
  00011	74 25		 je	 SHORT $LN6@fseek_file
  00013	41 83 e9 01	 sub	 r9d, 1
  00017	74 17		 je	 SHORT $LN4@fseek_file
  00019	41 83 f9 01	 cmp	 r9d, 1
  0001d	74 09		 je	 SHORT $LN5@fseek_file

; 163  :         break;
; 164  :     default: return -1;

  0001f	8d 43 ff	 lea	 eax, QWORD PTR [rbx-1]

; 170  : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	c3		 ret	 0
$LN5@fseek_file:

; 158  :     case ZLIB_FILEFUNC_SEEK_END :
; 159  :         fseek_origin = SEEK_END;

  00028	41 b8 02 00 00
	00		 mov	 r8d, 2

; 160  :         break;

  0002e	eb 0b		 jmp	 SHORT $LN2@fseek_file
$LN4@fseek_file:

; 154  :     {
; 155  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 156  :         fseek_origin = SEEK_CUR;

  00030	41 b8 01 00 00
	00		 mov	 r8d, 1

; 157  :         break;

  00036	eb 03		 jmp	 SHORT $LN2@fseek_file
$LN6@fseek_file:

; 161  :     case ZLIB_FILEFUNC_SEEK_SET :
; 162  :         fseek_origin = SEEK_SET;

  00038	44 8b c3	 mov	 r8d, ebx
$LN2@fseek_file:

; 165  :     }
; 166  :     ret = 0;
; 167  :     if (fseek((FILE *)stream, (long)offset, fseek_origin) != 0)

  0003b	41 8b d2	 mov	 edx, r10d
  0003e	49 8b cb	 mov	 rcx, r11
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  00047	85 c0		 test	 eax, eax
  00049	b9 ff ff ff ff	 mov	 ecx, -1
  0004e	0f 45 d9	 cmovne	 ebx, ecx

; 168  :         ret = -1;
; 169  :     return ret;

  00051	8b c3		 mov	 eax, ebx

; 170  : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0
fseek_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fseek64_file_func
_TEXT	SEGMENT
opaque$ = 48
stream$ = 56
offset$ = 64
origin$ = 72
fseek64_file_func PROC					; COMDAT

; 172  : static long ZCALLBACK fseek64_file_func(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin) {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 173  :     int fseek_origin=0;
; 174  :     long ret;
; 175  :     (void)opaque;
; 176  :     switch (origin)

  00006	33 db		 xor	 ebx, ebx
  00008	4d 8b d0	 mov	 r10, r8
  0000b	4c 8b da	 mov	 r11, rdx
  0000e	45 85 c9	 test	 r9d, r9d
  00011	74 25		 je	 SHORT $LN6@fseek64_fi
  00013	41 83 e9 01	 sub	 r9d, 1
  00017	74 17		 je	 SHORT $LN4@fseek64_fi
  00019	41 83 f9 01	 cmp	 r9d, 1
  0001d	74 09		 je	 SHORT $LN5@fseek64_fi

; 186  :         break;
; 187  :     default: return -1;

  0001f	8d 43 ff	 lea	 eax, QWORD PTR [rbx-1]

; 195  : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5b		 pop	 rbx
  00027	c3		 ret	 0
$LN5@fseek64_fi:

; 181  :     case ZLIB_FILEFUNC_SEEK_END :
; 182  :         fseek_origin = SEEK_END;

  00028	41 b8 02 00 00
	00		 mov	 r8d, 2

; 183  :         break;

  0002e	eb 0b		 jmp	 SHORT $LN2@fseek64_fi
$LN4@fseek64_fi:

; 177  :     {
; 178  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 179  :         fseek_origin = SEEK_CUR;

  00030	41 b8 01 00 00
	00		 mov	 r8d, 1

; 180  :         break;

  00036	eb 03		 jmp	 SHORT $LN2@fseek64_fi
$LN6@fseek64_fi:

; 184  :     case ZLIB_FILEFUNC_SEEK_SET :
; 185  :         fseek_origin = SEEK_SET;

  00038	44 8b c3	 mov	 r8d, ebx
$LN2@fseek64_fi:

; 188  :     }
; 189  :     ret = 0;
; 190  : 
; 191  :     if(FSEEKO_FUNC((FILE *)stream, (z_off64_t)offset, fseek_origin) != 0)

  0003b	49 8b d2	 mov	 rdx, r10
  0003e	49 8b cb	 mov	 rcx, r11
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  00047	85 c0		 test	 eax, eax
  00049	b9 ff ff ff ff	 mov	 ecx, -1
  0004e	0f 45 d9	 cmovne	 ebx, ecx

; 192  :                         ret = -1;
; 193  : 
; 194  :     return ret;

  00051	8b c3		 mov	 eax, ebx

; 195  : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0
fseek64_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fclose_file_func
_TEXT	SEGMENT
opaque$ = 8
stream$ = 16
fclose_file_func PROC					; COMDAT

; 199  :     int ret;
; 200  :     (void)opaque;
; 201  :     ret = fclose((FILE *)stream);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fclose
fclose_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT ferror_file_func
_TEXT	SEGMENT
opaque$ = 8
stream$ = 16
ferror_file_func PROC					; COMDAT

; 206  :     int ret;
; 207  :     (void)opaque;
; 208  :     ret = ferror((FILE *)stream);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_ferror
ferror_file_func ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Users\chris\Documents\GitHub\FastCopy-M\external\zlib\contrib\minizip\ioapi.c
;	COMDAT fill_fopen64_filefunc
_TEXT	SEGMENT
pzlib_filefunc_def$ = 8
fill_fopen64_filefunc PROC				; COMDAT

; 224  :     pzlib_filefunc_def->zopen64_file = fopen64_file_func;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fopen64_file_func

; 225  :     pzlib_filefunc_def->zread_file = fread_file_func;
; 226  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;
; 227  :     pzlib_filefunc_def->ztell64_file = ftell64_file_func;
; 228  :     pzlib_filefunc_def->zseek64_file = fseek64_file_func;
; 229  :     pzlib_filefunc_def->zclose_file = fclose_file_func;
; 230  :     pzlib_filefunc_def->zerror_file = ferror_file_func;
; 231  :     pzlib_filefunc_def->opaque = NULL;

  00007	48 c7 41 38 00
	00 00 00	 mov	 QWORD PTR [rcx+56], 0
  0000f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fread_file_func
  00019	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fwrite_file_func
  00024	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ftell64_file_func
  0002f	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fseek64_file_func
  0003a	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fclose_file_func
  00045	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ferror_file_func
  00050	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 232  : }

  00054	c3		 ret	 0
fill_fopen64_filefunc ENDP
_TEXT	ENDS
END
